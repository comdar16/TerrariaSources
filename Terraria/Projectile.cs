using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using ReLogic.Utilities;
using Terraria.Audio;
using Terraria.Chat;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Creative;
using Terraria.GameContent.Drawing;
using Terraria.GameContent.Events;
using Terraria.GameContent.Golf;
using Terraria.GameContent.Shaders;
using Terraria.GameContent.UI;
using Terraria.Graphics;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.Localization;
using Terraria.Physics;
using Terraria.Utilities;
using Terraria.WorldBuilding;

namespace Terraria
{
	public class Projectile : Entity
	{
		private class NPCDistanceByIndexComparator : IComparer<Tuple<int, float>>
		{
			public int Compare(Tuple<int, float> npcIndex1, Tuple<int, float> npcIndex2)
			{
				return npcIndex1.Item2.CompareTo(npcIndex2.Item2);
			}
		}

		public struct HallowBossPelletStormInfo
		{
			public float StartAngle;

			public float AnglePerBullet;

			public int BulletsInStorm;

			public float BulletsProgressInStormStartNormalized;

			public float BulletsProgressInStormBonusByIndexNormalized;

			public float StormTotalRange;

			public Vector2 BulletSize;

			public float GetBulletProgress(int bulletIndex)
			{
				return BulletsProgressInStormStartNormalized + BulletsProgressInStormBonusByIndexNormalized * (float)bulletIndex;
			}

			public bool IsValid(int bulletIndex)
			{
				float bulletProgress = GetBulletProgress(bulletIndex);
				if (bulletProgress >= 0f)
				{
					return bulletProgress <= 1f;
				}
				return false;
			}

			public Vector2 GetBulletPosition(int bulletIndex, Vector2 centerPoint)
			{
				return centerPoint + Vector2.UnitX.RotatedBy(StartAngle + AnglePerBullet * (float)bulletIndex) * StormTotalRange * GetBulletProgress(bulletIndex);
			}

			public Rectangle GetBulletHitbox(int bulletIndex, Vector2 centerPoint)
			{
				return Utils.CenteredRectangle(GetBulletPosition(bulletIndex, centerPoint), BulletSize);
			}
		}

		public static uint[][] perIDStaticNPCImmunity = new uint[972][];

		public const int SentryLifeTime = 7200;

		public const int ArrowLifeTime = 1200;

		public float ownerHitCheckDistance = 1000f;

		public bool arrow;

		public int numHits;

		public bool bobber;

		public bool netImportant;

		public bool noDropItem;

		public static int maxAI = 2;

		public bool counterweight;

		public float scale = 1f;

		public float rotation;

		public int type;

		public int alpha;

		public bool sentry;

		public short glowMask;

		public int owner = 255;

		public float[] ai = new float[maxAI];

		public float[] localAI = new float[maxAI];

		public float gfxOffY;

		public float stepSpeed = 1f;

		public int aiStyle;

		public int timeLeft;

		public int soundDelay;

		public int damage;

		public int originalDamage;

		public int spriteDirection = 1;

		public bool hostile;

		public float knockBack;

		public bool friendly;

		public int penetrate = 1;

		private int[] localNPCImmunity = new int[200];

		public bool usesLocalNPCImmunity;

		public bool usesIDStaticNPCImmunity;

		public int maxPenetrate = 1;

		public int identity;

		public float light;

		public bool netUpdate;

		public bool netUpdate2;

		public int netSpam;

		public Vector2[] oldPos = new Vector2[10];

		public float[] oldRot = new float[10];

		public int[] oldSpriteDirection = new int[10];

		public bool minion;

		public float minionSlots;

		public int minionPos;

		public int restrikeDelay;

		public bool tileCollide;

		public int extraUpdates;

		public int numUpdates;

		public bool ignoreWater;

		public bool hide;

		public bool ownerHitCheck;

		public int[] playerImmune = new int[255];

		public string miscText = "";

		public bool melee;

		public bool ranged;

		public bool magic;

		public bool coldDamage;

		public bool noEnchantments;

		public bool noEnchantmentVisuals;

		public bool trap;

		public bool npcProj;

		public bool originatedFromActivableTile;

		public int frameCounter;

		public int frame;

		public bool manualDirectionChange;

		public int projUUID = -1;

		public bool decidesManualFallThrough;

		public bool shouldFallThrough;

		public int localNPCHitCooldown = -2;

		public int idStaticNPCHitCooldown = -1;

		public int bannerIdToRespondTo;

		private static Conditions.IsSolid _cachedConditions_solid = new Conditions.IsSolid();

		private static Conditions.NotNull _cachedConditions_notNull = new Conditions.NotNull();

		private static Point[] _javelinsMax6 = new Point[6];

		private static Point[] _javelinsMax8 = new Point[8];

		private static Point[] _javelinsMax10 = new Point[10];

		public List<Vector2> WhipPointsForCollision = new List<Vector2>();

		private static Rectangle _lanceHitboxBounds = new Rectangle(0, 0, 300, 300);

		private static List<Tuple<int, float>> _medusaHeadTargetList = new List<Tuple<int, float>>();

		private static NPCDistanceByIndexComparator _medusaTargetComparer = new NPCDistanceByIndexComparator();

		private static List<int> _ai164_blacklistedTargets = new List<int>();

		private static List<int> _ai158_blacklistedTargets = new List<int>();

		private static List<int> _ai156_blacklistedTargets = new List<int>();

		private static float[] _CompanionCubeScreamCooldown = new float[255];

		public string Name => Lang.GetProjectileName(type).Value;

		public bool WipableTurret
		{
			get
			{
				if (owner == Main.myPlayer && sentry)
				{
					return !TurretShouldPersist();
				}
				return false;
			}
		}

		public float Opacity
		{
			get
			{
				return 1f - (float)alpha / 255f;
			}
			set
			{
				alpha = (int)MathHelper.Clamp((1f - value) * 255f, 0f, 255f);
			}
		}

		public int MaxUpdates
		{
			get
			{
				return extraUpdates + 1;
			}
			set
			{
				extraUpdates = value - 1;
			}
		}

		public NPC OwnerMinionAttackTargetNPC
		{
			get
			{
				if (Main.player[owner].MinionAttackTargetNPC < 0)
				{
					return null;
				}
				return Main.npc[Main.player[owner].MinionAttackTargetNPC];
			}
		}

		public static void InitializeStaticThings()
		{
			perIDStaticNPCImmunity = new uint[972][];
			for (int i = 0; i < perIDStaticNPCImmunity.Length; i++)
			{
				perIDStaticNPCImmunity[i] = new uint[200];
			}
			WorldGen.Hooks.OnWorldLoad += ResetImmunity;
		}

		public static void ResetImmunity()
		{
			for (int i = 0; i < 972; i++)
			{
				for (int j = 0; j < 200; j++)
				{
					perIDStaticNPCImmunity[i][j] = 0u;
				}
			}
		}

		public static bool IsNPCIndexImmuneToProjectileType(int projectileType, int npcIndex)
		{
			return perIDStaticNPCImmunity[projectileType][npcIndex] <= Main.GameUpdateCount;
		}

		public bool TurretShouldPersist()
		{
			switch (type)
			{
			case 663:
			case 665:
			case 667:
			case 677:
			case 678:
			case 679:
			case 688:
			case 689:
			case 690:
			case 691:
			case 692:
			case 693:
				return DD2Event.Ongoing;
			default:
				return false;
			}
		}

		public void SetDefaults(int Type)
		{
			ownerHitCheckDistance = 1000f;
			counterweight = false;
			sentry = false;
			arrow = false;
			bobber = false;
			numHits = 0;
			netImportant = false;
			manualDirectionChange = false;
			decidesManualFallThrough = false;
			shouldFallThrough = false;
			bannerIdToRespondTo = 0;
			localNPCHitCooldown = -2;
			idStaticNPCHitCooldown = -1;
			usesLocalNPCImmunity = false;
			usesIDStaticNPCImmunity = false;
			int num = 10;
			if (Type >= 0)
			{
				num = ProjectileID.Sets.TrailCacheLength[Type];
			}
			if (num != oldPos.Length)
			{
				Array.Resize(ref oldPos, num);
				Array.Resize(ref oldRot, num);
				Array.Resize(ref oldSpriteDirection, num);
			}
			for (int i = 0; i < oldPos.Length; i++)
			{
				oldPos[i].X = 0f;
				oldPos[i].Y = 0f;
				oldRot[i] = 0f;
				oldSpriteDirection[i] = 0;
			}
			for (int j = 0; j < maxAI; j++)
			{
				ai[j] = 0f;
				localAI[j] = 0f;
			}
			for (int k = 0; k < 255; k++)
			{
				playerImmune[k] = 0;
			}
			ResetLocalNPCHitImmunity();
			noDropItem = false;
			minion = false;
			minionSlots = 0f;
			soundDelay = 0;
			spriteDirection = 1;
			melee = false;
			ranged = false;
			magic = false;
			ownerHitCheck = false;
			hide = false;
			lavaWet = false;
			wetCount = 0;
			wet = false;
			ignoreWater = false;
			hostile = false;
			netUpdate = false;
			netUpdate2 = false;
			netSpam = 0;
			numUpdates = 0;
			extraUpdates = 0;
			identity = 0;
			restrikeDelay = 0;
			light = 0f;
			penetrate = 1;
			tileCollide = true;
			position = Vector2.Zero;
			velocity = Vector2.Zero;
			aiStyle = 0;
			alpha = 0;
			glowMask = -1;
			type = Type;
			active = true;
			rotation = 0f;
			scale = 1f;
			owner = 255;
			timeLeft = 3600;
			friendly = false;
			damage = 0;
			originalDamage = 0;
			knockBack = 0f;
			miscText = "";
			coldDamage = false;
			noEnchantments = false;
			noEnchantmentVisuals = false;
			trap = false;
			npcProj = false;
			originatedFromActivableTile = false;
			projUUID = -1;
			frame = 0;
			frameCounter = 0;
			if (type == 1)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				timeLeft = 1200;
			}
			else if (type == 2)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 1f;
				ranged = true;
				timeLeft = 1200;
			}
			else if (type == 3)
			{
				width = 22;
				height = 22;
				aiStyle = 2;
				friendly = true;
				penetrate = 4;
				ranged = true;
			}
			else if (type == 4)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 0.35f;
				penetrate = 5;
				ranged = true;
				timeLeft = 1200;
			}
			else if (type == 5)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 0.4f;
				penetrate = -1;
				alpha = 100;
				ignoreWater = true;
				ranged = true;
				extraUpdates = 1;
				timeLeft = 120;
			}
			else if (type == 6)
			{
				width = 22;
				height = 22;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				light = 0.4f;
			}
			else if (type == 7 || type == 8)
			{
				width = 28;
				height = 28;
				aiStyle = 4;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				alpha = 255;
				ignoreWater = true;
				magic = true;
			}
			else if (type == 9)
			{
				width = 24;
				height = 24;
				aiStyle = 5;
				friendly = true;
				penetrate = 2;
				alpha = 50;
				scale = 0.8f;
				tileCollide = false;
				melee = true;
			}
			else if (type == 10)
			{
				width = 64;
				height = 64;
				aiStyle = 6;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
			}
			else if (type == 11)
			{
				width = 48;
				height = 48;
				aiStyle = 6;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
			}
			else if (type == 12)
			{
				width = 18;
				height = 18;
				aiStyle = 5;
				friendly = true;
				penetrate = -1;
				alpha = 50;
				light = 1f;
			}
			else if (type == 13)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 14)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 15)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				friendly = true;
				light = 0.8f;
				alpha = 100;
				magic = true;
			}
			else if (type == 16)
			{
				width = 32;
				height = 32;
				aiStyle = 9;
				friendly = true;
				light = 0.8f;
				alpha = 100;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 17)
			{
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				ignoreWater = true;
			}
			else if (type == 18)
			{
				netImportant = true;
				width = 32;
				height = 32;
				aiStyle = 11;
				friendly = true;
				light = 0.9f;
				alpha = 150;
				tileCollide = false;
				penetrate = -1;
				timeLeft *= 5;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 19)
			{
				width = 22;
				height = 22;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				light = 1f;
				melee = true;
			}
			else if (type == 20)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.4f;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 21)
			{
				width = 16;
				height = 16;
				aiStyle = 2;
				scale = 1.2f;
				friendly = true;
				ranged = true;
			}
			else if (type == 22)
			{
				width = 18;
				height = 18;
				aiStyle = 12;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				ignoreWater = true;
				magic = true;
			}
			else if (type == 23)
			{
				width = 4;
				height = 4;
				aiStyle = 13;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				ranged = true;
			}
			else if (type == 24)
			{
				width = 14;
				height = 14;
				aiStyle = 14;
				friendly = true;
				penetrate = 6;
				ranged = true;
			}
			else if (type == 25)
			{
				netImportant = true;
				width = 22;
				height = 22;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 0.9f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 26)
			{
				netImportant = true;
				width = 22;
				height = 22;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 0.8f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 27)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				friendly = true;
				alpha = 255;
				timeLeft /= 2;
				penetrate = 10;
				magic = true;
			}
			else if (type == 28)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 29)
			{
				width = 10;
				height = 10;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 30)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 31)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 32)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 33)
			{
				width = 38;
				height = 38;
				aiStyle = 3;
				friendly = true;
				scale = 0.9f;
				penetrate = -1;
				melee = true;
			}
			else if (type == 34)
			{
				width = 32;
				height = 32;
				aiStyle = 9;
				friendly = true;
				light = 0.8f;
				penetrate = 2;
				magic = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 12;
			}
			else if (type == 35)
			{
				netImportant = true;
				width = 22;
				height = 22;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 0.8f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 36)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 2;
				light = 0.6f;
				alpha = 255;
				scale = 1.4f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 15;
			}
			else if (type == 37)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type == 38)
			{
				width = 14;
				height = 14;
				aiStyle = 0;
				hostile = true;
				penetrate = -1;
				aiStyle = 1;
				tileCollide = true;
			}
			else if (type == 39)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 40)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 41)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				penetrate = -1;
				ranged = true;
				light = 0.3f;
			}
			else if (type == 42)
			{
				knockBack = 8f;
				width = 10;
				height = 10;
				aiStyle = 10;
				ranged = true;
				friendly = true;
				extraUpdates = 1;
			}
			else if (type == 43)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 44)
			{
				width = 48;
				height = 48;
				alpha = 100;
				light = 0.2f;
				aiStyle = 18;
				hostile = true;
				penetrate = -1;
				tileCollide = true;
				scale = 0.9f;
			}
			else if (type == 45)
			{
				width = 48;
				height = 48;
				alpha = 100;
				light = 0.2f;
				aiStyle = 18;
				friendly = true;
				penetrate = 5;
				tileCollide = true;
				scale = 0.9f;
				magic = true;
			}
			else if (type == 46)
			{
				width = 20;
				height = 20;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 47)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 48)
			{
				width = 12;
				height = 12;
				aiStyle = 2;
				friendly = true;
				penetrate = 2;
				ranged = true;
			}
			else if (type == 49)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.2f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 50)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 14;
				penetrate = -1;
				alpha = 75;
				light = 1f;
				timeLeft *= 5;
			}
			else if (type == 51)
			{
				width = 8;
				height = 8;
				aiStyle = 1;
				ranged = true;
				friendly = true;
			}
			else if (type == 52)
			{
				width = 22;
				height = 22;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
			}
			else if (type == 53)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 14;
				penetrate = -1;
				alpha = 75;
				light = 1f;
				timeLeft *= 5;
				tileCollide = false;
			}
			else if (type == 54)
			{
				width = 12;
				height = 12;
				aiStyle = 2;
				friendly = true;
				penetrate = 2;
				ranged = true;
			}
			else if (type == 55)
			{
				width = 10;
				height = 10;
				aiStyle = 0;
				hostile = true;
				penetrate = -1;
				aiStyle = 1;
				tileCollide = true;
			}
			else if (type == 56)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 57)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 58)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.08f;
			}
			else if (type == 59)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.9f;
			}
			else if (type == 60)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.9f;
			}
			else if (type == 61)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.16f;
			}
			else if (type == 62)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.9f;
			}
			else if (type == 63)
			{
				netImportant = true;
				width = 22;
				height = 22;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 64)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.25f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 65)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				ranged = true;
				penetrate = -1;
				extraUpdates = 1;
			}
			else if (type == 66)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.27f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 67)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 68)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				ranged = true;
				penetrate = -1;
				extraUpdates = 1;
			}
			else if (type == 69)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 70)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 621)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 71)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 72)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 11;
				friendly = true;
				light = 0.9f;
				tileCollide = false;
				penetrate = -1;
				timeLeft *= 5;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 73 || type == 74)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
				light = 0.4f;
			}
			else if (type == 75)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 76 || type == 77 || type == 78)
			{
				if (type == 76)
				{
					width = 10;
					height = 22;
				}
				else if (type == 77)
				{
					width = 18;
					height = 24;
				}
				else
				{
					width = 22;
					height = 24;
				}
				aiStyle = 21;
				friendly = true;
				alpha = 100;
				light = 0.3f;
				penetrate = -1;
				timeLeft = 180;
				magic = true;
			}
			else if (type == 79)
			{
				width = 32;
				height = 32;
				aiStyle = 9;
				friendly = true;
				light = 0.8f;
				magic = true;
				penetrate = 3;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 12;
				ignoreWater = true;
			}
			else if (type == 80)
			{
				width = 16;
				height = 16;
				aiStyle = 22;
				friendly = true;
				magic = true;
				tileCollide = false;
				light = 0.5f;
				coldDamage = true;
			}
			else if (type == 81)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
			}
			else if (type == 82)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
			}
			else if (type == 83)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.7f;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 84)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 85)
			{
				width = 6;
				height = 6;
				aiStyle = 23;
				friendly = true;
				alpha = 255;
				penetrate = 3;
				extraUpdates = 2;
				ranged = true;
			}
			else if (type == 86)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 11;
				friendly = true;
				light = 0.9f;
				tileCollide = false;
				penetrate = -1;
				timeLeft *= 5;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 87)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 11;
				friendly = true;
				light = 0.9f;
				tileCollide = false;
				penetrate = -1;
				timeLeft *= 5;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 88)
			{
				width = 6;
				height = 6;
				aiStyle = 1;
				friendly = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 4;
				scale = 1.4f;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 89)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 90)
			{
				width = 6;
				height = 6;
				aiStyle = 24;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 50;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				tileCollide = false;
			}
			else if (type == 91)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				timeLeft = 1200;
			}
			else if (type == 92)
			{
				width = 24;
				height = 24;
				aiStyle = 5;
				friendly = true;
				penetrate = 1;
				alpha = 50;
				scale = 0.8f;
				tileCollide = false;
				ranged = true;
			}
			else if (type == 93)
			{
				light = 0.15f;
				width = 12;
				height = 12;
				aiStyle = 2;
				friendly = true;
				penetrate = 2;
				magic = true;
			}
			else if (type == 94)
			{
				ignoreWater = true;
				width = 8;
				height = 8;
				aiStyle = 24;
				friendly = true;
				light = 0.5f;
				alpha = 50;
				scale = 1.2f;
				timeLeft = 600;
				magic = true;
				tileCollide = true;
				penetrate = 1;
			}
			else if (type == 95)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				friendly = true;
				light = 0.8f;
				alpha = 100;
				magic = true;
				penetrate = 2;
			}
			else if (type == 96)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				hostile = true;
				light = 0.8f;
				alpha = 100;
				magic = true;
				penetrate = -1;
				scale = 0.9f;
				scale = 1.3f;
			}
			else if (type == 97)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 98)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				hostile = true;
				penetrate = -1;
				trap = true;
			}
			else if (type == 99 || type == 727)
			{
				width = 31;
				height = 31;
				aiStyle = 25;
				friendly = true;
				hostile = true;
				penetrate = -1;
				trap = true;
			}
			else if (type == 100)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.8f;
				timeLeft = 2700;
				magic = true;
			}
			else if (type == 101)
			{
				width = 6;
				height = 6;
				aiStyle = 23;
				hostile = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 3;
				magic = true;
			}
			else if (type == 102)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				hostile = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 103)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 1f;
				ranged = true;
				timeLeft = 1200;
			}
			else if (type == 104)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 2;
			}
			else if (type == 105)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.3f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 106)
			{
				width = 32;
				height = 32;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				light = 0.4f;
			}
			else if (type == 107)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.1f;
			}
			else if (type == 108)
			{
				width = 260;
				height = 260;
				aiStyle = 16;
				friendly = true;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				alpha = 255;
				timeLeft = 2;
				trap = true;
			}
			else if (type == 109)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				hostile = true;
				scale = 0.9f;
				penetrate = -1;
				coldDamage = true;
				ranged = true;
			}
			else if (type == 110)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				light = 0.5f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 111)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 112)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 113)
			{
				width = 22;
				height = 22;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				light = 0.4f;
				coldDamage = true;
			}
			else if (type == 114)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				magic = true;
				penetrate = 3;
				light = 0.5f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 115)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				hostile = true;
				magic = true;
				penetrate = -1;
				light = 0.5f;
				alpha = 255;
			}
			else if (type == 116)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				melee = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 117)
			{
				arrow = true;
				extraUpdates = 2;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				timeLeft = 1200;
			}
			else if (type == 118)
			{
				width = 10;
				height = 10;
				aiStyle = 28;
				alpha = 255;
				melee = true;
				penetrate = 1;
				friendly = true;
				coldDamage = true;
			}
			else if (type == 119)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				alpha = 255;
				melee = true;
				penetrate = 2;
				friendly = true;
				coldDamage = true;
			}
			else if (type == 120)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				coldDamage = true;
				extraUpdates = 1;
				timeLeft = 1200;
			}
			else if (type == 121)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 122)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 123)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 124)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 2;
				friendly = true;
			}
			else if (type == 125)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 2;
				friendly = true;
			}
			else if (type == 126)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 2;
				friendly = true;
			}
			else if (type == 127)
			{
				netImportant = true;
				width = 22;
				height = 22;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 128)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				coldDamage = true;
			}
			else if (type == 129)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				tileCollide = false;
			}
			else if (type == 130)
			{
				width = 22;
				height = 22;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.2f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 131)
			{
				width = 22;
				height = 22;
				aiStyle = 30;
				friendly = true;
				penetrate = 1;
				tileCollide = false;
				melee = true;
				light = 0.5f;
			}
			else if (type == 132)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				melee = true;
				penetrate = 3;
				light = 0.5f;
				alpha = 255;
				friendly = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 133)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 134)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 135)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 136)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 137)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 138)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 139)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 140)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 141)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 142)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 143)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 144)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 145)
			{
				width = 6;
				height = 6;
				aiStyle = 31;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 146)
			{
				width = 6;
				height = 6;
				aiStyle = 31;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 147)
			{
				width = 6;
				height = 6;
				aiStyle = 31;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 148)
			{
				width = 6;
				height = 6;
				aiStyle = 31;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 149)
			{
				width = 6;
				height = 6;
				aiStyle = 31;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 150 || type == 151 || type == 152)
			{
				width = 28;
				height = 28;
				aiStyle = 4;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				alpha = 255;
				ignoreWater = true;
				magic = true;
			}
			else if (type == 153)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 154)
			{
				netImportant = true;
				width = 22;
				height = 22;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 0.8f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 155)
			{
				netImportant = true;
				width = 44;
				height = 44;
				aiStyle = 32;
				friendly = true;
			}
			else if (type == 156)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				melee = true;
				penetrate = 2;
				light = 0.5f;
				alpha = 255;
				friendly = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 157)
			{
				width = 32;
				height = 32;
				aiStyle = 27;
				melee = true;
				light = 0.5f;
				alpha = 255;
				friendly = true;
				scale = 1.2f;
			}
			else if (type == 158)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 159)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 160)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 161)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				ranged = true;
				extraUpdates = 1;
			}
			else if (type == 162)
			{
				width = 16;
				height = 16;
				aiStyle = 2;
				friendly = true;
				penetrate = 4;
				alpha = 255;
			}
			else if (type == 163)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 33;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 36000;
			}
			else if (type == 164)
			{
				width = 128;
				height = 128;
				aiStyle = 16;
				friendly = true;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				alpha = 255;
				timeLeft = 2;
			}
			else if (type == 165)
			{
				netImportant = true;
				width = 12;
				height = 12;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 166)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				ranged = true;
				coldDamage = true;
			}
			else if (type == 167 || type == 168 || type == 169 || type == 170)
			{
				width = 14;
				height = 14;
				aiStyle = 34;
				friendly = true;
				ranged = true;
				timeLeft = 45;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 3;
			}
			else if (type == 171 || type == 505 || type == 506)
			{
				width = 14;
				height = 14;
				aiStyle = 35;
				penetrate = -1;
				tileCollide = false;
				timeLeft = 400;
			}
			else if (type == 172)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 1f;
				ranged = true;
				coldDamage = true;
				timeLeft = 1200;
			}
			else if (type == 173)
			{
				width = 16;
				height = 16;
				aiStyle = 27;
				melee = true;
				penetrate = 1;
				light = 0.2f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 174)
			{
				alpha = 255;
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				coldDamage = true;
			}
			else if (type == 175)
			{
				width = 34;
				height = 34;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 176)
			{
				alpha = 255;
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 177)
			{
				width = 10;
				height = 10;
				aiStyle = 28;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				coldDamage = true;
			}
			else if (type == 178)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				timeLeft = 2;
			}
			else if (type == 179)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 180)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				light = 0.5f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				extraUpdates = 1;
			}
			else if (type == 181)
			{
				width = 8;
				height = 8;
				aiStyle = 36;
				friendly = true;
				penetrate = 3;
				alpha = 255;
				timeLeft = 600;
				extraUpdates = 3;
			}
			else if (type == 182)
			{
				light = 0.15f;
				width = 30;
				height = 30;
				aiStyle = 3;
				friendly = true;
				penetrate = 10;
				melee = true;
				extraUpdates = 1;
			}
			else if (type == 183)
			{
				width = 14;
				height = 22;
				aiStyle = 14;
				penetrate = 1;
				timeLeft = 180;
				ranged = true;
				friendly = true;
			}
			else if (type == 184)
			{
				width = 6;
				height = 6;
				aiStyle = 1;
				friendly = true;
				hostile = true;
				penetrate = -1;
				trap = true;
			}
			else if (type == 185)
			{
				width = 14;
				height = 14;
				aiStyle = 14;
				friendly = true;
				hostile = true;
				penetrate = -1;
				timeLeft = 900;
				trap = true;
			}
			else if (type == 186)
			{
				width = 10;
				height = 14;
				aiStyle = 37;
				friendly = true;
				tileCollide = false;
				ignoreWater = true;
				hostile = true;
				penetrate = -1;
				timeLeft = 300;
				trap = true;
			}
			else if (type == 187)
			{
				width = 6;
				height = 6;
				aiStyle = 38;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 60;
				trap = true;
			}
			else if (type == 188)
			{
				width = 6;
				height = 6;
				aiStyle = 23;
				friendly = true;
				hostile = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				trap = true;
			}
			else if (type == 189)
			{
				width = 8;
				height = 8;
				aiStyle = 36;
				friendly = true;
				penetrate = 3;
				alpha = 255;
				timeLeft = 600;
				magic = true;
				extraUpdates = 3;
			}
			else if (type == 190)
			{
				width = 22;
				height = 22;
				aiStyle = 39;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				ranged = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 14;
			}
			else if (type >= 191 && type <= 194)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 26;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				if (type == 192)
				{
					scale = 1.025f;
				}
				if (type == 193)
				{
					scale = 1.05f;
				}
				if (type == 194)
				{
					scale = 1.075f;
				}
			}
			else if (type == 195)
			{
				tileCollide = false;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
			}
			else if (type == 196)
			{
				width = 16;
				height = 16;
				aiStyle = 14;
				penetrate = -1;
				scale = 0.8f;
			}
			else if (type == 197)
			{
				netImportant = true;
				width = 42;
				height = 42;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 198)
			{
				netImportant = true;
				width = 26;
				height = 26;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 199)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
				ignoreWater = true;
			}
			else if (type == 200)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 201)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 202)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 203)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 204)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 205)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 206)
			{
				width = 14;
				height = 14;
				aiStyle = 40;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 207)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 208)
			{
				netImportant = true;
				width = 18;
				height = 36;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 209)
			{
				width = 12;
				height = 32;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
				light = 0.5f;
			}
			else if (type == 210)
			{
				netImportant = true;
				width = 14;
				height = 30;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 211)
			{
				netImportant = true;
				width = 24;
				height = 24;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
				light = 1f;
				ignoreWater = true;
			}
			else if (type == 212)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.12f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 213)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.92f;
			}
			else if (type == 214)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 215)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.27f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 216)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.93f;
			}
			else if (type == 217)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.12f;
			}
			else if (type == 218)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.28f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 219)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 0.95f;
			}
			else if (type == 220)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.2f;
			}
			else if (type == 221)
			{
				width = 20;
				height = 20;
				aiStyle = 41;
				friendly = true;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 120;
				penetrate = -1;
				scale = 1f + (float)Main.rand.Next(30) * 0.01f;
				extraUpdates = 2;
			}
			else if (type == 222)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.3f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 223)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1f;
			}
			else if (type == 224)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.1f;
			}
			else if (type == 225)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				extraUpdates = 1;
				timeLeft = 1200;
			}
			else if (type == 226)
			{
				netImportant = true;
				width = 22;
				height = 42;
				aiStyle = 42;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				timeLeft *= 5;
				light = 0.4f;
				ignoreWater = true;
			}
			else if (type == 227)
			{
				netImportant = true;
				tileCollide = false;
				light = 0.1f;
				width = 14;
				height = 14;
				aiStyle = 43;
				friendly = true;
				penetrate = 1;
				timeLeft = 180;
			}
			else if (type == 228)
			{
				tileCollide = false;
				width = 30;
				height = 30;
				aiStyle = 44;
				friendly = true;
				melee = true;
				scale = 1.1f;
				penetrate = -1;
				noEnchantmentVisuals = true;
			}
			else if (type == 229)
			{
				width = 30;
				height = 30;
				aiStyle = 44;
				friendly = true;
				melee = true;
				penetrate = -1;
				light = 0.2f;
				noEnchantmentVisuals = true;
			}
			else if (type >= 230 && type <= 235)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 236)
			{
				netImportant = true;
				width = 34;
				height = 34;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 237)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 45;
				penetrate = -1;
			}
			else if (type == 238)
			{
				tileCollide = false;
				ignoreWater = true;
				width = 54;
				height = 28;
				aiStyle = 45;
				penetrate = -1;
			}
			else if (type == 239)
			{
				ignoreWater = true;
				width = 4;
				height = 40;
				aiStyle = 45;
				friendly = true;
				penetrate = -1;
				timeLeft = 300;
				scale = 1.1f;
				magic = true;
				extraUpdates = 1;
			}
			else if (type == 240)
			{
				width = 16;
				height = 16;
				aiStyle = 2;
				hostile = true;
				penetrate = -1;
				alpha = 255;
			}
			else if (type == 241)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 242)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 3;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 7;
				scale = 1.18f;
				timeLeft = 600;
				ranged = true;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 15;
			}
			else if (type == 243)
			{
				width = 28;
				height = 28;
				aiStyle = 45;
				penetrate = -1;
			}
			else if (type == 244)
			{
				tileCollide = false;
				ignoreWater = true;
				width = 54;
				height = 28;
				aiStyle = 45;
				penetrate = -1;
			}
			else if (type == 245)
			{
				ignoreWater = true;
				width = 4;
				height = 40;
				aiStyle = 45;
				friendly = true;
				penetrate = 2;
				timeLeft = 300;
				scale = 1.1f;
				magic = true;
				extraUpdates = 1;
			}
			else if (type == 246)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				alpha = 255;
				extraUpdates = 1;
			}
			else if (type == 247)
			{
				netImportant = true;
				width = 34;
				height = 34;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 248)
			{
				width = 18;
				height = 18;
				aiStyle = 1;
				friendly = true;
				melee = true;
			}
			else if (type == 249)
			{
				width = 12;
				height = 12;
				aiStyle = 2;
				friendly = true;
				ranged = true;
			}
			else if (type == 250)
			{
				width = 12;
				height = 12;
				aiStyle = 46;
				penetrate = -1;
				magic = true;
				alpha = 255;
				ignoreWater = true;
				scale = 1.25f;
			}
			else if (type == 251)
			{
				width = 14;
				height = 14;
				aiStyle = 46;
				friendly = true;
				penetrate = -1;
				magic = true;
				alpha = 255;
				light = 0.3f;
				tileCollide = false;
				ignoreWater = true;
				scale = 1.25f;
			}
			else if (type == 252)
			{
				width = 18;
				height = 18;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.1f;
			}
			else if (type == 253)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				friendly = true;
				light = 0.8f;
				alpha = 100;
				magic = true;
				coldDamage = true;
			}
			else if (type == 254)
			{
				width = 38;
				height = 38;
				aiStyle = 47;
				magic = true;
				timeLeft = 660;
				light = 0.5f;
			}
			else if (type == 255)
			{
				width = 8;
				height = 8;
				aiStyle = 48;
				friendly = true;
				magic = true;
				extraUpdates = 100;
				timeLeft = 100;
			}
			else if (type == 256)
			{
				netImportant = true;
				tileCollide = false;
				width = 6;
				height = 6;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				scale = 1f;
				timeLeft *= 10;
			}
			else if (type == 257)
			{
				ignoreWater = true;
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				light = 0.75f;
				alpha = 255;
				scale = 1.2f;
				timeLeft = 600;
				magic = true;
				coldDamage = true;
				extraUpdates = 1;
			}
			else if (type == 258)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				hostile = true;
				penetrate = -1;
				alpha = 100;
				timeLeft = 300;
			}
			else if (type == 259)
			{
				ignoreWater = true;
				tileCollide = false;
				width = 8;
				height = 8;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				light = 0.3f;
				scale = 1.1f;
				magic = true;
				extraUpdates = 1;
			}
			else if (type == 260)
			{
				width = 8;
				height = 8;
				aiStyle = 48;
				friendly = true;
				magic = true;
				extraUpdates = 100;
				timeLeft = 200;
				penetrate = 1;
			}
			else if (type == 261)
			{
				width = 32;
				height = 34;
				aiStyle = 14;
				friendly = true;
				penetrate = 6;
				magic = true;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 262)
			{
				width = 30;
				height = 30;
				aiStyle = 13;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				melee = true;
				extraUpdates = 1;
			}
			else if (type == 263)
			{
				width = 34;
				height = 34;
				alpha = 100;
				light = 0.5f;
				aiStyle = 18;
				friendly = true;
				penetrate = 5;
				tileCollide = true;
				scale = 1f;
				melee = true;
				timeLeft = 180;
				coldDamage = true;
			}
			else if (type == 264)
			{
				ignoreWater = true;
				width = 4;
				height = 40;
				aiStyle = 45;
				hostile = true;
				penetrate = -1;
				timeLeft = 120;
				scale = 1.1f;
				extraUpdates = 1;
			}
			else if (type == 265)
			{
				width = 12;
				height = 12;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				magic = true;
				penetrate = 3;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
				timeLeft = 37;
			}
			else if (type == 266)
			{
				netImportant = true;
				alpha = 75;
				width = 24;
				height = 16;
				aiStyle = 26;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 12;
			}
			else if (type == 267)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				ranged = true;
			}
			else if (type == 268)
			{
				netImportant = true;
				width = 18;
				height = 32;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 269)
			{
				netImportant = true;
				width = 20;
				height = 26;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 270)
			{
				width = 26;
				height = 26;
				aiStyle = 1;
				alpha = 255;
				hostile = true;
				penetrate = 3;
			}
			else if (type == 271)
			{
				width = 20;
				height = 20;
				aiStyle = 13;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				melee = true;
				scale = 1.2f;
			}
			else if (type == 272)
			{
				width = 32;
				height = 32;
				aiStyle = 3;
				friendly = true;
				scale = 0.9f;
				penetrate = -1;
				melee = true;
			}
			else if (type == 273)
			{
				width = 26;
				height = 26;
				aiStyle = 13;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				melee = true;
			}
			else if (type == 274)
			{
				width = 42;
				height = 42;
				alpha = 100;
				light = 0.5f;
				aiStyle = 18;
				friendly = true;
				penetrate = 5;
				tileCollide = false;
				scale = 1.1f;
				melee = true;
				timeLeft = 180;
			}
			else if (type == 275)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				hostile = true;
			}
			else if (type == 276)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				hostile = true;
			}
			else if (type == 277)
			{
				alpha = 255;
				width = 38;
				height = 38;
				aiStyle = 14;
				hostile = true;
			}
			else if (type == 278)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				light = 1f;
				ranged = true;
				extraUpdates = 1;
				timeLeft = 1200;
			}
			else if (type == 279)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.25f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 280)
			{
				width = 32;
				height = 32;
				aiStyle = 12;
				friendly = true;
				alpha = 255;
				penetrate = 5;
				extraUpdates = 2;
				ignoreWater = true;
				magic = true;
			}
			else if (type == 281)
			{
				width = 28;
				height = 28;
				aiStyle = 49;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
			}
			else if (type == 282)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				extraUpdates = 1;
				timeLeft = 1200;
			}
			else if (type == 283)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.25f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 284)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.3f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 285)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.3f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 286)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.3f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 287)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				light = 0.5f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.3f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 288)
			{
				width = 32;
				height = 32;
				aiStyle = 12;
				hostile = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				ignoreWater = true;
				magic = true;
			}
			else if (type == 289)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				timeLeft = 2;
			}
			else if (type == 290)
			{
				width = 4;
				height = 4;
				aiStyle = 48;
				hostile = true;
				magic = true;
				extraUpdates = 100;
				timeLeft = 100;
				penetrate = -1;
			}
			else if (type == 291)
			{
				width = 12;
				height = 12;
				aiStyle = 50;
				hostile = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 292)
			{
				width = 130;
				height = 130;
				aiStyle = 50;
				hostile = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 293)
			{
				width = 12;
				height = 12;
				aiStyle = 51;
				hostile = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				penetrate = -1;
				extraUpdates = 1;
			}
			else if (type == 294)
			{
				width = 4;
				height = 4;
				aiStyle = 48;
				friendly = true;
				magic = true;
				extraUpdates = 100;
				timeLeft = 300;
				penetrate = -1;
			}
			else if (type == 295)
			{
				width = 12;
				height = 12;
				aiStyle = 50;
				friendly = true;
				alpha = 255;
				magic = true;
				tileCollide = true;
			}
			else if (type == 296)
			{
				width = 150;
				height = 150;
				aiStyle = 50;
				friendly = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 297)
			{
				width = 12;
				height = 12;
				aiStyle = 51;
				friendly = true;
				alpha = 255;
				magic = true;
				extraUpdates = 1;
				penetrate = 3;
			}
			else if (type == 298)
			{
				width = 6;
				height = 6;
				aiStyle = 52;
				alpha = 255;
				magic = true;
				tileCollide = false;
				extraUpdates = 3;
			}
			else if (type == 299)
			{
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				magic = true;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 300)
			{
				width = 38;
				height = 38;
				aiStyle = 2;
				hostile = true;
				penetrate = -1;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 301)
			{
				width = 38;
				height = 38;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				extraUpdates = 2;
			}
			else if (type == 302)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				light = 0.3f;
				alpha = 255;
				extraUpdates = 7;
				scale = 1.18f;
				timeLeft = 300;
				ranged = true;
				ignoreWater = true;
			}
			else if (type == 303)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				hostile = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 304)
			{
				alpha = 255;
				width = 30;
				height = 30;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
				melee = true;
				light = 0.2f;
				ignoreWater = true;
				extraUpdates = 0;
			}
			else if (type == 305)
			{
				width = 6;
				height = 6;
				aiStyle = 52;
				alpha = 255;
				tileCollide = false;
				extraUpdates = 10;
			}
			else if (type == 306)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
				melee = true;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 307)
			{
				width = 16;
				height = 16;
				aiStyle = 36;
				penetrate = 1;
				alpha = 255;
				timeLeft = 600;
				melee = true;
				extraUpdates = 3;
			}
			else if (type == 308)
			{
				width = 80;
				height = 74;
				aiStyle = 53;
				timeLeft = 7200;
				light = 0.25f;
				ignoreWater = true;
				coldDamage = true;
				sentry = true;
				netImportant = true;
			}
			else if (type == 309)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				alpha = 255;
				penetrate = 3;
				friendly = true;
				extraUpdates = 3;
				coldDamage = true;
			}
			else if (type == 310)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 33;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 36000;
			}
			else if (type == 311)
			{
				width = 10;
				height = 12;
				aiStyle = 1;
				friendly = true;
				penetrate = 3;
				alpha = 255;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 312)
			{
				alpha = 255;
				width = 32;
				height = 32;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				timeLeft = 300;
				glowMask = 257;
			}
			else if (type == 313)
			{
				netImportant = true;
				width = 30;
				height = 30;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 314)
			{
				netImportant = true;
				width = 24;
				height = 40;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 315)
			{
				netImportant = true;
				width = 14;
				height = 14;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 316)
			{
				alpha = 255;
				width = 16;
				height = 16;
				aiStyle = 36;
				friendly = true;
				penetrate = 1;
				timeLeft = 600;
				magic = true;
			}
			else if (type == 317)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 54;
				penetrate = 1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 318)
			{
				width = 12;
				height = 14;
				aiStyle = 2;
				friendly = true;
				ranged = true;
			}
			else if (type == 319)
			{
				netImportant = true;
				width = 36;
				height = 30;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 320)
			{
				width = 34;
				height = 34;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
			}
			else if (type == 321)
			{
				width = 30;
				height = 30;
				aiStyle = 55;
				friendly = true;
				melee = true;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 322)
			{
				netImportant = true;
				width = 14;
				height = 14;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 323)
			{
				penetrate = 10;
				extraUpdates = 3;
				width = 14;
				height = 14;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				ranged = true;
				scale = 0.8f;
			}
			else if (type == 324)
			{
				netImportant = true;
				width = 26;
				height = 38;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 325)
			{
				alpha = 255;
				penetrate = -1;
				width = 14;
				height = 14;
				aiStyle = 1;
				hostile = true;
				tileCollide = false;
				timeLeft = 420;
			}
			else if (type >= 326 && type <= 328)
			{
				if (type == 326)
				{
					width = 14;
					height = 16;
				}
				else if (type == 327)
				{
					width = 12;
					height = 14;
				}
				else
				{
					width = 6;
					height = 12;
				}
				aiStyle = 14;
				hostile = true;
				penetrate = -1;
				timeLeft = 360;
			}
			else if (type == 329)
			{
				width = 80;
				height = 80;
				light = 0.25f;
				aiStyle = 56;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft = 420;
			}
			else if (type == 330)
			{
				width = 22;
				height = 22;
				aiStyle = 2;
				friendly = true;
				penetrate = 6;
				ranged = true;
			}
			else if (type == 331)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 332)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
				light = 0.5f;
			}
			else if (type == 333)
			{
				width = 38;
				height = 38;
				aiStyle = 3;
				friendly = true;
				scale = 0.9f;
				penetrate = -1;
				melee = true;
			}
			else if (type == 334)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 335)
			{
				width = 22;
				height = 22;
				aiStyle = 30;
				friendly = true;
				penetrate = 1;
				melee = true;
			}
			else if (type == 336)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				magic = true;
				scale = 0.8f;
				extraUpdates = 1;
			}
			else if (type == 337)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				magic = true;
				tileCollide = false;
				coldDamage = true;
				extraUpdates = 1;
			}
			else if (type == 338 || type == 339 || type == 340 || type == 341)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				penetrate = -1;
				friendly = true;
				ranged = true;
				scale = 0.9f;
			}
			else if (type == 342)
			{
				width = 22;
				height = 2;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				coldDamage = true;
			}
			else if (type == 343)
			{
				alpha = 255;
				width = 10;
				height = 10;
				aiStyle = 57;
				friendly = true;
				melee = true;
				scale = 1.1f;
				penetrate = 3;
				coldDamage = true;
			}
			else if (type == 344)
			{
				width = 26;
				height = 26;
				aiStyle = 1;
				friendly = true;
				scale = 0.9f;
				alpha = 255;
				melee = true;
				coldDamage = true;
				tileCollide = false;
				noEnchantmentVisuals = true;
			}
			else if (type == 345)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				scale = 0.8f;
			}
			else if (type == 346)
			{
				width = 18;
				height = 18;
				aiStyle = 14;
				hostile = true;
				penetrate = -1;
				timeLeft = 300;
			}
			else if (type == 347)
			{
				width = 6;
				height = 6;
				aiStyle = 2;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 348)
			{
				aiStyle = 1;
				width = 48;
				height = 48;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				coldDamage = true;
				extraUpdates = 1;
				timeLeft = 900;
			}
			else if (type == 349)
			{
				aiStyle = 1;
				width = 12;
				height = 12;
				hostile = true;
				penetrate = -1;
				coldDamage = true;
				timeLeft = 900;
			}
			else if (type == 350)
			{
				alpha = 255;
				penetrate = -1;
				width = 14;
				height = 14;
				aiStyle = 1;
				hostile = true;
				tileCollide = false;
				timeLeft /= 2;
			}
			else if (type == 351)
			{
				alpha = 255;
				penetrate = -1;
				width = 24;
				height = 24;
				aiStyle = 58;
				hostile = true;
				tileCollide = false;
			}
			else if (type == 352)
			{
				width = 30;
				height = 30;
				aiStyle = 14;
				hostile = true;
				penetrate = -1;
				timeLeft /= 3;
			}
			else if (type == 353)
			{
				netImportant = true;
				width = 18;
				height = 28;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 354)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				ranged = true;
				penetrate = -1;
				extraUpdates = 1;
			}
			else if (type == 355)
			{
				width = 12;
				height = 12;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				magic = true;
				penetrate = 5;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
				timeLeft = 58;
			}
			else if (type == 356)
			{
				width = 6;
				height = 6;
				aiStyle = 59;
				alpha = 255;
				magic = true;
				tileCollide = false;
				extraUpdates = 3;
			}
			else if (type == 357)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 6;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 358)
			{
				width = 18;
				height = 18;
				aiStyle = 60;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				ignoreWater = true;
			}
			else if (type == 359)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				alpha = 255;
				magic = true;
				penetrate = 2;
				friendly = true;
				coldDamage = true;
			}
			else if ((type >= 360 && type <= 366) || type == 381 || type == 382 || type == 760 || type == 775)
			{
				width = 14;
				height = 14;
				aiStyle = 61;
				penetrate = -1;
				netImportant = true;
				bobber = true;
			}
			else if (type == 367)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1.1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 368)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 369)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 370)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 371)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 372)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 373)
			{
				netImportant = true;
				width = 24;
				height = 26;
				aiStyle = 62;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 374)
			{
				width = 10;
				height = 10;
				aiStyle = 0;
				friendly = true;
				penetrate = 1;
				aiStyle = 1;
				tileCollide = true;
				scale *= 0.9f;
			}
			else if (type == 375)
			{
				netImportant = true;
				width = 34;
				height = 26;
				aiStyle = 62;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 376)
			{
				width = 12;
				height = 12;
				aiStyle = 0;
				friendly = true;
				penetrate = 5;
				aiStyle = 1;
				tileCollide = true;
				timeLeft = 100;
				alpha = 255;
				extraUpdates = 1;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 6;
			}
			else if (type == 377)
			{
				width = 66;
				height = 50;
				aiStyle = 53;
				timeLeft = 7200;
				ignoreWater = true;
				sentry = true;
				netImportant = true;
			}
			else if (type == 378)
			{
				width = 16;
				height = 16;
				aiStyle = 14;
				friendly = true;
				penetrate = -1;
				timeLeft = 60;
				scale = 0.9f;
			}
			else if (type == 379)
			{
				width = 14;
				height = 10;
				aiStyle = 63;
				friendly = true;
				timeLeft = 300;
				penetrate = 1;
			}
			else if (type == 380)
			{
				netImportant = true;
				width = 26;
				height = 26;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 383)
			{
				width = 34;
				height = 34;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
			}
			else if (type == 384)
			{
				width = 150;
				height = 42;
				hostile = true;
				penetrate = -1;
				aiStyle = 64;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
				timeLeft = 540;
			}
			else if (type == 385)
			{
				width = 30;
				height = 30;
				hostile = true;
				penetrate = -1;
				aiStyle = 65;
				alpha = 255;
				timeLeft = 300;
			}
			else if (type == 386)
			{
				width = 150;
				height = 42;
				hostile = true;
				penetrate = -1;
				aiStyle = 64;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
				timeLeft = 840;
			}
			else if (type == 387)
			{
				netImportant = true;
				width = 40;
				height = 20;
				aiStyle = 66;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 0.5f;
				tileCollide = false;
				ignoreWater = true;
				friendly = true;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 16;
			}
			else if (type == 388)
			{
				netImportant = true;
				width = 40;
				height = 20;
				aiStyle = 66;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 0.5f;
				tileCollide = false;
				ignoreWater = true;
				friendly = true;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 12;
			}
			else if (type == 389)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 3;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 12;
			}
			else if (type == 390 || type == 391 || type == 392)
			{
				width = 18;
				height = 18;
				aiStyle = 26;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 15;
			}
			else if (type == 393 || type == 394 || type == 395)
			{
				width = 20;
				height = 30;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 18;
				decidesManualFallThrough = true;
			}
			else if (type == 396)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
				alpha = 100;
			}
			else if (type == 397)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
				tileCollide = false;
			}
			else if (type == 398)
			{
				netImportant = true;
				width = 18;
				height = 38;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 399)
			{
				width = 14;
				height = 14;
				aiStyle = 68;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				ranged = true;
				noEnchantmentVisuals = true;
			}
			else if (type >= 400 && type <= 402)
			{
				if (type == 400)
				{
					width = 14;
					height = 16;
				}
				else if (type == 401)
				{
					width = 12;
					height = 14;
				}
				else
				{
					width = 6;
					height = 12;
				}
				penetrate = 3;
				aiStyle = 14;
				friendly = true;
				timeLeft = 360;
				ranged = true;
				noEnchantmentVisuals = true;
			}
			else if (type == 403)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 404)
			{
				width = 26;
				height = 26;
				aiStyle = 69;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				melee = true;
			}
			else if (type == 405)
			{
				width = 14;
				height = 14;
				aiStyle = 70;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 90;
				melee = true;
				noEnchantments = true;
			}
			else if (type == 406)
			{
				width = 14;
				height = 14;
				aiStyle = 60;
				alpha = 255;
				penetrate = -1;
				extraUpdates = 2;
				ignoreWater = true;
			}
			else if (type == 407)
			{
				netImportant = true;
				width = 28;
				height = 40;
				aiStyle = 62;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				friendly = true;
				minionSlots = 1f;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 408)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
			}
			else if (type == 409)
			{
				width = 30;
				height = 30;
				penetrate = -1;
				aiStyle = 71;
				alpha = 255;
				timeLeft = 360;
				friendly = true;
				tileCollide = true;
				extraUpdates = 2;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 410)
			{
				width = 14;
				height = 14;
				aiStyle = 72;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 50;
				magic = true;
				ignoreWater = true;
			}
			else if (type >= 411 && type <= 414)
			{
				switch (type)
				{
				}
				width = 10;
				height = 10;
				aiStyle = 10;
			}
			else if (type == 415 || type == 416 || type == 417 || type == 418)
			{
				width = 14;
				height = 14;
				aiStyle = 34;
				friendly = true;
				ranged = true;
				timeLeft = 45;
			}
			else if (type >= 419 && type <= 422)
			{
				width = 4;
				height = 4;
				aiStyle = 73;
				friendly = true;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 3;
			}
			else if (type == 423)
			{
				netImportant = true;
				width = 28;
				height = 28;
				aiStyle = 62;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				friendly = true;
				minionSlots = 1f;
				ignoreWater = true;
			}
			else if (type >= 424 && type <= 426)
			{
				width = 24;
				height = 24;
				aiStyle = 1;
				friendly = true;
				magic = true;
				tileCollide = false;
				extraUpdates = 2;
			}
			else if (type == 427)
			{
				width = 22;
				height = 56;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 2;
			}
			else if (type == 428)
			{
				width = 26;
				height = 54;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 3;
			}
			else if (type == 429)
			{
				width = 18;
				height = 56;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 7;
			}
			else if (type == 430)
			{
				width = 30;
				height = 54;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 8;
			}
			else if (type == 431)
			{
				width = 28;
				height = 64;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 432)
			{
				width = 30;
				height = 54;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 610)
			{
				width = 28;
				height = 64;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 179;
			}
			else if (type == 609)
			{
				width = 30;
				height = 54;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				glowMask = 180;
			}
			else if (type == 433)
			{
				width = 8;
				height = 8;
				aiStyle = 48;
				friendly = true;
				extraUpdates = 100;
				timeLeft = 100;
				ignoreWater = true;
			}
			else if (type == 434)
			{
				width = 1;
				height = 1;
				aiStyle = 74;
				friendly = true;
				extraUpdates = 100;
				penetrate = -1;
			}
			else if (type == 435)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
				ignoreWater = true;
			}
			else if (type == 436)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
				ignoreWater = true;
			}
			else if (type == 437)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
				extraUpdates = 2;
				ignoreWater = true;
			}
			else if (type == 438)
			{
				width = 8;
				height = 8;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				extraUpdates = 3;
				ignoreWater = true;
			}
			else if (type == 439)
			{
				width = 22;
				height = 22;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 440)
			{
				width = 5;
				height = 5;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				extraUpdates = 2;
				scale = 1f;
				timeLeft = 600;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 441)
			{
				width = 1;
				height = 1;
				aiStyle = 76;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 442)
			{
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				scale = 1f;
				timeLeft = 600;
				ranged = true;
			}
			else if (type == 443)
			{
				width = 80;
				height = 80;
				aiStyle = 77;
				friendly = true;
				alpha = 255;
				scale = 1f;
				ranged = true;
				ignoreWater = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 444)
			{
				width = 10;
				height = 10;
				aiStyle = 78;
				friendly = true;
				alpha = 255;
				scale = 1f;
				ranged = true;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 445)
			{
				width = 10;
				height = 10;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				melee = true;
				ignoreWater = true;
				ownerHitCheck = true;
			}
			else if (type == 446)
			{
				netImportant = true;
				width = 14;
				height = 14;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
				light = 0.7f;
			}
			else if (type == 447)
			{
				width = 30;
				height = 30;
				aiStyle = 79;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 240;
			}
			else if (type == 448)
			{
				width = 14;
				height = 14;
				aiStyle = 80;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type == 449)
			{
				width = 5;
				height = 5;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				extraUpdates = 1;
				scale = 1f;
				timeLeft = 600;
				ignoreWater = true;
			}
			else if (type == 450)
			{
				width = 14;
				height = 14;
				aiStyle = 14;
				hostile = true;
				penetrate = -1;
				timeLeft = 360;
			}
			else if (type == 451)
			{
				width = 16;
				height = 16;
				aiStyle = 81;
				melee = true;
				penetrate = 3;
				light = 0.2f;
				alpha = 255;
				friendly = true;
			}
			else if (type == 452)
			{
				width = 14;
				height = 14;
				aiStyle = 82;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 600;
			}
			else if (type == 453)
			{
				width = 1;
				height = 1;
				aiStyle = 76;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 454)
			{
				width = 46;
				height = 46;
				aiStyle = 83;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 600;
				tileCollide = false;
			}
			else if (type == 455)
			{
				width = 36;
				height = 36;
				aiStyle = 84;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 600;
				tileCollide = false;
			}
			else if (type == 456)
			{
				width = 16;
				height = 16;
				aiStyle = 85;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 600;
				tileCollide = false;
			}
			else if (type == 459)
			{
				width = 22;
				height = 22;
				aiStyle = 1;
				friendly = true;
				magic = true;
				alpha = 255;
				scale = 1f;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 460)
			{
				width = 14;
				height = 18;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 461)
			{
				width = 18;
				height = 18;
				aiStyle = 84;
				friendly = true;
				magic = true;
				penetrate = -1;
				alpha = 255;
				tileCollide = false;
				hide = true;
			}
			else if (type == 462)
			{
				width = 8;
				height = 8;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				extraUpdates = 3;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 463)
			{
				width = 48;
				height = 48;
				aiStyle = 6;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
			}
			else if (type == 464)
			{
				width = 60;
				height = 60;
				aiStyle = 86;
				hostile = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
			}
			else if (type == 467)
			{
				width = 40;
				height = 40;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 468)
			{
				width = 40;
				height = 40;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				extraUpdates = 1;
			}
			else if (type == 465)
			{
				width = 80;
				height = 80;
				aiStyle = 88;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 466)
			{
				width = 14;
				height = 14;
				aiStyle = 88;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				tileCollide = true;
				extraUpdates = 4;
				timeLeft = 120 * (extraUpdates + 1);
			}
			else if (type == 491)
			{
				width = 26;
				height = 26;
				aiStyle = 9;
				friendly = true;
				melee = true;
				penetrate = -1;
			}
			else if (type == 500)
			{
				width = 20;
				height = 20;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 499)
			{
				netImportant = true;
				width = 34;
				height = 34;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 469)
			{
				alpha = 255;
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				timeLeft = 1200;
			}
			else if (type == 470)
			{
				width = 10;
				height = 10;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type == 471)
			{
				width = 16;
				height = 16;
				aiStyle = 2;
				scale = 1.2f;
				hostile = true;
				ranged = true;
			}
			else if (type == 472)
			{
				width = 8;
				height = 8;
				aiStyle = 0;
				hostile = true;
				penetrate = -1;
				aiStyle = 1;
				tileCollide = true;
				timeLeft = 50;
			}
			else if (type == 474)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				timeLeft = 1200;
				penetrate = 2;
			}
			else if (type == 473)
			{
				netImportant = true;
				width = 8;
				height = 8;
				aiStyle = 14;
				penetrate = -1;
				alpha = 75;
				light = 1f;
				timeLeft *= 2;
			}
			else if (type == 475)
			{
				width = 14;
				height = 14;
				aiStyle = 35;
				penetrate = -1;
				tileCollide = false;
				timeLeft = 400;
			}
			else if (type == 476)
			{
				width = 200;
				height = 200;
				aiStyle = 185;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 3;
				magic = true;
			}
			else if (type == 477)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				penetrate = 7;
				extraUpdates = 1;
				ranged = true;
			}
			else if (type == 478)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				timeLeft = 300;
				ranged = true;
			}
			else if (type == 479)
			{
				alpha = 255;
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				ranged = true;
			}
			else if (type == 480)
			{
				alpha = 255;
				width = 12;
				height = 12;
				penetrate = 3;
				aiStyle = 14;
				friendly = true;
				timeLeft = 120;
				ranged = true;
				noEnchantments = true;
			}
			else if (type == 481)
			{
				width = 22;
				height = 22;
				aiStyle = 13;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				melee = true;
				extraUpdates = 0;
			}
			else if (type == 482)
			{
				width = 16;
				height = 200;
				aiStyle = 87;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 2700;
				magic = true;
			}
			else if (type == 483)
			{
				width = 14;
				height = 14;
				aiStyle = 14;
				friendly = true;
				melee = true;
			}
			else if (type == 484)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				melee = true;
				extraUpdates = 1;
			}
			else if (type == 485)
			{
				arrow = true;
				width = 24;
				height = 24;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				penetrate = -1;
				timeLeft = 1200;
			}
			else if (type >= 486 && type <= 489)
			{
				if (type == 486)
				{
					width = 12;
					height = 12;
				}
				else if (type == 487)
				{
					width = 22;
					height = 22;
				}
				else if (type == 488)
				{
					width = 12;
					height = 12;
					light = 0.3f;
				}
				else if (type == 489)
				{
					width = 20;
					height = 16;
				}
				netImportant = true;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 492)
			{
				netImportant = true;
				width = 18;
				height = 32;
				aiStyle = 90;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 490)
			{
				width = 14;
				height = 14;
				aiStyle = 89;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				tileCollide = false;
				timeLeft = 600;
				netImportant = true;
			}
			else if (type == 493 || type == 494)
			{
				width = 32;
				height = 32;
				aiStyle = 4;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				alpha = 255;
				ignoreWater = true;
				magic = true;
				light = 0.2f;
			}
			else if (type == 495)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				penetrate = 3;
				timeLeft = 1200;
			}
			else if (type == 496)
			{
				alpha = 255;
				width = 40;
				height = 40;
				aiStyle = 91;
				friendly = true;
				magic = true;
				MaxUpdates = 3;
				penetrate = 3;
			}
			else if (type == 497)
			{
				width = 30;
				height = 30;
				aiStyle = 2;
				friendly = true;
				penetrate = 3;
				melee = true;
			}
			else if (type == 498)
			{
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				timeLeft = 180;
			}
			else if (type == 501)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				scale = 1.1f;
				hostile = true;
				ranged = true;
			}
			else if (type == 502)
			{
				width = 16;
				height = 16;
				aiStyle = 8;
				friendly = true;
				melee = true;
				penetrate = 5;
			}
			else if (type == 503)
			{
				width = 24;
				height = 24;
				aiStyle = 5;
				friendly = true;
				penetrate = 2;
				alpha = 255;
				tileCollide = false;
				melee = true;
				extraUpdates = 1;
			}
			else if (type == 504)
			{
				width = 10;
				height = 10;
				aiStyle = 2;
				friendly = true;
				melee = true;
				alpha = 255;
				penetrate = 2;
				noEnchantmentVisuals = true;
			}
			else if (type == 507)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				penetrate = 3;
			}
			else if (type == 508)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 509)
			{
				width = 22;
				height = 22;
				aiStyle = 20;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ownerHitCheck = true;
				melee = true;
				scale = 1.2f;
			}
			else if (type == 510)
			{
				width = 18;
				height = 18;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
				magic = true;
			}
			else if (type == 511)
			{
				width = 32;
				height = 32;
				aiStyle = 92;
				friendly = true;
				penetrate = -1;
				scale = 1.1f;
				magic = true;
			}
			else if (type == 512)
			{
				width = 40;
				height = 38;
				aiStyle = 92;
				friendly = true;
				penetrate = -1;
				scale = 1.1f;
				magic = true;
			}
			else if (type == 513)
			{
				width = 30;
				height = 28;
				aiStyle = 92;
				friendly = true;
				penetrate = -1;
				scale = 1.1f;
				magic = true;
			}
			else if (type == 514)
			{
				width = 10;
				height = 10;
				aiStyle = 93;
				friendly = true;
				penetrate = 3;
				alpha = 255;
				ranged = true;
			}
			else if (type == 515)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 14;
				penetrate = -1;
				alpha = 75;
				light = 1f;
				timeLeft *= 5;
			}
			else if (type == 516)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 517)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 518)
			{
				width = 32;
				height = 32;
				aiStyle = 94;
				friendly = true;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 519)
			{
				width = 24;
				height = 24;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type == 520)
			{
				width = 22;
				height = 22;
				aiStyle = 2;
				friendly = true;
				penetrate = 3;
				ranged = true;
				coldDamage = true;
			}
			else if (type == 521)
			{
				width = 14;
				height = 14;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 522)
			{
				width = 8;
				height = 8;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 523)
			{
				width = 32;
				height = 32;
				aiStyle = 95;
				alpha = 255;
				ranged = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 524)
			{
				width = 10;
				height = 10;
				aiStyle = 96;
				friendly = true;
				alpha = 255;
				penetrate = -1;
				ignoreWater = true;
				melee = true;
				extraUpdates = 5;
			}
			else if (type == 525)
			{
				width = 30;
				height = 24;
				aiStyle = 97;
				tileCollide = false;
				timeLeft = 10800;
				hide = true;
			}
			else if (type == 526)
			{
				width = 8;
				height = 8;
				aiStyle = 98;
				tileCollide = false;
				timeLeft = 120;
				alpha = 255;
			}
			else if (type >= 527 && type <= 531)
			{
				knockBack = 12f;
				width = 24;
				height = 24;
				aiStyle = 17;
				penetrate = -1;
			}
			else if (type == 532)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				scale = 1f;
				friendly = true;
				penetrate = 3;
				extraUpdates = 1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 533)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 66;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				tileCollide = false;
				ignoreWater = true;
				friendly = true;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 8;
			}
			else if (type == 534)
			{
				extraUpdates = 0;
				width = 16;
				height = 16;
				aiStyle = 99;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1f;
			}
			else if (type >= 541 && type <= 555)
			{
				extraUpdates = 0;
				width = 16;
				height = 16;
				aiStyle = 99;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1f;
				if (type == 547)
				{
					scale = 1.1f;
				}
				if (type == 554)
				{
					scale = 1.2f;
				}
				if (type == 555)
				{
					scale = 1.15f;
				}
				if (type == 551 || type == 550)
				{
					scale = 1.1f;
				}
			}
			else if (type >= 562 && type <= 564)
			{
				extraUpdates = 0;
				width = 16;
				height = 16;
				aiStyle = 99;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1f;
				if (type == 563)
				{
					scale = 1.05f;
				}
				if (type == 564)
				{
					scale = 1.075f;
				}
			}
			else if (type == 603)
			{
				extraUpdates = 0;
				width = 16;
				height = 16;
				aiStyle = 99;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1.15f;
			}
			else if (type == 604)
			{
				extraUpdates = 0;
				width = 14;
				height = 14;
				aiStyle = 115;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1.2f;
			}
			else if (type >= 556 && type <= 561)
			{
				extraUpdates = 0;
				width = 10;
				height = 10;
				aiStyle = 99;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1f;
				counterweight = true;
			}
			else if (type == 535)
			{
				width = 18;
				height = 18;
				aiStyle = 100;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 536)
			{
				width = 10;
				height = 10;
				aiStyle = 101;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 537)
			{
				width = 22;
				height = 22;
				aiStyle = 84;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 240;
				tileCollide = false;
			}
			else if (type == 538)
			{
				width = 12;
				height = 12;
				aiStyle = 14;
				hostile = true;
				penetrate = -1;
				timeLeft = 120;
				extraUpdates = 1;
				alpha = 255;
			}
			else if (type == 539)
			{
				width = 18;
				height = 30;
				aiStyle = 102;
				hostile = true;
				penetrate = -1;
				timeLeft = 600;
			}
			else if (type == 540)
			{
				width = 20;
				height = 20;
				aiStyle = 103;
				hostile = true;
				penetrate = -1;
				timeLeft = 300;
				alpha = 255;
			}
			else if (type == 565)
			{
				width = 28;
				height = 28;
				aiStyle = 104;
				penetrate = -1;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
				scale = 0.8f;
			}
			else if (type == 566)
			{
				width = 16;
				height = 16;
				aiStyle = 36;
				friendly = true;
				penetrate = 4;
				alpha = 255;
				timeLeft = 660;
				extraUpdates = 3;
			}
			else if (type == 567 || type == 568)
			{
				if (type == 567)
				{
					width = 14;
					height = 14;
				}
				else
				{
					width = 16;
					height = 16;
				}
				aiStyle = 105;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 3600;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type >= 569 && type <= 571)
			{
				width = 32;
				height = 32;
				aiStyle = 106;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				timeLeft = 3600;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 575)
			{
				width = 24;
				height = 24;
				aiStyle = 107;
				hostile = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft = 420;
				alpha = 255;
			}
			else if (type == 573)
			{
				width = 18;
				height = 30;
				aiStyle = 102;
				hostile = true;
				penetrate = -1;
				timeLeft = 600;
			}
			else if (type == 574)
			{
				width = 18;
				height = 18;
				aiStyle = 102;
				hostile = true;
				timeLeft = 600;
				tileCollide = false;
			}
			else if (type == 572)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 576)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
			}
			else if (type == 577)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
				alpha = 255;
				extraUpdates = 2;
				scale = 1.2f;
				timeLeft = 600;
			}
			else if (type == 578 || type == 579 || type == 813)
			{
				width = 32;
				height = 32;
				aiStyle = 108;
				friendly = true;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				hostile = true;
				hide = true;
			}
			else if (type == 580)
			{
				width = 14;
				height = 14;
				aiStyle = 88;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				tileCollide = true;
				extraUpdates = 4;
				timeLeft = 600;
			}
			else if (type == 581)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 582)
			{
				width = 20;
				height = 20;
				aiStyle = 109;
				friendly = true;
				penetrate = -1;
				MaxUpdates = 2;
			}
			else if (type == 583)
			{
				width = 10;
				height = 10;
				aiStyle = 2;
				friendly = true;
				scale = 0.8f;
			}
			else if (type == 589)
			{
				width = 10;
				height = 10;
				aiStyle = 2;
				friendly = true;
			}
			else if (type == 584)
			{
				width = 10;
				height = 10;
				aiStyle = 110;
				friendly = true;
				scale = 0.8f;
				penetrate = 3;
			}
			else if (type == 585)
			{
				width = 26;
				height = 26;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				penetrate = 3;
			}
			else if (type == 586)
			{
				width = 26;
				height = 26;
				aiStyle = 111;
				alpha = 255;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 587)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				ranged = true;
			}
			else if (type == 588)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 590)
			{
				width = 14;
				height = 14;
				aiStyle = 112;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				timeLeft = 900;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 591)
			{
				width = 8;
				height = 8;
				aiStyle = 101;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ignoreWater = true;
			}
			else if (type == 592)
			{
				width = 8;
				height = 8;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				extraUpdates = 3;
				ignoreWater = true;
			}
			else if (type == 593)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				hostile = true;
				alpha = 255;
				extraUpdates = 1;
				ignoreWater = true;
			}
			else if (type == 594)
			{
				width = 40;
				height = 40;
				aiStyle = 1;
				alpha = 255;
				extraUpdates = 2;
			}
			else if (type == 595)
			{
				width = 68;
				height = 64;
				aiStyle = 75;
				friendly = true;
				tileCollide = false;
				melee = true;
				penetrate = -1;
				ownerHitCheck = true;
			}
			else if (type == 596)
			{
				width = 8;
				height = 8;
				aiStyle = 107;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 180;
				tileCollide = false;
			}
			else if (type == 597)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 2;
				friendly = true;
			}
			else if (type == 598)
			{
				width = 16;
				height = 16;
				aiStyle = 113;
				friendly = true;
				ranged = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
			}
			else if (type == 599)
			{
				width = 22;
				height = 22;
				aiStyle = 2;
				friendly = true;
				penetrate = 6;
				ranged = true;
			}
			else if (type == 600)
			{
				width = 14;
				height = 14;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ignoreWater = true;
			}
			else if (type == 601)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				extraUpdates = 30;
			}
			else if (type == 602)
			{
				width = 10;
				height = 10;
				aiStyle = 114;
				alpha = 255;
				friendly = true;
				tileCollide = false;
				netImportant = true;
			}
			else if (type == 605)
			{
				alpha = 255;
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 606)
			{
				width = 5;
				height = 5;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				extraUpdates = 2;
				scale = 1f;
				timeLeft = 600;
				ignoreWater = true;
			}
			else if (type == 607)
			{
				width = 10;
				height = 10;
				aiStyle = 116;
				friendly = true;
				alpha = 255;
				timeLeft = 600;
				ignoreWater = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 608)
			{
				width = 160;
				height = 160;
				aiStyle = 117;
				friendly = true;
				alpha = 255;
				timeLeft = 3;
				ignoreWater = true;
				tileCollide = false;
				penetrate = -1;
				hide = true;
			}
			else if (type == 611)
			{
				width = 16;
				height = 16;
				aiStyle = 75;
				friendly = true;
				melee = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
				tileCollide = false;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				noEnchantmentVisuals = true;
			}
			else if (type == 612)
			{
				width = 8;
				height = 8;
				aiStyle = 117;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 60;
				tileCollide = false;
				penetrate = -1;
				usesLocalNPCImmunity = true;
			}
			else if (type == 613)
			{
				netImportant = true;
				width = 24;
				height = 24;
				aiStyle = 62;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				friendly = true;
				minionSlots = 1f;
				ignoreWater = true;
			}
			else if (type == 614)
			{
				width = 16;
				height = 16;
				aiStyle = 113;
				friendly = true;
				penetrate = -1;
				alpha = 255;
			}
			else if (type == 615)
			{
				width = 22;
				height = 22;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ranged = true;
				ignoreWater = true;
			}
			else if (type == 616)
			{
				width = 14;
				height = 14;
				aiStyle = 1;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				ranged = true;
				extraUpdates = 2;
				timeLeft = 90 * MaxUpdates;
			}
			else if (type == 617)
			{
				width = 32;
				height = 32;
				aiStyle = 118;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
				hide = true;
				magic = true;
				penetrate = 3;
				usesLocalNPCImmunity = true;
			}
			else if (type == 618)
			{
				tileCollide = false;
				width = 18;
				height = 30;
				aiStyle = 119;
				penetrate = -1;
				timeLeft = 420;
				magic = true;
				friendly = true;
				usesLocalNPCImmunity = true;
			}
			else if (type == 619)
			{
				width = 14;
				height = 14;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 620)
			{
				width = 8;
				height = 8;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				penetrate = 1;
				friendly = true;
			}
			else if (type == 622)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				extraUpdates = 2;
			}
			else if (type == 623)
			{
				netImportant = true;
				width = 50;
				height = 80;
				aiStyle = 120;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				friendly = true;
				minionSlots = 0f;
				ignoreWater = true;
				tileCollide = false;
				netImportant = true;
				manualDirectionChange = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 5;
			}
			else if (type == 624)
			{
				width = 8;
				height = 8;
				aiStyle = 117;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 60;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type >= 625 && type <= 628)
			{
				if (type == 625 || type == 628)
				{
					netImportant = true;
				}
				if (type == 626 || type == 627)
				{
					minionSlots = 0.5f;
				}
				width = 24;
				height = 24;
				aiStyle = 121;
				penetrate = -1;
				timeLeft *= 5;
				minion = true;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				alpha = 255;
				hide = true;
				netImportant = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 7;
			}
			else if (type == 629)
			{
				width = 8;
				height = 8;
				aiStyle = 122;
				hostile = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 3600;
				tileCollide = false;
				penetrate = -1;
				extraUpdates = 2;
			}
			else if (type == 630 || type == 705)
			{
				width = 22;
				height = 22;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ranged = true;
				ignoreWater = true;
			}
			else if (type == 631)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 122;
				friendly = true;
				ranged = true;
				tileCollide = false;
				alpha = 255;
				ignoreWater = true;
				extraUpdates = 1;
				timeLeft = 1200;
			}
			else if (type == 633)
			{
				width = 14;
				height = 18;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 632)
			{
				width = 18;
				height = 18;
				aiStyle = 84;
				friendly = true;
				magic = true;
				penetrate = -1;
				alpha = 255;
				tileCollide = false;
			}
			else if (type == 634)
			{
				width = 40;
				height = 40;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
				extraUpdates = 2;
				magic = true;
			}
			else if (type == 635)
			{
				width = 40;
				height = 40;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				friendly = true;
				extraUpdates = 3;
				magic = true;
			}
			else if (type == 636)
			{
				width = 16;
				height = 16;
				aiStyle = 113;
				friendly = true;
				melee = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
				MaxUpdates = 2;
			}
			else if (type == 637)
			{
				width = 10;
				height = 10;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 638)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				extraUpdates = 5;
				timeLeft = 600;
				ranged = true;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				penetrate = -1;
			}
			else if (type == 639)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				MaxUpdates = 2;
				timeLeft = MaxUpdates * 45;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				alpha = 255;
				penetrate = 4;
			}
			else if (type == 640)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				MaxUpdates = 3;
				timeLeft = 90;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				alpha = 255;
				penetrate = 4;
			}
			else if (type == 642)
			{
				width = 18;
				height = 18;
				aiStyle = 84;
				friendly = true;
				penetrate = -1;
				alpha = 255;
				tileCollide = false;
				usesLocalNPCImmunity = true;
			}
			else if (type == 641)
			{
				width = 32;
				height = 32;
				aiStyle = 123;
				timeLeft = 7200;
				ignoreWater = true;
				tileCollide = false;
				alpha = 255;
				hide = true;
				sentry = true;
				netImportant = true;
			}
			else if (type == 643)
			{
				width = 32;
				height = 32;
				aiStyle = 123;
				timeLeft = 7200;
				ignoreWater = true;
				tileCollide = false;
				alpha = 255;
				sentry = true;
				netImportant = true;
			}
			else if (type == 644)
			{
				width = 14;
				height = 14;
				aiStyle = 112;
				penetrate = 1;
				timeLeft = 900;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
			}
			else if (type == 645)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				magic = true;
				tileCollide = false;
				extraUpdates = 5;
				penetrate = -1;
				usesLocalNPCImmunity = true;
			}
			else if (type >= 646 && type <= 649)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 650)
			{
				width = 20;
				height = 20;
				aiStyle = 124;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else if (type == 651)
			{
				width = 10;
				height = 10;
				aiStyle = 125;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 652)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 653)
			{
				width = 30;
				height = 30;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				scale = 0.8f;
			}
			else if (type == 654)
			{
				width = 30;
				height = 30;
				aiStyle = 126;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 120;
				friendly = true;
				hostile = true;
				penetrate = -1;
				trap = true;
			}
			else if (type == 655)
			{
				width = 31;
				height = 31;
				aiStyle = 25;
				friendly = true;
				hostile = true;
				penetrate = -1;
				trap = true;
			}
			else if (type == 656)
			{
				width = 10;
				height = 10;
				aiStyle = 127;
				friendly = true;
				magic = true;
				tileCollide = false;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				timeLeft = 1200;
			}
			else if (type == 657)
			{
				width = 10;
				height = 10;
				aiStyle = 127;
				hostile = true;
				tileCollide = false;
				penetrate = -1;
				timeLeft = 1200;
			}
			else if (type == 658)
			{
				width = 14;
				height = 14;
				aiStyle = 128;
				penetrate = 1;
				timeLeft = 900;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
				hostile = true;
			}
			else if (type == 659)
			{
				width = 8;
				height = 8;
				aiStyle = 129;
				friendly = true;
				magic = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 180;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 660)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				timeLeft = 600;
				magic = true;
				ignoreWater = true;
			}
			else if (type == 661)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				timeLeft = 40;
				extraUpdates = 1;
				ranged = true;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
			}
			else if (type == 662 || type == 685)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 663 || type == 665 || type == 667)
			{
				width = 30;
				height = 54;
				aiStyle = 130;
				timeLeft = 7200;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
				switch (type)
				{
				case 665:
					height = 58;
					width = 28;
					break;
				case 667:
					height = 60;
					width = 28;
					break;
				}
				sentry = true;
				netImportant = true;
			}
			else if (type == 664 || type == 666 || type == 668)
			{
				width = 16;
				height = 16;
				aiStyle = 131;
				friendly = true;
				alpha = 255;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 669)
			{
				width = 14;
				height = 14;
				aiStyle = 68;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				ranged = true;
				noEnchantmentVisuals = true;
			}
			else if (type == 670)
			{
				width = 30;
				height = 30;
				aiStyle = 126;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 120;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 671)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 672)
			{
				width = 10;
				height = 10;
				aiStyle = 132;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 900;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 674 || type == 673)
			{
				width = 10;
				height = 10;
				aiStyle = 133;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 900;
				hostile = true;
				penetrate = -1;
				hide = true;
			}
			else if (type == 675)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 676)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 677 || type == 678 || type == 679)
			{
				width = 26;
				height = 54;
				aiStyle = 134;
				timeLeft = 7200;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
				sentry = true;
				netImportant = true;
			}
			else if (type == 680)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				friendly = true;
				penetrate = 4;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 681)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				hostile = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 682)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = true;
				ignoreWater = true;
				timeLeft = 30;
				scale = 1.2f;
			}
			else if (type == 683)
			{
				width = 30;
				height = 30;
				aiStyle = 135;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 120;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 684)
			{
				width = 16;
				height = 16;
				aiStyle = 1;
				melee = true;
				penetrate = 5;
				alpha = 255;
				friendly = true;
				tileCollide = false;
			}
			else if (type == 686)
			{
				width = 30;
				height = 30;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 687)
			{
				width = 30;
				height = 30;
				aiStyle = 136;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if (type == 688 || type == 689 || type == 690)
			{
				width = 16;
				height = 16;
				aiStyle = 137;
				friendly = true;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				timeLeft = 7200;
				localNPCHitCooldown = 3;
				tileCollide = false;
				penetrate = -1;
				sentry = true;
				netImportant = true;
			}
			else if (type == 691 || type == 692 || type == 693)
			{
				width = 16;
				height = 16;
				aiStyle = 138;
				ignoreWater = true;
				friendly = true;
				timeLeft = 7200;
				tileCollide = false;
				penetrate = -1;
				hide = true;
				sentry = true;
				netImportant = true;
			}
			else if (type == 694 || type == 695 || type == 696)
			{
				aiStyle = 139;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 30;
				alpha = 255;
				width = 144;
				height = 144;
			}
			else if (type == 697)
			{
				width = 16;
				height = 16;
				aiStyle = 140;
				friendly = true;
				melee = true;
				scale = 1.35f;
				penetrate = -1;
				alpha = 255;
				hide = true;
				tileCollide = false;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 12;
				ownerHitCheck = true;
			}
			else if (type == 698)
			{
				width = 50;
				height = 200;
				aiStyle = 141;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 120;
				friendly = true;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
				melee = true;
			}
			else if (type == 699)
			{
				width = 24;
				height = 24;
				aiStyle = 142;
				friendly = true;
				melee = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
				tileCollide = false;
				ignoreWater = true;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 20;
				ownerHitCheck = true;
			}
			else if (type == 700)
			{
				width = 40;
				height = 40;
				aiStyle = 143;
				alpha = 255;
				penetrate = -1;
				friendly = true;
				melee = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
				ignoreWater = true;
				tileCollide = false;
			}
			else if (type == 703 || type == 701 || type == 702)
			{
				width = 20;
				height = 20;
				aiStyle = 144;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				scale = 1f;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else if (type == 704)
			{
				width = 60;
				height = 210;
				aiStyle = 145;
				friendly = true;
				magic = true;
				tileCollide = false;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				timeLeft = 600;
				localNPCHitCooldown = -1;
				ignoreWater = true;
			}
			else if (type == 706)
			{
				width = 66;
				height = 66;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				timeLeft = 300;
				ranged = true;
				usesLocalNPCImmunity = true;
				penetrate = -1;
				localNPCHitCooldown = 10;
			}
			else if (type == 707)
			{
				width = 16;
				height = 16;
				aiStyle = 140;
				friendly = true;
				melee = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
				tileCollide = false;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 6;
				ownerHitCheck = true;
			}
			else if (type == 708)
			{
				width = 24;
				height = 24;
				aiStyle = 142;
				friendly = true;
				melee = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
				tileCollide = false;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 6;
				ownerHitCheck = true;
			}
			else if (type == 709)
			{
				width = 12;
				height = 12;
				aiStyle = 1;
				friendly = true;
				melee = true;
				alpha = 255;
				ignoreWater = true;
				extraUpdates = 1;
				noEnchantmentVisuals = true;
				scale = 0.6f;
			}
			else if (type == 710)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				ranged = true;
				ignoreWater = true;
				extraUpdates = 1;
				timeLeft = extraUpdates * 60 * 5;
				usesLocalNPCImmunity = true;
				alpha = 255;
				localNPCHitCooldown = -1;
			}
			else if (type == 711)
			{
				width = 30;
				height = 30;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				magic = true;
				extraUpdates = 1;
				scale = 0.7f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 712)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				friendly = true;
				alpha = 255;
				timeLeft = 600;
				magic = true;
				extraUpdates = 1;
			}
			else if (type == 713)
			{
				width = 10;
				height = 10;
				aiStyle = 146;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 900;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 714)
			{
				width = 22;
				height = 22;
				aiStyle = 75;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				hide = true;
				ranged = true;
				ignoreWater = true;
			}
			else if (type == 715 || type == 717)
			{
				width = 14;
				height = 14;
				aiStyle = 147;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				ranged = true;
				extraUpdates = 2;
				timeLeft = 360 * MaxUpdates;
			}
			else if (type == 716 || type == 718)
			{
				width = 14;
				height = 14;
				aiStyle = 147;
				friendly = true;
				penetrate = 1;
				alpha = 255;
				ranged = true;
				extraUpdates = 2;
				timeLeft = 360 * MaxUpdates;
			}
			else if (type == 719)
			{
				width = 10;
				height = 10;
				hostile = true;
				penetrate = -1;
				aiStyle = 1;
				tileCollide = true;
			}
			else if (type == 720)
			{
				width = 16;
				height = 16;
				aiStyle = 148;
				tileCollide = false;
				penetrate = -1;
				alpha = 255;
			}
			else if (type == 721 || type == 739 || type == 740 || type == 741 || type == 742 || type == 743 || type == 744 || type == 745 || type == 746 || type == 747 || type == 748 || type == 749 || type == 750 || type == 751 || type == 752)
			{
				netImportant = true;
				width = 7;
				height = 7;
				friendly = true;
				penetrate = -1;
				aiStyle = 149;
				tileCollide = false;
			}
			else if (type == 722)
			{
				width = 2;
				height = 2;
				aiStyle = 150;
				tileCollide = false;
				ignoreWater = true;
				penetrate = -1;
				hide = true;
			}
			else if (type == 723 || type == 724 || type == 725 || type == 726)
			{
				width = 24;
				height = 24;
				aiStyle = 5;
				friendly = true;
				penetrate = 2;
				alpha = 50;
				tileCollide = false;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 728)
			{
				width = 24;
				height = 24;
				aiStyle = 151;
				alpha = 255;
				tileCollide = true;
				ranged = true;
				friendly = true;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
			}
			else if (type == 729)
			{
				width = 20;
				height = 20;
				aiStyle = 152;
				friendly = true;
				tileCollide = false;
				ignoreWater = true;
				ranged = true;
				penetrate = -1;
				scale = 1f + (float)Main.rand.Next(30) * 0.01f;
				extraUpdates = 2;
				timeLeft = 10 * MaxUpdates;
			}
			else if (type == 730)
			{
				width = 18;
				height = 18;
				aiStyle = 19;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 731)
			{
				width = 10;
				height = 10;
				aiStyle = 29;
				alpha = 255;
				magic = true;
				friendly = true;
				extraUpdates = 1;
				timeLeft = 90;
			}
			else if (type == 732)
			{
				tileCollide = true;
				width = 15;
				height = 15;
				aiStyle = 44;
				friendly = true;
				penetrate = 1;
				melee = true;
				noEnchantmentVisuals = true;
			}
			else if (type == 733)
			{
				width = 2;
				height = 2;
				aiStyle = 153;
				tileCollide = false;
				ignoreWater = true;
				penetrate = -1;
				alpha = 255;
			}
			else if (type == 734)
			{
				width = 30;
				height = 24;
				aiStyle = 154;
				tileCollide = false;
				timeLeft = 10800;
				alpha = 255;
				hide = true;
			}
			else if (type == 735)
			{
				width = 68;
				height = 64;
				aiStyle = 75;
				friendly = true;
				tileCollide = false;
				melee = true;
				penetrate = -1;
				ownerHitCheck = true;
			}
			else if (type == 736 || type == 737 || type == 738)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				penetrate = -1;
			}
			else if (type == 753)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 754)
			{
				width = 16;
				height = 16;
				aiStyle = 155;
				tileCollide = false;
				ignoreWater = true;
				penetrate = -1;
				alpha = 255;
			}
			else if (type == 755)
			{
				netImportant = true;
				width = 10;
				height = 10;
				penetrate = -1;
				ignoreWater = true;
				tileCollide = false;
				friendly = true;
				minion = true;
				minionSlots = 1f;
				timeLeft *= 5;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 15;
				aiStyle = 156;
			}
			else if (type == 756)
			{
				width = 32;
				height = 32;
				aiStyle = 157;
				friendly = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				ignoreWater = true;
				penetrate = 3;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 25;
			}
			else if (type == 757)
			{
				netImportant = true;
				width = 34;
				height = 34;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 758)
			{
				width = 20;
				height = 30;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				friendly = true;
				decidesManualFallThrough = true;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 10;
			}
			else if (type == 759)
			{
				netImportant = true;
				width = 10;
				height = 10;
				penetrate = -1;
				ignoreWater = true;
				tileCollide = true;
				friendly = true;
				minion = true;
				minionSlots = 1f;
				timeLeft *= 5;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 15;
				aiStyle = 158;
				hide = true;
			}
			else if (type == 761 || type == 762)
			{
				width = 10;
				height = 10;
				aiStyle = 159;
				friendly = true;
				ranged = true;
				manualDirectionChange = true;
			}
			else if (type == 763)
			{
				width = 10;
				height = 10;
				hostile = true;
				friendly = true;
				penetrate = -1;
				aiStyle = 1;
				tileCollide = true;
				extraUpdates = 1;
			}
			else if (type == 764)
			{
				width = 20;
				height = 20;
				aiStyle = 144;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else if (type == 765)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if ((type >= 766 && type <= 770) || type == 771)
			{
				width = 4;
				height = 4;
				aiStyle = 160;
				penetrate = -1;
				extraUpdates = 60;
			}
			else if (type == 772)
			{
				width = 22;
				height = 22;
				friendly = true;
				aiStyle = 1;
				tileCollide = true;
				extraUpdates = 1;
			}
			else if (type == 773)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type == 774)
			{
				netImportant = true;
				width = 26;
				height = 26;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 802)
			{
				width = 18;
				height = 18;
				aiStyle = 161;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1f;
				ownerHitCheck = true;
				melee = true;
				extraUpdates = 1;
				hide = true;
			}
			else if (type == 811 || type == 814)
			{
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
			}
			else if ((type >= 776 && type <= 801) || (type >= 803 && type <= 810))
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
				if (type == 777 || type == 781 || type == 794 || type == 797 || type == 800 || type == 785 || type == 788 || type == 800)
				{
					usesLocalNPCImmunity = true;
					localNPCHitCooldown = -1;
				}
			}
			else if (type == 812)
			{
				knockBack = 6f;
				width = 10;
				height = 10;
				aiStyle = 10;
				friendly = true;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 815)
			{
				netImportant = true;
				width = 26;
				height = 26;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 816)
			{
				netImportant = true;
				width = 26;
				height = 32;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 817)
			{
				netImportant = true;
				width = 26;
				height = 26;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 819)
			{
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 1;
				alpha = 255;
				extraUpdates = 1;
				hide = true;
				friendly = true;
				ranged = true;
			}
			else if (type == 818)
			{
				width = 132;
				height = 132;
				aiStyle = 162;
				friendly = true;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				penetrate = -1;
				extraUpdates = 3;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 820)
			{
				width = 12;
				height = 12;
				friendly = true;
				aiStyle = 163;
				tileCollide = true;
				netImportant = true;
				penetrate = -1;
				timeLeft = 86400;
			}
			else if (type == 821)
			{
				netImportant = true;
				width = 20;
				height = 36;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type >= 822 && type <= 824)
			{
				netImportant = true;
				width = 4;
				height = 4;
				aiStyle = 160;
				penetrate = -1;
				extraUpdates = 60;
			}
			else if (type == 825)
			{
				netImportant = true;
				width = 26;
				height = 32;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type >= 826 && type <= 830)
			{
				netImportant = true;
				width = 4;
				height = 4;
				aiStyle = 160;
				penetrate = -1;
				extraUpdates = 60;
			}
			else if (type == 836)
			{
				width = 4;
				height = 4;
				aiStyle = 112;
				hostile = true;
			}
			else if (type == 831)
			{
				netImportant = true;
				width = 10;
				height = 10;
				penetrate = -1;
				ignoreWater = true;
				tileCollide = false;
				friendly = true;
				minion = true;
				minionSlots = 1f;
				timeLeft = 60;
				aiStyle = 164;
				hide = true;
			}
			else if (type == 833)
			{
				width = 26;
				height = 20;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				minion = true;
				minionSlots = 0f;
				decidesManualFallThrough = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 834)
			{
				width = 20;
				height = 30;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				minion = true;
				minionSlots = 0f;
				decidesManualFallThrough = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 835)
			{
				width = 20;
				height = 30;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				minion = true;
				minionSlots = 0f;
				decidesManualFallThrough = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 837)
			{
				width = 26;
				height = 26;
				aiStyle = 1;
				alpha = 255;
				friendly = true;
				magic = true;
				penetrate = 3;
			}
			else if (type >= 838 && type <= 840)
			{
				netImportant = true;
				width = 4;
				height = 4;
				aiStyle = 160;
				penetrate = -1;
				extraUpdates = 60;
			}
			else if (type == 841)
			{
				DefaultToWhip();
			}
			else if (type == 842)
			{
				width = 18;
				height = 18;
				aiStyle = 161;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1f;
				ownerHitCheck = true;
				melee = true;
				extraUpdates = 1;
				hide = true;
			}
			else if (type >= 843 && type <= 846)
			{
				netImportant = true;
				width = 4;
				height = 4;
				aiStyle = 160;
				penetrate = -1;
				extraUpdates = 60;
			}
			else if (type == 847)
			{
				DefaultToWhip();
				extraUpdates = 2;
			}
			else if (type == 848)
			{
				DefaultToWhip();
			}
			else if (type == 849)
			{
				DefaultToWhip();
				extraUpdates = 2;
			}
			else if (type == 850)
			{
				netImportant = true;
				width = 4;
				height = 4;
				aiStyle = 160;
				penetrate = -1;
				extraUpdates = 60;
			}
			else if (type == 851)
			{
				netImportant = true;
				width = 4;
				height = 4;
				aiStyle = 166;
				penetrate = -1;
				timeLeft = 300;
			}
			else if (type >= 852 && type <= 853)
			{
				netImportant = true;
				width = 4;
				height = 4;
				aiStyle = 160;
				penetrate = -1;
				extraUpdates = 60;
			}
			else if (type == 854)
			{
				netImportant = true;
				width = 26;
				height = 32;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 855)
			{
				netImportant = true;
				width = 12;
				height = 12;
				aiStyle = 166;
				penetrate = -1;
				timeLeft = 1000;
			}
			else if (type == 856)
			{
				width = 32;
				height = 32;
				aiStyle = 167;
				friendly = true;
				alpha = 255;
				magic = true;
				tileCollide = false;
				ignoreWater = true;
				extraUpdates = 2;
				usesLocalNPCImmunity = true;
			}
			else if (type == 857)
			{
				width = 32;
				height = 32;
				aiStyle = 168;
				friendly = true;
				alpha = 255;
				melee = true;
				tileCollide = false;
				ignoreWater = true;
				extraUpdates = 1;
				usesLocalNPCImmunity = true;
				manualDirectionChange = true;
				penetrate = -1;
				hide = true;
			}
			else if (type == 858)
			{
				netImportant = true;
				width = 26;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 859)
			{
				netImportant = true;
				width = 20;
				height = 32;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 860)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 861)
			{
				netImportant = true;
				width = 10;
				height = 10;
				aiStyle = 2;
				friendly = true;
			}
			else if (type == 862 || type == 863)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 864)
			{
				netImportant = true;
				width = 10;
				height = 10;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				ignoreWater = true;
				tileCollide = false;
				friendly = true;
				minion = true;
				minionSlots = 1f;
				timeLeft = 60;
				aiStyle = 169;
				localNPCHitCooldown = 40;
			}
			else if (type == 865)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
			}
			else if (type == 866)
			{
				light = 0.15f;
				width = 30;
				height = 30;
				aiStyle = 3;
				friendly = true;
				penetrate = 5;
				melee = true;
				extraUpdates = 1;
				usesLocalNPCImmunity = true;
			}
			else if (type == 867)
			{
				width = 22;
				height = 22;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				light = 0.6f;
			}
			else if (type == 868 || type == 869)
			{
				width = 18;
				height = 18;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
			}
			else if (type == 870)
			{
				netImportant = true;
				width = 6;
				height = 6;
				aiStyle = 14;
				penetrate = -1;
				alpha = 75;
				light = 1f;
				timeLeft *= 5;
			}
			else if (type == 873)
			{
				width = 30;
				height = 30;
				aiStyle = 171;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				timeLeft = 200;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 874)
			{
				width = 30;
				height = 30;
				aiStyle = 0;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				timeLeft = 210;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 871)
			{
				width = 30;
				height = 30;
				aiStyle = 172;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				timeLeft = 240;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 875)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 872)
			{
				width = 30;
				height = 30;
				aiStyle = 173;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				timeLeft = 660;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 876)
			{
				width = 4;
				height = 4;
				aiStyle = 1;
				friendly = true;
				penetrate = 8;
				light = 0.75f;
				alpha = 255;
				extraUpdates = 3;
				scale = 1.4f;
				timeLeft = 3600;
				magic = true;
			}
			else if (type >= 877 && type <= 879)
			{
				netImportant = true;
				width = 25;
				height = 25;
				aiStyle = 19;
				alpha = 255;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1f;
				hide = true;
				ownerHitCheck = true;
				melee = true;
			}
			else if (type == 880)
			{
				width = 32;
				height = 32;
				aiStyle = 183;
				penetrate = -1;
				timeLeft = 18;
				ignoreWater = true;
				tileCollide = false;
				friendly = true;
				hostile = false;
				manualDirectionChange = true;
			}
			else if (type == 881)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 882)
			{
				width = 20;
				height = 20;
				aiStyle = 124;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else if (type == 883)
			{
				width = 20;
				height = 20;
				aiStyle = 174;
				penetrate = -1;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				netImportant = true;
			}
			else if (type >= 884 && type <= 886)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 887)
			{
				width = 20;
				height = 20;
				aiStyle = 174;
				penetrate = -1;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				netImportant = true;
			}
			else if (type == 888)
			{
				width = 20;
				height = 20;
				aiStyle = 124;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else if (type >= 889 && type <= 892)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 893)
			{
				width = 20;
				height = 20;
				aiStyle = 174;
				penetrate = -1;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				netImportant = true;
			}
			else if (type == 894)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type >= 895 && type <= 896)
			{
				width = 20;
				height = 20;
				aiStyle = 124;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else if (type == 897)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 898)
			{
				width = 20;
				height = 20;
				aiStyle = 124;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				friendly = true;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else if (type >= 899 && type <= 901)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 902)
			{
				width = 20;
				height = 20;
				aiStyle = 3;
				friendly = true;
				penetrate = -1;
				melee = true;
				MaxUpdates = 2;
			}
			else if (type >= 903 && type <= 906)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 907)
			{
				width = 22;
				height = 22;
				aiStyle = 30;
				friendly = true;
				penetrate = 2;
				melee = true;
			}
			else if (type == 908)
			{
				tileCollide = false;
				ignoreWater = true;
				width = 14;
				height = 14;
				aiStyle = 175;
				friendly = true;
				penetrate = 1;
				timeLeft = 3600;
				hide = true;
			}
			else if (type == 909)
			{
				width = 12;
				height = 12;
				aiStyle = 2;
				friendly = false;
				hostile = true;
				penetrate = 1;
			}
			else if (type == 910)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
			}
			else if (type == 911)
			{
				width = 22;
				height = 22;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
			}
			else if (type >= 912 && type <= 915)
			{
				DefaultToWhip();
				if (type == 915)
				{
					extraUpdates = 2;
				}
				if (type == 912)
				{
					coldDamage = true;
				}
			}
			else if (type == 916)
			{
				width = 18;
				height = 18;
				aiStyle = 176;
				friendly = true;
				tileCollide = false;
				penetrate = 2;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
				extraUpdates = 2;
			}
			else if (type == 918)
			{
				aiStyle = 178;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
				alpha = 255;
				width = 96;
				height = 96;
			}
			else if (type == 917)
			{
				width = 30;
				height = 30;
				aiStyle = 177;
				friendly = true;
				tileCollide = false;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				coldDamage = true;
				localNPCHitCooldown = 20;
			}
			else if (type == 919)
			{
				width = 8;
				height = 8;
				aiStyle = 179;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				timeLeft = 240;
				tileCollide = false;
				ignoreWater = true;
			}
			else if (type == 920)
			{
				alpha = 255;
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = 1;
			}
			else if (type == 921)
			{
				alpha = 255;
				width = 6;
				height = 6;
				aiStyle = 1;
				hostile = true;
				penetrate = 3;
			}
			else if (type == 922)
			{
				width = 30;
				height = 30;
				aiStyle = 135;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 120;
				hostile = true;
				penetrate = -1;
			}
			else if (type == 923)
			{
				width = 30;
				height = 30;
				aiStyle = 180;
				alpha = 255;
				penetrate = -1;
				friendly = false;
				hostile = true;
				timeLeft = 180;
				tileCollide = false;
				ignoreWater = true;
				hide = true;
			}
			else if (type == 926)
			{
				alpha = 255;
				width = 12;
				height = 12;
				scale = 1f;
				aiStyle = 1;
				hostile = true;
				penetrate = 2;
			}
			else if (type == 927)
			{
				width = 40;
				height = 40;
				aiStyle = 75;
				friendly = true;
				tileCollide = false;
				melee = true;
				penetrate = -1;
				ownerHitCheck = true;
			}
			else if (type == 928)
			{
				netImportant = true;
				width = 34;
				height = 34;
				aiStyle = 14;
				friendly = true;
				penetrate = 2;
				melee = true;
				timeLeft = 250;
			}
			else if (type == 929)
			{
				width = 32;
				height = 32;
				aiStyle = 183;
				penetrate = -1;
				timeLeft = 18;
				ignoreWater = true;
				tileCollide = false;
				friendly = true;
				hostile = false;
				manualDirectionChange = true;
			}
			else if (type == 930)
			{
				width = 14;
				height = 14;
				aiStyle = 16;
				friendly = true;
				penetrate = -1;
				ranged = true;
			}
			else if (type == 931)
			{
				width = 30;
				height = 30;
				aiStyle = 171;
				alpha = 255;
				penetrate = 3;
				friendly = true;
				timeLeft = 240;
				magic = true;
				tileCollide = true;
				ignoreWater = true;
				extraUpdates = 1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 60;
			}
			else if (type == 932)
			{
				ranged = true;
				arrow = true;
				width = 10;
				height = 10;
				aiStyle = 181;
				penetrate = 5;
				friendly = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
				timeLeft = 120;
				alpha = 0;
				ignoreWater = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 60;
			}
			else if (type == 933)
			{
				width = 32;
				height = 32;
				aiStyle = 182;
				friendly = true;
				melee = true;
				tileCollide = false;
				ignoreWater = true;
				alpha = 255;
				extraUpdates = 1;
				usesLocalNPCImmunity = true;
				manualDirectionChange = true;
				localNPCHitCooldown = 15;
				penetrate = -1;
				noEnchantmentVisuals = true;
			}
			else if (type == 934)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 935)
			{
				netImportant = true;
				width = 18;
				height = 18;
				aiStyle = 7;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				timeLeft *= 10;
				extraUpdates = 3;
			}
			else if (type == 936)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				penetrate = 1;
				Opacity = 0.6f;
			}
			else if (type == 937)
			{
				alpha = 255;
				width = 10;
				height = 10;
				aiStyle = 1;
				hostile = false;
				friendly = true;
				penetrate = 3;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 10;
			}
			else if (type >= 938 && type <= 945)
			{
				width = 18;
				height = 18;
				aiStyle = 161;
				friendly = true;
				penetrate = -1;
				tileCollide = false;
				scale = 1f;
				ownerHitCheck = true;
				melee = true;
				extraUpdates = 1;
				timeLeft = 360;
				hide = true;
			}
			else if (type == 946)
			{
				netImportant = true;
				width = 10;
				height = 10;
				penetrate = -1;
				ignoreWater = true;
				tileCollide = false;
				friendly = true;
				minion = true;
				minionSlots = 1f;
				timeLeft *= 5;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 15;
				aiStyle = 156;
				scale = 0.75f;
				manualDirectionChange = true;
				hide = true;
			}
			else if (type == 947 || type == 948)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 15;
				friendly = true;
				penetrate = -1;
				melee = true;
				scale = 1f;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 10;
			}
			else if (type == 949)
			{
				width = 4;
				height = 4;
				aiStyle = 184;
				penetrate = -1;
				hostile = true;
				tileCollide = false;
			}
			else if (type == 950)
			{
				width = 104;
				height = 104;
				aiStyle = 186;
				friendly = true;
				magic = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 180;
				tileCollide = false;
				penetrate = -1;
			}
			else if (type == 951)
			{
				width = 26;
				height = 26;
				aiStyle = 67;
				penetrate = -1;
				netImportant = true;
				timeLeft *= 5;
				minion = true;
				minionSlots = 1f;
				friendly = true;
				decidesManualFallThrough = true;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 10;
			}
			else if (type == 952)
			{
				DefaultToWhip();
			}
			else if (type == 953)
			{
				width = 8;
				height = 8;
				aiStyle = 117;
				friendly = true;
				alpha = 255;
				ignoreWater = true;
				timeLeft = 60;
				tileCollide = false;
				penetrate = -1;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 80;
			}
			else if (type == 954)
			{
				width = 10;
				height = 10;
				aiStyle = 2;
				friendly = true;
				magic = true;
				alpha = 255;
				penetrate = 2;
				noEnchantmentVisuals = true;
			}
			else if (type == 955)
			{
				width = 18;
				height = 18;
				aiStyle = 5;
				friendly = true;
				penetrate = -1;
				alpha = 50;
				light = 1f;
				ranged = true;
			}
			else if (type == 956)
			{
				netImportant = true;
				width = 20;
				height = 28;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 957)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 124;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
				ignoreWater = true;
				tileCollide = false;
				manualDirectionChange = true;
			}
			else if (type == 958)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 959)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
			}
			else if (type == 960)
			{
				netImportant = true;
				width = 20;
				height = 20;
				aiStyle = 26;
				friendly = true;
				penetrate = -1;
				timeLeft *= 5;
				hide = true;
			}
			else if (type == 961)
			{
				width = 32;
				height = 32;
				aiStyle = 157;
				hostile = true;
				alpha = 255;
				tileCollide = false;
				ignoreWater = true;
				coldDamage = true;
			}
			else if (type == 962)
			{
				width = 32;
				height = 32;
				aiStyle = 1;
				hostile = true;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 220;
				coldDamage = true;
			}
			else if (type == 963)
			{
				netImportant = true;
				width = 30;
				height = 48;
				penetrate = -1;
				ignoreWater = true;
				tileCollide = false;
				friendly = true;
				minion = true;
				minionSlots = 0f;
				timeLeft *= 5;
				aiStyle = 62;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = 20;
			}
			else if (type == 965)
			{
				width = 40;
				height = 40;
				aiStyle = 187;
				hostile = true;
				tileCollide = false;
				ignoreWater = true;
				timeLeft = 300;
				alpha = 255;
			}
			else if (type == 964)
			{
				width = 40;
				height = 40;
				aiStyle = 187;
				alpha = 255;
				penetrate = 3;
				friendly = true;
				usesLocalNPCImmunity = true;
				localNPCHitCooldown = -1;
				ignoreWater = true;
				tileCollide = false;
				extraUpdates = 1;
				scale = 0.7f;
			}
			else if (type == 966)
			{
				width = 18;
				height = 60;
				aiStyle = 53;
				timeLeft = 7200;
				ignoreWater = true;
				sentry = true;
				netImportant = true;
			}
			else if (type == 967)
			{
				width = 14;
				height = 14;
				aiStyle = 28;
				friendly = true;
			}
			else if (type == 968)
			{
				width = 14;
				height = 14;
				aiStyle = 2;
				friendly = true;
				ranged = true;
				alpha = 255;
			}
			else if (type == 969)
			{
				width = 56;
				height = 64;
				aiStyle = 177;
				friendly = true;
				magic = true;
				tileCollide = true;
				penetrate = 12;
				usesIDStaticNPCImmunity = true;
				idStaticNPCHitCooldown = 20;
			}
			else if (type == 970)
			{
				netImportant = true;
				width = 10;
				height = 10;
				penetrate = -1;
				ignoreWater = true;
				tileCollide = false;
				friendly = true;
				minion = true;
				minionSlots = 1f;
				timeLeft = 60;
				aiStyle = 164;
				hide = true;
			}
			else if (type == 971)
			{
				width = 16;
				height = 16;
				aiStyle = 113;
				friendly = true;
				ranged = true;
				penetrate = -1;
				alpha = 255;
				hide = true;
			}
			else
			{
				active = false;
			}
			width = (int)((float)width * scale);
			height = (int)((float)height * scale);
			maxPenetrate = penetrate;
		}

		public void DefaultToWhip()
		{
			width = 18;
			height = 18;
			aiStyle = 165;
			friendly = true;
			penetrate = -1;
			tileCollide = false;
			scale = 1f;
			ownerHitCheck = true;
			extraUpdates = 1;
			usesLocalNPCImmunity = true;
			localNPCHitCooldown = -1;
		}

		public static int GetNextSlot()
		{
			int result = 1000;
			for (int i = 0; i < 1000; i++)
			{
				if (!Main.projectile[i].active)
				{
					result = i;
					break;
				}
			}
			return result;
		}

		public static int NewProjectile(IProjectileSource spawnSource, Vector2 position, Vector2 velocity, int Type, int Damage, float KnockBack, int Owner = 255, float ai0 = 0f, float ai1 = 0f)
		{
			return NewProjectile(spawnSource, position.X, position.Y, velocity.X, velocity.Y, Type, Damage, KnockBack, Owner, ai0, ai1);
		}

		public static int FindOldestProjectile()
		{
			int result = 1000;
			int num = 9999999;
			for (int i = 0; i < 1000; i++)
			{
				if (!Main.projectile[i].netImportant && Main.projectile[i].timeLeft < num)
				{
					result = i;
					num = Main.projectile[i].timeLeft;
				}
			}
			return result;
		}

		public static int NewProjectile(IProjectileSource spawnSource, float X, float Y, float SpeedX, float SpeedY, int Type, int Damage, float KnockBack, int Owner = 255, float ai0 = 0f, float ai1 = 0f)
		{
			int num = 1000;
			for (int i = 0; i < 1000; i++)
			{
				if (!Main.projectile[i].active)
				{
					num = i;
					break;
				}
			}
			if (num == 1000)
			{
				num = FindOldestProjectile();
			}
			Projectile projectile = Main.projectile[num];
			projectile.SetDefaults(Type);
			projectile.position.X = X - (float)projectile.width * 0.5f;
			projectile.position.Y = Y - (float)projectile.height * 0.5f;
			projectile.owner = Owner;
			projectile.velocity.X = SpeedX;
			projectile.velocity.Y = SpeedY;
			projectile.damage = Damage;
			projectile.knockBack = KnockBack;
			projectile.identity = num;
			projectile.gfxOffY = 0f;
			projectile.stepSpeed = 1f;
			projectile.wet = Collision.WetCollision(projectile.position, projectile.width, projectile.height);
			if (projectile.ignoreWater)
			{
				projectile.wet = false;
			}
			projectile.honeyWet = Collision.honey;
			Main.projectileIdentity[Owner, num] = num;
			FindBannerToAssociateTo(spawnSource, projectile);
			if (projectile.aiStyle == 1)
			{
				while (projectile.velocity.X >= 16f || projectile.velocity.X <= -16f || projectile.velocity.Y >= 16f || projectile.velocity.Y < -16f)
				{
					projectile.velocity.X *= 0.97f;
					projectile.velocity.Y *= 0.97f;
				}
			}
			if (Owner == Main.myPlayer)
			{
				switch (Type)
				{
				case 206:
					projectile.ai[0] = (float)Main.rand.Next(-100, 101) * 0.0005f;
					projectile.ai[1] = (float)Main.rand.Next(-100, 101) * 0.0005f;
					break;
				case 335:
					projectile.ai[1] = Main.rand.Next(4);
					break;
				case 358:
					projectile.ai[1] = (float)Main.rand.Next(10, 31) * 0.1f;
					break;
				case 406:
					projectile.ai[1] = (float)Main.rand.Next(10, 21) * 0.1f;
					break;
				default:
					projectile.ai[0] = ai0;
					projectile.ai[1] = ai1;
					break;
				}
			}
			if (Type == 434)
			{
				projectile.ai[0] = projectile.position.X;
				projectile.ai[1] = projectile.position.Y;
			}
			if (Type > 0 && Type < 972)
			{
				if (ProjectileID.Sets.NeedsUUID[Type])
				{
					projectile.projUUID = projectile.identity;
				}
				if (ProjectileID.Sets.StardustDragon[Type])
				{
					int num2 = Main.projectile[(int)projectile.ai[0]].projUUID;
					if (num2 >= 0)
					{
						projectile.ai[0] = num2;
					}
				}
			}
			if (Main.netMode != 0 && Owner == Main.myPlayer)
			{
				NetMessage.SendData(27, -1, -1, null, num);
			}
			if (Owner == Main.myPlayer)
			{
				if (ProjectileID.Sets.IsAGolfBall[Type] && Damage <= 0)
				{
					int num3 = 0;
					int num4 = 0;
					int num5 = 99999999;
					for (int j = 0; j < 1000; j++)
					{
						if (Main.projectile[j].active && ProjectileID.Sets.IsAGolfBall[Main.projectile[j].type] && Main.projectile[j].owner == Owner && Main.projectile[j].damage <= 0)
						{
							num3++;
							if (num5 > Main.projectile[j].timeLeft)
							{
								num4 = j;
								num5 = Main.projectile[j].timeLeft;
							}
						}
					}
					if (num3 > 10)
					{
						Main.projectile[num4].Kill();
					}
				}
				if (Type == 28)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 516)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 519)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 29)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 470)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 637)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 30)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 517)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 37)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 773)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 75)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 133)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 136)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 139)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 142)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 397)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 419)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 420)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 421)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 422)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 588)
				{
					projectile.timeLeft = 180;
				}
				if (Type == 779)
				{
					projectile.timeLeft = 60;
				}
				if (Type == 783)
				{
					projectile.timeLeft = 60;
				}
				if (Type == 862 || Type == 863)
				{
					projectile.timeLeft = 60;
				}
				if (Type == 443)
				{
					projectile.timeLeft = 300;
				}
				if (Type == 681)
				{
					projectile.timeLeft = 600;
				}
				if (Type == 684)
				{
					projectile.timeLeft = 60;
				}
				if (Type == 706)
				{
					projectile.timeLeft = 120;
				}
				if (Type == 680 && Main.player[projectile.owner].setSquireT2)
				{
					projectile.penetrate = 7;
				}
				if (Type == 777 || Type == 781 || Type == 794 || Type == 797 || Type == 800 || Type == 785 || Type == 788 || Type == 791 || Type == 903 || Type == 904 || Type == 905 || Type == 906 || Type == 910 || Type == 911)
				{
					projectile.timeLeft = 180;
				}
			}
			if (Type == 249)
			{
				projectile.frame = Main.rand.Next(5);
			}
			return num;
		}

		private static void FindBannerToAssociateTo(IProjectileSource spawnSource, Projectile next)
		{
			ProjectileSource_ProjectileParent projectileSource_ProjectileParent = spawnSource as ProjectileSource_ProjectileParent;
			if (projectileSource_ProjectileParent != null && projectileSource_ProjectileParent.ParentProjectile != null)
			{
				Projectile parentProjectile = projectileSource_ProjectileParent.ParentProjectile;
				next.bannerIdToRespondTo = parentProjectile.bannerIdToRespondTo;
				return;
			}
			ProjectileSource_NPC projectileSource_NPC = spawnSource as ProjectileSource_NPC;
			if (projectileSource_NPC != null && projectileSource_NPC.NPC != null)
			{
				int num = (next.bannerIdToRespondTo = Item.NPCtoBanner(projectileSource_NPC.NPC.BannerID()));
			}
		}

		public static Color GetGolfTrailColor(Projectile proj)
		{
			switch (proj.type)
			{
			default:
				return new Color(160, 160, 255, 50);
			case 739:
				return new Color(50, 50, 50, 80);
			case 740:
				return new Color(30, 50, 255, 40);
			case 741:
				return new Color(150, 90, 60, 90);
			case 742:
				return new Color(30, 255, 170, 30);
			case 743:
				return new Color(30, 255, 30, 40);
			case 744:
				return new Color(190, 255, 30, 50);
			case 745:
				return new Color(255, 130, 30, 50);
			case 746:
				return new Color(255, 50, 110, 50);
			case 747:
				return new Color(130, 10, 200, 40);
			case 748:
				return new Color(255, 30, 50, 50);
			case 749:
				return new Color(100, 180, 255, 30);
			case 750:
				return new Color(50, 240, 160, 30);
			case 751:
				return new Color(220, 80, 220, 70);
			case 752:
				return new Color(255, 180, 50, 30);
			}
		}

		public void StatusNPC(int i)
		{
			NPC nPC = Main.npc[i];
			if ((melee || ProjectileID.Sets.IsAWhip[type]) && Main.player[owner].meleeEnchant > 0 && !noEnchantments)
			{
				byte meleeEnchant = Main.player[owner].meleeEnchant;
				if (meleeEnchant == 1)
				{
					nPC.AddBuff(70, 60 * Main.rand.Next(5, 10));
				}
				if (meleeEnchant == 2)
				{
					nPC.AddBuff(39, 60 * Main.rand.Next(3, 7));
				}
				if (meleeEnchant == 3)
				{
					nPC.AddBuff(24, 60 * Main.rand.Next(3, 7));
				}
				if (meleeEnchant == 5)
				{
					nPC.AddBuff(69, 60 * Main.rand.Next(10, 20));
				}
				if (meleeEnchant == 6)
				{
					nPC.AddBuff(31, 60 * Main.rand.Next(1, 4));
				}
				if (meleeEnchant == 8)
				{
					nPC.AddBuff(20, 60 * Main.rand.Next(5, 10));
				}
				if (meleeEnchant == 4)
				{
					nPC.AddBuff(72, 120);
				}
			}
			if (type == 195)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(70, 60 * Main.rand.Next(5, 11));
				}
				else
				{
					nPC.AddBuff(20, 60 * Main.rand.Next(10, 21));
				}
			}
			switch (type)
			{
			case 841:
				nPC.AddBuff(307, 240);
				break;
			case 952:
				nPC.AddBuff(326, 240);
				break;
			case 847:
				nPC.AddBuff(309, 240);
				break;
			case 849:
				nPC.AddBuff(310, 240);
				break;
			case 913:
				if (localAI[0] == 0f)
				{
					nPC.AddBuff(313, 240);
				}
				nPC.AddBuff(24, 240);
				break;
			case 912:
				nPC.AddBuff(44, 240);
				break;
			case 914:
				nPC.AddBuff(20, 240);
				nPC.AddBuff(315, 240);
				break;
			case 848:
				nPC.AddBuff(319, 240);
				break;
			case 915:
				nPC.AddBuff(316, 240);
				break;
			}
			if (type == 664 && Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(3, 6));
			}
			if (type == 666 && Main.rand.Next(2) == 0)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(3, 9));
			}
			if (type == 668 && Main.rand.Next(3) != 0)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(6, 9));
			}
			if (type == 567 || type == 568)
			{
				nPC.AddBuff(20, 60 * Main.rand.Next(5, 11));
			}
			if (type == 598 && ai[1] == (float)i)
			{
				nPC.AddBuff(169, 900);
			}
			if (type == 636 && ai[1] == (float)i)
			{
				nPC.AddBuff(189, 300);
			}
			if (type == 971 && ai[1] == (float)i)
			{
				nPC.AddBuff(337, 540);
			}
			if (type == 611)
			{
				nPC.AddBuff(189, 300);
			}
			if (type == 612)
			{
				nPC.AddBuff(189, 300);
			}
			if (type == 953)
			{
				nPC.AddBuff(189, 300);
			}
			if (type == 711)
			{
				nPC.AddBuff(203, 600);
			}
			if (type == 706)
			{
				nPC.AddBuff(24, 480);
			}
			if (type == 614 && ai[1] == (float)i)
			{
				nPC.AddBuff(183, 900);
			}
			if (type == 585)
			{
				nPC.AddBuff(153, 60 * Main.rand.Next(5, 11));
			}
			if (type == 583)
			{
				nPC.AddBuff(20, 60 * Main.rand.Next(3, 6));
			}
			if (type == 524)
			{
				nPC.AddBuff(69, 60 * Main.rand.Next(3, 8));
			}
			if ((type == 504 || type == 954) && Main.rand.Next(2) == 0)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(24, Main.rand.Next(60, 180));
				}
				else
				{
					nPC.AddBuff(24, Main.rand.Next(30, 120));
				}
			}
			if ((type == 694 || type == 695 || type == 696) && Main.player[owner].setHuntressT2)
			{
				nPC.AddBuff(204, Main.rand.Next(8, 18) * 30);
			}
			if (type == 545 && Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(24, Main.rand.Next(60, 240));
			}
			if (type == 553)
			{
				nPC.AddBuff(24, Main.rand.Next(180, 480));
			}
			if (type == 552 && Main.rand.Next(3) != 0)
			{
				nPC.AddBuff(44, Main.rand.Next(120, 320));
			}
			if (type == 495)
			{
				nPC.AddBuff(153, Main.rand.Next(120, 300));
			}
			if (type == 497)
			{
				nPC.AddBuff(153, Main.rand.Next(60, 180));
			}
			if (type == 496)
			{
				nPC.AddBuff(153, Main.rand.Next(240, 480));
			}
			if (type == 476)
			{
				nPC.AddBuff(151, 30);
			}
			if (type == 523)
			{
				nPC.AddBuff(20, 60 * Main.rand.Next(10, 30));
			}
			if (type == 478 || type == 480)
			{
				nPC.AddBuff(39, 60 * Main.rand.Next(3, 7));
			}
			if (type == 479)
			{
				nPC.AddBuff(69, 60 * Main.rand.Next(7, 15));
			}
			if (type == 379)
			{
				nPC.AddBuff(70, 60 * Main.rand.Next(2, 5));
			}
			if (type >= 390 && type <= 392)
			{
				nPC.AddBuff(70, 60 * Main.rand.Next(2, 5));
			}
			if (type == 374)
			{
				nPC.AddBuff(20, 60 * Main.rand.Next(4, 7));
			}
			if (type == 376)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(3, 7));
			}
			if (type >= 399 && type <= 402)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(3, 7));
			}
			if (type == 295 || type == 296)
			{
				nPC.AddBuff(24, 60 * Main.rand.Next(8, 16));
			}
			if ((melee || ranged) && !npcProj && Main.player[owner].frostBurn && !noEnchantments)
			{
				nPC.AddBuff(324, 60 * Main.rand.Next(5, 15));
			}
			if (melee && Main.player[owner].magmaStone && !noEnchantments)
			{
				if (Main.rand.Next(7) == 0)
				{
					nPC.AddBuff(323, 360);
				}
				else if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(323, 120);
				}
				else
				{
					nPC.AddBuff(323, 60);
				}
			}
			if (type == 287)
			{
				nPC.AddBuff(72, 120);
			}
			if (type == 285)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(31, 180);
				}
				else
				{
					nPC.AddBuff(31, 60);
				}
			}
			if (type == 2 && Main.rand.Next(3) == 0)
			{
				nPC.AddBuff(24, 180);
			}
			if (type == 172)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(44, 180);
				}
			}
			else if (type == 15)
			{
				if (Main.rand.Next(2) == 0)
				{
					nPC.AddBuff(24, 300);
				}
			}
			else if (type == 253)
			{
				nPC.AddBuff(44, 480);
			}
			else if (type == 19)
			{
				if (Main.rand.Next(5) == 0)
				{
					nPC.AddBuff(24, 180);
				}
			}
			else if (type == 33)
			{
				if (Main.rand.Next(5) == 0)
				{
					nPC.AddBuff(20, 420);
				}
			}
			else if (type == 34)
			{
				if (Main.rand.Next(2) == 0)
				{
					nPC.AddBuff(24, Main.rand.Next(240, 480));
				}
			}
			else if (type == 948)
			{
				if (Main.rand.Next(6) == 0)
				{
					nPC.AddBuff(24, 60 * Main.rand.Next(2, 4));
				}
			}
			else if (type == 35)
			{
				if (Main.rand.Next(2) == 0)
				{
					nPC.AddBuff(24, 300);
				}
			}
			else if (type == 54)
			{
				if (Main.rand.Next(2) == 0)
				{
					nPC.AddBuff(20, 600);
				}
			}
			else if (type == 267)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(20, 3600);
				}
				else
				{
					nPC.AddBuff(20, 1800);
				}
			}
			else if (type == 63)
			{
				if (Main.rand.Next(5) != 0)
				{
					nPC.AddBuff(31, 60 * Main.rand.Next(2, 5));
				}
			}
			else if (type == 85 || type == 188)
			{
				nPC.AddBuff(24, 1200);
			}
			else if (type == 95 || type == 103 || type == 104 || type == 482)
			{
				nPC.AddBuff(39, 420);
			}
			else if (type == 278 || type == 279 || type == 280)
			{
				nPC.AddBuff(69, 600);
			}
			else if (type == 282 || type == 283)
			{
				nPC.AddBuff(70, 600);
			}
			if (type == 163 || type == 310)
			{
				if (Main.rand.Next(3) == 0)
				{
					nPC.AddBuff(24, 600);
				}
				else
				{
					nPC.AddBuff(24, 300);
				}
			}
			else if (type == 98)
			{
				nPC.AddBuff(20, 600);
			}
			else if (type == 184)
			{
				nPC.AddBuff(20, 900);
			}
			else if (type == 265)
			{
				nPC.AddBuff(20, 1800);
			}
			else if (type == 355)
			{
				nPC.AddBuff(70, 1800);
			}
		}

		public void StatusPvP(int i)
		{
			if ((melee || ProjectileID.Sets.IsAWhip[type]) && Main.player[owner].meleeEnchant > 0 && !noEnchantments)
			{
				byte meleeEnchant = Main.player[owner].meleeEnchant;
				if (meleeEnchant == 1)
				{
					Main.player[i].AddBuff(70, 60 * Main.rand.Next(5, 10), quiet: false);
				}
				if (meleeEnchant == 2)
				{
					Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), quiet: false);
				}
				if (meleeEnchant == 3)
				{
					Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), quiet: false);
				}
				if (meleeEnchant == 5)
				{
					Main.player[i].AddBuff(69, 60 * Main.rand.Next(10, 20), quiet: false);
				}
				if (meleeEnchant == 6)
				{
					Main.player[i].AddBuff(31, 60 * Main.rand.Next(1, 4), quiet: false);
				}
				if (meleeEnchant == 8)
				{
					Main.player[i].AddBuff(20, 60 * Main.rand.Next(5, 10), quiet: false);
				}
			}
			if (type == 295 || type == 296)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16), quiet: false);
			}
			if (type >= 399 && type <= 402)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), quiet: false);
			}
			if (type == 478 || type == 480)
			{
				Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), quiet: false);
			}
			if ((melee || ranged) && Main.player[owner].frostBurn && !noEnchantments)
			{
				Main.player[i].AddBuff(324, 60 * Main.rand.Next(1, 8), quiet: false);
			}
			if (melee && Main.player[owner].magmaStone && !noEnchantments)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(24, 360, quiet: false);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 240, quiet: false);
				}
				else
				{
					Main.player[i].AddBuff(24, 120, quiet: false);
				}
			}
			if (type == 2 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(24, 180, quiet: false);
			}
			if (type == 172)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(44, 240, quiet: false);
				}
			}
			else if (type == 15)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 300, quiet: false);
				}
			}
			else if (type == 253)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(44, 480, quiet: false);
				}
			}
			else if (type == 19)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(24, 180, quiet: false);
				}
			}
			else if (type == 33)
			{
				if (Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(20, 420, quiet: false);
				}
			}
			else if (type == 34)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(24, 240, quiet: false);
				}
			}
			else if (type == 35)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(24, 180, quiet: false);
				}
			}
			else if (type == 54)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(20, 600, quiet: false);
				}
			}
			else if (type == 267)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(20, 3600, quiet: false);
				}
				else
				{
					Main.player[i].AddBuff(20, 1800, quiet: false);
				}
			}
			else if (type == 63)
			{
				if (Main.rand.Next(3) != 0)
				{
					Main.player[i].AddBuff(31, 120, quiet: false);
				}
			}
			else if (type == 85 || type == 188)
			{
				Main.player[i].AddBuff(24, 1200, quiet: false);
			}
			else if (type == 95 || type == 103 || type == 104 || type == 482)
			{
				Main.player[i].AddBuff(39, 420, quiet: false);
			}
			else if (type == 278 || type == 279 || type == 280)
			{
				Main.player[i].AddBuff(69, 900, quiet: false);
			}
			else if (type == 282 || type == 283)
			{
				Main.player[i].AddBuff(70, 600, quiet: false);
			}
			if (type == 163 || type == 310)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(24, 600, quiet: false);
				}
				else
				{
					Main.player[i].AddBuff(24, 300, quiet: false);
				}
			}
			else if (type == 265)
			{
				Main.player[i].AddBuff(20, 1200, quiet: false);
			}
			else if (type == 355)
			{
				Main.player[i].AddBuff(70, 1800, quiet: false);
			}
		}

		public void ghostHurt(int dmg, Vector2 Position)
		{
			if (!magic || damage <= 0)
			{
				return;
			}
			int num = damage;
			if (dmg <= 1)
			{
				return;
			}
			int num2 = -1;
			int num3 = 1500;
			if (Main.player[Main.myPlayer].ghostDmg > (float)num3)
			{
				return;
			}
			Main.player[Main.myPlayer].ghostDmg += num;
			int[] array = new int[200];
			int num4 = 0;
			_ = new int[200];
			int num5 = 0;
			for (int i = 0; i < 200; i++)
			{
				if (!Main.npc[i].CanBeChasedBy(this))
				{
					continue;
				}
				float num6 = Math.Abs(Main.npc[i].position.X + (float)(Main.npc[i].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.npc[i].position.Y + (float)(Main.npc[i].height / 2) - position.Y + (float)(height / 2));
				if (num6 < 800f)
				{
					if (Collision.CanHit(position, 1, 1, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height) && num6 > 50f)
					{
						array[num5] = i;
						num5++;
					}
					else if (num5 == 0)
					{
						array[num4] = i;
						num4++;
					}
				}
			}
			if (num4 != 0 || num5 != 0)
			{
				num2 = ((num5 <= 0) ? array[Main.rand.Next(num4)] : array[Main.rand.Next(num5)]);
				float num7 = Main.rand.Next(-100, 101);
				float num8 = Main.rand.Next(-100, 101);
				float num9 = (float)Math.Sqrt(num7 * num7 + num8 * num8);
				num9 = 4f / num9;
				num7 *= num9;
				num8 *= num9;
				NewProjectile(GetProjectileSource_FromThis(), Position.X, Position.Y, num7, num8, 356, num, 0f, owner, num2);
			}
		}

		public void ghostHeal(int dmg, Vector2 Position)
		{
			float num = 0.2f;
			num -= (float)numHits * 0.05f;
			if (num <= 0f)
			{
				return;
			}
			float num2 = (float)dmg * num;
			if ((int)num2 <= 0 || Main.player[Main.myPlayer].lifeSteal <= 0f)
			{
				return;
			}
			Main.player[Main.myPlayer].lifeSteal -= num2;
			if (!magic)
			{
				return;
			}
			float num3 = 0f;
			int num4 = owner;
			for (int i = 0; i < 255; i++)
			{
				if (Main.player[i].active && !Main.player[i].dead && ((!Main.player[owner].hostile && !Main.player[i].hostile) || Main.player[owner].team == Main.player[i].team) && Math.Abs(Main.player[i].position.X + (float)(Main.player[i].width / 2) - position.X + (float)(width / 2)) + Math.Abs(Main.player[i].position.Y + (float)(Main.player[i].height / 2) - position.Y + (float)(height / 2)) < 1200f && (float)(Main.player[i].statLifeMax2 - Main.player[i].statLife) > num3)
				{
					num3 = Main.player[i].statLifeMax2 - Main.player[i].statLife;
					num4 = i;
				}
			}
			NewProjectile(GetProjectileSource_FromThis(), Position.X, Position.Y, 0f, 0f, 298, 0, 0f, owner, num4, num2);
		}

		public void vampireHeal(int dmg, Vector2 Position)
		{
			float num = (float)dmg * 0.075f;
			if ((int)num != 0 && !(Main.player[Main.myPlayer].lifeSteal <= 0f))
			{
				Main.player[Main.myPlayer].lifeSteal -= num;
				int num2 = owner;
				NewProjectile(GetProjectileSource_FromThis(), Position.X, Position.Y, 0f, 0f, 305, 0, 0f, owner, num2, num);
			}
		}

		public void StatusPlayer(int i)
		{
			if (Main.player[i].creativeGodMode)
			{
				return;
			}
			if (type == 472)
			{
				Main.player[i].AddBuff(149, Main.rand.Next(30, 150));
			}
			if (type == 961)
			{
				Main.player[i].AddBuff(47, 20);
			}
			if (type == 467)
			{
				Main.player[i].AddBuff(24, Main.rand.Next(30, 150));
			}
			if (type == 581)
			{
				if (Main.expertMode)
				{
					Main.player[i].AddBuff(164, Main.rand.Next(300, 540));
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(164, Main.rand.Next(360, 720));
				}
			}
			if (type == 687)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(7, 11));
			}
			if (type == 258 && Main.rand.Next(2) == 0)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(5, 8));
			}
			if (type == 572 && Main.rand.Next(3) != 0)
			{
				Main.player[i].AddBuff(20, Main.rand.Next(120, 240));
			}
			if (type == 276)
			{
				if (Main.expertMode)
				{
					Main.player[i].AddBuff(20, Main.rand.Next(120, 540));
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(20, Main.rand.Next(180, 420));
				}
			}
			if (type == 436 && Main.rand.Next(5) >= 2)
			{
				Main.player[i].AddBuff(31, 300);
			}
			if (type == 435 && Main.rand.Next(3) != 0)
			{
				Main.player[i].AddBuff(144, 300);
			}
			if (type == 682)
			{
				Main.player[i].AddBuff(196, 300);
			}
			if (type == 437)
			{
				Main.player[i].AddBuff(144, 60 * Main.rand.Next(4, 9));
			}
			if (type == 348)
			{
				if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(46, 600);
				}
				else
				{
					Main.player[i].AddBuff(46, 300);
				}
				if (Main.rand.Next(3) != 0)
				{
					if (Main.rand.Next(16) == 0)
					{
						Main.player[i].AddBuff(47, 60);
					}
					else if (Main.rand.Next(12) == 0)
					{
						Main.player[i].AddBuff(47, 40);
					}
					else if (Main.rand.Next(8) == 0)
					{
						Main.player[i].AddBuff(47, 20);
					}
				}
			}
			if (type == 349)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(46, 600);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(46, 300);
				}
			}
			if (type >= 399 && type <= 402 && !hostile)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7));
			}
			if (type == 55 || type == 719)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(20, 600);
				}
				else if (Main.expertMode)
				{
					Main.player[i].AddBuff(20, Main.rand.Next(60, 300));
				}
			}
			if (type == 44 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(22, 900);
			}
			if (type == 293)
			{
				Main.player[i].AddBuff(80, 60 * Main.rand.Next(2, 7));
			}
			if (type == 299)
			{
				Main.player[i].AddBuff(23, 240);
			}
			if (type == 82 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(24, 420);
			}
			if (type == 285 && !hostile)
			{
				if (Main.rand.Next(3) == 0)
				{
					Main.player[i].AddBuff(31, 180);
				}
				else
				{
					Main.player[i].AddBuff(31, 60);
				}
			}
			if (type == 96 || type == 101)
			{
				if (Main.rand.Next(6) == 0)
				{
					Main.player[i].AddBuff(39, 180);
				}
				else if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(39, 180);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(39, 120);
				}
			}
			else if (type == 288)
			{
				Main.player[i].AddBuff(69, 900);
			}
			else if (type == 253 && !hostile)
			{
				Main.player[i].AddBuff(44, 600);
			}
			if (type == 291 || type == 292)
			{
				Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16));
			}
			if (type == 98)
			{
				Main.player[i].AddBuff(20, 600);
			}
			if (type == 184)
			{
				Main.player[i].AddBuff(20, 900);
			}
			if (type == 290)
			{
				Main.player[i].AddBuff(32, 60 * Main.rand.Next(5, 16));
			}
			if (type == 174)
			{
				Main.player[i].AddBuff(46, 1200);
				if (!Main.player[i].frozen && Main.rand.Next(20) == 0)
				{
					Main.player[i].AddBuff(47, 90);
				}
				else if (!Main.player[i].frozen && Main.expertMode && Main.rand.Next(20) == 0)
				{
					Main.player[i].AddBuff(47, 60);
				}
			}
			if (type == 257)
			{
				Main.player[i].AddBuff(46, 2700);
				if (!Main.player[i].frozen && Main.rand.Next(5) == 0)
				{
					Main.player[i].AddBuff(47, 60);
				}
			}
			if (type == 177)
			{
				Main.player[i].AddBuff(46, 1500);
				if (!Main.player[i].frozen && Main.rand.Next(10) == 0)
				{
					Main.player[i].AddBuff(47, Main.rand.Next(30, 120));
				}
			}
			if (type == 128 && Main.rand.Next(3) == 0)
			{
				Main.player[i].AddBuff(44, 360);
			}
			if (type == 176)
			{
				if (Main.rand.Next(4) == 0)
				{
					Main.player[i].AddBuff(20, 1200);
				}
				else if (Main.rand.Next(2) == 0)
				{
					Main.player[i].AddBuff(20, 300);
				}
			}
		}

		public bool CanHitWithMeleeWeapon(Entity ent)
		{
			if (Distance(ent.Center) > ownerHitCheckDistance)
			{
				return false;
			}
			if (!Collision.CanHit(Main.player[owner].position, Main.player[owner].width, Main.player[owner].height, ent.position, ent.width, ent.height) && !Collision.CanHitLine(Main.player[owner].Center + new Vector2(Main.player[owner].direction * Main.player[owner].width / 2, Main.player[owner].gravDir * (float)(-Main.player[owner].height) / 3f), 0, 0, ent.Center + new Vector2(0f, -ent.height / 3), 0, 0) && !Collision.CanHitLine(Main.player[owner].Center + new Vector2(Main.player[owner].direction * Main.player[owner].width / 2, Main.player[owner].gravDir * (float)(-Main.player[owner].height) / 3f), 0, 0, ent.Center, 0, 0))
			{
				return Collision.CanHitLine(Main.player[owner].Center + new Vector2(Main.player[owner].direction * Main.player[owner].width / 2, 0f), 0, 0, ent.Center + new Vector2(0f, ent.height / 3), 0, 0);
			}
			return true;
		}

		public bool CanHitWithOwnBody(Entity ent)
		{
			if (Distance(ent.Center) > ownerHitCheckDistance)
			{
				return false;
			}
			bool flag = Collision.CanHit(base.position, width, height, ent.position, ent.width, ent.height) || Collision.CanHitLine(base.Center + new Vector2(direction * width / 2, -height / 3), 0, 0, ent.Center + new Vector2(0f, -ent.height / 3), 0, 0) || Collision.CanHitLine(base.Center + new Vector2(direction * width / 2, -height / 3), 0, 0, ent.Center, 0, 0) || Collision.CanHitLine(base.Center + new Vector2(direction * width / 2, 0f), 0, 0, ent.Center + new Vector2(0f, ent.height / 3), 0, 0);
			float num = ProjectileID.Sets.ExtendedCanHitCheckRange[type];
			if (num != 0f)
			{
				if (flag)
				{
					return flag;
				}
				GenSearch genSearch = ProjectileID.Sets.ExtendedCanHitCheckSearch[type];
				Vector2 position = base.Top + new Vector2(0f, 0f - num);
				Vector2 position2 = ent.Top + new Vector2(0f, 0f - num);
				if (genSearch != null)
				{
					if (WorldUtils.Find(base.Top.ToTileCoordinates(), Searches.Chain(genSearch, _cachedConditions_notNull, _cachedConditions_solid), out var result))
					{
						position = result.ToWorldCoordinates();
					}
					if (WorldUtils.Find(ent.Top.ToTileCoordinates(), Searches.Chain(genSearch, _cachedConditions_notNull, _cachedConditions_solid), out result))
					{
						position2 = result.ToWorldCoordinates();
					}
				}
				flag |= Collision.CanHitLine(position, 0, 0, position2, 0, 0);
			}
			return flag;
		}

		public void Damage()
		{
			if (type == 18 || type == 72 || type == 86 || type == 87 || aiStyle == 31 || aiStyle == 32 || type == 226 || type == 378 || type == 613 || type == 650 || type == 882 || type == 888 || type == 895 || type == 896 || (type == 434 && localAI[0] != 0f) || type == 439 || type == 444 || (type == 451 && ((int)(ai[0] - 1f) / penetrate == 0 || ai[1] < 5f) && ai[0] != 0f) || type == 500 || type == 653 || type == 460 || type == 633 || type == 600 || type == 601 || type == 602 || type == 535 || (type == 631 && localAI[1] == 0f) || type == 651 || (type == 188 && localAI[0] < 5f) || (aiStyle == 137 && ai[0] != 0f) || aiStyle == 138 || (type == 261 && velocity.Length() < 1.5f) || (type == 818 && ai[0] < 1f) || type == 831 || type == 970 || (type == 833 && ai[0] == 4f) || (type == 834 && ai[0] == 4f) || (type == 835 && ai[0] == 4f) || (type == 281 && ai[0] == -3f) || ((type == 598 || type == 636 || type == 614 || type == 971) && ai[0] == 1f) || (type == 923 && localAI[0] <= 60f) || (type == 919 && localAI[0] <= 60f) || (aiStyle == 15 && ai[0] == 0f && localAI[1] <= 12f) || type == 861 || (aiStyle == 93 && ai[0] != 0f && ai[0] != 2f) || (aiStyle == 10 && localAI[1] == -1f) || (Main.projPet[type] && type != 266 && type != 407 && type != 317 && (type != 388 || ai[0] != 2f) && (type < 390 || type > 392) && (type < 393 || type > 395) && (type != 533 || !(ai[0] >= 6f) || !(ai[0] <= 8f)) && (type < 625 || type > 628) && (type != 755 || ai[0] == 0f) && (type != 946 || ai[0] == 0f) && type != 758 && type != 951 && type != 963 && (type != 759 || frame == Main.projFrames[type] - 1) && type != 833 && type != 834 && type != 835 && type != 864 && (type != 623 || ai[0] != 2f)))
			{
				return;
			}
			Rectangle myRect = new Rectangle((int)position.X, (int)position.Y, width, height);
			if (type == 85 || type == 101)
			{
				int num = 30;
				myRect.X -= num;
				myRect.Y -= num;
				myRect.Width += num * 2;
				myRect.Height += num * 2;
			}
			if (type == 188)
			{
				int num2 = 20;
				myRect.X -= num2;
				myRect.Y -= num2;
				myRect.Width += num2 * 2;
				myRect.Height += num2 * 2;
			}
			if (aiStyle == 29)
			{
				int num3 = 4;
				myRect.X -= num3;
				myRect.Y -= num3;
				myRect.Width += num3 * 2;
				myRect.Height += num3 * 2;
			}
			if (friendly && owner == Main.myPlayer && !npcProj)
			{
				if ((aiStyle == 16 && !ProjectileID.Sets.RocketsSkipDamageForPlayers[type] && (timeLeft <= 1 || type == 108 || type == 164)) || (type == 286 && localAI[1] == -1f))
				{
					int myPlayer = Main.myPlayer;
					if (Main.player[myPlayer].active && !Main.player[myPlayer].dead && !Main.player[myPlayer].immune && (!ownerHitCheck || CanHitWithMeleeWeapon(Main.player[myPlayer])))
					{
						Rectangle value = new Rectangle((int)Main.player[myPlayer].position.X, (int)Main.player[myPlayer].position.Y, Main.player[myPlayer].width, Main.player[myPlayer].height);
						if (myRect.Intersects(value))
						{
							if (Main.player[myPlayer].position.X + (float)(Main.player[myPlayer].width / 2) < position.X + (float)(width / 2))
							{
								direction = -1;
							}
							else
							{
								direction = 1;
							}
							int num4 = Main.DamageVar(damage, 0f - Main.player[myPlayer].luck);
							int playerIndex = owner;
							bool pvp = true;
							if (type == 108)
							{
								playerIndex = -1;
								pvp = false;
							}
							if (Main.player[myPlayer].Hurt(PlayerDeathReason.ByProjectile(playerIndex, whoAmI), num4, direction, pvp) > 0.0 && !Main.player[myPlayer].dead)
							{
								StatusPlayer(myPlayer);
							}
							if (trap)
							{
								Main.player[myPlayer].trapDebuffSource = true;
								if (Main.player[myPlayer].dead)
								{
									AchievementsHelper.HandleSpecialEvent(Main.player[myPlayer], 4);
								}
							}
						}
					}
				}
				if (!minion)
				{
					CutTiles();
				}
			}
			if (owner == Main.myPlayer)
			{
				float num5 = 1f;
				if (ProjectileID.Sets.IsARocketThatDealsDoubleDamageToPrimaryEnemy[type] && timeLeft > 3)
				{
					num5 *= 2f;
				}
				if (ProjectileID.Sets.IsAMineThatDealsTripleDamageWhenStationary[type] && velocity.Length() < 0.5f)
				{
					num5 *= 3f;
				}
				if (type == 34 && penetrate == 1)
				{
					num5 *= 1f;
				}
				if (aiStyle == 15 && ai[0] == 0f)
				{
					num5 *= 1.2f;
				}
				if (aiStyle == 15 && (ai[0] == 1f || ai[0] == 2f))
				{
					num5 *= 2f;
				}
				if (type == 877 || type == 879 || type == 878)
				{
					num5 = 0.1f + Main.player[owner].velocity.Length() / 7f * 0.9f;
				}
				if (type == 968)
				{
					num5 = 1f;
					switch ((int)ai[1])
					{
					case 0:
						num5 = 1.5f;
						break;
					case 1:
						num5 = 1f;
						break;
					case 2:
						num5 = 1.5f;
						break;
					case 3:
						num5 = 0.1f;
						break;
					case 4:
						num5 = 1f;
						break;
					case 5:
						num5 = 1f;
						break;
					case 6:
						num5 = 1f;
						break;
					case 7:
						num5 = 0.25f;
						break;
					case 8:
						num5 = 1f;
						break;
					case 9:
						num5 = 0.75f;
						break;
					case 10:
						num5 = 0.5f;
						break;
					case 11:
						num5 = 0.5f;
						break;
					case 12:
						num5 = 0.5f;
						break;
					case 13:
						num5 = 0.5f;
						break;
					case 14:
						num5 = 0.5f;
						break;
					case 15:
						num5 = 0.5f;
						break;
					case 16:
						num5 = 0.5f;
						break;
					case 17:
						num5 = 1.5f;
						break;
					case 18:
						num5 = 1.6f;
						break;
					case 19:
						num5 = 1.8f;
						break;
					case 20:
						num5 = 1.9f;
						break;
					case 21:
						num5 = 1.7f;
						break;
					case 22:
						num5 = 2f;
						break;
					case 23:
						num5 = 1.9f;
						break;
					}
				}
				if (damage > 0)
				{
					int[] array = localNPCImmunity;
					if (type == 626 || type == 627 || type == 628)
					{
						Projectile projectile = FindStardustDragonHeadOfOwner();
						if (projectile != null)
						{
							array = projectile.localNPCImmunity;
						}
					}
					for (int i = 0; i < 200; i++)
					{
						bool flag = (!usesLocalNPCImmunity && !usesIDStaticNPCImmunity) || (usesLocalNPCImmunity && array[i] == 0) || (usesIDStaticNPCImmunity && IsNPCIndexImmuneToProjectileType(type, i));
						if (!(Main.npc[i].active && !Main.npc[i].dontTakeDamage && flag) || (Main.npc[i].aiStyle == 112 && Main.npc[i].ai[2] > 1f))
						{
							continue;
						}
						Main.npc[i].position += Main.npc[i].netOffset;
						bool flag2 = !Main.npc[i].friendly;
						flag2 |= type == 318;
						flag2 |= Main.npc[i].type == 22 && owner < 255 && Main.player[owner].killGuide;
						flag2 |= Main.npc[i].type == 54 && owner < 255 && Main.player[owner].killClothier;
						if (owner < 255 && !Main.player[owner].CanNPCBeHitByPlayerOrPlayerProjectile(Main.npc[i]))
						{
							flag2 = false;
						}
						bool flag3 = Main.npc[i].friendly && !Main.npc[i].dontTakeDamageFromHostiles;
						if ((friendly && flag2) || (hostile && flag3))
						{
							bool flag4 = maxPenetrate == 1 && !usesLocalNPCImmunity && !usesIDStaticNPCImmunity;
							if (owner < 0 || Main.npc[i].immune[owner] == 0 || flag4)
							{
								bool flag5 = false;
								if (type == 11 && (Main.npc[i].type == 47 || Main.npc[i].type == 57))
								{
									flag5 = true;
								}
								else if (type == 31 && Main.npc[i].type == 69)
								{
									flag5 = true;
								}
								else if (Main.npc[i].trapImmune && trap)
								{
									flag5 = true;
								}
								else if (Main.npc[i].immortal && npcProj)
								{
									flag5 = true;
								}
								if (!flag5 && (Main.npc[i].noTileCollide || !ownerHitCheck || CanHitWithMeleeWeapon(Main.npc[i])))
								{
									bool flag6 = false;
									if (Main.npc[i].type == 414)
									{
										Rectangle rect = Main.npc[i].getRect();
										int num6 = 8;
										rect.X -= num6;
										rect.Y -= num6;
										rect.Width += num6 * 2;
										rect.Height += num6 * 2;
										flag6 = Colliding(myRect, rect);
									}
									else
									{
										flag6 = Colliding(myRect, Main.npc[i].getRect());
									}
									if (flag6)
									{
										if (type == 876)
										{
											Vector2 vector = position;
											if (Main.rand.Next(20) == 0)
											{
												tileCollide = false;
												position.X += Main.rand.Next(-256, 257);
											}
											if (Main.rand.Next(20) == 0)
											{
												tileCollide = false;
												position.Y += Main.rand.Next(-256, 257);
											}
											if (Main.rand.Next(2) == 0)
											{
												tileCollide = false;
											}
											if (Main.rand.Next(3) != 0)
											{
												vector = position;
												position -= velocity * Main.rand.Next(0, 40);
												if (tileCollide && Collision.SolidTiles(position, width, height))
												{
													position = vector;
													position -= velocity * Main.rand.Next(0, 40);
													if (tileCollide && Collision.SolidTiles(position, width, height))
													{
														position = vector;
													}
												}
											}
											velocity *= 0.6f;
											if (Main.rand.Next(7) == 0)
											{
												velocity.X += (float)Main.rand.Next(30, 31) * 0.01f;
											}
											if (Main.rand.Next(7) == 0)
											{
												velocity.Y += (float)Main.rand.Next(30, 31) * 0.01f;
											}
											damage = (int)((double)damage * 0.9);
											knockBack *= 0.9f;
											if (Main.rand.Next(20) == 0)
											{
												knockBack *= 10f;
											}
											if (Main.rand.Next(50) == 0)
											{
												damage *= 10;
											}
											if (Main.rand.Next(7) == 0)
											{
												vector = position;
												position.X += Main.rand.Next(-64, 65);
												if (tileCollide && Collision.SolidTiles(position, width, height))
												{
													position = vector;
												}
											}
											if (Main.rand.Next(7) == 0)
											{
												vector = position;
												position.Y += Main.rand.Next(-64, 65);
												if (tileCollide && Collision.SolidTiles(position, width, height))
												{
													position = vector;
												}
											}
											if (Main.rand.Next(14) == 0)
											{
												velocity.X *= -1f;
											}
											if (Main.rand.Next(14) == 0)
											{
												velocity.Y *= -1f;
											}
											if (Main.rand.Next(10) == 0)
											{
												velocity *= (float)Main.rand.Next(1, 201) * 0.0005f;
											}
											if (tileCollide)
											{
												ai[1] = 0f;
											}
											else
											{
												ai[1] = 1f;
											}
											netUpdate = true;
										}
										NPC nPC = Main.npc[i];
										if (nPC.reflectsProjectiles && CanBeReflected() && nPC.CanReflectProjectile(this))
										{
											nPC.ReflectProjectile(this);
											Main.npc[i].position -= Main.npc[i].netOffset;
											return;
										}
										if (type == 604)
										{
											Main.player[owner].Counterweight(nPC.Center, damage, knockBack);
										}
										float num7 = knockBack;
										bool flag7 = false;
										int num8 = Main.player[owner].armorPenetration;
										bool flag8 = !npcProj && !trap;
										switch (type)
										{
										case 864:
											num8 += 25;
											break;
										case 916:
											num8 += 50;
											break;
										case 917:
											num8 += 30;
											break;
										case 595:
											num8 += 20;
											break;
										case 493:
										case 494:
											num8 += 10;
											break;
										case 150:
										case 151:
										case 152:
											num8 += 10;
											break;
										case 189:
											num8 += 10;
											break;
										case 723:
										case 724:
										case 725:
										case 726:
											num8 += 25;
											break;
										case 532:
											num8 += 25;
											break;
										case 964:
											num8 += 20;
											break;
										case 969:
											num8 += 10;
											break;
										case 877:
										case 878:
										case 879:
											num7 *= Main.player[owner].velocity.Length() / 7f;
											break;
										case 963:
											num7 *= 0.25f;
											break;
										}
										int num9 = (int)((float)damage * num5);
										if (type > 0 && type < 972 && ProjectileID.Sets.StardustDragon[type])
										{
											float value2 = (scale - 1f) * 100f;
											value2 = Utils.Clamp(value2, 0f, 50f);
											num9 = (int)((float)num9 * (1f + value2 * 0.23f));
										}
										if (type > 0 && type < 972 && ProjectileID.Sets.StormTiger[type])
										{
											int num10 = Math.Max(0, Main.player[owner].ownedProjectileCounts[831] - 1);
											num9 = (int)((float)num9 * (1f + (float)num10 * 0.4f));
										}
										if (type == 818)
										{
											int num11 = Math.Max(0, Main.player[owner].ownedProjectileCounts[831] - 1);
											num9 = (int)((float)num9 * (1.5f + (float)num11 * 0.4f));
										}
										if (type == 963)
										{
											int num12 = Math.Max(0, Main.player[owner].ownedProjectileCounts[970] - 1);
											int num13 = 3 + num12 / 2;
											if (CountEnemiesWhoAreImmuneToMeRightNow(num13) >= num13)
											{
												return;
											}
											float num14 = 0.55f;
											if (Main.hardMode)
											{
												num14 = 1.3f;
											}
											num9 = (int)((float)num9 * (1f + (float)num12 * num14));
										}
										if (flag8)
										{
											if (melee && Main.rand.Next(1, 101) <= Main.player[owner].meleeCrit)
											{
												flag7 = true;
											}
											if (ranged && Main.rand.Next(1, 101) <= Main.player[owner].rangedCrit)
											{
												flag7 = true;
											}
											if (magic && Main.rand.Next(1, 101) <= Main.player[owner].magicCrit)
											{
												flag7 = true;
											}
											int num15 = type;
											if ((uint)(num15 - 688) <= 2u)
											{
												if (Main.player[owner].setMonkT3)
												{
													if (Main.rand.Next(4) == 0)
													{
														flag7 = true;
													}
												}
												else if (Main.player[owner].setMonkT2 && Main.rand.Next(6) == 0)
												{
													flag7 = true;
												}
											}
										}
										ParticleOrchestraSettings settings;
										if (flag8 && (minion || ProjectileID.Sets.MinionShot[type]))
										{
											bool flag9 = false;
											bool flag10 = false;
											bool flag11 = false;
											bool flag12 = false;
											bool flag13 = false;
											bool flag14 = false;
											bool flag15 = false;
											bool flag16 = false;
											for (int j = 0; j < 5; j++)
											{
												if (nPC.buffTime[j] >= 1)
												{
													switch (nPC.buffType[j])
													{
													case 307:
														flag9 = true;
														break;
													case 309:
														flag10 = true;
														break;
													case 313:
														flag11 = true;
														break;
													case 310:
														flag12 = true;
														break;
													case 315:
														flag13 = true;
														break;
													case 326:
														flag14 = true;
														break;
													case 319:
														flag15 = true;
														break;
													case 316:
														flag16 = true;
														break;
													}
												}
											}
											if (flag9)
											{
												num9 += 4;
											}
											if (flag13)
											{
												num9 += 6;
											}
											if (flag14)
											{
												num9 += 7;
											}
											if (flag10)
											{
												num9 += 9;
											}
											if (flag15)
											{
												num9 += 5;
												if (Main.rand.Next(20) == 0)
												{
													flag7 = true;
												}
											}
											if (flag12)
											{
												int num16 = 10;
												int num17 = NewProjectile(GetProjectileSource_FromThis(), nPC.Center, Vector2.Zero, 916, num16, 0f, owner);
												Main.projectile[num17].localNPCImmunity[i] = -1;
												EmitBlackLightningParticles(nPC);
											}
											if (flag16)
											{
												int num18 = 20;
												num9 += num18;
												if (Main.rand.Next(10) == 0)
												{
													flag7 = true;
												}
												settings = new ParticleOrchestraSettings
												{
													PositionInWorld = base.Center
												};
												ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.RainbowRodHit, settings);
											}
											if (flag11)
											{
												nPC.RequestBuffRemoval(313);
												int num19 = (int)((float)num9 * 1.75f);
												int num20 = NewProjectile(GetProjectileSource_FromThis(), nPC.Center, Vector2.Zero, 918, num19, 0f, owner);
												Main.projectile[num20].localNPCImmunity[i] = -1;
												num9 += num19;
											}
										}
										int num21 = ((!flag8) ? Main.DamageVar(num9) : Main.DamageVar(num9, Main.player[owner].luck));
										if (trap && NPCID.Sets.BelongsToInvasionOldOnesArmy[nPC.type])
										{
											num21 /= 2;
										}
										if (type == 482 && (nPC.aiStyle == 6 || nPC.aiStyle == 37))
										{
											num21 /= 2;
										}
										if (type == 604)
										{
											friendly = false;
											ai[1] = 1000f;
										}
										if ((type == 400 || type == 401 || type == 402) && nPC.type >= 13 && nPC.type <= 15)
										{
											num21 = (int)((double)num21 * 0.65);
											if (penetrate > 1)
											{
												penetrate--;
											}
										}
										if (type == 710 && !WorldUtils.Find(base.Center.ToTileCoordinates(), Searches.Chain(new Searches.Down(12), _cachedConditions_notNull, _cachedConditions_solid), out var _))
										{
											num21 = (int)((float)num21 * 1.5f);
										}
										if (type == 504 || type == 954)
										{
											float num22 = (60f - ai[0]) / 2f;
											ai[0] += num22;
										}
										if (aiStyle == 3 && type != 301 && type != 866 && type != 902)
										{
											if (ai[0] == 0f)
											{
												velocity.X = 0f - velocity.X;
												velocity.Y = 0f - velocity.Y;
												netUpdate = true;
											}
											ai[0] = 1f;
										}
										else if (type == 951)
										{
											Vector2 vector2 = nPC.Center.DirectionTo(base.Center);
											vector2.X += (-0.5f + Main.rand.NextFloat()) * 13f;
											vector2.Y = -5f;
											velocity.X = vector2.X;
											velocity.Y = vector2.Y;
											netUpdate = true;
										}
										else if (type == 582 || type == 902)
										{
											if (ai[0] != 0f)
											{
												direction *= -1;
											}
										}
										else if (type == 612 || type == 953)
										{
											direction = Main.player[owner].direction;
										}
										else if (type == 624)
										{
											float num23 = 1f;
											if (nPC.knockBackResist > 0f)
											{
												num23 = 1f / nPC.knockBackResist;
											}
											knockBack = 4f * num23;
											num7 = knockBack;
											if (nPC.Center.X < base.Center.X)
											{
												direction = 1;
											}
											else
											{
												direction = -1;
											}
										}
										else if (aiStyle == 16)
										{
											if (timeLeft > 3)
											{
												timeLeft = 3;
											}
											if (nPC.position.X + (float)(nPC.width / 2) < position.X + (float)(width / 2))
											{
												direction = -1;
											}
											else
											{
												direction = 1;
											}
										}
										else if (aiStyle == 68)
										{
											if (timeLeft > 3)
											{
												timeLeft = 3;
											}
											if (nPC.position.X + (float)(nPC.width / 2) < position.X + (float)(width / 2))
											{
												direction = -1;
											}
											else
											{
												direction = 1;
											}
										}
										else if (aiStyle == 50)
										{
											if (nPC.position.X + (float)(nPC.width / 2) < position.X + (float)(width / 2))
											{
												direction = -1;
											}
											else
											{
												direction = 1;
											}
										}
										else if (type == 908)
										{
											if (nPC.position.X + (float)(nPC.width / 2) < position.X + (float)(width / 2))
											{
												direction = -1;
											}
											else
											{
												direction = 1;
											}
										}
										if (type == 509)
										{
											int num24 = Main.rand.Next(2, 6);
											for (int k = 0; k < num24; k++)
											{
												Vector2 vector3 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
												vector3 += velocity * 3f;
												vector3.Normalize();
												vector3 *= (float)Main.rand.Next(35, 81) * 0.1f;
												int num25 = (int)((double)damage * 0.5);
												NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector3.X, vector3.Y, 504, num25, knockBack * 0.2f, owner);
											}
										}
										if ((type == 476 || type == 950) && !npcProj)
										{
											float x = Main.player[owner].Center.X;
											if (nPC.Center.X < x)
											{
												direction = -1;
											}
											else
											{
												direction = 1;
											}
										}
										if (type == 598 || type == 636 || type == 614 || type == 971)
										{
											ai[0] = 1f;
											ai[1] = i;
											velocity = (nPC.Center - base.Center) * 0.75f;
											netUpdate = true;
										}
										if (type >= 511 && type <= 513)
										{
											timeLeft = 0;
										}
										if (type == 659)
										{
											timeLeft = 0;
										}
										if (type == 524)
										{
											netUpdate = true;
											ai[0] += 50f;
										}
										if ((type == 688 || type == 689 || type == 690) && nPC.type != 68 && nPC.defense < 999)
										{
											num21 += nPC.defense / 2;
										}
										if (aiStyle == 39)
										{
											if (ai[1] == 0f)
											{
												ai[1] = i + 1;
												netUpdate = true;
											}
											if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2))
											{
												direction = 1;
											}
											else
											{
												direction = -1;
											}
										}
										if (type == 41 && timeLeft > 1)
										{
											timeLeft = 1;
										}
										if (aiStyle == 99)
										{
											Main.player[owner].Counterweight(nPC.Center, damage, knockBack);
											if (nPC.Center.X < Main.player[owner].Center.X)
											{
												direction = -1;
											}
											else
											{
												direction = 1;
											}
											if (ai[0] >= 0f)
											{
												Vector2 vector4 = base.Center - nPC.Center;
												vector4.Normalize();
												float num26 = 16f;
												velocity *= -0.5f;
												velocity += vector4 * num26;
												netUpdate = true;
												localAI[0] += 20f;
												if (!Collision.CanHit(position, width, height, Main.player[owner].position, Main.player[owner].width, Main.player[owner].height))
												{
													localAI[0] += 40f;
													num21 = (int)((double)num21 * 0.75);
												}
											}
										}
										if (type == 856 && !Collision.CanHit(position, width, height, Main.player[owner].position, Main.player[owner].width, Main.player[owner].height))
										{
											num21 = (int)((double)num21 * 0.75);
										}
										if (type == 684 && !Collision.CanHit(position, width, height, Main.player[owner].position, Main.player[owner].width, Main.player[owner].height))
										{
											num21 = (int)((double)num21 * 0.5);
										}
										if (aiStyle == 93)
										{
											if (ai[0] == 0f)
											{
												ai[1] = 0f;
												int num27 = -i - 1;
												ai[0] = num27;
												velocity = nPC.Center - base.Center;
											}
											num21 = ((ai[0] != 2f) ? ((int)((double)num21 * 0.15)) : ((int)((double)num21 * 1.35)));
										}
										if (flag8)
										{
											int num28 = Item.NPCtoBanner(nPC.BannerID());
											if (num28 >= 0)
											{
												Main.player[Main.myPlayer].lastCreatureHit = num28;
											}
										}
										if (Main.netMode != 2 && flag8)
										{
											int num29 = Item.NPCtoBanner(nPC.BannerID());
											if (num29 > 0 && Main.player[owner].HasNPCBannerBuff(num29))
											{
												num21 = ((!Main.expertMode) ? ((int)((float)num21 * ItemID.Sets.BannerStrength[Item.BannerToItem(num29)].NormalDamageDealt)) : ((int)((float)num21 * ItemID.Sets.BannerStrength[Item.BannerToItem(num29)].ExpertDamageDealt)));
											}
										}
										if (Main.expertMode)
										{
											if ((type == 30 || type == 397 || type == 517 || type == 28 || type == 37 || type == 516 || type == 29 || type == 470 || type == 637 || type == 108 || type == 281 || type == 588 || type == 519 || type == 773 || type == 183 || type == 181 || type == 566) && nPC.type >= 13 && nPC.type <= 15)
											{
												num21 /= 5;
											}
											if (type == 280 && ((nPC.type >= 134 && nPC.type <= 136) || nPC.type == 139))
											{
												num21 = (int)((double)num21 * 0.75);
											}
										}
										if (Main.netMode != 2 && nPC.type == 439 && type >= 0 && type <= 972 && ProjectileID.Sets.CultistIsResistantTo[type])
										{
											num21 = (int)((float)num21 * 0.75f);
										}
										if (type == 497 && penetrate != 1)
										{
											ai[0] = 25f;
											float num30 = velocity.Length();
											Vector2 vector5 = nPC.Center - base.Center;
											vector5.Normalize();
											vector5 *= num30;
											velocity = -vector5 * 0.9f;
											netUpdate = true;
										}
										if (type == 323 && (nPC.type == 158 || nPC.type == 159))
										{
											num21 *= 10;
										}
										if (type == 294)
										{
											damage = (int)((double)damage * 0.9);
										}
										if (type == 265)
										{
											damage = (int)((double)damage * 0.75);
										}
										if (type == 355)
										{
											damage = (int)((double)damage * 0.75);
										}
										if (type == 114)
										{
											damage = (int)((double)damage * 0.9);
										}
										if (type == 76 || type == 78 || type == 77)
										{
											damage = (int)((double)damage * 0.95);
										}
										if (type == 85)
										{
											damage = (int)((double)damage * 0.85);
										}
										if (type == 866)
										{
											damage = (int)((double)damage * 0.8);
										}
										if (type == 841)
										{
											damage = (int)((double)damage * 0.5);
										}
										if (type == 914)
										{
											damage = (int)((double)damage * 0.6);
										}
										if (type == 952)
										{
											damage = (int)((double)damage * 0.9);
										}
										if (type == 913)
										{
											damage = (int)((double)damage * 0.66);
										}
										if (type == 912)
										{
											damage = (int)((double)damage * 0.7);
										}
										if (type == 847)
										{
											damage = (int)((double)damage * 0.8);
										}
										if (type == 848)
										{
											damage = (int)((double)damage * 0.95);
										}
										if (type == 849)
										{
											damage = (int)((double)damage * 0.9);
										}
										if (type == 915)
										{
											damage = (int)((double)damage * 0.9);
										}
										if (type == 931)
										{
											damage = (int)((double)damage * 0.8);
										}
										if (type == 242)
										{
											damage = (int)((double)damage * 0.85);
										}
										if (type == 323)
										{
											damage = (int)((double)damage * 0.9);
										}
										if (type == 5)
										{
											damage = (int)((double)damage * 0.9);
										}
										if (type == 4)
										{
											damage = (int)((double)damage * 0.95);
										}
										if (type == 309)
										{
											damage = (int)((double)damage * 0.85);
										}
										if (type == 132)
										{
											damage = (int)((double)damage * 0.85);
										}
										if (type == 950)
										{
											damage = (int)((double)damage * 0.98);
										}
										if (type == 964)
										{
											damage = (int)((double)damage * 0.85);
										}
										if (type == 477 && penetrate > 1)
										{
											int[] array2 = new int[10];
											int num31 = 0;
											int num32 = 700;
											int num33 = 20;
											for (int l = 0; l < 200; l++)
											{
												if (l == i || !Main.npc[l].CanBeChasedBy(this))
												{
													continue;
												}
												float num34 = (base.Center - Main.npc[l].Center).Length();
												if (num34 > (float)num33 && num34 < (float)num32 && Collision.CanHitLine(base.Center, 1, 1, Main.npc[l].Center, 1, 1))
												{
													array2[num31] = l;
													num31++;
													if (num31 >= 9)
													{
														break;
													}
												}
											}
											if (num31 > 0)
											{
												num31 = Main.rand.Next(num31);
												Vector2 vector6 = Main.npc[array2[num31]].Center - base.Center;
												float num35 = velocity.Length();
												vector6.Normalize();
												velocity = vector6 * num35;
												netUpdate = true;
											}
										}
										if (type == 261 && velocity.Length() < 3.5f)
										{
											num21 /= 2;
											num7 /= 2f;
										}
										if (flag8 && melee && Main.player[owner].parryDamageBuff && !ProjectileID.Sets.DontApplyParryDamageBuff[type])
										{
											num21 *= 5;
											Main.player[owner].parryDamageBuff = false;
											Main.player[owner].ClearBuff(198);
										}
										StatusNPC(i);
										if (flag8 && nPC.life > 5)
										{
											TryDoingOnHitEffects(nPC);
										}
										if (ProjectileID.Sets.ImmediatelyUpdatesNPCBuffFlags[type])
										{
											nPC.UpdateNPC_BuffSetFlags(lowerBuffTime: false);
										}
										if (type == 317)
										{
											ai[1] = -1f;
											netUpdate = true;
										}
										int num36 = direction;
										switch (type)
										{
										case 697:
										case 699:
										case 707:
										case 708:
										case 759:
											num36 = ((Main.player[owner].Center.X < nPC.Center.X) ? 1 : (-1));
											break;
										}
										if (aiStyle == 15)
										{
											num36 = ((Main.player[owner].Center.X < nPC.Center.X) ? 1 : (-1));
											if (ai[0] == 0f)
											{
												num7 *= 0.25f;
											}
											if (ai[0] == 6f)
											{
												num7 *= 0.5f;
											}
										}
										if (flag8 && !hostile && num8 > 0)
										{
											num21 += nPC.checkArmorPenetration(num8);
										}
										NPCKillAttempt attempt = new NPCKillAttempt(nPC);
										int num37 = ((!flag8) ? ((int)nPC.StrikeNPCNoInteraction(num21, num7, num36, flag7)) : ((int)nPC.StrikeNPC(num21, num7, num36, flag7)));
										if (flag8 && attempt.DidNPCDie())
										{
											Main.player[owner].OnKillNPC(ref attempt, this);
										}
										if (flag8 && Main.player[owner].accDreamCatcher)
										{
											Main.player[owner].addDPS(num37);
										}
										if (flag8 && !nPC.immortal)
										{
											if (type == 756)
											{
												if (penetrate == 1)
												{
													damage = 0;
													penetrate = -1;
												}
												else
												{
													damage = (int)((double)damage * 0.7);
												}
											}
											if (type == 304 && num37 > 0 && nPC.lifeMax > 5 && !Main.player[owner].moonLeech)
											{
												vampireHeal(num37, new Vector2(nPC.Center.X, nPC.Center.Y));
											}
											if (nPC.value > 0f && Main.player[owner].hasLuckyCoin && Main.rand.Next(5) == 0)
											{
												int num38 = 71;
												if (Main.rand.Next(10) == 0)
												{
													num38 = 72;
												}
												if (Main.rand.Next(100) == 0)
												{
													num38 = 73;
												}
												int num39 = Item.NewItem((int)nPC.position.X, (int)nPC.position.Y, nPC.width, nPC.height, num38);
												Main.item[num39].stack = Main.rand.Next(1, 11);
												Main.item[num39].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
												Main.item[num39].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)num36;
												Main.item[num39].timeLeftInWhichTheItemCannotBeTakenByEnemies = 60;
												if (Main.netMode == 1)
												{
													NetMessage.SendData(21, -1, -1, null, num39);
												}
											}
											if (num37 > 0 && nPC.lifeMax > 5 && friendly && !hostile && aiStyle != 59)
											{
												if (nPC.canGhostHeal)
												{
													if (Main.player[owner].ghostHeal && !Main.player[owner].moonLeech)
													{
														ghostHeal(num37, new Vector2(nPC.Center.X, nPC.Center.Y));
													}
													if (Main.player[owner].ghostHurt)
													{
														ghostHurt(num37, new Vector2(nPC.Center.X, nPC.Center.Y));
													}
													if (magic && Main.player[owner].setNebula && Main.player[owner].nebulaCD == 0 && Main.rand.Next(3) == 0)
													{
														Main.player[owner].nebulaCD = 30;
														int num40 = Utils.SelectRandom<int>(Main.rand, 3453, 3454, 3455);
														int num41 = Item.NewItem((int)nPC.position.X, (int)nPC.position.Y, nPC.width, nPC.height, num40);
														Main.item[num41].velocity.Y = (float)Main.rand.Next(-20, 1) * 0.2f;
														Main.item[num41].velocity.X = (float)Main.rand.Next(10, 31) * 0.2f * (float)num36;
														if (Main.netMode == 1)
														{
															NetMessage.SendData(21, -1, -1, null, num41);
														}
													}
												}
												if (melee && Main.player[owner].beetleOffense && !nPC.immortal)
												{
													if (Main.player[owner].beetleOrbs == 0)
													{
														Main.player[owner].beetleCounter += num37 * 3;
													}
													else if (Main.player[owner].beetleOrbs == 1)
													{
														Main.player[owner].beetleCounter += num37 * 2;
													}
													else
													{
														Main.player[owner].beetleCounter += num37;
													}
													Main.player[owner].beetleCountdown = 0;
												}
												if (arrow && type != 631 && Main.player[owner].phantasmTime > 0)
												{
													Vector2 source = Main.player[owner].position + Main.player[owner].Size * Utils.RandomVector2(Main.rand, 0f, 1f);
													Vector2 vector7 = nPC.DirectionFrom(source) * 6f;
													int num42 = (int)((float)damage * 0.3f);
													NewProjectile(GetProjectileSource_FromThis(), source.X, source.Y, vector7.X, vector7.Y, 631, num42, 0f, owner, i);
													NewProjectile(GetProjectileSource_FromThis(), source.X, source.Y, vector7.X, vector7.Y, 631, num42, 0f, owner, i, 15f);
													NewProjectile(GetProjectileSource_FromThis(), source.X, source.Y, vector7.X, vector7.Y, 631, num42, 0f, owner, i, 30f);
												}
												Player player = Main.player[owner];
												switch (type)
												{
												case 914:
													player.AddBuff(314, 180);
													break;
												case 847:
													player.AddBuff(308, 180);
													break;
												case 849:
													player.AddBuff(311, 180);
													break;
												case 912:
												{
													int num43 = 10;
													if (!player.coolWhipBuff)
													{
														NewProjectile(GetProjectileSource_FromThis(), nPC.Center, Vector2.Zero, 917, num43, 0f, owner);
														player.coolWhipBuff = true;
													}
													player.AddBuff(312, 180);
													break;
												}
												}
											}
										}
										if (flag8 && (melee || ProjectileID.Sets.IsAWhip[type]) && Main.player[owner].meleeEnchant == 7)
										{
											NewProjectile(GetProjectileSource_FromThis(), nPC.Center.X, nPC.Center.Y, nPC.velocity.X, nPC.velocity.Y, 289, 0, 0f, owner);
										}
										if (flag8 && type == 913)
										{
											localAI[0] = 1f;
										}
										if (Main.netMode != 0)
										{
											if (flag7)
											{
												NetMessage.SendData(28, -1, -1, null, i, num21, num7, num36, 1);
											}
											else
											{
												NetMessage.SendData(28, -1, -1, null, i, num21, num7, num36);
											}
										}
										if (type == 916)
										{
											EmitBlackLightningParticles(nPC);
										}
										if (type >= 390 && type <= 392)
										{
											localAI[1] = 20f;
										}
										if (usesIDStaticNPCImmunity)
										{
											nPC.immune[owner] = 0;
											perIDStaticNPCImmunity[type][i] = Main.GameUpdateCount + (uint)idStaticNPCHitCooldown;
										}
										else if (type == 434)
										{
											numUpdates = 0;
										}
										else if (type == 598 || type == 636 || type == 614)
										{
											Point[] bufferForScan = _javelinsMax6;
											if (type == 636)
											{
												bufferForScan = _javelinsMax8;
											}
											if (type == 614)
											{
												bufferForScan = _javelinsMax10;
											}
											KillOldestJavelin(whoAmI, type, i, bufferForScan);
										}
										else if (type == 632)
										{
											nPC.immune[owner] = 5;
										}
										else if (type == 514)
										{
											nPC.immune[owner] = 1;
										}
										else if (type == 611)
										{
											if (localAI[1] <= 0f)
											{
												NewProjectile(GetProjectileSource_FromThis(), nPC.Center.X, nPC.Center.Y, 0f, 0f, 612, damage, 10f, owner, 0f, 0.85f + Main.rand.NextFloat() * 1.15f);
											}
											localAI[1] = 4f;
										}
										else if (type == 595 || type == 735)
										{
											nPC.immune[owner] = 5;
										}
										else if (type == 927)
										{
											nPC.immune[owner] = 4;
										}
										else if (type == 286)
										{
											nPC.immune[owner] = 5;
										}
										else if (type == 443)
										{
											nPC.immune[owner] = 8;
										}
										else if (type >= 424 && type <= 426)
										{
											nPC.immune[owner] = 5;
										}
										else if (type == 634 || type == 635)
										{
											nPC.immune[owner] = 5;
										}
										else if (type == 659)
										{
											nPC.immune[owner] = 5;
										}
										else if (type == 246)
										{
											nPC.immune[owner] = 7;
										}
										else if (type == 249)
										{
											nPC.immune[owner] = 7;
										}
										else if (type == 16)
										{
											nPC.immune[owner] = 8;
										}
										else if (type == 409)
										{
											nPC.immune[owner] = 6;
										}
										else if (type == 407)
										{
											nPC.immune[owner] = 20;
										}
										else if (type == 311)
										{
											nPC.immune[owner] = 7;
										}
										else if (type == 582 || type == 902)
										{
											nPC.immune[owner] = 7;
											if (ai[0] != 1f)
											{
												ai[0] = 1f;
												netUpdate = true;
											}
										}
										else
										{
											if (type == 451)
											{
												if (ai[0] == 0f)
												{
													ai[0] += penetrate;
												}
												else
												{
													ai[0] -= penetrate + 1;
												}
												ai[1] = 0f;
												netUpdate = true;
												Main.npc[i].position -= Main.npc[i].netOffset;
												break;
											}
											if (type == 864)
											{
												array[i] = 10;
												nPC.immune[owner] = 0;
												if (ai[0] > 0f)
												{
													ai[0] = -1f;
													ai[1] = 0f;
													netUpdate = true;
												}
											}
											else if (type == 661 || type == 856)
											{
												array[i] = 8;
												nPC.immune[owner] = 0;
											}
											else if (type == 866)
											{
												array[i] = -1;
												nPC.immune[owner] = 0;
												penetrate--;
												if (penetrate == 0)
												{
													penetrate = 1;
													damage = 0;
													ai[1] = -1f;
													netUpdate = true;
													Main.npc[i].position -= Main.npc[i].netOffset;
													break;
												}
												if (owner == Main.myPlayer)
												{
													int num44 = FindTargetWithLineOfSight();
													float num45 = ai[1];
													ai[1] = num44;
													if (ai[1] != num45)
													{
														netUpdate = true;
													}
													if (num44 != -1)
													{
														velocity = velocity.Length() * DirectionTo(Main.npc[num44].Center);
													}
												}
											}
											else if (usesLocalNPCImmunity && localNPCHitCooldown != -2)
											{
												nPC.immune[owner] = 0;
												array[i] = localNPCHitCooldown;
											}
											else if (penetrate != 1)
											{
												nPC.immune[owner] = 10;
											}
										}
										if (type == 710)
										{
											BetsySharpnel(i);
										}
										if (penetrate > 0 && type != 317 && type != 866)
										{
											if (type == 357)
											{
												damage = (int)((double)damage * 0.8);
											}
											penetrate--;
											if (penetrate == 0)
											{
												Main.npc[i].position -= Main.npc[i].netOffset;
												break;
											}
										}
										if (aiStyle == 7)
										{
											ai[0] = 1f;
											damage = 0;
											netUpdate = true;
										}
										else if (aiStyle == 13)
										{
											ai[0] = 1f;
											netUpdate = true;
										}
										else if (aiStyle == 69)
										{
											ai[0] = 1f;
											netUpdate = true;
										}
										else if (type == 607)
										{
											ai[0] = 1f;
											netUpdate = true;
											friendly = false;
										}
										else if (type == 638 || type == 639 || type == 640)
										{
											array[i] = -1;
											nPC.immune[owner] = 0;
											damage = (int)((double)damage * 0.96);
										}
										else if (type == 617)
										{
											array[i] = 8;
											nPC.immune[owner] = 0;
										}
										else if (type == 656)
										{
											array[i] = 8;
											nPC.immune[owner] = 0;
											localAI[0] += 1f;
										}
										else if (type == 618)
										{
											array[i] = 20;
											nPC.immune[owner] = 0;
										}
										else if (type == 642)
										{
											array[i] = 10;
											nPC.immune[owner] = 0;
										}
										else if (type == 857)
										{
											array[i] = 10;
											nPC.immune[owner] = 0;
										}
										else if (type == 611 || type == 612)
										{
											array[i] = 6;
											nPC.immune[owner] = 4;
										}
										else if (type == 645)
										{
											array[i] = -1;
											nPC.immune[owner] = 0;
											if (ai[1] != -1f)
											{
												ai[0] = 0f;
												ai[1] = -1f;
												netUpdate = true;
											}
										}
										numHits++;
										if (type == 697)
										{
											if (ai[0] >= 42f)
											{
												localAI[1] = 1f;
											}
										}
										else if (type == 699)
										{
											SummonMonkGhast();
										}
										else if (type == 706)
										{
											damage = (int)((float)damage * 0.95f);
										}
										else if (type == 728)
										{
											SummonSuperStarSlash(nPC.Center);
										}
										else if (type == 34)
										{
											if (ai[0] == -1f)
											{
												ai[1] = -1f;
												netUpdate = true;
											}
										}
										else if (type == 79)
										{
											if (ai[0] == -1f)
											{
												ai[1] = -1f;
												netUpdate = true;
											}
											settings = new ParticleOrchestraSettings
											{
												PositionInWorld = nPC.Center,
												MovementVector = velocity
											};
											ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.RainbowRodHit, settings);
										}
										else if (type == 931)
										{
											int num46 = FindTargetWithLineOfSight();
											if (num46 != -1)
											{
												ai[0] = num46;
												netUpdate = true;
											}
										}
										else if (aiStyle == 165)
										{
											if (nPC.active)
											{
												Main.player[owner].MinionAttackTargetNPC = i;
											}
										}
										else if (type == 623)
										{
											settings = new ParticleOrchestraSettings
											{
												PositionInWorld = Vector2.Lerp(base.Center, nPC.Hitbox.ClosestPointInRect(base.Center), 0.5f) + new Vector2(0f, Main.rand.NextFloatDirection() * 10f),
												MovementVector = new Vector2(direction, Main.rand.NextFloatDirection() * 0.5f) * (3f + 3f * Main.rand.NextFloat())
											};
											ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.StardustPunch, settings);
										}
									}
								}
							}
						}
						Main.npc[i].position -= Main.npc[i].netOffset;
					}
				}
				if (damage > 0 && Main.player[Main.myPlayer].hostile)
				{
					for (int m = 0; m < 255; m++)
					{
						if (m == owner)
						{
							continue;
						}
						Player player2 = Main.player[m];
						if (!player2.active || player2.dead || player2.immune || !player2.hostile || playerImmune[m] > 0 || (Main.player[Main.myPlayer].team != 0 && Main.player[Main.myPlayer].team == player2.team))
						{
							continue;
						}
						bool flag17 = !ownerHitCheck;
						if (ownerHitCheck)
						{
							flag17 |= CanHitWithMeleeWeapon(player2);
						}
						if (!flag17 || !Colliding(myRect, player2.getRect()))
						{
							continue;
						}
						if (aiStyle == 3)
						{
							if (ai[0] == 0f)
							{
								velocity.X = 0f - velocity.X;
								velocity.Y = 0f - velocity.Y;
								netUpdate = true;
							}
							ai[0] = 1f;
						}
						else if (aiStyle == 16)
						{
							if (timeLeft > 3)
							{
								timeLeft = 3;
							}
							if (player2.position.X + (float)(player2.width / 2) < position.X + (float)(width / 2))
							{
								direction = -1;
							}
							else
							{
								direction = 1;
							}
						}
						else if (aiStyle == 68)
						{
							if (timeLeft > 3)
							{
								timeLeft = 3;
							}
							if (player2.position.X + (float)(player2.width / 2) < position.X + (float)(width / 2))
							{
								direction = -1;
							}
							else
							{
								direction = 1;
							}
						}
						PlayerDeathReason playerDeathReason = PlayerDeathReason.ByProjectile(owner, whoAmI);
						if (type == 41 && timeLeft > 1)
						{
							timeLeft = 1;
						}
						bool flag18 = false;
						if (melee && Main.rand.Next(1, 101) <= Main.player[owner].meleeCrit)
						{
							flag18 = true;
						}
						int num47 = Main.DamageVar((int)((float)damage * num5), Main.player[owner].luck);
						if (!player2.immune)
						{
							StatusPvP(m);
						}
						TryDoingOnHitEffects(player2);
						int num48 = (int)player2.Hurt(playerDeathReason, num47, direction, pvp: true, quiet: false, flag18);
						if (num48 > 0 && Main.player[owner].ghostHeal && friendly && !hostile)
						{
							ghostHeal(num48, new Vector2(player2.Center.X, player2.Center.Y));
						}
						if (type == 304 && num48 > 0)
						{
							vampireHeal(num48, new Vector2(player2.Center.X, player2.Center.Y));
						}
						if ((melee || ProjectileID.Sets.IsAWhip[type]) && Main.player[owner].meleeEnchant == 7)
						{
							NewProjectile(GetProjectileSource_FromThis(), player2.Center.X, player2.Center.Y, player2.velocity.X, player2.velocity.Y, 289, 0, 0f, owner);
						}
						if (Main.netMode != 0)
						{
							NetMessage.SendPlayerHurt(m, playerDeathReason, num47, direction, flag18, pvp: true, -1);
						}
						playerImmune[m] = 40;
						if (penetrate > 0)
						{
							penetrate--;
							if (penetrate == 0)
							{
								break;
							}
						}
						if (aiStyle == 7)
						{
							ai[0] = 1f;
							damage = 0;
							netUpdate = true;
						}
						else if (aiStyle == 13)
						{
							ai[0] = 1f;
							netUpdate = true;
						}
						else if (aiStyle == 69)
						{
							ai[0] = 1f;
							netUpdate = true;
						}
					}
				}
			}
			if (type == 10 && Main.netMode != 1)
			{
				for (int n = 0; n < 200; n++)
				{
					if (Main.npc[n].active && Main.npc[n].type == 534)
					{
						Rectangle value3 = new Rectangle((int)Main.npc[n].position.X, (int)Main.npc[n].position.Y, Main.npc[n].width, Main.npc[n].height);
						if (myRect.Intersects(value3))
						{
							Main.npc[n].Transform(441);
						}
					}
				}
			}
			if (type == 11 && Main.netMode != 1)
			{
				for (int num49 = 0; num49 < 200; num49++)
				{
					if (!Main.npc[num49].active)
					{
						continue;
					}
					if (Main.npc[num49].type == 46 || Main.npc[num49].type == 303)
					{
						Rectangle value4 = new Rectangle((int)Main.npc[num49].position.X, (int)Main.npc[num49].position.Y, Main.npc[num49].width, Main.npc[num49].height);
						if (myRect.Intersects(value4))
						{
							Main.npc[num49].Transform(47);
						}
					}
					else if (Main.npc[num49].type == 55)
					{
						Rectangle value5 = new Rectangle((int)Main.npc[num49].position.X, (int)Main.npc[num49].position.Y, Main.npc[num49].width, Main.npc[num49].height);
						if (myRect.Intersects(value5))
						{
							Main.npc[num49].Transform(57);
						}
					}
					else if (Main.npc[num49].type == 148 || Main.npc[num49].type == 149)
					{
						Rectangle value6 = new Rectangle((int)Main.npc[num49].position.X, (int)Main.npc[num49].position.Y, Main.npc[num49].width, Main.npc[num49].height);
						if (myRect.Intersects(value6))
						{
							Main.npc[num49].Transform(168);
						}
					}
				}
			}
			if (type == 463 && Main.netMode != 1)
			{
				for (int num50 = 0; num50 < 200; num50++)
				{
					if (!Main.npc[num50].active)
					{
						continue;
					}
					if (Main.npc[num50].type == 46 || Main.npc[num50].type == 303)
					{
						Rectangle value7 = new Rectangle((int)Main.npc[num50].position.X, (int)Main.npc[num50].position.Y, Main.npc[num50].width, Main.npc[num50].height);
						if (myRect.Intersects(value7))
						{
							Main.npc[num50].Transform(464);
						}
					}
					else if (Main.npc[num50].type == 55)
					{
						Rectangle value8 = new Rectangle((int)Main.npc[num50].position.X, (int)Main.npc[num50].position.Y, Main.npc[num50].width, Main.npc[num50].height);
						if (myRect.Intersects(value8))
						{
							Main.npc[num50].Transform(465);
						}
					}
					else if (Main.npc[num50].type == 148 || Main.npc[num50].type == 149)
					{
						Rectangle value9 = new Rectangle((int)Main.npc[num50].position.X, (int)Main.npc[num50].position.Y, Main.npc[num50].width, Main.npc[num50].height);
						if (myRect.Intersects(value9))
						{
							Main.npc[num50].Transform(470);
						}
					}
				}
			}
			if (Main.netMode == 2 || !hostile || Main.myPlayer >= 255 || damage <= 0)
			{
				return;
			}
			int num51 = -1;
			switch (type)
			{
			case 452:
			case 454:
			case 455:
			case 462:
				num51 = 1;
				break;
			case 871:
			case 872:
			case 873:
			case 874:
			case 919:
			case 923:
			case 924:
				num51 = 1;
				break;
			}
			int myPlayer2 = Main.myPlayer;
			bool flag19 = Main.player[myPlayer2].active && !Main.player[myPlayer2].dead && (!Main.player[myPlayer2].immune || num51 != -1);
			if (flag19 && type == 281)
			{
				flag19 = ai[1] - 1f == (float)myPlayer2;
			}
			if (Main.getGoodWorld && type == 281)
			{
				flag19 = true;
			}
			if (!flag19 || !Colliding(myRect, Main.player[myPlayer2].getRect()))
			{
				return;
			}
			int num52 = direction;
			num52 = ((!(Main.player[myPlayer2].position.X + (float)(Main.player[myPlayer2].width / 2) < position.X + (float)(width / 2))) ? 1 : (-1));
			if (!Main.player[myPlayer2].CanParryAgainst(Main.player[myPlayer2].Hitbox, base.Hitbox, velocity))
			{
				int num53 = Main.DamageVar(damage, 0f - Main.player[owner].luck);
				int num54 = bannerIdToRespondTo;
				if (num54 > 0 && Main.player[myPlayer2].HasNPCBannerBuff(num54))
				{
					ItemID.BannerEffect bannerEffect = ItemID.Sets.BannerStrength[Item.BannerToItem(num54)];
					num53 = ((!Main.expertMode) ? ((int)((float)num53 * bannerEffect.NormalDamageReceived)) : ((int)((float)num53 * bannerEffect.ExpertDamageReceived)));
				}
				if (Main.player[myPlayer2].resistCold && coldDamage)
				{
					num53 = (int)((float)num53 * 0.7f);
				}
				float num55 = Main.GameModeInfo.EnemyDamageMultiplier;
				if (Main.GameModeInfo.IsJourneyMode)
				{
					CreativePowers.DifficultySliderPower power = CreativePowerManager.Instance.GetPower<CreativePowers.DifficultySliderPower>();
					if (power.GetIsUnlocked())
					{
						num55 = power.StrengthMultiplierToGiveNPCs;
					}
				}
				num53 = (int)((float)num53 * num55);
				int num56 = num53 * 2;
				if (type == 961)
				{
					if (penetrate == 1)
					{
						damage = 0;
						penetrate = -1;
					}
					else
					{
						damage = (int)((double)damage * 0.7);
					}
				}
				if (Main.player[myPlayer2].Hurt(PlayerDeathReason.ByProjectile(-1, whoAmI), num56, num52, pvp: false, quiet: false, Crit: false, num51) > 0.0 && !Main.player[myPlayer2].dead)
				{
					StatusPlayer(myPlayer2);
				}
				if (trap)
				{
					Main.player[myPlayer2].trapDebuffSource = true;
					if (Main.player[myPlayer2].dead)
					{
						AchievementsHelper.HandleSpecialEvent(Main.player[myPlayer2], 4);
					}
				}
			}
			if (true)
			{
				if (type == 435 || type == 682)
				{
					penetrate--;
				}
				if (type == 436)
				{
					penetrate--;
				}
				if (type == 681)
				{
					timeLeft = 0;
				}
				if (type == 437)
				{
					penetrate--;
				}
			}
		}

		public static void KillOldestJavelin(int protectedProjectileIndex, int projectileType, int targetNPCIndex, Point[] bufferForScan)
		{
			int num = 0;
			for (int i = 0; i < 1000; i++)
			{
				if (i != protectedProjectileIndex && Main.projectile[i].active && Main.projectile[i].owner == Main.myPlayer && Main.projectile[i].type == projectileType && Main.projectile[i].ai[0] == 1f && Main.projectile[i].ai[1] == (float)targetNPCIndex)
				{
					bufferForScan[num++] = new Point(i, Main.projectile[i].timeLeft);
					if (num >= bufferForScan.Length)
					{
						break;
					}
				}
			}
			if (num < bufferForScan.Length)
			{
				return;
			}
			int num2 = 0;
			for (int j = 1; j < bufferForScan.Length; j++)
			{
				if (bufferForScan[j].Y < bufferForScan[num2].Y)
				{
					num2 = j;
				}
			}
			Main.projectile[bufferForScan[num2].X].Kill();
		}

		private int CountEnemiesWhoAreImmuneToMeRightNow(int cap)
		{
			int num = 0;
			for (int i = 0; i < localNPCImmunity.Length; i++)
			{
				if (localNPCImmunity[i] > 0)
				{
					num++;
					if (num >= cap)
					{
						break;
					}
				}
			}
			return num;
		}

		private static void EmitBlackLightningParticles(NPC targetNPC)
		{
			ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.BlackLightningHit, new ParticleOrchestraSettings
			{
				PositionInWorld = targetNPC.Center
			});
		}

		private void TryDoingOnHitEffects(Entity entity)
		{
			switch (type)
			{
			case 221:
			case 227:
			case 614:
			case 729:
			case 908:
				return;
			}
			Main.player[owner].OnHit(entity.Center.X, entity.Center.Y, entity);
		}

		private void SummonSuperStarSlash(Vector2 target)
		{
			Vector2 v = Main.rand.NextVector2CircularEdge(200f, 200f);
			if (v.Y < 0f)
			{
				v.Y *= -1f;
			}
			v.Y += 100f;
			Vector2 vector = v.SafeNormalize(Vector2.UnitY) * 6f;
			NewProjectile(GetProjectileSource_FromThis(), target - vector * 20f, vector, 729, damage / 2, 0f, owner, 0f, target.Y);
		}

		private void SummonMonkGhast()
		{
			if (localAI[0] > 0f)
			{
				return;
			}
			localAI[0] = 1000f;
			List<NPC> list = new List<NPC>();
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this) && Distance(nPC.Center) < 800f)
				{
					list.Add(nPC);
				}
			}
			Vector2 center = base.Center;
			Vector2 zero = Vector2.Zero;
			if (list.Count > 0)
			{
				NPC nPC2 = list[Main.rand.Next(list.Count)];
				center = nPC2.Center;
				zero = nPC2.velocity;
			}
			int num = Main.rand.Next(2) * 2 - 1;
			Vector2 vector = new Vector2((float)num * (4f + (float)Main.rand.Next(3)), 0f);
			Vector2 vector2 = center + new Vector2(-num * 120, 0f);
			vector += (center + zero * 15f - vector2).SafeNormalize(Vector2.Zero) * 2f;
			NewProjectile(GetProjectileSource_FromThis(), vector2, vector, 700, damage, 0f, owner);
		}

		private void CutTiles()
		{
			if (!CanCutTiles())
			{
				return;
			}
			AchievementsHelper.CurrentlyMining = true;
			bool flag = true;
			if (type == 461 || type == 632 || type == 642)
			{
				DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
				Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CutTiles);
			}
			else if (ProjectileID.Sets.IsAWhip[type])
			{
				flag = false;
				WhipPointsForCollision.Clear();
				FillWhipControlPoints(this, WhipPointsForCollision);
				Vector2 vector = new Vector2((float)width * scale / 2f, 0f);
				for (int i = 0; i < WhipPointsForCollision.Count; i++)
				{
					DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
					Utils.PlotTileLine(WhipPointsForCollision[i] - vector, WhipPointsForCollision[i] + vector, (float)height * scale, DelegateMethods.CutTiles);
				}
			}
			else if (type == 756)
			{
				DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
				Utils.PlotTileLine(base.Center, base.Center + velocity.SafeNormalize(-Vector2.UnitY) * 200f * scale, 22f * scale, DelegateMethods.CutTiles);
			}
			else if (type == 927)
			{
				DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
				Vector2 end = base.Center + velocity.SafeNormalize(Vector2.UnitX) * 220f * scale;
				Utils.PlotTileLine(base.Center, end, 80f * scale, DelegateMethods.CutTiles);
			}
			else if (type == 802 || type == 842 || type == 938 || type == 939 || type == 940 || type == 941 || type == 942 || type == 943 || type == 944 || type == 945)
			{
				DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
				Utils.PlotTileLine(base.Center, base.Center + velocity.SafeNormalize(-Vector2.UnitY) * 10f, 10f * scale, DelegateMethods.CutTiles);
			}
			else if (type == 611)
			{
				DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
				Utils.PlotTileLine(base.Center, base.Center + velocity + velocity.SafeNormalize(Vector2.Zero) * 48f, (float)width * scale, DelegateMethods.CutTiles);
			}
			else if (type == 697 || type == 707)
			{
				float num = 40f;
				if (type == 707)
				{
					num = 60f;
				}
				float f = rotation - (float)Math.PI / 4f * (float)Math.Sign(velocity.X);
				DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
				Utils.PlotTileLine(base.Center + f.ToRotationVector2() * (0f - num), base.Center + f.ToRotationVector2() * num, (float)width * scale, DelegateMethods.CutTiles);
			}
			if (flag)
			{
				int num2 = (int)(position.X / 16f);
				int num3 = (int)((position.X + (float)width) / 16f) + 1;
				int num4 = (int)(position.Y / 16f);
				int num5 = (int)((position.Y + (float)height) / 16f) + 1;
				if (num2 < 0)
				{
					num2 = 0;
				}
				if (num3 > Main.maxTilesX)
				{
					num3 = Main.maxTilesX;
				}
				if (num4 < 0)
				{
					num4 = 0;
				}
				if (num5 > Main.maxTilesY)
				{
					num5 = Main.maxTilesY;
				}
				for (int j = num2; j < num3; j++)
				{
					for (int k = num4; k < num5; k++)
					{
						if (Main.tile[j, k] != null && Main.tileCut[Main.tile[j, k].type] && WorldGen.CanCutTile(j, k, TileCuttingContext.AttackProjectile))
						{
							WorldGen.KillTile(j, k);
							if (Main.netMode != 0)
							{
								NetMessage.SendData(17, -1, -1, null, 0, j, k);
							}
						}
					}
				}
			}
			AchievementsHelper.CurrentlyMining = false;
		}

		private bool CanCutTiles()
		{
			if (aiStyle != 45 && aiStyle != 137 && aiStyle != 92 && aiStyle != 105 && aiStyle != 106 && !ProjectileID.Sets.IsAGolfBall[type] && type != 463 && type != 69 && type != 70 && type != 621 && type != 10 && type != 11 && type != 379 && type != 407 && type != 476 && type != 623 && (type < 625 || type > 628) && type != 833 && type != 834 && type != 835 && type != 818 && type != 831 && type != 820 && type != 864)
			{
				return type != 970;
			}
			return false;
		}

		public bool Colliding(Rectangle myRect, Rectangle targetRect)
		{
			if (aiStyle == 15)
			{
				if (ai[0] == 0f)
				{
					Vector2 mountedCenter = Main.player[owner].MountedCenter;
					Vector2 vector = targetRect.ClosestPointInRect(mountedCenter) - mountedCenter;
					vector.Y /= 0.8f;
					float num = 55f;
					return vector.Length() <= num;
				}
			}
			else if (type == 623)
			{
				if (ai[0] == 2f)
				{
					Rectangle value = Utils.CenteredRectangle(base.Center + new Vector2(direction * 40, 0f), new Vector2(80f, 40f));
					if (targetRect.Intersects(value))
					{
						return true;
					}
				}
			}
			else
			{
				if (type == 933)
				{
					float collisionPoint = 0f;
					float num2 = 40f;
					for (int i = 14; i < oldPos.Length; i += 15)
					{
						float num3 = localAI[0] - (float)i;
						if (!(num3 < 0f) && !(num3 > 60f))
						{
							Vector2 vector2 = oldPos[i] + base.Size / 2f;
							Vector2 vector3 = (oldRot[i] + (float)Math.PI / 2f).ToRotationVector2();
							_lanceHitboxBounds.X = (int)vector2.X - _lanceHitboxBounds.Width / 2;
							_lanceHitboxBounds.Y = (int)vector2.Y - _lanceHitboxBounds.Height / 2;
							if (_lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), vector2 - vector3 * num2, vector2 + vector3 * num2, 20f, ref collisionPoint))
							{
								return true;
							}
						}
					}
					Vector2 vector4 = (rotation + (float)Math.PI / 2f).ToRotationVector2();
					_lanceHitboxBounds.X = (int)position.X - _lanceHitboxBounds.Width / 2;
					_lanceHitboxBounds.Y = (int)position.Y - _lanceHitboxBounds.Height / 2;
					if (_lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - vector4 * num2, base.Center + vector4 * num2, 20f, ref collisionPoint))
					{
						return true;
					}
					return false;
				}
				if (type == 927)
				{
					for (int j = 1; j <= 5; j++)
					{
						Rectangle rectangle = myRect;
						Vector2 vector5 = velocity.SafeNormalize(Vector2.Zero) * width * j;
						rectangle.Offset((int)vector5.X, (int)vector5.Y);
						if (rectangle.Intersects(targetRect))
						{
							return true;
						}
					}
				}
				else
				{
					if (type == 877 || type == 878 || type == 879)
					{
						float f = rotation - (float)Math.PI / 4f - (float)Math.PI / 2f - ((spriteDirection == 1) ? ((float)Math.PI) : 0f);
						float collisionPoint2 = 0f;
						float num4 = 95f;
						_lanceHitboxBounds.X = (int)position.X - _lanceHitboxBounds.Width / 2;
						_lanceHitboxBounds.Y = (int)position.Y - _lanceHitboxBounds.Height / 2;
						if (_lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + f.ToRotationVector2() * num4, 23f * scale, ref collisionPoint2))
						{
							return true;
						}
						return false;
					}
					if (type == 919 || type == 932)
					{
						float f2 = rotation;
						float collisionPoint3 = 0f;
						float num5 = 40f;
						Vector2 vector6 = f2.ToRotationVector2();
						_lanceHitboxBounds.X = (int)position.X - _lanceHitboxBounds.Width / 2;
						_lanceHitboxBounds.Y = (int)position.Y - _lanceHitboxBounds.Height / 2;
						if (_lanceHitboxBounds.Intersects(targetRect) && Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - vector6 * num5, base.Center + vector6 * num5, 8f, ref collisionPoint3))
						{
							return true;
						}
						return false;
					}
					if (type == 923)
					{
						float collisionPoint4 = 0f;
						_ = scale;
						float f3 = rotation;
						Vector2 objectPosition = targetRect.TopLeft();
						Vector2 objectDimensions = targetRect.Size();
						Vector2 vector7 = f3.ToRotationVector2();
						float num6 = scale * 0.7f;
						if (Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, base.Center, base.Center + vector7 * scale * 510f, num6 * 100f, ref collisionPoint4))
						{
							return true;
						}
						if (Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, base.Center, base.Center + vector7 * scale * 660f, num6 * 60f, ref collisionPoint4))
						{
							return true;
						}
						if (Collision.CheckAABBvLineCollision(objectPosition, objectDimensions, base.Center, base.Center + vector7 * scale * 800f, num6 * 10f, ref collisionPoint4))
						{
							return true;
						}
						return false;
					}
					if (type == 598 && targetRect.Width > 8 && targetRect.Height > 8)
					{
						targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
					}
					else
					{
						if (type == 872)
						{
							Rectangle hitbox = base.Hitbox;
							int num7 = 80;
							for (int k = 0; k < num7; k += 2)
							{
								Vector2 vector8 = oldPos[k];
								if (!(vector8 == Vector2.Zero))
								{
									hitbox.X = (int)vector8.X;
									hitbox.Y = (int)vector8.Y;
									if (hitbox.Intersects(targetRect))
									{
										return true;
									}
								}
							}
							return false;
						}
						if (type == 871)
						{
							int num8 = AI_172_GetPelletStormsCount();
							for (int l = 0; l < num8; l++)
							{
								HallowBossPelletStormInfo hallowBossPelletStormInfo = AI_172_GetPelletStormInfo(l);
								for (int m = 0; m < hallowBossPelletStormInfo.BulletsInStorm; m++)
								{
									if (hallowBossPelletStormInfo.IsValid(m) && hallowBossPelletStormInfo.GetBulletHitbox(m, base.Center).Intersects(targetRect))
									{
										return true;
									}
								}
							}
							return false;
						}
						if (ProjectileID.Sets.IsAWhip[type])
						{
							WhipPointsForCollision.Clear();
							FillWhipControlPoints(this, WhipPointsForCollision);
							for (int n = 0; n < WhipPointsForCollision.Count; n++)
							{
								Point point = WhipPointsForCollision[n].ToPoint();
								myRect.Location = new Point(point.X - myRect.Width / 2, point.Y - myRect.Height / 2);
								if (myRect.Intersects(targetRect))
								{
									return true;
								}
							}
							return false;
						}
						if (type == 614 && targetRect.Width > 8 && targetRect.Height > 8)
						{
							targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
						}
						else if (type == 963 && ai[0] >= 2f)
						{
							targetRect.Inflate(30, 30);
						}
						else if (type == 758)
						{
							if (ai[0] == 2f && Utils.CenteredRectangle(base.Center + new Vector2(spriteDirection * 30, 0f), new Vector2(50f, 20f)).Intersects(targetRect))
							{
								return true;
							}
						}
						else if (type == 636 && targetRect.Width > 8 && targetRect.Height > 8)
						{
							targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
						}
						else if (type == 607)
						{
							myRect.X += (int)velocity.X;
							myRect.Y += (int)velocity.Y;
						}
						else if (type == 661)
						{
							if (Vector2.Distance(myRect.Center.ToVector2(), targetRect.Center.ToVector2()) > 500f || !Collision.CanHitLine(myRect.Center.ToVector2(), 0, 0, targetRect.Center.ToVector2(), 0, 0))
							{
								return false;
							}
						}
						else if (aiStyle == 137)
						{
							if (myRect.Intersects(targetRect) && targetRect.Distance(base.Center) < (float)(height / 2 - 20))
							{
								if (AI_137_CanHit(targetRect.Center.ToVector2()))
								{
									return true;
								}
								if (AI_137_CanHit(targetRect.TopLeft() + new Vector2(targetRect.Width / 2, 0f)))
								{
									return true;
								}
							}
							return false;
						}
					}
				}
			}
			if (myRect.Intersects(targetRect))
			{
				return true;
			}
			if (type == 461)
			{
				float collisionPoint5 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 22f * scale, ref collisionPoint5))
				{
					return true;
				}
				return false;
			}
			if (type == 697 || type == 707)
			{
				float f4 = rotation - (float)Math.PI / 4f * (float)Math.Sign(velocity.X);
				float collisionPoint6 = 0f;
				float num9 = 50f;
				if (type == 697)
				{
					num9 = 65f;
				}
				if (type == 707)
				{
					num9 = 110f;
				}
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center + f4.ToRotationVector2() * (0f - num9), base.Center + f4.ToRotationVector2() * num9, 23f * scale, ref collisionPoint6))
				{
					return true;
				}
				return false;
			}
			if (type == 699)
			{
				float f5 = rotation - (float)Math.PI / 4f * (float)Math.Sign(velocity.X) + ((spriteDirection == -1) ? ((float)Math.PI) : 0f);
				float collisionPoint7 = 0f;
				float num10 = -95f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + f5.ToRotationVector2() * num10, 23f * scale, ref collisionPoint7))
				{
					return true;
				}
				return false;
			}
			if (type == 642)
			{
				float collisionPoint8 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 30f * scale, ref collisionPoint8))
				{
					return true;
				}
				return false;
			}
			if (type == 802 || type == 842 || type == 938 || type == 939 || type == 940 || type == 941 || type == 942 || type == 943 || type == 944 || type == 945)
			{
				float collisionPoint9 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * 6f, 10f * scale, ref collisionPoint9))
				{
					return true;
				}
				return false;
			}
			if (type == 632)
			{
				float collisionPoint10 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 22f * scale, ref collisionPoint10))
				{
					return true;
				}
				return false;
			}
			if (type == 455)
			{
				float collisionPoint11 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 36f * scale, ref collisionPoint11))
				{
					return true;
				}
				return false;
			}
			if (type == 611)
			{
				float collisionPoint12 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity + velocity.SafeNormalize(Vector2.Zero) * 48f, 16f * scale, ref collisionPoint12))
				{
					return true;
				}
				return false;
			}
			if (type == 684)
			{
				float collisionPoint13 = 0f;
				Vector2 vector9 = velocity.SafeNormalize(Vector2.UnitY).RotatedBy(-1.5707963705062866) * scale;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center - vector9 * 40f, base.Center + vector9 * 40f, 16f * scale, ref collisionPoint13))
				{
					return true;
				}
				return false;
			}
			if (type == 537)
			{
				float collisionPoint14 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity * localAI[1], 22f * scale, ref collisionPoint14))
				{
					return true;
				}
				return false;
			}
			if (type == 756 || type == 961)
			{
				float collisionPoint15 = 0f;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), base.Center, base.Center + velocity.SafeNormalize(-Vector2.UnitY) * 200f * scale, 22f * scale, ref collisionPoint15))
				{
					return true;
				}
				return false;
			}
			if (type == 687)
			{
				float collisionPoint16 = 0f;
				float num11 = ai[0] / 25f;
				if (num11 > 1f)
				{
					num11 = 1f;
				}
				float num12 = (ai[0] - 38f) / 40f;
				if (num12 < 0f)
				{
					num12 = 0f;
				}
				Vector2 lineStart = base.Center + rotation.ToRotationVector2() * 400f * num12;
				Vector2 lineEnd = base.Center + rotation.ToRotationVector2() * 400f * num11;
				if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), lineStart, lineEnd, 40f * scale, ref collisionPoint16))
				{
					return true;
				}
				return false;
			}
			if (type == 466 || type == 580 || type == 686)
			{
				for (int num13 = 0; num13 < oldPos.Length && (oldPos[num13].X != 0f || oldPos[num13].Y != 0f); num13++)
				{
					myRect.X = (int)oldPos[num13].X;
					myRect.Y = (int)oldPos[num13].Y;
					if (myRect.Intersects(targetRect))
					{
						return true;
					}
				}
				return false;
			}
			if (type == 711)
			{
				if (penetrate != -1)
				{
					for (int num14 = 0; num14 < oldPos.Length && (oldPos[num14].X != 0f || oldPos[num14].Y != 0f); num14++)
					{
						myRect.X = (int)oldPos[num14].X;
						myRect.Y = (int)oldPos[num14].Y;
						if (myRect.Intersects(targetRect))
						{
							return true;
						}
					}
				}
			}
			else if (type == 464 && ai[1] != 1f)
			{
				Vector2 vector10 = new Vector2(0f, -720f).RotatedBy(velocity.ToRotation());
				float num15 = ai[0] % 45f / 45f;
				Vector2 spinningpoint = vector10 * num15;
				for (int num16 = 0; num16 < 6; num16++)
				{
					float num17 = (float)num16 * ((float)Math.PI * 2f) / 6f;
					if (Utils.CenteredRectangle(base.Center + spinningpoint.RotatedBy(num17), new Vector2(30f, 30f)).Intersects(targetRect))
					{
						return true;
					}
				}
			}
			return false;
		}

		public void ProjLight()
		{
			if (!(light > 0f))
			{
				return;
			}
			float num = light;
			float num2 = light;
			float num3 = light;
			if (type == 446)
			{
				num *= 0f;
				num3 *= 0.8f;
			}
			else if (type == 493 || type == 494)
			{
				num2 *= 0.3f;
			}
			else if (type == 876)
			{
				num *= 0.1f;
				num2 *= 0.7f;
				num3 *= 1f;
			}
			else if (type == 867)
			{
				float num4 = (float)Main.rand.Next(28, 42) * 0.005f;
				num4 += (float)(270 - Main.mouseTextColor) / 500f;
				num = 0.1f;
				num2 = 0.3f + num4 / 2f;
				num3 = 0.6f + num4;
			}
			else if (type == 332)
			{
				num3 *= 0.1f;
				num2 *= 0.6f;
			}
			else if (type == 259)
			{
				num3 *= 0.1f;
			}
			else if (type == 329)
			{
				num3 *= 0.1f;
				num2 *= 0.9f;
			}
			else if (type == 2 || type == 82)
			{
				num2 *= 0.75f;
				num3 *= 0.55f;
			}
			else if (type == 172)
			{
				num2 *= 0.55f;
				num *= 0.35f;
			}
			else if (type == 308)
			{
				num2 *= 0.7f;
				num *= 0.1f;
			}
			else if (type == 304)
			{
				num2 *= 0.2f;
				num3 *= 0.1f;
			}
			else if (type == 263)
			{
				num2 *= 0.7f;
				num *= 0.1f;
			}
			else if (type == 274)
			{
				num2 *= 0.1f;
				num *= 0.7f;
			}
			else if (type == 254)
			{
				num *= 0.1f;
			}
			else if (type == 94)
			{
				num *= 0.5f;
				num2 *= 0f;
			}
			else if (type == 95 || type == 96 || type == 103 || type == 104)
			{
				num *= 0.35f;
				num2 *= 1f;
				num3 *= 0f;
			}
			else if (type == 4)
			{
				num2 *= 0.1f;
				num *= 0.5f;
			}
			else if (type == 257)
			{
				num2 *= 0.9f;
				num *= 0.1f;
			}
			else if (type == 9)
			{
				num2 *= 0.1f;
				num3 *= 0.6f;
			}
			else if (type == 488)
			{
				num = 0.3f;
				num3 = 0.25f;
				num2 = 0f;
			}
			else if (type == 92)
			{
				num2 *= 0.6f;
				num *= 0.8f;
			}
			else if (type == 93)
			{
				num2 *= 1f;
				num *= 1f;
				num3 *= 0.01f;
			}
			else if (type == 12 || type == 955)
			{
				num *= 0.9f;
				num2 *= 0.8f;
				num3 *= 0.1f;
			}
			else if (type == 14 || type == 110 || type == 180 || type == 242 || type == 302)
			{
				num2 *= 0.7f;
				num3 *= 0.1f;
			}
			else if (type == 15)
			{
				num2 *= 0.4f;
				num3 *= 0.1f;
				num = 1f;
			}
			else if (type == 16)
			{
				num *= 0.1f;
				num2 *= 0.4f;
				num3 = 1f;
			}
			else if (type == 18)
			{
				num2 *= 0.1f;
				num *= 0.6f;
			}
			else if (type == 19)
			{
				num2 *= 0.5f;
				num3 *= 0.1f;
			}
			else if (type == 20)
			{
				num *= 0.1f;
				num3 *= 0.3f;
			}
			else if (type == 22)
			{
				num = 0f;
				num2 = 0f;
			}
			else if (type == 27)
			{
				num *= 0f;
				num2 *= 0.3f;
				num3 = 1f;
			}
			else if (type == 34)
			{
				num2 *= 0.1f;
				num3 *= 0.1f;
			}
			else if (type == 36)
			{
				num = 0.8f;
				num2 *= 0.2f;
				num3 *= 0.6f;
			}
			else if (type == 41)
			{
				num2 *= 0.8f;
				num3 *= 0.6f;
			}
			else if (type == 44 || type == 45)
			{
				num3 = 1f;
				num *= 0.6f;
				num2 *= 0.1f;
			}
			else if (type == 50)
			{
				num *= 0.7f;
				num3 *= 0.8f;
			}
			else if (type == 515)
			{
				num2 *= 0.6f;
				num3 *= 0.85f;
			}
			else if (type == 870)
			{
				num *= 0.7f;
				num2 = 0f;
			}
			else if (type == 53)
			{
				num *= 0.7f;
				num2 *= 0.8f;
			}
			else if (type == 473)
			{
				num *= 1.05f;
				num2 *= 0.95f;
				num3 *= 0.55f;
			}
			else if (type == 72)
			{
				num *= 0.45f;
				num2 *= 0.75f;
				num3 = 1f;
			}
			else if (type == 86)
			{
				num *= 1f;
				num2 *= 0.45f;
				num3 = 0.75f;
			}
			else if (type == 87)
			{
				num *= 0.45f;
				num2 = 1f;
				num3 *= 0.75f;
			}
			else if (type == 73)
			{
				num *= 0.4f;
				num2 *= 0.6f;
				num3 *= 1f;
			}
			else if (type == 74)
			{
				num *= 1f;
				num2 *= 0.4f;
				num3 *= 0.6f;
			}
			else if (type == 284)
			{
				num *= 1f;
				num2 *= 0.1f;
				num3 *= 0.8f;
			}
			else if (type == 285)
			{
				num *= 0.1f;
				num2 *= 0.5f;
				num3 *= 1f;
			}
			else if (type == 286)
			{
				num *= 1f;
				num2 *= 0.5f;
				num3 *= 0.1f;
			}
			else if (type == 287)
			{
				num *= 0.9f;
				num2 *= 1f;
				num3 *= 0.4f;
			}
			else if (type == 283)
			{
				num *= 0.8f;
				num2 *= 0.1f;
			}
			else if (type == 76 || type == 77 || type == 78)
			{
				num *= 1f;
				num2 *= 0.3f;
				num3 *= 0.6f;
			}
			else if (type == 79)
			{
				num = (float)Main.DiscoR / 255f;
				num2 = (float)Main.DiscoG / 255f;
				num3 = (float)Main.DiscoB / 255f;
			}
			else if (type == 80)
			{
				num *= 0f;
				num2 *= 0.8f;
				num3 *= 1f;
			}
			else if (type == 83 || type == 88)
			{
				num *= 0.7f;
				num2 *= 0f;
				num3 *= 1f;
			}
			else if (type == 100)
			{
				num *= 1f;
				num2 *= 0.5f;
				num3 *= 0f;
			}
			else if (type == 84 || type == 389)
			{
				num *= 0.8f;
				num2 *= 0f;
				num3 *= 0.5f;
			}
			else if (type == 89 || type == 90)
			{
				num2 *= 0.2f;
				num3 *= 1f;
				num *= 0.05f;
			}
			else if (type == 106)
			{
				num *= 0f;
				num2 *= 0.5f;
				num3 *= 1f;
			}
			else if (type == 113)
			{
				num *= 0.25f;
				num2 *= 0.75f;
				num3 *= 1f;
			}
			else if (type == 114 || type == 115)
			{
				num *= 0.5f;
				num2 *= 0.05f;
				num3 *= 1f;
			}
			else if (type == 116)
			{
				num3 *= 0.25f;
			}
			else if (type == 131)
			{
				num *= 0.1f;
				num2 *= 0.4f;
			}
			else if (type == 132 || type == 157)
			{
				num *= 0.2f;
				num3 *= 0.6f;
			}
			else if (type == 156)
			{
				num *= 1f;
				num3 *= 0.6f;
				num2 = 0f;
			}
			else if (type == 173)
			{
				num *= 0.3f;
				num3 *= 1f;
				num2 = 0.4f;
			}
			else if (type == 207)
			{
				num *= 0.4f;
				num3 *= 0.4f;
			}
			else if (type == 253)
			{
				num = 0f;
				num2 *= 0.4f;
			}
			else if (type == 211)
			{
				num *= 0.5f;
				num2 *= 0.9f;
				num3 *= 1f;
				if (localAI[0] == 0f)
				{
					light = 1.5f;
				}
				else
				{
					light = 1f;
				}
			}
			else if (type == 209)
			{
				float num5 = (255f - (float)alpha) / 255f;
				num *= 0.3f;
				num2 *= 0.4f;
				num3 *= 1.75f;
				num3 *= num5;
				num *= num5;
				num2 *= num5;
			}
			else if (type == 226 || ((type == 227) | (type == 229)))
			{
				num *= 0.25f;
				num2 *= 1f;
				num3 *= 0.5f;
			}
			else if (type == 251)
			{
				num = (float)Main.DiscoR / 255f;
				num2 = (float)Main.DiscoG / 255f;
				num3 = (float)Main.DiscoB / 255f;
				num = (num + 1f) / 2f;
				num2 = (num2 + 1f) / 2f;
				num3 = (num3 + 1f) / 2f;
				num *= light;
				num2 *= light;
				num3 *= light;
			}
			else if (type == 278 || type == 279)
			{
				num *= 1f;
				num2 *= 1f;
				num3 *= 0f;
			}
			Lighting.AddLight((int)((position.X + (float)(width / 2)) / 16f), (int)((position.Y + (float)(height / 2)) / 16f), num, num2, num3);
		}

		public Rectangle getRect()
		{
			return new Rectangle((int)position.X, (int)position.Y, width, height);
		}

		public void Update(int i)
		{
			if (!active)
			{
				return;
			}
			if (Main.netMode == 1 && (ProjectileID.Sets.IsAGolfBall[type] || type == 820))
			{
				int num = (int)(position.X + (float)(width / 2)) / 16;
				int num2 = (int)(position.Y + (float)(height / 2)) / 16;
				if (Main.tile[num, num2] == null)
				{
					return;
				}
			}
			numUpdates = extraUpdates;
			while (numUpdates >= 0)
			{
				numUpdates--;
				if (type == 640 && ai[1] > 0f)
				{
					ai[1] -= 1f;
					continue;
				}
				if (position.X <= Main.leftWorld || position.X + (float)width >= Main.rightWorld || position.Y <= Main.topWorld || position.Y + (float)height >= Main.bottomWorld)
				{
					active = false;
					return;
				}
				if (!noEnchantmentVisuals)
				{
					UpdateEnchantmentVisuals();
				}
				if (numUpdates == -1 && (minion || sentry))
				{
					Player player = Main.player[owner];
					damage = (int)((float)originalDamage * player.minionDamage);
				}
				if (minion && numUpdates == -1 && type != 625 && type != 628)
				{
					minionPos = Main.player[owner].numMinions;
					if (Main.player[owner].slotsMinions + minionSlots > (float)Main.player[owner].maxMinions && owner == Main.myPlayer)
					{
						if ((type == 627 || type == 626) && owner == Main.myPlayer)
						{
							int byUUID = GetByUUID(owner, ai[0]);
							if (byUUID != -1)
							{
								Projectile projectile = Main.projectile[byUUID];
								if (projectile.type != 625)
								{
									projectile.localAI[1] = localAI[1];
								}
								projectile = Main.projectile[(int)localAI[1]];
								projectile.ai[0] = ai[0];
								projectile.ai[1] = 1f;
								projectile.netUpdate = true;
							}
						}
						Kill();
					}
					else
					{
						Main.player[owner].numMinions++;
						Main.player[owner].slotsMinions += minionSlots;
					}
				}
				float num3 = 1f + Math.Abs(velocity.X) / 3f;
				if (gfxOffY > 0f)
				{
					gfxOffY -= num3 * stepSpeed;
					if (gfxOffY < 0f)
					{
						gfxOffY = 0f;
					}
				}
				else if (gfxOffY < 0f)
				{
					gfxOffY += num3 * stepSpeed;
					if (gfxOffY > 0f)
					{
						gfxOffY = 0f;
					}
				}
				if (gfxOffY > 16f)
				{
					gfxOffY = 16f;
				}
				if (gfxOffY < -16f)
				{
					gfxOffY = -16f;
				}
				Vector2 wetVelocity = velocity;
				oldVelocity = velocity;
				whoAmI = i;
				if (soundDelay > 0)
				{
					soundDelay--;
				}
				netUpdate = false;
				for (int j = 0; j < 255; j++)
				{
					if (playerImmune[j] > 0)
					{
						playerImmune[j]--;
					}
				}
				if (usesLocalNPCImmunity)
				{
					for (int k = 0; k < 200; k++)
					{
						if (localNPCImmunity[k] > 0)
						{
							localNPCImmunity[k]--;
						}
					}
				}
				AI();
				if (ShouldUseWindPhysics() && (double)base.Center.Y < Main.worldSurface * 16.0 && Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16] != null && Main.tile[(int)base.Center.X / 16, (int)base.Center.Y / 16].wall == 0 && ((velocity.X > 0f && Main.windSpeedCurrent < 0f) || (velocity.X < 0f && Main.windSpeedCurrent > 0f) || Math.Abs(velocity.X) < Math.Abs(Main.windSpeedCurrent * Main.windPhysicsStrength) * 180f) && Math.Abs(velocity.X) < 16f)
				{
					velocity.X += Main.windSpeedCurrent * Main.windPhysicsStrength;
					MathHelper.Clamp(velocity.X, -16f, 16f);
				}
				if (owner < 255 && !Main.player[owner].active)
				{
					Kill();
				}
				if (type == 242 || type == 302 || type == 638)
				{
					wet = false;
				}
				if (!ignoreWater)
				{
					bool flag;
					bool flag2;
					try
					{
						flag = Collision.LavaCollision(position, width, height);
						flag2 = Collision.WetCollision(position, width, height);
						if (flag)
						{
							lavaWet = true;
						}
						if (Collision.honey)
						{
							honeyWet = true;
						}
					}
					catch
					{
						active = false;
						return;
					}
					if (wet && !lavaWet)
					{
						if (type == 85 || type == 15 || type == 188)
						{
							Kill();
						}
						if (type == 2)
						{
							type = 1;
							light = 0f;
						}
					}
					if (type == 34)
					{
						if (wet && !lavaWet)
						{
							Kill();
						}
						if (lavaWet)
						{
							flag2 = (wet = (lavaWet = false));
						}
					}
					if (type == 80)
					{
						flag2 = false;
						wet = false;
						if (flag && ai[0] >= 0f)
						{
							Kill();
						}
					}
					if (flag2)
					{
						if (type != 155 && wetCount == 0 && !wet)
						{
							if (!flag)
							{
								if (honeyWet)
								{
									for (int l = 0; l < 10; l++)
									{
										int num4 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
										Main.dust[num4].velocity.Y -= 1f;
										Main.dust[num4].velocity.X *= 2.5f;
										Main.dust[num4].scale = 1.3f;
										Main.dust[num4].alpha = 100;
										Main.dust[num4].noGravity = true;
									}
									SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
								}
								else
								{
									for (int m = 0; m < 10; m++)
									{
										int num5 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, Dust.dustWater());
										Main.dust[num5].velocity.Y -= 4f;
										Main.dust[num5].velocity.X *= 2.5f;
										Main.dust[num5].scale = 1.3f;
										Main.dust[num5].alpha = 100;
										Main.dust[num5].noGravity = true;
									}
									SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
								}
							}
							else
							{
								for (int n = 0; n < 10; n++)
								{
									int num6 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
									Main.dust[num6].velocity.Y -= 1.5f;
									Main.dust[num6].velocity.X *= 2.5f;
									Main.dust[num6].scale = 1.3f;
									Main.dust[num6].alpha = 100;
									Main.dust[num6].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
						}
						wet = true;
					}
					else if (wet)
					{
						wet = false;
						if (type == 155)
						{
							velocity.Y *= 0.5f;
						}
						else if (wetCount == 0)
						{
							wetCount = 10;
							if (!lavaWet)
							{
								if (honeyWet)
								{
									for (int num7 = 0; num7 < 10; num7++)
									{
										int num8 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 152);
										Main.dust[num8].velocity.Y -= 1f;
										Main.dust[num8].velocity.X *= 2.5f;
										Main.dust[num8].scale = 1.3f;
										Main.dust[num8].alpha = 100;
										Main.dust[num8].noGravity = true;
									}
									SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
								}
								else
								{
									for (int num9 = 0; num9 < 10; num9++)
									{
										int num10 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2)), width + 12, 24, Dust.dustWater());
										Main.dust[num10].velocity.Y -= 4f;
										Main.dust[num10].velocity.X *= 2.5f;
										Main.dust[num10].scale = 1.3f;
										Main.dust[num10].alpha = 100;
										Main.dust[num10].noGravity = true;
									}
									SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
								}
							}
							else
							{
								for (int num11 = 0; num11 < 10; num11++)
								{
									int num12 = Dust.NewDust(new Vector2(position.X - 6f, position.Y + (float)(height / 2) - 8f), width + 12, 24, 35);
									Main.dust[num12].velocity.Y -= 1.5f;
									Main.dust[num12].velocity.X *= 2.5f;
									Main.dust[num12].scale = 1.3f;
									Main.dust[num12].alpha = 100;
									Main.dust[num12].noGravity = true;
								}
								SoundEngine.PlaySound(19, (int)position.X, (int)position.Y);
							}
						}
					}
					if (!wet)
					{
						lavaWet = false;
						honeyWet = false;
					}
					if (wetCount > 0)
					{
						wetCount--;
					}
				}
				oldPosition = position;
				oldDirection = direction;
				HandleMovement(wetVelocity, out var _, out var _);
				if (AutomaticallyChangesDirection())
				{
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
				}
				if (!active)
				{
					return;
				}
				ProjLight();
				if (!npcProj && friendly && Main.player[owner].magicQuiver && extraUpdates < 1 && arrow)
				{
					extraUpdates = 1;
				}
				if (type == 2 || type == 82)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100);
				}
				else if (type == 172)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, 0f, 0f, 100);
				}
				else if (type == 103)
				{
					int num13 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 75, 0f, 0f, 100);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num13].noGravity = true;
						Main.dust[num13].scale *= 2f;
					}
				}
				else if (type == 278)
				{
					int num14 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 169, 0f, 0f, 100);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num14].noGravity = true;
						Main.dust[num14].scale *= 1.5f;
					}
				}
				else if (type == 4)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14, 0f, 0f, 150, default(Color), 1.1f);
					}
				}
				else if (type == 5)
				{
					int num15;
					switch (Main.rand.Next(3))
					{
					case 0:
						num15 = 15;
						break;
					case 1:
						num15 = 57;
						break;
					default:
						num15 = 58;
						break;
					}
					Dust.NewDust(position, width, height, num15, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.2f);
				}
				Damage();
				if (type == 434 && localAI[0] == 0f && numUpdates == 0)
				{
					extraUpdates = 1;
					velocity = Vector2.Zero;
					localAI[0] = 1f;
					localAI[1] = 0.9999f;
					netUpdate = true;
				}
				if (Main.netMode != 1 && (type == 99 || type == 655 || type == 727))
				{
					Collision.SwitchTiles(position, width, height, oldPosition, 3);
				}
				if (ProjectileID.Sets.TrailingMode[type] == 0)
				{
					for (int num16 = oldPos.Length - 1; num16 > 0; num16--)
					{
						oldPos[num16] = oldPos[num16 - 1];
					}
					oldPos[0] = position;
				}
				else if (ProjectileID.Sets.TrailingMode[type] == 1)
				{
					if (frameCounter == 0 || oldPos[0] == Vector2.Zero)
					{
						for (int num17 = oldPos.Length - 1; num17 > 0; num17--)
						{
							oldPos[num17] = oldPos[num17 - 1];
						}
						oldPos[0] = position;
						if (velocity == Vector2.Zero && type == 466)
						{
							float num18 = rotation + (float)Math.PI / 2f + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
							float num19 = (float)Main.rand.NextDouble() * 2f + 2f;
							Vector2 vector = new Vector2((float)Math.Cos(num18) * num19, (float)Math.Sin(num18) * num19);
							int num20 = Dust.NewDust(oldPos[oldPos.Length - 1], 0, 0, 229, vector.X, vector.Y);
							Main.dust[num20].noGravity = true;
							Main.dust[num20].scale = 1.7f;
						}
						if (velocity == Vector2.Zero && type == 580)
						{
							float num21 = rotation + (float)Math.PI / 2f + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
							float num22 = (float)Main.rand.NextDouble() * 2f + 2f;
							Vector2 vector2 = new Vector2((float)Math.Cos(num21) * num22, (float)Math.Sin(num21) * num22);
							int num23 = Dust.NewDust(oldPos[oldPos.Length - 1], 0, 0, 229, vector2.X, vector2.Y);
							Main.dust[num23].noGravity = true;
							Main.dust[num23].scale = 1.7f;
						}
					}
				}
				else if (ProjectileID.Sets.TrailingMode[type] == 2)
				{
					for (int num24 = oldPos.Length - 1; num24 > 0; num24--)
					{
						oldPos[num24] = oldPos[num24 - 1];
						oldRot[num24] = oldRot[num24 - 1];
						oldSpriteDirection[num24] = oldSpriteDirection[num24 - 1];
					}
					oldPos[0] = position;
					oldRot[0] = rotation;
					oldSpriteDirection[0] = spriteDirection;
				}
				else if (ProjectileID.Sets.TrailingMode[type] == 3)
				{
					for (int num25 = oldPos.Length - 1; num25 > 0; num25--)
					{
						oldPos[num25] = oldPos[num25 - 1];
						oldRot[num25] = oldRot[num25 - 1];
						oldSpriteDirection[num25] = oldSpriteDirection[num25 - 1];
					}
					oldPos[0] = position;
					oldRot[0] = rotation;
					oldSpriteDirection[0] = spriteDirection;
					float amount = 0.65f;
					int num26 = 1;
					for (int num27 = 0; num27 < num26; num27++)
					{
						for (int num28 = oldPos.Length - 1; num28 > 0; num28--)
						{
							if (!(oldPos[num28] == Vector2.Zero))
							{
								if (oldPos[num28].Distance(oldPos[num28 - 1]) > 2f)
								{
									oldPos[num28] = Vector2.Lerp(oldPos[num28], oldPos[num28 - 1], amount);
								}
								oldRot[num28] = (oldPos[num28 - 1] - oldPos[num28]).SafeNormalize(Vector2.Zero).ToRotation();
							}
						}
					}
				}
				else if (ProjectileID.Sets.TrailingMode[type] == 4)
				{
					Vector2 vector3 = Main.player[owner].position - Main.player[owner].oldPosition;
					for (int num29 = oldPos.Length - 1; num29 > 0; num29--)
					{
						oldPos[num29] = oldPos[num29 - 1];
						oldRot[num29] = oldRot[num29 - 1];
						oldSpriteDirection[num29] = oldSpriteDirection[num29 - 1];
						if (numUpdates == 0 && oldPos[num29] != Vector2.Zero)
						{
							oldPos[num29] += vector3;
						}
					}
					oldPos[0] = position;
					oldRot[0] = rotation;
					oldSpriteDirection[0] = spriteDirection;
				}
				if (ProjectileID.Sets.IsADD2Turret[type] && DD2Event.Ongoing)
				{
					timeLeft++;
				}
				timeLeft--;
				if (timeLeft <= 0)
				{
					Kill();
				}
				if (penetrate == 0)
				{
					Kill();
				}
				if (!active || owner != Main.myPlayer)
				{
					continue;
				}
				if (netUpdate2)
				{
					netUpdate = true;
				}
				if (!active)
				{
					netSpam = 0;
				}
				if (netUpdate)
				{
					if (netSpam < 60)
					{
						netSpam += 5;
						NetMessage.SendData(27, -1, -1, null, i);
						netUpdate2 = false;
					}
					else
					{
						netUpdate2 = true;
					}
				}
				if (netSpam > 0)
				{
					netSpam--;
				}
			}
			netUpdate = false;
		}

		private bool AutomaticallyChangesDirection()
		{
			if ((aiStyle != 3 || ai[0] != 1f) && (aiStyle != 7 || ai[0] != 1f) && (aiStyle != 13 || ai[0] != 1f) && aiStyle != 65 && aiStyle != 69 && aiStyle != 114 && aiStyle != 123 && aiStyle != 112 && !manualDirectionChange && aiStyle != 67 && aiStyle != 26 && aiStyle != 15)
			{
				return aiStyle != 150;
			}
			return false;
		}

		private void UpdateEnchantmentVisuals()
		{
			if (npcProj)
			{
				return;
			}
			if (Main.player[owner].frostBurn && (melee || ranged) && friendly && !hostile && !noEnchantments && Main.rand.Next(2 * (1 + extraUpdates)) == 0)
			{
				int num = Dust.NewDust(position, width, height, 135, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 2f);
				Main.dust[num].noGravity = true;
				Main.dust[num].velocity *= 0.7f;
				Main.dust[num].velocity.Y -= 0.5f;
			}
			if (melee && Main.player[owner].magmaStone && !noEnchantments && Main.rand.Next(3) != 0)
			{
				int num2 = Dust.NewDust(new Vector2(position.X - 4f, position.Y - 4f), width + 8, height + 8, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
				if (Main.rand.Next(2) == 0)
				{
					Main.dust[num2].scale = 1.5f;
				}
				Main.dust[num2].noGravity = true;
				Main.dust[num2].velocity.X *= 2f;
				Main.dust[num2].velocity.Y *= 2f;
			}
			if (!melee || Main.player[owner].meleeEnchant <= 0 || noEnchantments)
			{
				return;
			}
			if (Main.player[owner].meleeEnchant == 1 && Main.rand.Next(3) == 0)
			{
				int num3 = Dust.NewDust(position, width, height, 171, 0f, 0f, 100);
				Main.dust[num3].noGravity = true;
				Main.dust[num3].fadeIn = 1.5f;
				Main.dust[num3].velocity *= 0.25f;
			}
			if (Main.player[owner].meleeEnchant == 1)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num4 = Dust.NewDust(position, width, height, 171, 0f, 0f, 100);
					Main.dust[num4].noGravity = true;
					Main.dust[num4].fadeIn = 1.5f;
					Main.dust[num4].velocity *= 0.25f;
				}
			}
			else if (Main.player[owner].meleeEnchant == 2)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num5 = Dust.NewDust(position, width, height, 75, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 2.5f);
					Main.dust[num5].noGravity = true;
					Main.dust[num5].velocity *= 0.7f;
					Main.dust[num5].velocity.Y -= 0.5f;
				}
			}
			else if (Main.player[owner].meleeEnchant == 3)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num6 = Dust.NewDust(position, width, height, 6, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 2.5f);
					Main.dust[num6].noGravity = true;
					Main.dust[num6].velocity *= 0.7f;
					Main.dust[num6].velocity.Y -= 0.5f;
				}
			}
			else if (Main.player[owner].meleeEnchant == 4)
			{
				int num7 = 0;
				if (Main.rand.Next(2) == 0)
				{
					num7 = Dust.NewDust(position, width, height, 57, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.1f);
					Main.dust[num7].noGravity = true;
					Main.dust[num7].velocity.X /= 2f;
					Main.dust[num7].velocity.Y /= 2f;
				}
			}
			else if (Main.player[owner].meleeEnchant == 5)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num8 = Dust.NewDust(position, width, height, 169, 0f, 0f, 100);
					Main.dust[num8].velocity.X += direction;
					Main.dust[num8].velocity.Y += 0.2f;
					Main.dust[num8].noGravity = true;
				}
			}
			else if (Main.player[owner].meleeEnchant == 6)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num9 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100);
					Main.dust[num9].velocity.X += direction;
					Main.dust[num9].velocity.Y += 0.2f;
					Main.dust[num9].noGravity = true;
				}
			}
			else if (Main.player[owner].meleeEnchant == 7)
			{
				Vector2 vector = velocity;
				if (vector.Length() > 4f)
				{
					vector *= 4f / vector.Length();
				}
				if (Main.rand.Next(20) == 0)
				{
					int num10 = Main.rand.Next(139, 143);
					int num11 = Dust.NewDust(position, width, height, num10, vector.X, vector.Y, 0, default(Color), 1.2f);
					Main.dust[num11].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num11].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num11].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num11].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num11].scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
				}
				if (Main.rand.Next(40) == 0)
				{
					int num12 = Main.rand.Next(276, 283);
					int num13 = Gore.NewGore(position, vector, num12);
					Main.gore[num13].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num13].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num13].scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					Main.gore[num13].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.gore[num13].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				}
			}
			else if (Main.player[owner].meleeEnchant == 8 && Main.rand.Next(4) == 0)
			{
				int num14 = Dust.NewDust(position, width, height, 46, 0f, 0f, 100);
				Main.dust[num14].noGravity = true;
				Main.dust[num14].fadeIn = 1.5f;
				Main.dust[num14].velocity *= 0.25f;
			}
		}

		private void HandleMovement(Vector2 wetVelocity, out int overrideWidth, out int overrideHeight)
		{
			bool flag = false;
			overrideWidth = -1;
			overrideHeight = -1;
			bool flag2 = false;
			bool? flag3 = ProjectileID.Sets.ForcePlateDetection[type];
			bool flag4 = flag3.HasValue && !flag3.Value;
			bool flag5 = flag3.HasValue && flag3.Value;
			if (tileCollide)
			{
				Vector2 lastVelocity = velocity;
				bool flag6 = true;
				Vector2? vector = null;
				if (Main.projPet[type])
				{
					flag6 = false;
					if (Main.player[owner].position.Y + (float)Main.player[owner].height - 12f > position.Y + (float)height)
					{
						flag6 = true;
					}
				}
				if (type == 500)
				{
					flag6 = false;
					if (Main.player[owner].Bottom.Y > base.Bottom.Y + 4f)
					{
						flag6 = true;
					}
				}
				if (type == 653)
				{
					flag6 = false;
					if (Main.player[owner].Bottom.Y > base.Bottom.Y + 4f)
					{
						flag6 = true;
					}
				}
				if (aiStyle == 62)
				{
					flag6 = true;
				}
				if (aiStyle == 66)
				{
					flag6 = true;
				}
				if (type == 317)
				{
					flag6 = true;
				}
				if (type == 373)
				{
					flag6 = true;
				}
				if (aiStyle == 53)
				{
					flag6 = false;
				}
				if (type == 9 || type == 12 || type == 15 || type == 13)
				{
					flag6 = false;
				}
				if (aiStyle == 10 && ProjectileID.Sets.FallingBlockDoesNotFallThroughPlatforms[type])
				{
					flag6 = false;
				}
				if (type == 24)
				{
					flag6 = false;
				}
				switch (type)
				{
				case 663:
				case 665:
				case 667:
				case 677:
				case 678:
				case 679:
				case 688:
				case 689:
				case 690:
				case 691:
				case 692:
				case 693:
					flag6 = false;
					break;
				case 759:
					flag6 = true;
					break;
				}
				if (decidesManualFallThrough)
				{
					flag6 = shouldFallThrough;
				}
				if (type == 771 || type == 822 || type == 823 || type == 843 || type == 846 || type == 845 || type == 852)
				{
					overrideWidth = width;
					overrideHeight = 34;
					vector = new Vector2(0.75f, 0.75f);
				}
				if (type == 969)
				{
					overrideWidth = 18;
					overrideHeight = 32;
				}
				if (type == 824 || type == 839 || type == 840 || type == 850 || type == 853)
				{
					overrideWidth = width;
					overrideHeight = 58;
					vector = new Vector2(0.75f, 0.75f);
				}
				if (type == 826 || type == 830 || type == 838)
				{
					overrideWidth = width;
					overrideHeight = 38;
					vector = new Vector2(0.75f, 0.75f);
				}
				if (type == 828 || type == 829 || type == 827 || type == 844)
				{
					overrideWidth = width;
					overrideHeight = 22;
					vector = new Vector2(0.75f, 0.75f);
				}
				if (aiStyle == 29 || type == 28 || aiStyle == 49 || type == 906 || type == 903 || type == 904 || type == 910)
				{
					overrideWidth = width - 8;
					overrideHeight = height - 8;
				}
				else if (type == 250 || type == 267 || type == 297 || type == 323 || type == 3 || type == 711)
				{
					overrideWidth = 6;
					overrideHeight = 6;
				}
				else if (type == 308)
				{
					overrideWidth = 26;
					overrideHeight = height;
				}
				else if (type == 663 || type == 665 || type == 667 || type == 677 || type == 678 || type == 679 || type == 691 || type == 692 || type == 693)
				{
					overrideWidth = 16;
					overrideHeight = height;
				}
				else if (type == 688 || type == 689 || type == 690)
				{
					overrideWidth = 16;
					overrideHeight = height;
					vector = new Vector2(0.5f, 1f);
				}
				else if (type == 669 || type == 706)
				{
					overrideWidth = 10;
					overrideHeight = 10;
				}
				else if (type == 261 || type == 277)
				{
					overrideWidth = 26;
					overrideHeight = 26;
				}
				else if (type == 481 || type == 491 || type == 106 || type == 262 || type == 271 || type == 270 || type == 272 || type == 273 || type == 274 || type == 280 || type == 288 || type == 301 || type == 320 || type == 333 || type == 335 || type == 343 || type == 344 || type == 497 || type == 496 || type == 6 || type == 19 || type == 113 || type == 52 || type == 520 || type == 523 || type == 585 || type == 598 || type == 599 || type == 636 || type == 837 || type == 861 || type == 867 || type == 971)
				{
					overrideWidth = 10;
					overrideHeight = 10;
				}
				else if (type == 514)
				{
					overrideWidth = 4;
					overrideHeight = 4;
				}
				else if (type == 248 || type == 247 || type == 507 || type == 508 || type == 662 || type == 680 || type == 685 || type == 757 || type == 928)
				{
					overrideWidth = width - 12;
					overrideHeight = height - 12;
				}
				else if (aiStyle == 18 || type == 254)
				{
					overrideWidth = width - 36;
					overrideHeight = height - 36;
				}
				else if (type == 182 || type == 190 || type == 33 || type == 229 || type == 237 || type == 243 || type == 866)
				{
					overrideWidth = width - 20;
					overrideHeight = height - 20;
				}
				else if (aiStyle == 27)
				{
					overrideWidth = width - 12;
					overrideHeight = height - 12;
				}
				else if (type == 533 && ai[0] >= 6f)
				{
					overrideWidth = width + 6;
					overrideHeight = height + 6;
				}
				else if (type == 755 && ai[0] >= 0f)
				{
					overrideWidth = width + 6;
					overrideHeight = height + 6;
				}
				else if (type == 759)
				{
					if (velocity.X != lastVelocity.X)
					{
						velocity.X = 0f - lastVelocity.X;
					}
					if (velocity.Y != lastVelocity.Y)
					{
						velocity.Y = 0f - lastVelocity.Y;
					}
				}
				else if (type == 582 || type == 634 || type == 635 || type == 902)
				{
					overrideWidth = 8;
					overrideHeight = 8;
				}
				else if (type == 617)
				{
					overrideWidth = (int)(20f * scale);
					overrideHeight = (int)(20f * scale);
				}
				else if (type == 304)
				{
					overrideWidth = 4;
					overrideHeight = 4;
				}
				else if (aiStyle == 9)
				{
					overrideWidth = 4;
					overrideHeight = 4;
				}
				else if (type == 931)
				{
					overrideWidth = 4;
					overrideHeight = 4;
				}
				if (((type != 440 && type != 449 && type != 606) || ai[1] != 1f) && (type != 466 || localAI[1] != 1f) && (type != 580 || !(localAI[1] > 0f)) && (type != 640 || !(localAI[1] > 0f)))
				{
					if (aiStyle == 10)
					{
						if (type >= 736 && type <= 738)
						{
							velocity = Collision.TileCollision(position, velocity, width, height, flag6, flag6);
						}
						else if (type == 411 || type == 412 || type == 413 || type == 414)
						{
							velocity = Collision.TileCollision(position, velocity, width, height, flag6, flag6);
							velocity = Collision.AnyCollisionWithSpecificTiles(position, velocity, width, height, TileID.Sets.Falling, evenActuated: true);
						}
						else if (type == 42 || type == 65 || type == 68 || type == 354 || (type == 31 && ai[0] == 2f))
						{
							velocity = Collision.TileCollision(position, velocity, width, height, flag6, flag6);
						}
						else
						{
							velocity = Collision.TileCollision(position, velocity, width, height, flag6, flag6);
						}
					}
					else
					{
						Vector2 vector2 = position;
						int num = ((overrideWidth != -1) ? overrideWidth : width);
						int num2 = ((overrideHeight != -1) ? overrideHeight : height);
						if (overrideHeight != -1 || overrideWidth != -1)
						{
							vector2 = ((!vector.HasValue) ? new Vector2(position.X + (float)(width / 2) - (float)(num / 2), position.Y + (float)(height / 2) - (float)(num2 / 2)) : (base.Center - new Vector2(num, num2) * vector.Value));
						}
						if (wet)
						{
							if (honeyWet)
							{
								Vector2 vector3 = velocity;
								velocity = Collision.TileCollision(vector2, velocity, num, num2, flag6, flag6);
								wetVelocity = velocity * 0.25f;
								if (velocity.X != vector3.X)
								{
									wetVelocity.X = velocity.X;
								}
								if (velocity.Y != vector3.Y)
								{
									wetVelocity.Y = velocity.Y;
								}
							}
							else
							{
								Vector2 vector4 = velocity;
								velocity = Collision.TileCollision(vector2, velocity, num, num2, flag6, flag6);
								wetVelocity = velocity * 0.5f;
								if (velocity.X != vector4.X)
								{
									wetVelocity.X = velocity.X;
								}
								if (velocity.Y != vector4.Y)
								{
									wetVelocity.Y = velocity.Y;
								}
							}
							if (!Main.projPet[type])
							{
								Vector4 vector5 = Collision.SlopeCollision(vector2, velocity, num, num2, 0f, fall: true);
								Vector2 vector6 = position - vector2;
								if (aiStyle == 137)
								{
									if (vector2.Y != vector5.Y)
									{
										flag = true;
									}
									if (velocity.Y != vector5.W)
									{
										flag = true;
									}
									vector2.Y = vector5.Y;
									position.Y = vector2.Y + vector6.Y;
									velocity.Y = vector5.W;
								}
								else
								{
									if (vector2.X != vector5.X)
									{
										flag = true;
									}
									if (vector2.Y != vector5.Y)
									{
										flag = true;
									}
									if (velocity.X != vector5.Z)
									{
										flag = true;
									}
									if (velocity.Y != vector5.W)
									{
										flag = true;
									}
									vector2.X = vector5.X;
									vector2.Y = vector5.Y;
									position = vector2 + vector6;
									velocity.X = vector5.Z;
									velocity.Y = vector5.W;
								}
							}
						}
						else
						{
							int num3 = Math.Min(num, num2);
							if (num3 < 3)
							{
								num3 = 3;
							}
							if (num3 > 16)
							{
								num3 = 16;
							}
							if (velocity.Length() > (float)num3)
							{
								Vector2 vector7 = Collision.TileCollision(vector2, velocity, num, num2, flag6, flag6);
								float num4 = velocity.Length();
								float num5 = num3;
								Vector2 vector8 = velocity.SafeNormalize(Vector2.Zero);
								if (vector7.Y == 0f)
								{
									vector8.Y = 0f;
								}
								Vector2 zero = Vector2.Zero;
								_ = Vector2.Zero;
								_ = Vector2.Zero;
								Vector2 vector9 = vector2;
								int num6 = 0;
								while (num4 > 0f)
								{
									num6++;
									if (num6 > 300)
									{
										break;
									}
									vector9 = vector2;
									float num7 = num4;
									if (num7 > num5)
									{
										num7 = num5;
									}
									num4 -= num7;
									Vector2 vector10 = vector8 * num7;
									Vector2 vector11 = Collision.TileCollision(vector2, vector10, num, num2, flag6, flag6);
									vector2 += vector11;
									velocity = vector11;
									if (!Main.projPet[type])
									{
										Vector4 vector12 = Collision.SlopeCollision(vector2, velocity, num, num2, 0f, fall: true);
										Vector2 vector13 = position - vector2;
										if (aiStyle == 137)
										{
											if (vector2.Y != vector12.Y)
											{
												flag = true;
											}
											if (velocity.Y != vector12.W)
											{
												flag = true;
											}
											vector2.Y = vector12.Y;
											position.Y = vector2.Y + vector13.Y;
											velocity.Y = vector12.W;
										}
										else
										{
											if (vector2.X != vector12.X)
											{
												flag = true;
											}
											if (vector2.Y != vector12.Y)
											{
												flag = true;
											}
											if (velocity.X != vector12.Z)
											{
												flag = true;
											}
											if (velocity.Y != vector12.W)
											{
												flag = true;
											}
											vector2.X = vector12.X;
											vector2.Y = vector12.Y;
											position = vector2 + vector13;
											velocity.X = vector12.Z;
											velocity.Y = vector12.W;
										}
									}
									flag2 = true;
									if (owner == Main.myPlayer && vector2 != vector9 && !flag4)
									{
										Collision.SwitchTiles(vector2, num, num2, vector9, 4);
									}
									vector11 = velocity;
									zero += vector11;
								}
								velocity = zero;
								if (Math.Abs(velocity.X - lastVelocity.X) < 0.0001f)
								{
									velocity.X = lastVelocity.X;
								}
								if (Math.Abs(velocity.Y - lastVelocity.Y) < 0.0001f)
								{
									velocity.Y = lastVelocity.Y;
								}
								if (!Main.projPet[type])
								{
									Vector4 vector14 = Collision.SlopeCollision(vector2, velocity, num, num2, 0f, fall: true);
									Vector2 vector15 = position - vector2;
									if (aiStyle == 137)
									{
										if (vector2.Y != vector14.Y)
										{
											flag = true;
										}
										if (velocity.Y != vector14.W)
										{
											flag = true;
										}
										vector2.Y = vector14.Y;
										position.Y = vector2.Y + vector15.Y;
										velocity.Y = vector14.W;
									}
									else
									{
										if (vector2.X != vector14.X)
										{
											flag = true;
										}
										if (vector2.Y != vector14.Y)
										{
											flag = true;
										}
										if (velocity.X != vector14.Z)
										{
											flag = true;
										}
										if (velocity.Y != vector14.W)
										{
											flag = true;
										}
										vector2.X = vector14.X;
										vector2.Y = vector14.Y;
										position = vector2 + vector15;
										velocity.X = vector14.Z;
										velocity.Y = vector14.W;
									}
								}
							}
							else
							{
								velocity = Collision.TileCollision(vector2, velocity, num, num2, flag6, flag6);
								if (!Main.projPet[type])
								{
									Vector4 vector16 = Collision.SlopeCollision(vector2, velocity, num, num2, 0f, fall: true);
									Vector2 vector17 = position - vector2;
									if (aiStyle == 137)
									{
										if (vector2.Y != vector16.Y)
										{
											flag = true;
										}
										if (velocity.Y != vector16.W)
										{
											flag = true;
										}
										vector2.Y = vector16.Y;
										position.Y = vector2.Y + vector17.Y;
										velocity.Y = vector16.W;
									}
									else
									{
										if (vector2.X != vector16.X)
										{
											flag = true;
										}
										if (vector2.Y != vector16.Y)
										{
											flag = true;
										}
										if (velocity.X != vector16.Z)
										{
											flag = true;
										}
										if (velocity.Y != vector16.W)
										{
											flag = true;
										}
										vector2.X = vector16.X;
										vector2.Y = vector16.Y;
										position = vector2 + vector17;
										velocity.X = vector16.Z;
										velocity.Y = vector16.W;
									}
								}
							}
						}
					}
				}
				if (lastVelocity != velocity)
				{
					flag = true;
				}
				if (flag)
				{
					if (owner == Main.myPlayer && CanCutTiles() && (friendly || hostile) && damage > 0)
					{
						int num8 = (int)(position.X + velocity.X - 1f) / 16;
						int num9 = (int)((position.X + (float)width + velocity.X + 1f) / 16f) + 1;
						int num10 = (int)(position.Y + velocity.Y - 1f) / 16;
						int num11 = (int)((position.Y + (float)height + velocity.Y + 1f) / 16f) + 1;
						if (num8 < 0)
						{
							num8 = 0;
						}
						if (num9 > Main.maxTilesX)
						{
							num9 = Main.maxTilesX;
						}
						if (num10 < 0)
						{
							num10 = 0;
						}
						if (num11 > Main.maxTilesY)
						{
							num11 = Main.maxTilesY;
						}
						for (int i = num8; i < num9; i++)
						{
							for (int j = num10; j < num11; j++)
							{
								if (Main.tile[i, j] != null && Main.tile[i, j].type == 484 && WorldGen.CanCutTile(i, j, TileCuttingContext.AttackProjectile))
								{
									WorldGen.KillTile(i, j);
									if (Main.netMode != 0)
									{
										NetMessage.SendData(17, -1, -1, null, 0, i, j);
									}
								}
							}
						}
					}
					if (type == 663 || type == 665 || type == 667 || type == 677 || type == 678 || type == 679 || type == 691 || type == 692 || type == 693 || type == 688 || type == 689 || type == 690)
					{
						position += velocity;
						velocity = Vector2.Zero;
					}
					else if (type == 434)
					{
						position += velocity;
						numUpdates = 0;
					}
					else if (type == 601)
					{
						if (Main.netMode != 2 && alpha > 0)
						{
							if (ai[1] != 0f)
							{
								SoundEngine.PlaySound(SoundID.Item114, position);
							}
							else
							{
								SoundEngine.PlaySound(SoundID.Item115, position);
							}
						}
						if (owner == Main.myPlayer)
						{
							PortalHelper.TryPlacingPortal(this, lastVelocity, velocity);
						}
						position += velocity;
						Kill();
					}
					else if (type == 451)
					{
						ai[0] = 1f;
						ai[1] = 0f;
						netUpdate = true;
						velocity = lastVelocity / 2f;
					}
					else if (type == 645)
					{
						ai[0] = 0f;
						ai[1] = -1f;
						netUpdate = true;
					}
					else if (type == 584)
					{
						bool flag7 = false;
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = lastVelocity.X * -0.75f;
							flag7 = true;
						}
						if ((velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f) || velocity.Y == 0f)
						{
							velocity.Y = lastVelocity.Y * -0.75f;
							flag7 = true;
						}
						if (flag7)
						{
							float num12 = lastVelocity.Length() / velocity.Length();
							if (num12 == 0f)
							{
								num12 = 1f;
							}
							velocity /= num12;
							penetrate--;
						}
					}
					else if (type == 532)
					{
						bool flag8 = false;
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = lastVelocity.X * -0.75f;
							flag8 = true;
						}
						if ((velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f) || velocity.Y == 0f)
						{
							velocity.Y = lastVelocity.Y * -0.75f;
							flag8 = true;
						}
						if (flag8)
						{
							float num13 = lastVelocity.Length() / velocity.Length();
							if (num13 == 0f)
							{
								num13 = 1f;
							}
							velocity /= num13;
							penetrate--;
							Collision.HitTiles(position, lastVelocity, width, height);
						}
					}
					else if (type == 533)
					{
						float num14 = 1f;
						bool flag9 = false;
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = lastVelocity.X * (0f - num14);
							flag9 = true;
						}
						if (velocity.Y != lastVelocity.Y || velocity.Y == 0f)
						{
							velocity.Y = lastVelocity.Y * (0f - num14) * 0.5f;
							flag9 = true;
						}
						if (flag9)
						{
							float num15 = lastVelocity.Length() / velocity.Length();
							if (num15 == 0f)
							{
								num15 = 1f;
							}
							velocity /= num15;
							if (ai[0] == 7f && (double)velocity.Y < -0.1)
							{
								velocity.Y += 0.1f;
							}
							if (ai[0] >= 6f && ai[0] < 9f)
							{
								Collision.HitTiles(position, lastVelocity, width, height);
							}
						}
					}
					else if (type == 502)
					{
						ai[0] += 1f;
						SoundEngine.PlaySound(37, (int)position.X, (int)position.Y, 5 + (int)ai[0]);
						if (ai[0] >= 5f)
						{
							position += velocity;
							Kill();
						}
						else
						{
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = 0f - lastVelocity.Y;
							}
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = 0f - lastVelocity.X;
							}
						}
						Vector2 spinningpoint = new Vector2(0f, -3f - ai[0]).RotatedByRandom(3.1415927410125732);
						float num16 = 10f + ai[0] * 4f;
						Vector2 vector18 = new Vector2(1.05f, 1f);
						for (float num17 = 0f; num17 < num16; num17 += 1f)
						{
							int num18 = Dust.NewDust(base.Center, 0, 0, 66, 0f, 0f, 0, Color.Transparent);
							Main.dust[num18].position = base.Center;
							Main.dust[num18].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num17 / num16) * vector18 * (0.8f + Main.rand.NextFloat() * 0.4f);
							Main.dust[num18].color = Main.hslToRgb(num17 / num16, 1f, 0.5f);
							Main.dust[num18].noGravity = true;
							Main.dust[num18].scale = 1f + ai[0] / 3f;
						}
						if (Main.myPlayer == owner)
						{
							int num19 = width;
							int num20 = height;
							int num21 = penetrate;
							position = base.Center;
							width = (height = 40 + 8 * (int)ai[0]);
							base.Center = position;
							penetrate = -1;
							Damage();
							penetrate = num21;
							position = base.Center;
							width = num19;
							height = num20;
							base.Center = position;
						}
					}
					else if (type == 444)
					{
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = 0f - lastVelocity.X;
						}
						if (velocity.Y != lastVelocity.Y)
						{
							velocity.Y = 0f - lastVelocity.Y;
						}
						ai[0] = velocity.ToRotation();
					}
					else if (type == 617)
					{
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = (0f - lastVelocity.X) * 0.35f;
						}
						if (velocity.Y != lastVelocity.Y)
						{
							velocity.Y = (0f - lastVelocity.Y) * 0.35f;
						}
					}
					else if (type == 440 || type == 449 || type == 606)
					{
						if (ai[1] != 1f)
						{
							ai[1] = 1f;
							position += velocity;
							velocity = lastVelocity;
						}
					}
					else if (type == 466 || type == 580 || type == 640)
					{
						if (localAI[1] < 1f)
						{
							localAI[1] += 2f;
							position += velocity;
							velocity = Vector2.Zero;
						}
					}
					else if (type == 851)
					{
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = (0f - lastVelocity.X) * 0.8f;
						}
						if (velocity.Y != lastVelocity.Y)
						{
							velocity.Y = (0f - lastVelocity.Y) * 0.5f;
						}
					}
					else if (type == 855)
					{
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = 0f - lastVelocity.X;
						}
						if (velocity.Y != lastVelocity.Y)
						{
							velocity.Y = 0f - lastVelocity.Y;
							if (lastVelocity.Y < 0f)
							{
								velocity.Y *= 0.25f;
							}
						}
					}
					else if (aiStyle == 54)
					{
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = lastVelocity.X * -0.6f;
						}
						if (velocity.Y != lastVelocity.Y)
						{
							velocity.Y = lastVelocity.Y * -0.6f;
						}
					}
					else if (type == 861)
					{
						float num22 = -1f;
						if (ai[1] == 1f)
						{
							num22 = -0.6f;
						}
						if (velocity.X != lastVelocity.X)
						{
							velocity.X = lastVelocity.X * num22;
						}
						if (velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 0.7)
						{
							velocity.Y = lastVelocity.Y * num22;
						}
						if (Math.Abs(velocity.Y) < 0.5f)
						{
							velocity.Y = 0f;
						}
						if (ai[1] != 1f)
						{
							netUpdate = true;
						}
						ai[1] = 1f;
					}
					else if (!Main.projPet[type] && type != 500 && type != 820 && aiStyle != 160 && type != 650 && type != 882 && type != 888 && type != 894 && type != 895 && type != 898 && type != 901 && type != 957)
					{
						if (aiStyle == 99)
						{
							if (type >= 556 && type <= 561)
							{
								bool flag10 = false;
								if (velocity.X != lastVelocity.X)
								{
									flag10 = true;
									velocity.X = lastVelocity.X * -1f;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									flag10 = true;
									velocity.Y = lastVelocity.Y * -1f;
								}
								if (flag10)
								{
									Vector2 vector19 = Main.player[owner].Center - base.Center;
									vector19.Normalize();
									vector19 *= velocity.Length();
									vector19 *= 0.25f;
									velocity *= 0.75f;
									velocity += vector19;
									if (velocity.Length() > 6f)
									{
										velocity *= 0.5f;
									}
								}
							}
						}
						else if (type == 604)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = 0f - lastVelocity.X;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = 0f - lastVelocity.Y;
							}
						}
						else if (type == 379)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -0.6f;
							}
							if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f)
							{
								velocity.Y = lastVelocity.Y * -0.6f;
							}
						}
						else if (type == 491)
						{
							if (ai[0] <= 0f)
							{
								ai[0] = -10f;
							}
							if (velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 0f)
							{
								velocity.X = lastVelocity.X * -1f;
							}
							if (velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 0f)
							{
								velocity.Y = lastVelocity.Y * -1f;
							}
						}
						else if ((type >= 515 && type <= 517) || type == 637)
						{
							if (velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 1f)
							{
								velocity.X = lastVelocity.X * -0.9f;
							}
							if (velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 1f)
							{
								velocity.Y = lastVelocity.Y * -0.9f;
							}
						}
						else if (type == 921 || type == 926 || type == 937)
						{
							if (velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 1f)
							{
								velocity.X = lastVelocity.X * -0.95f;
							}
							if (velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 1f)
							{
								velocity.Y = lastVelocity.Y * -0.95f;
							}
							penetrate--;
						}
						else if (type == 969)
						{
							if (velocity.X != lastVelocity.X && Math.Abs(lastVelocity.X) > 1f)
							{
								velocity.X = lastVelocity.X * -0.75f;
							}
							if (velocity.Y != lastVelocity.Y && Math.Abs(lastVelocity.Y) > 1f)
							{
								velocity.Y = lastVelocity.Y * -0.75f;
							}
						}
						else if (type == 681)
						{
							timeLeft = 4;
						}
						else if (type == 409)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -1f;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = lastVelocity.Y * -1f;
							}
						}
						else if (type == 254)
						{
							tileCollide = false;
							velocity = lastVelocity;
							if (timeLeft > 30)
							{
								timeLeft = 30;
							}
						}
						else if (type == 225)
						{
							ai[1] += 1f;
							if (ai[1] == 1f)
							{
								damage = (int)((float)damage * 0.66f);
							}
							if (ai[1] >= 4f)
							{
								Kill();
								return;
							}
							velocity.X = 0f - lastVelocity.X;
							velocity.Y = 0f - lastVelocity.Y;
							int num23 = FindTargetWithLineOfSight();
							if (num23 != -1)
							{
								NPC nPC = Main.npc[num23];
								float t = Distance(nPC.Center);
								Vector2 vector20 = -Vector2.UnitY * MathHelper.Lerp((float)nPC.height * 0.1f, (float)nPC.height * 0.5f, Utils.GetLerpValue(0f, 300f, t));
								velocity = DirectionTo(nPC.Center + vector20).SafeNormalize(-Vector2.UnitY) * velocity.Length();
								netUpdate = true;
							}
						}
						else if (type == 285)
						{
							ai[1] += 1f;
							if (ai[1] == 1f)
							{
								damage = (int)((float)damage * 0.66f);
							}
							if (ai[1] >= 2f)
							{
								Kill();
								return;
							}
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -1f;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = lastVelocity.Y * -1f;
							}
							int num24 = FindTargetWithLineOfSight();
							if (num24 != -1)
							{
								NPC nPC2 = Main.npc[num24];
								Distance(nPC2.Center);
								velocity = DirectionTo(nPC2.Center).SafeNormalize(-Vector2.UnitY) * velocity.Length();
								netUpdate = true;
							}
						}
						else if (type == 931)
						{
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -1f;
							}
							if (velocity.Y != lastVelocity.Y)
							{
								velocity.Y = lastVelocity.Y * -1f;
							}
						}
						else if (type == 155)
						{
							if (ai[1] > 10f)
							{
								NetworkText networkText = NetworkText.FromKey("Game.BallBounceResult", NetworkText.FromKey(Lang.GetProjectileName(type).Key), ai[1]);
								if (Main.netMode == 0)
								{
									Main.NewText(networkText.ToString(), byte.MaxValue, 240, 20);
								}
								else if (Main.netMode == 2)
								{
									ChatHelper.BroadcastChatMessage(networkText, new Color(255, 240, 20));
								}
							}
							ai[1] = 0f;
							if (velocity.X != lastVelocity.X)
							{
								velocity.X = lastVelocity.X * -0.6f;
							}
							if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 2f)
							{
								velocity.Y = lastVelocity.Y * -0.6f;
							}
						}
						else if (aiStyle == 33)
						{
							if (localAI[0] == 0f)
							{
								if (wet)
								{
									position += lastVelocity / 2f;
								}
								else
								{
									position += lastVelocity;
								}
								velocity *= 0f;
								localAI[0] = 1f;
							}
						}
						else if (type != 308 && type != 377 && type != 966)
						{
							if (type == 477)
							{
								if (velocity.Y != lastVelocity.Y || velocity.X != lastVelocity.X)
								{
									penetrate--;
									if (penetrate <= 0)
									{
										Kill();
									}
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = 0f - lastVelocity.X;
									}
									if (velocity.Y != lastVelocity.Y)
									{
										velocity.Y = 0f - lastVelocity.Y;
									}
								}
								if (penetrate > 0 && owner == Main.myPlayer)
								{
									int[] array = new int[10];
									int num25 = 0;
									int num26 = 700;
									int num27 = 20;
									for (int k = 0; k < 200; k++)
									{
										if (!Main.npc[k].CanBeChasedBy(this))
										{
											continue;
										}
										float num28 = (base.Center - Main.npc[k].Center).Length();
										if (num28 > (float)num27 && num28 < (float)num26 && Collision.CanHitLine(base.Center, 1, 1, Main.npc[k].Center, 1, 1))
										{
											array[num25] = k;
											num25++;
											if (num25 >= 9)
											{
												break;
											}
										}
									}
									if (num25 > 0)
									{
										num25 = Main.rand.Next(num25);
										Vector2 vector21 = Main.npc[array[num25]].Center - base.Center;
										float num29 = velocity.Length();
										vector21.Normalize();
										velocity = vector21 * num29;
										netUpdate = true;
									}
								}
							}
							else if (type == 94)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (type == 496)
							{
								if (velocity.X != lastVelocity.X)
								{
									if (Math.Abs(velocity.X) < 1f)
									{
										velocity.X = 0f - lastVelocity.X;
									}
									else
									{
										Kill();
									}
								}
								if (velocity.Y != lastVelocity.Y)
								{
									if (Math.Abs(velocity.Y) < 1f)
									{
										velocity.Y = 0f - lastVelocity.Y;
									}
									else
									{
										Kill();
									}
								}
							}
							else if (type == 311)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
									ai[1] += 1f;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
									ai[1] += 1f;
								}
								if (ai[1] > 4f)
								{
									Kill();
								}
							}
							else if (type == 312)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
									ai[1] += 1f;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
									ai[1] += 1f;
								}
							}
							else if (type == 522 || type == 620)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (type == 524)
							{
								ai[0] += 100f;
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (aiStyle == 93)
							{
								if (velocity != lastVelocity)
								{
									ai[1] = 0f;
									ai[0] = 1f;
									netUpdate = true;
									tileCollide = false;
									position += velocity;
									velocity = lastVelocity;
									velocity.Normalize();
									velocity *= 3f;
								}
							}
							else if (type == 281)
							{
								bool flag11 = Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 2f || ai[0] == -1f;
								if (ai[0] == -2f || ai[0] == -3f)
								{
									flag11 = false;
								}
								if (flag11)
								{
									if (Main.myPlayer == owner)
									{
										int num30 = ((velocity.X > 0f) ? 1 : 2);
										if (damage == 0)
										{
											num30 += 2;
										}
										NPC.ReleaseNPC((int)base.Center.X, (int)base.Bottom.Y - 4, 614, num30, owner);
										ai[0] = -3f;
										netUpdate = true;
									}
								}
								else
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = (0f - lastVelocity.X) * 0.5f;
									}
									if (velocity.Y != lastVelocity.Y)
									{
										velocity.Y = (0f - lastVelocity.Y) * 0.5f;
									}
								}
							}
							else if (type == 290 || type == 294)
							{
								if (velocity.X != lastVelocity.X)
								{
									position.X += velocity.X;
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									position.Y += velocity.Y;
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if ((type == 181 || type == 189 || type == 357 || type == 566) && penetrate > 0)
							{
								if (type == 357)
								{
									damage = (int)((double)damage * 0.9);
								}
								penetrate--;
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (type == 307 && ai[1] < 5f)
							{
								ai[1] += 1f;
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (type == 99)
							{
								if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 5f)
								{
									Collision.HitTiles(position, velocity, width, height);
									SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
									velocity.Y = (0f - lastVelocity.Y) * 0.2f;
								}
								if (velocity.X != lastVelocity.X)
								{
									Kill();
								}
							}
							else if (type == 727)
							{
								int num31 = 30;
								float num32 = 2f;
								float num33 = 2f;
								if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 5f)
								{
									Collision.HitTiles(position, velocity, width, height);
									SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
									velocity.Y = (0f - lastVelocity.Y) * 0.65f;
									if (owner == Main.myPlayer)
									{
										int num34 = Main.rand.Next(3, 6);
										float num35 = Main.rand.NextFloat();
										for (float num36 = 0f; num36 < 1f; num36 += 1f / (float)num34)
										{
											Vector2 vector22 = ((num35 + num36) * ((float)Math.PI * 2f)).ToRotationVector2() * num33;
											if (vector22.Y > 0f)
											{
												vector22 *= -0.7f;
											}
											NewProjectile(GetProjectileSource_FromThis(), base.Center, vector22, 763, num31, num32, Main.myPlayer);
										}
									}
								}
								if (velocity.X != lastVelocity.X)
								{
									Kill();
									if (owner == Main.myPlayer)
									{
										int num37 = Main.rand.Next(3, 6);
										float num38 = Main.rand.NextFloat();
										for (float num39 = 0f; num39 < 1f; num39 += 1f / (float)num37)
										{
											Vector2 vector23 = ((num38 + num39) * ((float)Math.PI * 2f)).ToRotationVector2() * num33;
											if (vector23.Y > 0f)
											{
												vector23 *= -0.7f;
											}
											NewProjectile(GetProjectileSource_FromThis(), base.Center, vector23, 763, num31, num32, Main.myPlayer);
										}
									}
								}
							}
							else if (type == 655)
							{
								if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 5f)
								{
									Collision.HitTiles(position, velocity, width, height);
									SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
									velocity.Y = (0f - lastVelocity.Y) * 0.2f;
								}
								if (velocity.X != lastVelocity.X)
								{
									Kill();
								}
							}
							else if (type == 36)
							{
								if (penetrate > 1)
								{
									Collision.HitTiles(position, velocity, width, height);
									SoundEngine.PlaySound(SoundID.Item10, position);
									penetrate--;
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = 0f - lastVelocity.X;
									}
									if (velocity.Y != lastVelocity.Y)
									{
										velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else
								{
									Kill();
								}
							}
							else if (aiStyle == 21)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = 0f - lastVelocity.X;
								}
								if (velocity.Y != lastVelocity.Y)
								{
									velocity.Y = 0f - lastVelocity.Y;
								}
							}
							else if (aiStyle == 17)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = lastVelocity.X * -0.75f;
								}
								if (velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 1.5)
								{
									velocity.Y = lastVelocity.Y * -0.7f;
								}
							}
							else if (aiStyle == 15)
							{
								AI_015_HandleMovementCollision(ref wetVelocity, ref lastVelocity);
							}
							else if (aiStyle == 9)
							{
								bool flag12 = owner == Main.myPlayer;
								if (type == 79)
								{
									bool flag13 = ai[0] >= 0f;
									flag12 = flag12 && !flag13;
									if (flag13)
									{
										if (velocity.X != lastVelocity.X)
										{
											velocity.X *= 0.1f;
										}
										if (velocity.Y != lastVelocity.Y)
										{
											velocity.Y *= 0.1f;
										}
									}
								}
								if (flag12)
								{
									Kill();
								}
							}
							else if (aiStyle == 39)
							{
								Collision.HitTiles(position, velocity, width, height);
								if (type == 33 || type == 106)
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = 0f - lastVelocity.X;
									}
									if (velocity.Y != lastVelocity.Y)
									{
										velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else
								{
									ai[0] = 1f;
									if (aiStyle == 3)
									{
										velocity.X = 0f - lastVelocity.X;
										velocity.Y = 0f - lastVelocity.Y;
									}
								}
								netUpdate = true;
								SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
							}
							else if (aiStyle == 3 || aiStyle == 13 || aiStyle == 69 || aiStyle == 109)
							{
								Collision.HitTiles(position, velocity, width, height);
								if (type == 33 || type == 106 || type == 866)
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = 0f - lastVelocity.X;
									}
									if (velocity.Y != lastVelocity.Y)
									{
										velocity.Y = 0f - lastVelocity.Y;
									}
								}
								else
								{
									ai[0] = 1f;
									if ((aiStyle == 3 || aiStyle == 109) && type != 383)
									{
										velocity.X = 0f - lastVelocity.X;
										velocity.Y = 0f - lastVelocity.Y;
									}
								}
								netUpdate = true;
								SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
							}
							else if (aiStyle == 8 && type != 96)
							{
								SoundEngine.PlaySound(SoundID.Item10, position);
								ai[0] += 1f;
								if ((ai[0] >= 5f && type != 253) || (type == 253 && ai[0] >= 8f))
								{
									position += velocity;
									Kill();
								}
								else
								{
									if (type == 15 && velocity.Y > 4f)
									{
										if (velocity.Y != lastVelocity.Y)
										{
											velocity.Y = (0f - lastVelocity.Y) * 0.8f;
										}
									}
									else if (velocity.Y != lastVelocity.Y)
									{
										velocity.Y = 0f - lastVelocity.Y;
									}
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = 0f - lastVelocity.X;
									}
								}
							}
							else if (aiStyle == 61)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = lastVelocity.X * -0.3f;
								}
								if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 1f)
								{
									velocity.Y = lastVelocity.Y * -0.3f;
								}
							}
							else if (aiStyle == 14)
							{
								if (type == 928)
								{
									int num40 = 0;
									for (int num41 = 1000; num41 >= 0; num41--)
									{
										if (num41 != whoAmI && Main.projectile[num41].active && Main.projectile[num41].owner == owner && Main.projectile[num41].type == type)
										{
											num40++;
											if (num40 >= 2 && timeLeft > Main.projectile[num41].timeLeft && Main.projectile[num41].timeLeft > 30)
											{
												Main.projectile[num41].timeLeft = 2;
											}
										}
									}
								}
								if (type == 261 && ((velocity.X != lastVelocity.X && (lastVelocity.X < -3f || lastVelocity.X > 3f)) || (velocity.Y != lastVelocity.Y && (lastVelocity.Y < -3f || lastVelocity.Y > 3f))))
								{
									for (int l = 0; l < 10; l++)
									{
										Collision.HitTiles(position, velocity, width, height);
									}
									SoundEngine.PlaySound(0, (int)base.Center.X, (int)base.Center.Y);
									MakeBoulderOfEarthExplosion();
								}
								if (type >= 326 && type <= 328 && velocity.X != lastVelocity.X)
								{
									velocity.X = lastVelocity.X * -0.1f;
								}
								if (type >= 400 && type <= 402)
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = lastVelocity.X * -0.1f;
									}
								}
								else if (type == 870 && ai[1] == 0f)
								{
									if (velocity.X != lastVelocity.X || velocity.Y != lastVelocity.Y)
									{
										velocity = -lastVelocity;
										ai[1] = 1f;
									}
								}
								else if (type == 50)
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = lastVelocity.X * -0.2f;
									}
									if (velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 1.5)
									{
										velocity.Y = lastVelocity.Y * -0.2f;
									}
								}
								else if (type == 185)
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = lastVelocity.X * -0.9f;
									}
									if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 1f)
									{
										velocity.Y = lastVelocity.Y * -0.9f;
									}
								}
								else if (type == 277)
								{
									if (velocity.X != lastVelocity.X)
									{
										velocity.X = lastVelocity.X * -0.9f;
									}
									if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 3f)
									{
										velocity.Y = lastVelocity.Y * -0.9f;
									}
								}
								else if (type != 480)
								{
									if (type == 450)
									{
										if (velocity.X != lastVelocity.X)
										{
											velocity.X = lastVelocity.X * -0.1f;
										}
									}
									else
									{
										if (velocity.X != lastVelocity.X)
										{
											velocity.X = lastVelocity.X * -0.5f;
										}
										if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 1f)
										{
											velocity.Y = lastVelocity.Y * -0.5f;
										}
									}
								}
							}
							else if (aiStyle == 16)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = lastVelocity.X * -0.4f;
									if (type == 29)
									{
										velocity.X *= 0.8f;
									}
								}
								if (velocity.Y != lastVelocity.Y && (double)lastVelocity.Y > 0.7 && type != 102)
								{
									velocity.Y = lastVelocity.Y * -0.4f;
									if (type == 29)
									{
										velocity.Y *= 0.8f;
									}
								}
								if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303 || (type >= 338 && type <= 341) || type == 776 || type == 780 || type == 793 || type == 796 || type == 799 || type == 784 || type == 787 || type == 790 || type == 803 || type == 804 || type == 808 || type == 809 || type == 810 || type == 805 || type == 806 || type == 807 || type == 930)
								{
									velocity *= 0f;
									alpha = 255;
									timeLeft = 3;
								}
							}
							else if (aiStyle == 68)
							{
								velocity *= 0f;
								alpha = 255;
								timeLeft = 3;
								netUpdate = true;
							}
							else if (type == 870)
							{
								if (velocity.X != lastVelocity.X)
								{
									velocity.X = lastVelocity.X * -0.2f;
								}
								if (velocity.Y != lastVelocity.Y && lastVelocity.Y > 0f)
								{
									velocity.Y = lastVelocity.Y * -0.2f;
								}
							}
							else
							{
								position += velocity;
								Kill();
							}
						}
					}
				}
			}
			UpdatePosition(wetVelocity);
			if (!flag2 && !flag4 && owner == Main.myPlayer && (tileCollide || flag5) && position != oldPosition)
			{
				Vector2 vector24 = position;
				Vector2 vector25 = oldPosition;
				int num42 = ((overrideWidth != -1) ? overrideWidth : width);
				int num43 = ((overrideHeight != -1) ? overrideHeight : height);
				if (overrideHeight != -1 || overrideWidth != -1)
				{
					vector24 = new Vector2(position.X + (float)(width / 2) - (float)(num42 / 2), position.Y + (float)(height / 2) - (float)(num43 / 2));
					vector25 = new Vector2(oldPosition.X + (float)(width / 2) - (float)(num42 / 2), oldPosition.Y + (float)(height / 2) - (float)(num43 / 2));
				}
				Collision.SwitchTiles(vector24, num42, num43, vector25, 4);
			}
		}

		private void AI_149_GolfBall()
		{
			if (!npcProj && timeLeft < 10)
			{
				timeLeft = 10;
			}
			if (ai[1] == -1f)
			{
				Tile tileSafely = Framing.GetTileSafely(base.Bottom.ToTileCoordinates());
				if (!tileSafely.active() || tileSafely.type != 494)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
				return;
			}
			BallStepResult ballStepResult = GolfHelper.StepGolfBall(this, ref localAI[0]);
			if (ballStepResult.State == BallState.Resting)
			{
				damage = 0;
				if (Main.netMode == 1 && owner == Main.myPlayer && localAI[1] != (float)ballStepResult.State)
				{
					netUpdate = true;
				}
			}
			localAI[1] = (float)ballStepResult.State;
			rotation += localAI[0];
			if (velocity.Y != 0f && ballStepResult.State == BallState.Moving)
			{
				rotation += velocity.X * 0.1f + velocity.Y * 0.1f;
			}
			if (ballStepResult.State == BallState.Moving && owner == Main.myPlayer)
			{
				bool? flag = ProjectileID.Sets.ForcePlateDetection[135];
				if ((!flag.HasValue || flag.Value) && localAI[1] != 0f)
				{
					Collision.SwitchTiles(position, width, height, oldPosition, 4);
				}
			}
			if (ballStepResult.State == BallState.Moving && Main.netMode == 2 && Main.player.IndexInRange(owner) && Main.player[owner].active)
			{
				RemoteClient.CheckSection(owner, position);
			}
		}

		private void MakeBoulderOfEarthExplosion()
		{
			localAI[0] = 40f;
			float mAX_SPREAD = 20f;
			int fluff = 10;
			int distFluff = 50;
			int layerStart = 1;
			int num = 6;
			if (velocity.Length() < 8f || Math.Abs(velocity.Y) < 4f)
			{
				mAX_SPREAD = 15f;
				fluff = 7;
				distFluff = 30;
				num = 4;
			}
			if (velocity.Length() < 4f || Math.Abs(velocity.Y) < 2f)
			{
				mAX_SPREAD = 15f;
				fluff = 7;
				distFluff = 30;
				num = 2;
				layerStart = 0;
			}
			int layerEnd = num;
			int num2 = num - 2;
			if (num2 < 1)
			{
				num2 = 1;
			}
			CreateGroundExplosion(mAX_SPREAD, fluff, distFluff, layerStart, layerEnd, num2);
			for (int i = 0; i < 10; i++)
			{
				Dust dust = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(width / 2, height / 2), 228, Main.rand.NextVector2Circular(3f, 3f));
				dust.scale = 0.6f;
				if (i < 5)
				{
					dust.noGravity = true;
					dust.scale = 1.8f;
				}
			}
		}

		private void UpdatePosition(Vector2 wetVelocity)
		{
			if (aiStyle == 4 || aiStyle == 38 || aiStyle == 84 || aiStyle == 148 || (aiStyle == 7 && ai[0] == 2f) || ((type == 440 || type == 449 || type == 606) && ai[1] == 1f) || (aiStyle == 93 && ai[0] < 0f) || type == 540 || type == 756 || type == 818 || type == 856 || type == 961 || type == 933 || ProjectileID.Sets.IsAGolfBall[type])
			{
				return;
			}
			if (wet)
			{
				position += wetVelocity;
			}
			else
			{
				position += velocity;
			}
			if (Main.projPet[type] && tileCollide)
			{
				bool fall = false;
				if (aiStyle == 62)
				{
					fall = true;
				}
				switch (type)
				{
				case 317:
				case 387:
				case 388:
				case 533:
				case 759:
					fall = true;
					break;
				}
				Vector4 vector = Collision.SlopeCollision(position, velocity, width, height, 0f, fall);
				position.X = vector.X;
				position.Y = vector.Y;
				velocity.X = vector.Z;
				velocity.Y = vector.W;
			}
		}

		public void FishingCheck()
		{
			if (Main.player[owner].wet)
			{
				return;
			}
			FishingAttempt fisher = default(FishingAttempt);
			fisher.X = (int)(base.Center.X / 16f);
			fisher.Y = (int)(base.Center.Y / 16f);
			fisher.bobberType = type;
			GetFishingPondState(fisher.X, fisher.Y, out fisher.inLava, out fisher.inHoney, out fisher.waterTilesCount, out fisher.chumsInWater);
			if (fisher.waterTilesCount < 75)
			{
				Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.NotEnoughWater");
				return;
			}
			fisher.playerFishingConditions = Main.player[owner].GetFishingConditions();
			if (fisher.playerFishingConditions.BaitItemType == 2673)
			{
				Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
				if ((fisher.X < 380 || fisher.X > Main.maxTilesX - 380) && fisher.waterTilesCount > 1000 && !NPC.AnyNPCs(370))
				{
					ai[1] = Main.rand.Next(-180, -60) - 100;
					localAI[1] = 1f;
					netUpdate = true;
				}
				return;
			}
			fisher.fishingLevel = fisher.playerFishingConditions.FinalFishingLevel;
			if (fisher.fishingLevel == 0)
			{
				return;
			}
			fisher.CanFishInLava = ItemID.Sets.CanFishInLava[fisher.playerFishingConditions.PoleItemType] || ItemID.Sets.IsLavaBait[fisher.playerFishingConditions.BaitItemType] || Main.player[owner].accLavaFishing;
			if (fisher.chumsInWater > 0)
			{
				fisher.fishingLevel += 11;
			}
			if (fisher.chumsInWater > 1)
			{
				fisher.fishingLevel += 6;
			}
			if (fisher.chumsInWater > 2)
			{
				fisher.fishingLevel += 3;
			}
			Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingPower", fisher.fishingLevel);
			fisher.waterNeededToFish = 300;
			float num = Main.maxTilesX / 4200;
			num *= num;
			fisher.atmo = (float)((double)(position.Y / 16f - (60f + 10f * num)) / (Main.worldSurface / 6.0));
			if ((double)fisher.atmo < 0.25)
			{
				fisher.atmo = 0.25f;
			}
			if (fisher.atmo > 1f)
			{
				fisher.atmo = 1f;
			}
			fisher.waterNeededToFish = (int)((float)fisher.waterNeededToFish * fisher.atmo);
			fisher.waterQuality = (float)fisher.waterTilesCount / (float)fisher.waterNeededToFish;
			if (fisher.waterQuality < 1f)
			{
				fisher.fishingLevel = (int)((float)fisher.fishingLevel * fisher.waterQuality);
			}
			fisher.waterQuality = 1f - fisher.waterQuality;
			if (fisher.waterTilesCount < fisher.waterNeededToFish)
			{
				Main.player[owner].displayedFishingInfo = Language.GetTextValue("GameUI.FullFishingPower", fisher.fishingLevel, 0.0 - Math.Round(fisher.waterQuality * 100f));
			}
			if (Main.player[owner].luck < 0f)
			{
				if (Main.rand.NextFloat() < 0f - Main.player[owner].luck)
				{
					fisher.fishingLevel = (int)((double)fisher.fishingLevel * (0.9 - (double)Main.rand.NextFloat() * 0.3));
				}
			}
			else if (Main.rand.NextFloat() < Main.player[owner].luck)
			{
				fisher.fishingLevel = (int)((double)fisher.fishingLevel * (1.1 + (double)Main.rand.NextFloat() * 0.3));
			}
			int num2 = (fisher.fishingLevel + 75) / 2;
			if (Main.rand.Next(100) > num2)
			{
				return;
			}
			fisher.heightLevel = 0;
			if ((double)fisher.Y < Main.worldSurface * 0.5)
			{
				fisher.heightLevel = 0;
			}
			else if ((double)fisher.Y < Main.worldSurface)
			{
				fisher.heightLevel = 1;
			}
			else if ((double)fisher.Y < Main.rockLayer)
			{
				fisher.heightLevel = 2;
			}
			else if (fisher.Y < Main.maxTilesY - 300)
			{
				fisher.heightLevel = 3;
			}
			else
			{
				fisher.heightLevel = 4;
			}
			FishingCheck_RollDropLevels(fisher.fishingLevel, out fisher.common, out fisher.uncommon, out fisher.rare, out fisher.veryrare, out fisher.legendary, out fisher.crate);
			FishingCheck_ProbeForQuestFish(ref fisher);
			FishingCheck_RollEnemySpawns(ref fisher);
			FishingCheck_RollItemDrop(ref fisher);
			bool flag = false;
			if (fisher.rolledItemDrop > 0)
			{
				if (Main.player[owner].sonarPotion)
				{
					Item item = new Item();
					item.SetDefaults(fisher.rolledItemDrop);
					item.position = position;
					PopupText.AssignAsSonarText(PopupText.NewText(PopupTextContext.SonarAlert, item, 1, noStack: true));
				}
				float num3 = fisher.fishingLevel;
				ai[1] = (float)Main.rand.Next(-240, -90) - num3;
				localAI[1] = fisher.rolledItemDrop;
				netUpdate = true;
				flag = true;
			}
			if (fisher.rolledEnemySpawn > 0)
			{
				if (Main.player[owner].sonarPotion)
				{
					PopupText.AssignAsSonarText(PopupText.NewText(PopupTextContext.SonarAlert, fisher.rolledEnemySpawn, base.Center, stay5TimesLonger: false));
				}
				float num4 = fisher.fishingLevel;
				ai[1] = (float)Main.rand.Next(-240, -90) - num4;
				localAI[1] = -fisher.rolledEnemySpawn;
				netUpdate = true;
				flag = true;
			}
			if (!flag)
			{
				int num5 = 0;
				if (ItemID.Sets.IsLavaBait[fisher.playerFishingConditions.BaitItemType])
				{
					num5++;
				}
				if (ItemID.Sets.CanFishInLava[fisher.playerFishingConditions.PoleItemType])
				{
					num5++;
				}
				if (Main.player[owner].accLavaFishing)
				{
					num5++;
				}
				if (num5 >= 2)
				{
					localAI[1] += 240f;
				}
			}
			if (fisher.CanFishInLava && fisher.inLava)
			{
				AchievementsHelper.HandleSpecialEvent(Main.player[owner], 19);
			}
		}

		private void FishingCheck_RollEnemySpawns(ref FishingAttempt fisher)
		{
			if (fisher.inLava || fisher.inHoney || !Main.bloodMoon || Main.dayTime)
			{
				return;
			}
			int maxValue = 6;
			if (fisher.bobberType == 760)
			{
				maxValue = 3;
			}
			if (Main.rand.Next(maxValue) != 0)
			{
				return;
			}
			if (Main.hardMode)
			{
				fisher.rolledEnemySpawn = Utils.SelectRandom(Main.rand, new short[4] { 620, 621, 586, 587 });
				if (Main.rand.Next(10) == 0)
				{
					fisher.rolledEnemySpawn = 618;
				}
			}
			else
			{
				fisher.rolledEnemySpawn = Utils.SelectRandom(Main.rand, new short[2] { 586, 587 });
			}
		}

		private void FishingCheck_RollItemDrop(ref FishingAttempt fisher)
		{
			if (fisher.rolledEnemySpawn > 0)
			{
				return;
			}
			if (fisher.inLava)
			{
				if (fisher.CanFishInLava)
				{
					if (fisher.crate && Main.rand.Next(5) == 0)
					{
						fisher.rolledItemDrop = (Main.hardMode ? 4878 : 4877);
					}
					else if (fisher.legendary && Main.hardMode && Main.rand.Next(3) == 0)
					{
						fisher.rolledItemDrop = Main.rand.NextFromList(new short[4] { 4819, 4820, 4872, 2331 });
					}
					else if (fisher.legendary && !Main.hardMode && Main.rand.Next(3) == 0)
					{
						fisher.rolledItemDrop = Main.rand.NextFromList(new short[3] { 4819, 4820, 4872 });
					}
					else if (fisher.veryrare)
					{
						fisher.rolledItemDrop = 2312;
					}
					else if (fisher.rare)
					{
						fisher.rolledItemDrop = 2315;
					}
				}
				return;
			}
			if (fisher.inHoney)
			{
				if (fisher.rare || (fisher.uncommon && Main.rand.Next(2) == 0))
				{
					fisher.rolledItemDrop = 2314;
				}
				else if (fisher.uncommon && fisher.questFish == 2451)
				{
					fisher.rolledItemDrop = 2451;
				}
				return;
			}
			if (Main.rand.Next(50) > fisher.fishingLevel && Main.rand.Next(50) > fisher.fishingLevel && fisher.waterTilesCount < fisher.waterNeededToFish)
			{
				fisher.rolledItemDrop = Main.rand.Next(2337, 2340);
				return;
			}
			if (fisher.crate)
			{
				bool hardMode = Main.hardMode;
				if (fisher.veryrare || fisher.legendary)
				{
					fisher.rolledItemDrop = (hardMode ? 3981 : 2336);
				}
				else if (fisher.rare && Main.player[owner].ZoneDungeon)
				{
					fisher.rolledItemDrop = (hardMode ? 3984 : 3205);
				}
				else if (fisher.rare && Main.player[owner].ZoneBeach)
				{
					fisher.rolledItemDrop = (hardMode ? 5003 : 5002);
				}
				else if (fisher.rare && Main.player[owner].ZoneCorrupt)
				{
					fisher.rolledItemDrop = (hardMode ? 3982 : 3203);
				}
				else if (fisher.rare && Main.player[owner].ZoneCrimson)
				{
					fisher.rolledItemDrop = (hardMode ? 3983 : 3204);
				}
				else if (fisher.rare && Main.player[owner].ZoneHallow)
				{
					fisher.rolledItemDrop = (hardMode ? 3986 : 3207);
				}
				else if (fisher.rare && Main.player[owner].ZoneJungle)
				{
					fisher.rolledItemDrop = (hardMode ? 3987 : 3208);
				}
				else if (fisher.rare && Main.player[owner].ZoneSnow)
				{
					fisher.rolledItemDrop = (hardMode ? 4406 : 4405);
				}
				else if (fisher.rare && Main.player[owner].ZoneDesert)
				{
					fisher.rolledItemDrop = (hardMode ? 4408 : 4407);
				}
				else if (fisher.rare && fisher.heightLevel == 0)
				{
					fisher.rolledItemDrop = (hardMode ? 3985 : 3206);
				}
				else if (fisher.uncommon)
				{
					fisher.rolledItemDrop = (hardMode ? 3980 : 2335);
				}
				else
				{
					fisher.rolledItemDrop = (hardMode ? 3979 : 2334);
				}
				return;
			}
			if (!NPC.combatBookWasUsed && Main.bloodMoon && fisher.legendary && Main.rand.Next(3) == 0)
			{
				fisher.rolledItemDrop = 4382;
				return;
			}
			if (fisher.legendary && Main.rand.Next(5) == 0)
			{
				fisher.rolledItemDrop = 2423;
				return;
			}
			if (fisher.legendary && Main.rand.Next(5) == 0)
			{
				fisher.rolledItemDrop = 3225;
				return;
			}
			if (fisher.legendary && Main.rand.Next(10) == 0)
			{
				fisher.rolledItemDrop = 2420;
				return;
			}
			if (!fisher.legendary && !fisher.veryrare && fisher.uncommon && Main.rand.Next(5) == 0)
			{
				fisher.rolledItemDrop = 3196;
				return;
			}
			bool flag = Main.player[owner].ZoneDesert;
			if (Main.player[owner].ZoneDungeon)
			{
				flag = false;
				if (fisher.rolledItemDrop == 0 && fisher.veryrare && Main.rand.Next(7) == 0)
				{
					fisher.rolledItemDrop = 3000;
				}
			}
			else
			{
				bool flag2 = Main.player[owner].ZoneCorrupt;
				bool flag3 = Main.player[owner].ZoneCrimson;
				if (flag2 && flag3)
				{
					if (Main.rand.Next(2) == 0)
					{
						flag3 = false;
					}
					else
					{
						flag2 = false;
					}
				}
				if (flag2)
				{
					if (fisher.legendary && Main.hardMode && Main.player[owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
					{
						fisher.rolledItemDrop = 2429;
					}
					else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
					{
						fisher.rolledItemDrop = 3210;
					}
					else if (fisher.rare)
					{
						fisher.rolledItemDrop = 2330;
					}
					else if (fisher.uncommon && fisher.questFish == 2454)
					{
						fisher.rolledItemDrop = 2454;
					}
					else if (fisher.uncommon && fisher.questFish == 2485)
					{
						fisher.rolledItemDrop = 2485;
					}
					else if (fisher.uncommon && fisher.questFish == 2457)
					{
						fisher.rolledItemDrop = 2457;
					}
					else if (fisher.uncommon)
					{
						fisher.rolledItemDrop = 2318;
					}
				}
				else if (flag3)
				{
					if (fisher.legendary && Main.hardMode && Main.player[owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
					{
						fisher.rolledItemDrop = 2429;
					}
					else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
					{
						fisher.rolledItemDrop = 3211;
					}
					else if (fisher.uncommon && fisher.questFish == 2477)
					{
						fisher.rolledItemDrop = 2477;
					}
					else if (fisher.uncommon && fisher.questFish == 2463)
					{
						fisher.rolledItemDrop = 2463;
					}
					else if (fisher.uncommon)
					{
						fisher.rolledItemDrop = 2319;
					}
					else if (fisher.common)
					{
						fisher.rolledItemDrop = 2305;
					}
				}
				else if (Main.player[owner].ZoneHallow)
				{
					if (fisher.legendary && Main.hardMode && Main.player[owner].ZoneSnow && fisher.heightLevel == 3 && Main.rand.Next(3) != 0)
					{
						fisher.rolledItemDrop = 2429;
					}
					else if (fisher.legendary && Main.hardMode && Main.rand.Next(2) == 0)
					{
						fisher.rolledItemDrop = 3209;
					}
					else if (fisher.heightLevel > 1 && fisher.veryrare)
					{
						fisher.rolledItemDrop = 2317;
					}
					else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2465)
					{
						fisher.rolledItemDrop = 2465;
					}
					else if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2468)
					{
						fisher.rolledItemDrop = 2468;
					}
					else if (fisher.rare)
					{
						fisher.rolledItemDrop = 2310;
					}
					else if (fisher.uncommon && fisher.questFish == 2471)
					{
						fisher.rolledItemDrop = 2471;
					}
					else if (fisher.uncommon)
					{
						fisher.rolledItemDrop = 2307;
					}
				}
				if (fisher.rolledItemDrop == 0 && Main.player[owner].ZoneSnow)
				{
					if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2467)
					{
						fisher.rolledItemDrop = 2467;
					}
					else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2470)
					{
						fisher.rolledItemDrop = 2470;
					}
					else if (fisher.heightLevel >= 2 && fisher.uncommon && fisher.questFish == 2484)
					{
						fisher.rolledItemDrop = 2484;
					}
					else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2466)
					{
						fisher.rolledItemDrop = 2466;
					}
					else if ((fisher.common && Main.rand.Next(12) == 0) || (fisher.uncommon && Main.rand.Next(6) == 0))
					{
						fisher.rolledItemDrop = 3197;
					}
					else if (fisher.uncommon)
					{
						fisher.rolledItemDrop = 2306;
					}
					else if (fisher.common)
					{
						fisher.rolledItemDrop = 2299;
					}
					else if (fisher.heightLevel > 1 && Main.rand.Next(3) == 0)
					{
						fisher.rolledItemDrop = 2309;
					}
				}
				if (fisher.rolledItemDrop == 0 && Main.player[owner].ZoneJungle)
				{
					if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2452)
					{
						fisher.rolledItemDrop = 2452;
					}
					else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2483)
					{
						fisher.rolledItemDrop = 2483;
					}
					else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2488)
					{
						fisher.rolledItemDrop = 2488;
					}
					else if (fisher.heightLevel >= 1 && fisher.uncommon && fisher.questFish == 2486)
					{
						fisher.rolledItemDrop = 2486;
					}
					else if (fisher.heightLevel > 1 && fisher.uncommon)
					{
						fisher.rolledItemDrop = 2311;
					}
					else if (fisher.uncommon)
					{
						fisher.rolledItemDrop = 2313;
					}
					else if (fisher.common)
					{
						fisher.rolledItemDrop = 2302;
					}
				}
				if (fisher.rolledItemDrop == 0 && Main.player[owner].ZoneGlowshroom && fisher.uncommon && fisher.questFish == 2475)
				{
					fisher.rolledItemDrop = 2475;
				}
			}
			if (fisher.rolledItemDrop == 0)
			{
				if (fisher.heightLevel <= 1 && (fisher.X < 380 || fisher.X > Main.maxTilesX - 380) && fisher.waterTilesCount > 1000)
				{
					if (fisher.veryrare && Main.rand.Next(2) == 0)
					{
						fisher.rolledItemDrop = 2341;
					}
					else if (fisher.veryrare)
					{
						fisher.rolledItemDrop = 2342;
					}
					else if (fisher.rare && Main.rand.Next(5) == 0)
					{
						fisher.rolledItemDrop = 2438;
					}
					else if (fisher.rare && Main.rand.Next(3) == 0)
					{
						fisher.rolledItemDrop = 2332;
					}
					else if (fisher.uncommon && fisher.questFish == 2480)
					{
						fisher.rolledItemDrop = 2480;
					}
					else if (fisher.uncommon && fisher.questFish == 2481)
					{
						fisher.rolledItemDrop = 2481;
					}
					else if (fisher.uncommon)
					{
						fisher.rolledItemDrop = 2316;
					}
					else if (fisher.common && Main.rand.Next(2) == 0)
					{
						fisher.rolledItemDrop = 2301;
					}
					else if (fisher.common)
					{
						fisher.rolledItemDrop = 2300;
					}
					else
					{
						fisher.rolledItemDrop = 2297;
					}
				}
				else if (flag)
				{
					if (fisher.uncommon && fisher.questFish == 4393)
					{
						fisher.rolledItemDrop = 4393;
					}
					else if (fisher.uncommon && fisher.questFish == 4394)
					{
						fisher.rolledItemDrop = 4394;
					}
					else if (fisher.uncommon)
					{
						fisher.rolledItemDrop = 4410;
					}
					else if (Main.rand.Next(3) == 0)
					{
						fisher.rolledItemDrop = 4402;
					}
					else
					{
						fisher.rolledItemDrop = 4401;
					}
				}
			}
			if (fisher.rolledItemDrop != 0)
			{
				return;
			}
			if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2461)
			{
				fisher.rolledItemDrop = 2461;
			}
			else if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2453)
			{
				fisher.rolledItemDrop = 2453;
			}
			else if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2473)
			{
				fisher.rolledItemDrop = 2473;
			}
			else if (fisher.heightLevel == 0 && fisher.uncommon && fisher.questFish == 2476)
			{
				fisher.rolledItemDrop = 2476;
			}
			else if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2458)
			{
				fisher.rolledItemDrop = 2458;
			}
			else if (fisher.heightLevel < 2 && fisher.uncommon && fisher.questFish == 2459)
			{
				fisher.rolledItemDrop = 2459;
			}
			else if (fisher.heightLevel == 0 && fisher.uncommon)
			{
				fisher.rolledItemDrop = 2304;
			}
			else if (fisher.heightLevel > 0 && fisher.heightLevel < 3 && fisher.uncommon && fisher.questFish == 2455)
			{
				fisher.rolledItemDrop = 2455;
			}
			else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2479)
			{
				fisher.rolledItemDrop = 2479;
			}
			else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2456)
			{
				fisher.rolledItemDrop = 2456;
			}
			else if (fisher.heightLevel == 1 && fisher.uncommon && fisher.questFish == 2474)
			{
				fisher.rolledItemDrop = 2474;
			}
			else if (fisher.heightLevel > 1 && fisher.rare && Main.rand.Next(5) == 0)
			{
				if (Main.hardMode && Main.rand.Next(2) == 0)
				{
					fisher.rolledItemDrop = 2437;
				}
				else
				{
					fisher.rolledItemDrop = 2436;
				}
			}
			else if (fisher.heightLevel > 1 && fisher.legendary && Main.rand.Next(3) != 0)
			{
				fisher.rolledItemDrop = 2308;
			}
			else if (fisher.heightLevel > 1 && fisher.veryrare && Main.rand.Next(2) == 0)
			{
				fisher.rolledItemDrop = 2320;
			}
			else if (fisher.heightLevel > 1 && fisher.rare)
			{
				fisher.rolledItemDrop = 2321;
			}
			else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2478)
			{
				fisher.rolledItemDrop = 2478;
			}
			else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2450)
			{
				fisher.rolledItemDrop = 2450;
			}
			else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2464)
			{
				fisher.rolledItemDrop = 2464;
			}
			else if (fisher.heightLevel > 1 && fisher.uncommon && fisher.questFish == 2469)
			{
				fisher.rolledItemDrop = 2469;
			}
			else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2462)
			{
				fisher.rolledItemDrop = 2462;
			}
			else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2482)
			{
				fisher.rolledItemDrop = 2482;
			}
			else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2472)
			{
				fisher.rolledItemDrop = 2472;
			}
			else if (fisher.heightLevel > 2 && fisher.uncommon && fisher.questFish == 2460)
			{
				fisher.rolledItemDrop = 2460;
			}
			else if (fisher.heightLevel > 1 && fisher.uncommon && Main.rand.Next(4) != 0)
			{
				fisher.rolledItemDrop = 2303;
			}
			else if (fisher.heightLevel > 1 && (fisher.uncommon || fisher.common || Main.rand.Next(4) == 0))
			{
				if (Main.rand.Next(4) == 0)
				{
					fisher.rolledItemDrop = 2303;
				}
				else
				{
					fisher.rolledItemDrop = 2309;
				}
			}
			else if (fisher.uncommon && fisher.questFish == 2487)
			{
				fisher.rolledItemDrop = 2487;
			}
			else if (fisher.waterTilesCount > 1000 && fisher.common)
			{
				fisher.rolledItemDrop = 2298;
			}
			else
			{
				fisher.rolledItemDrop = 2290;
			}
		}

		private void FishingCheck_ProbeForQuestFish(ref FishingAttempt fisher)
		{
			fisher.questFish = Main.anglerQuestItemNetIDs[Main.anglerQuest];
			if (Main.player[owner].HasItem(fisher.questFish))
			{
				fisher.questFish = -1;
			}
			if (!NPC.AnyNPCs(369))
			{
				fisher.questFish = -1;
			}
			if (Main.anglerQuestFinished)
			{
				fisher.questFish = -1;
			}
		}

		private void FishingCheck_RollDropLevels(int fishingLevel, out bool common, out bool uncommon, out bool rare, out bool veryrare, out bool legendary, out bool crate)
		{
			int num = 150 / fishingLevel;
			int num2 = 150 * 2 / fishingLevel;
			int num3 = 150 * 7 / fishingLevel;
			int num4 = 150 * 15 / fishingLevel;
			int num5 = 150 * 30 / fishingLevel;
			int num6 = 10;
			if (Main.player[owner].cratePotion)
			{
				num6 += 10;
			}
			if (num < 2)
			{
				num = 2;
			}
			if (num2 < 3)
			{
				num2 = 3;
			}
			if (num3 < 4)
			{
				num3 = 4;
			}
			if (num4 < 5)
			{
				num4 = 5;
			}
			if (num5 < 6)
			{
				num5 = 6;
			}
			common = false;
			uncommon = false;
			rare = false;
			veryrare = false;
			legendary = false;
			crate = false;
			if (Main.rand.Next(num) == 0)
			{
				common = true;
			}
			if (Main.rand.Next(num2) == 0)
			{
				uncommon = true;
			}
			if (Main.rand.Next(num3) == 0)
			{
				rare = true;
			}
			if (Main.rand.Next(num4) == 0)
			{
				veryrare = true;
			}
			if (Main.rand.Next(num5) == 0)
			{
				legendary = true;
			}
			if (Main.rand.Next(100) < num6)
			{
				crate = true;
			}
		}

		private static void GetFishingPondState(int x, int y, out bool lava, out bool honey, out int numWaters, out int chumCount)
		{
			lava = false;
			honey = false;
			numWaters = 0;
			chumCount = 0;
			Point tileCoords = new Point(0, 0);
			GetFishingPondWidth(x, y, out var minX, out var maxX);
			for (int i = minX; i <= maxX; i++)
			{
				int num = y;
				while (Main.tile[i, num].liquid > 0 && !WorldGen.SolidTile(i, num) && num < Main.maxTilesY - 10)
				{
					numWaters++;
					num++;
					if (Main.tile[i, num].lava())
					{
						lava = true;
					}
					else if (Main.tile[i, num].honey())
					{
						honey = true;
					}
					tileCoords.X = i;
					tileCoords.Y = num;
					chumCount += Main.instance.ChumBucketProjectileHelper.GetChumsInLocation(tileCoords);
				}
			}
			if (honey)
			{
				numWaters = (int)((double)numWaters * 1.5);
			}
		}

		private static void GetFishingPondWidth(int x, int y, out int minX, out int maxX)
		{
			minX = x;
			maxX = x;
			while (minX > 10 && Main.tile[minX, y].liquid > 0 && !WorldGen.SolidTile(minX, y))
			{
				minX--;
			}
			while (maxX < Main.maxTilesX - 10 && Main.tile[maxX, y].liquid > 0 && !WorldGen.SolidTile(maxX, y))
			{
				maxX++;
			}
		}

		public bool CanBeReflected()
		{
			if (active && friendly && !hostile && damage > 0 && (aiStyle == 1 || aiStyle == 2 || aiStyle == 8 || aiStyle == 21 || aiStyle == 24 || aiStyle == 28 || aiStyle == 29 || aiStyle == 131))
			{
				return true;
			}
			return false;
		}

		public Color GetFairyQueenWeaponsColor(float alphaChannelMultiplier = 1f, float lerpToWhite = 0f, float? rawHueOverride = null)
		{
			float num = ai[1];
			if (rawHueOverride.HasValue)
			{
				num = rawHueOverride.Value;
			}
			float num2 = (num + 0.5f) % 1f;
			float saturation = 1f;
			float luminosity = 0.5f;
			if (Main.player[owner].active)
			{
				switch (Main.player[owner].name)
				{
				case "Cenx":
				{
					float amount3 = Utils.PingPongFrom01To010(num2);
					amount3 = MathHelper.SmoothStep(0f, 1f, amount3);
					amount3 = MathHelper.SmoothStep(0f, 1f, amount3);
					Color color2 = Color.Lerp(new Color(0.3f, 1f, 0.2f), Color.HotPink, amount3);
					if (lerpToWhite != 0f)
					{
						color2 = Color.Lerp(color2, Color.White, lerpToWhite);
					}
					color2.A = (byte)((float)(int)color2.A * alphaChannelMultiplier);
					return color2;
				}
				case "Crowno":
					luminosity = MathHelper.Lerp(0.25f, 0.4f, Utils.Turn01ToCyclic010(num2));
					num2 = MathHelper.Lerp(127f / 180f, 47f / 60f, Utils.Turn01ToCyclic010(num2));
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
					break;
				case "Yoraiz0r":
					num2 = MathHelper.Lerp(0.9f, 0.95f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					break;
				case "Jaxrud":
					num2 = MathHelper.Lerp(13f / 72f, 157f / 360f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					break;
				case "Lazure":
					num2 = MathHelper.Lerp(8f / 15f, 83f / 90f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					break;
				case "Leinfors":
					num2 = MathHelper.Lerp(0.7f, 0.77f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					break;
				case "Grox The Great":
					num2 = MathHelper.Lerp(0.31f, 0.5f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 1f, 0.8f);
					break;
				case "Acamaeda":
					num2 = MathHelper.Lerp(0.06f, 0.28f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				case "Alchemystics":
					num2 = MathHelper.Lerp(0.74f, 0.96f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.6f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				case "Antithesis":
				{
					num2 = 0.51f;
					float amount13 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0f, 0.5f, amount13);
					break;
				}
				case "Aurora3500":
					num2 = MathHelper.Lerp(0.33f, 0.8f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
					break;
				case "Criddle":
					num2 = MathHelper.Lerp(0.05f, 0.15f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
					break;
				case "Darthkitten":
				{
					num2 = 1f;
					float amount12 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(1f, 0.4f, amount12);
					break;
				}
				case "darthmorf":
				{
					num2 = 0f;
					float amount11 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0f, 0.2f, amount11);
					break;
				}
				case "Discipile":
				{
					num2 = 0.53f;
					float amount10 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0.05f, 0.5f, amount10);
					break;
				}
				case "Doylee":
					num2 = MathHelper.Lerp(0.68f, 1f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				case "Ghostar":
				{
					num2 = 0.66f;
					float amount9 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0.15f, 0.85f, amount9);
					break;
				}
				case "Jenosis":
					num2 = MathHelper.Lerp(0.9f, 1.13f, Utils.Turn01ToCyclic010(num2)) % 1f;
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
					break;
				case "Kazzymodus":
				{
					num2 = 0.33f;
					float amount8 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0.15f, 0.4f, amount8);
					break;
				}
				case "Khaios":
				{
					num2 = 0.33f;
					float amount7 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0f, 0.2f, amount7);
					break;
				}
				case "Loki":
				{
					num2 = 0f;
					float amount6 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0f, 0.25f, amount6);
					break;
				}
				case "ManaUser":
					num2 = MathHelper.Lerp(0.41f, 0.57f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					break;
				case "Mid":
				{
					num2 = 0f;
					float amount5 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0f, 0.9f, amount5);
					break;
				}
				case "Nike Leon":
					num2 = MathHelper.Lerp(0.04f, 0.1f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
					break;
				case "ppowersteef":
					num2 = MathHelper.Lerp(0f, 0.15f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				case "RBrandon":
					num2 = 0.03f;
					luminosity = 0.3f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				case "Redigit":
					num2 = 0.7f;
					luminosity = 0.5f;
					break;
				case "Serenity":
				{
					num2 = 0.85f;
					float amount4 = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(1f, 0.5f, amount4);
					break;
				}
				case "Sigma":
					num2 = MathHelper.Lerp(0f, 0.12f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				case "Unit One":
				{
					float amount2 = Utils.PingPongFrom01To010(num2);
					amount2 = MathHelper.SmoothStep(0f, 1f, amount2);
					Color color = Color.Lerp(Color.Yellow, Color.Blue, amount2);
					if (lerpToWhite != 0f)
					{
						color = Color.Lerp(color, Color.White, lerpToWhite);
					}
					color.A = (byte)((float)(int)color.A * alphaChannelMultiplier);
					return color;
				}
				case "Vulpes Inculta":
					num2 = MathHelper.Lerp(0.65f, 0.75f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.5f, 0.5f);
					break;
				case "Waze3174":
					num2 = MathHelper.Lerp(0.33f, 0f, Utils.Turn01ToCyclic010(num2));
					luminosity = 0.3f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				case "Xman101":
				{
					num2 = 0.06f;
					float amount = (float)Math.Cos(num * ((float)Math.PI * 2f)) * 0.5f + 0.5f;
					luminosity = MathHelper.Lerp(0f, 0.5f, amount);
					break;
				}
				case "Zoomo":
					num2 = 0.77f;
					luminosity = 0.5f;
					alphaChannelMultiplier = MathHelper.Lerp(alphaChannelMultiplier, 0.6f, 0.5f);
					break;
				}
			}
			Color color3 = Main.hslToRgb(num2, saturation, luminosity);
			color3 *= Opacity;
			if (lerpToWhite != 0f)
			{
				color3 = Color.Lerp(color3, Color.White, lerpToWhite);
			}
			color3.A = (byte)((float)(int)color3.A * alphaChannelMultiplier);
			return color3;
		}

		public float GetLastPrismHue(float laserIndex, ref float laserLuminance, ref float laserAlphaMultiplier)
		{
			if (Main.player[owner].active)
			{
				double timeForVisualEffects = Main.timeForVisualEffects;
				switch (Main.player[owner].name)
				{
				case "Cenx":
				{
					float amount = Utils.PingPongFrom01To010(laserIndex / 6f);
					amount = MathHelper.SmoothStep(0f, 1f, amount);
					amount = MathHelper.SmoothStep(0f, 1f, amount);
					return Main.rgbToHsl(Color.Lerp(new Color(0.3f, 1f, 0.2f), Color.HotPink, amount)).X;
				}
				case "Crowno":
					laserLuminance = MathHelper.Lerp(0.25f, 0.4f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.5f;
					return MathHelper.Lerp(127f / 180f, 47f / 60f, Utils.Turn01ToCyclic010(laserIndex / 6f));
				case "Tsuki":
				case "Yoraiz0r":
					return 0.92f;
				case "Lazure":
					return MathHelper.Lerp(8f / 15f, 83f / 90f, Utils.Turn01ToCyclic010(laserIndex / 6f));
				case "Jaxrud":
					return MathHelper.Lerp(13f / 72f, 157f / 360f, Utils.Turn01ToCyclic010(laserIndex / 6f));
				case "Ghostar":
					laserLuminance = MathHelper.Lerp(0.4f, 0.7f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.3f;
					return 0.66f;
				case "Devalaous":
					return 0.66f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.1f;
				case "Leinfors":
					return 0.73f + (float)Math.Cos(timeForVisualEffects / 3.0 * 6.2831854820251465) * 0.03f;
				case "Aeroblop":
					return 0.25f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.1f;
				case "Doylee":
					return 0.84f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.16f;
				case "Darkhalis":
				case "Arkhalis":
					return 0.75f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.07f;
				case "Nike Leon":
					return 0.07f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.04f;
				case "Suweeka":
					return 0.5f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.18f;
				case "W1K":
					return 0.75f + (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465) * 0.05f;
				case "Grox The Great":
					return 0.41f + (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465) * 0.1f;
				case "Acamaeda":
					return 0.18f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.1f;
				case "Alchemystics":
					return 0.73f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.18f;
				case "Antithesis":
					laserLuminance = 0.25f;
					laserAlphaMultiplier = 0.4f;
					return 0.7f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.05f;
				case "Aurora3500":
					laserLuminance = MathHelper.Lerp(0f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.25f;
					return 0.35f;
				case "Criddle":
					return 0.91f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.19f;
				case "Darthkitten":
					laserLuminance = MathHelper.Lerp(0.4f, 0.9f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.3f;
					return 1f;
				case "darthmorf":
					laserLuminance = MathHelper.Lerp(0f, 0.2f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.4f;
					return 0f;
				case "Discipile":
					laserLuminance = MathHelper.Lerp(0f, 0.4f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.35f;
					return 0.55f;
				case "Jenosis":
					return 0.66f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.08f;
				case "Kazzymodus":
					laserLuminance = MathHelper.Lerp(0.6f, 0.8f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.3f;
					return 0.33f;
				case "Khaios":
					laserLuminance = MathHelper.Lerp(0f, 0.1f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.25f;
					return 0.35f;
				case "Loki":
					laserLuminance = MathHelper.Lerp(0f, 0.3f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 5.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.4f;
					return 0f;
				case "ManaUser":
					return 0.49f + (float)Math.Cos(timeForVisualEffects / 140.0 * 6.2831854820251465) * 0.08f;
				case "Mid":
					laserLuminance = 0.25f;
					laserAlphaMultiplier = 0.4f;
					return 0.86f + (float)Math.Cos(timeForVisualEffects / 270.0 * 6.2831854820251465) * 0.13f;
				case "ppowersteef":
					laserLuminance = MathHelper.Lerp(0.1f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.25f;
					return 0.6f;
				case "RBrandon":
					laserLuminance = MathHelper.Lerp(0f, 0.5f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 105.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.4f;
					return 1f;
				case "Redigit":
					return 0.7f;
				case "Serenity":
					laserLuminance = MathHelper.Lerp(0.9f, 0.65f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.3f;
					return 0.85f;
				case "Sigma":
					return 0.06f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.06f;
				case "Unit One":
					return 0.38f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.24f;
				case "Vulpes Inculta":
					return 0.7f + (float)Math.Cos(timeForVisualEffects / 180.0 * 6.2831854820251465) * 0.05f;
				case "Waze3174":
					return 0.38f + (float)Math.Cos(timeForVisualEffects / 90.0 * 6.2831854820251465) * 0.24f;
				case "Xman101":
					laserLuminance = MathHelper.Lerp(0.9f, 0.55f, Utils.GetLerpValue(-1f, 1f, (float)Math.Cos(timeForVisualEffects / 120.0 * 6.2831854820251465)));
					laserAlphaMultiplier = 0.2f;
					return 0.33f;
				case "Zoomo":
					return 0.77f;
				case "Random":
					return Main.rand.NextFloat();
				}
			}
			return (float)(int)laserIndex / 6f;
		}

		public static int GetByUUID(int owner, float uuid)
		{
			return GetByUUID(owner, (int)uuid);
		}

		public static int GetByUUID(int owner, int uuid)
		{
			if (uuid < 0 || uuid >= 1000 || owner < 0 || owner >= 255)
			{
				return -1;
			}
			int num = Main.projectileIdentity[owner, uuid];
			if (num >= 0 && Main.projectile[num].active)
			{
				return num;
			}
			return -1;
		}

		public void ProjectileFixDesperation()
		{
			if (owner < 0 || owner >= 1000)
			{
				return;
			}
			switch (type)
			{
			case 461:
			case 632:
			case 642:
			case 644:
			{
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].owner == owner && (float)Main.projectile[i].identity == ai[1] && Main.projectile[i].active)
					{
						ai[1] = i;
						break;
					}
				}
				break;
			}
			}
		}

		public bool ShouldUseWindPhysics()
		{
			if (Main.windPhysics)
			{
				bool? flag = ProjectileID.Sets.WindPhysicsImmunity[type];
				if (flag.HasValue)
				{
					return !flag.Value;
				}
				switch (aiStyle)
				{
				case 1:
				case 2:
				case 8:
				case 10:
				case 14:
				case 16:
				case 17:
				case 21:
				case 24:
				case 28:
				case 29:
				case 32:
				case 33:
				case 34:
				case 35:
				case 49:
				case 72:
				case 93:
				case 96:
				case 106:
					return true;
				}
			}
			return false;
		}

		private void AI_151_SuperStar()
		{
			alpha -= 10;
			int num = 100;
			if (alpha < num)
			{
				alpha = num;
			}
			if (soundDelay == 0)
			{
				soundDelay = 20 + Main.rand.Next(40);
				SoundEngine.PlaySound(SoundID.Item9, position);
			}
			rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.005f * (float)direction;
			Vector2 vector = new Vector2(Main.screenWidth, Main.screenHeight);
			if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector / 2f, vector + new Vector2(400f))) && Main.rand.Next(6) == 0)
			{
				Gore.NewGore(position, velocity * 0.2f, Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17));
			}
			for (int i = 0; i < 2; i++)
			{
				if (Main.rand.Next(8) == 0)
				{
					int num2 = 228;
					Dust dust = Dust.NewDustDirect(position, width, height, num2, 0f, 0f, 127);
					dust.velocity *= 0.25f;
					dust.scale = 1.3f;
					dust.noGravity = true;
					dust.velocity += velocity.RotatedBy((float)Math.PI / 8f * (1f - (float)(2 * i))) * 0.2f;
				}
			}
		}

		public bool IsInterruptible(Player player)
		{
			if (aiStyle == 160)
			{
				return true;
			}
			return false;
		}

		public void Interrupt(Player player)
		{
			if (aiStyle == 160)
			{
				Kill();
				player.heldProj = -1;
				player.itemAnimation = 0;
				player.itemTime = 0;
			}
		}

		public static IProjectileSource GetNoneSource()
		{
			return null;
		}

		public IProjectileSource GetProjectileSource_FromThis()
		{
			return new ProjectileSource_ProjectileParent(this);
		}

		public static IProjectileSource InheritSource(Projectile projectile)
		{
			return projectile?.GetProjectileSource_FromThis();
		}

		private void AI_152_SuperStarSlash()
		{
			alpha -= 10;
			int num = 100;
			if (alpha < num)
			{
				alpha = num;
			}
			if (soundDelay == 0)
			{
				soundDelay = 20 + Main.rand.Next(40);
				SoundEngine.PlaySound(SoundID.Item9, position);
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			tileCollide = false;
		}

		public void Resize(int newWidth, int newHeight)
		{
			position = base.Center;
			width = newWidth;
			height = newHeight;
			base.Center = position;
		}

		public void AI()
		{
			//IL_19dc6: Unknown result type (might be due to invalid IL or missing references)
			//IL_19e02: Unknown result type (might be due to invalid IL or missing references)
			//IL_19e07: Unknown result type (might be due to invalid IL or missing references)
			//IL_19e48: Unknown result type (might be due to invalid IL or missing references)
			//IL_19e4d: Unknown result type (might be due to invalid IL or missing references)
			//IL_2eb23: Unknown result type (might be due to invalid IL or missing references)
			//IL_2f2b5: Unknown result type (might be due to invalid IL or missing references)
			//IL_2f3a4: Unknown result type (might be due to invalid IL or missing references)
			if (aiStyle == 1)
			{
				AI_001();
			}
			else if (aiStyle == 2)
			{
				if (Main.windPhysics)
				{
					velocity.X += Main.windSpeedCurrent * Main.windPhysicsStrength;
				}
				if (type == 93 && Main.rand.Next(5) == 0)
				{
					int num = Dust.NewDust(base.position, width, height, 57, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 0.3f);
					Main.dust[num].velocity.X *= 0.3f;
					Main.dust[num].velocity.Y *= 0.3f;
				}
				if (type == 968)
				{
					if (localAI[0] == 0f)
					{
						localAI[0] = 1f;
						Vector2 vector = Main.player[owner].velocity;
						float num2 = Utils.Remap(vector.Length(), 0f, 3f, 0f, 0.5f);
						Vector2 vector2 = base.Center + new Vector2(-8f, -8f) + velocity.SafeNormalize(Vector2.Zero) * 25f;
						for (int i = 0; i < 8; i++)
						{
							Dust dust = Main.dust[Dust.NewDust(vector2, 16, 16, 31, velocity.X, velocity.Y, 50, default(Color), 0.75f + Main.rand.NextFloat() * 0.3f)];
							dust.velocity = (velocity * (0.2f + num2)).RotatedByRandom(0.699999988079071) + vector * 0.25f;
							Dust dust2 = dust;
							dust2.velocity *= 0f + Main.rand.NextFloat() * 1f;
							dust.fadeIn = 0.1f;
							dust2 = dust;
							dust2.position -= dust.velocity;
							dust.noGravity = true;
						}
					}
					alpha = Math.Max(0, alpha - 50);
					frame = (int)this.ai[1];
				}
				if (type == 304 && localAI[0] == 0f)
				{
					localAI[0] += 1f;
					alpha = 0;
				}
				if (type == 510)
				{
					rotation += Math.Abs(velocity.X) * 0.04f * (float)direction;
				}
				else
				{
					rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.03f * (float)direction;
				}
				if (type == 909)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 30f)
					{
						velocity.Y += 0.4f;
						velocity.X *= 0.97f;
					}
					if (Main.netMode != 1 && this.ai[1] == 0f)
					{
						this.ai[1] = 1 + Main.rand.Next(6);
						netUpdate = true;
					}
					if (this.ai[1] > 0f)
					{
						frame = (int)this.ai[1] - 1;
					}
				}
				else if (type == 162)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item14, base.position);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 18f)
					{
						velocity.Y += 0.28f;
						velocity.X *= 0.99f;
					}
					if (this.ai[0] > 2f)
					{
						alpha = 0;
						if (this.ai[0] == 3f)
						{
							for (int j = 0; j < 10; j++)
							{
								int num3 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust2 = Main.dust[num3];
								dust2.velocity *= 0.5f;
								dust2 = Main.dust[num3];
								dust2.velocity += velocity * 0.1f;
							}
							for (int k = 0; k < 5; k++)
							{
								int num4 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num4].noGravity = true;
								Dust dust2 = Main.dust[num4];
								dust2.velocity *= 3f;
								dust2 = Main.dust[num4];
								dust2.velocity += velocity * 0.2f;
								num4 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
								dust2 = Main.dust[num4];
								dust2.velocity *= 2f;
								dust2 = Main.dust[num4];
								dust2.velocity += velocity * 0.3f;
							}
							for (int l = 0; l < 1; l++)
							{
								int num5 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
								Gore gore = Main.gore[num5];
								gore.position += velocity * 1.25f;
								Main.gore[num5].scale = 1.5f;
								gore = Main.gore[num5];
								gore.velocity += velocity * 0.5f;
								gore = Main.gore[num5];
								gore.velocity *= 0.02f;
							}
						}
					}
				}
				else if (type == 281)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item14, base.position);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 18f)
					{
						velocity.Y += 0.28f;
						velocity.X *= 0.99f;
					}
					if (this.ai[0] > 2f)
					{
						alpha = 0;
						if (this.ai[0] == 3f)
						{
							for (int m = 0; m < 10; m++)
							{
								int num6 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust2 = Main.dust[num6];
								dust2.velocity *= 0.5f;
								dust2 = Main.dust[num6];
								dust2.velocity += velocity * 0.1f;
							}
							for (int n = 0; n < 5; n++)
							{
								int num7 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num7].noGravity = true;
								Dust dust2 = Main.dust[num7];
								dust2.velocity *= 3f;
								dust2 = Main.dust[num7];
								dust2.velocity += velocity * 0.2f;
								num7 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
								dust2 = Main.dust[num7];
								dust2.velocity *= 2f;
								dust2 = Main.dust[num7];
								dust2.velocity += velocity * 0.3f;
							}
							for (int num8 = 0; num8 < 1; num8++)
							{
								int num9 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
								Gore gore = Main.gore[num9];
								gore.position += velocity * 1.25f;
								Main.gore[num9].scale = 1.5f;
								gore = Main.gore[num9];
								gore.velocity += velocity * 0.5f;
								gore = Main.gore[num9];
								gore.velocity *= 0.02f;
							}
						}
					}
				}
				else if (type == 240)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item14, base.position);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 16f)
					{
						velocity.Y += 0.18f;
						velocity.X *= 0.991f;
					}
					if (this.ai[0] > 2f)
					{
						alpha = 0;
						if (this.ai[0] == 3f)
						{
							for (int num10 = 0; num10 < 7; num10++)
							{
								int num11 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust2 = Main.dust[num11];
								dust2.velocity *= 0.5f;
								dust2 = Main.dust[num11];
								dust2.velocity += velocity * 0.1f;
							}
							for (int num12 = 0; num12 < 3; num12++)
							{
								int num13 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
								Main.dust[num13].noGravity = true;
								Dust dust2 = Main.dust[num13];
								dust2.velocity *= 3f;
								dust2 = Main.dust[num13];
								dust2.velocity += velocity * 0.2f;
								num13 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
								dust2 = Main.dust[num13];
								dust2.velocity *= 2f;
								dust2 = Main.dust[num13];
								dust2.velocity += velocity * 0.3f;
							}
							for (int num14 = 0; num14 < 1; num14++)
							{
								int num15 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
								Gore gore = Main.gore[num15];
								gore.position += velocity * 1.25f;
								Main.gore[num15].scale = 1.25f;
								gore = Main.gore[num15];
								gore.velocity += velocity * 0.5f;
								gore = Main.gore[num15];
								gore.velocity *= 0.02f;
							}
						}
					}
				}
				else if (type == 497)
				{
					int num16 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, velocity.X, velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num16].position = (Main.dust[num16].position + base.Center) / 2f;
					Main.dust[num16].noGravity = true;
					Dust dust2 = Main.dust[num16];
					dust2.velocity *= 0.3f;
					dust2 = Main.dust[num16];
					dust2.velocity -= velocity * 0.1f;
					this.ai[0] += 1f;
					if (this.ai[0] >= 30f)
					{
						velocity.X *= 0.99f;
						velocity.Y += 0.5f;
					}
					else
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					}
				}
				else if (type == 861)
				{
					if (Main.myPlayer == owner)
					{
						localAI[0]++;
						if (localAI[0] > 30f)
						{
							localAI[0] = 30f;
						}
						Player player = Main.player[owner];
						for (int num17 = 0; num17 < 255; num17++)
						{
							Player player2 = Main.player[num17];
							if (player2 != null && player2.active && !player2.dead && (player2.whoAmI != player.whoAmI || !(localAI[0] < 30f)) && Colliding(base.Hitbox, player2.Hitbox))
							{
								Kill();
								break;
							}
						}
					}
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.95f;
					}
					else
					{
						velocity.X *= 0.995f;
					}
					if (Math.Abs(velocity.X) < 0.5f)
					{
						velocity.X = 0f;
					}
					if (velocity.X == 0f && velocity.Y == 0f)
					{
						Kill();
					}
					velocity.Y += 0.1f;
					if (this.ai[1] == 1f)
					{
						frame = (frameCounter = 0);
						rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.03f * (float)direction;
					}
					else
					{
						if (frame == 0)
						{
							frame = 1;
						}
						frameCounter++;
						if (frameCounter > 4)
						{
							frameCounter = 0;
							frame++;
							if (frame >= Main.projFrames[type])
							{
								frame = 1;
							}
						}
						rotation = velocity.ToRotation() + (float)Math.PI / 4f;
						spriteDirection = ((!(velocity.X < 0f)) ? 1 : (-1));
						if (spriteDirection == -1)
						{
							rotation += (float)Math.PI / 2f;
						}
					}
				}
				else if (type == 249)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 0f)
					{
						velocity.Y += 0.25f;
					}
				}
				else if (type == 347)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 5f)
					{
						velocity.Y += 0.25f;
					}
				}
				else if (type == 501)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 18f)
					{
						velocity.X *= 0.995f;
						velocity.Y += 0.2f;
					}
				}
				else if (type == 504 || type == 954)
				{
					alpha = 255;
					this.ai[0] += 1f;
					if (this.ai[0] > 3f)
					{
						int num18 = 100;
						if (this.ai[0] > 20f)
						{
							int num19 = 40;
							float num20 = this.ai[0] - 20f;
							num18 = (int)(100f * (1f - num20 / (float)num19));
							if (num20 >= (float)num19)
							{
								Kill();
							}
						}
						if (this.ai[0] <= 10f)
						{
							num18 = (int)this.ai[0] * 10;
						}
						if (Main.rand.Next(100) < num18)
						{
							int num21 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 150);
							Main.dust[num21].position = (Main.dust[num21].position + base.Center) / 2f;
							Main.dust[num21].noGravity = true;
							Dust dust2 = Main.dust[num21];
							dust2.velocity *= 2f;
							dust2 = Main.dust[num21];
							dust2.scale *= 1.2f;
							dust2 = Main.dust[num21];
							dust2.velocity += velocity;
						}
					}
					if (this.ai[0] >= 20f)
					{
						velocity.X *= 0.99f;
						velocity.Y += 0.1f;
					}
				}
				else if (type == 69 || type == 70 || type == 621)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 10f)
					{
						velocity.Y += 0.25f;
						velocity.X *= 0.99f;
					}
				}
				else if (type == 166)
				{
					if (owner == Main.myPlayer && this.ai[1] == 1f)
					{
						for (int num22 = 0; num22 < 200; num22++)
						{
							if (Main.npc[num22].active && Main.npc[num22].townNPC && Colliding(base.Hitbox, Main.npc[num22].Hitbox))
							{
								Kill();
								return;
							}
						}
						if (Main.netMode == 1)
						{
							for (int num23 = 0; num23 < 255; num23++)
							{
								if (num23 != owner && Main.player[num23].active && !Main.player[owner].InOpposingTeam(Main.player[num23]) && Colliding(base.Hitbox, Main.player[num23].Hitbox))
								{
									Kill();
									return;
								}
							}
						}
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 20f)
					{
						velocity.Y += 0.3f;
						velocity.X *= 0.98f;
					}
				}
				else if (type == 300)
				{
					if (this.ai[0] == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item1, base.position);
					}
					this.ai[0] += 1f;
					if (this.ai[0] >= 60f)
					{
						velocity.Y += 0.2f;
						velocity.X *= 0.99f;
					}
				}
				else if (type == 306)
				{
					if (alpha <= 200)
					{
						for (int num24 = 0; num24 < 4; num24++)
						{
							float num25 = velocity.X / 4f * (float)num24;
							float num26 = velocity.Y / 4f * (float)num24;
							int num27 = Dust.NewDust(base.position, width, height, 184);
							Main.dust[num27].position.X = base.Center.X - num25;
							Main.dust[num27].position.Y = base.Center.Y - num26;
							Dust dust2 = Main.dust[num27];
							dust2.velocity *= 0f;
							Main.dust[num27].scale = 0.7f;
						}
					}
					alpha -= 50;
					if (alpha < 0)
					{
						alpha = 0;
					}
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 0.785f;
				}
				else if (type == 304)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 30f)
					{
						alpha += 10;
						damage = (int)((double)damage * 0.9);
						knockBack = (int)((double)knockBack * 0.9);
						if (alpha >= 255)
						{
							active = false;
						}
					}
					if (this.ai[0] < 30f)
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					}
				}
				else if (type == 370 || type == 371 || type == 936)
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 15f)
					{
						velocity.Y += 0.3f;
						velocity.X *= 0.98f;
					}
				}
				else
				{
					this.ai[0] += 1f;
					if (this.ai[0] >= 20f)
					{
						velocity.Y += 0.4f;
						velocity.X *= 0.97f;
					}
					else if (type == 48 || type == 54 || type == 93 || type == 520 || type == 599)
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					}
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				if (type == 54 && Main.rand.Next(20) == 0)
				{
					Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 40, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.75f);
				}
			}
			else if (aiStyle == 3)
			{
				if (soundDelay == 0 && type != 383)
				{
					soundDelay = 8;
					SoundEngine.PlaySound(SoundID.Item7, base.position);
				}
				if (type == 19)
				{
					for (int num28 = 0; num28 < 2; num28++)
					{
						int num29 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num29].noGravity = true;
						Main.dust[num29].velocity.X *= 0.3f;
						Main.dust[num29].velocity.Y *= 0.3f;
					}
				}
				else if (type == 867)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num30 = Dust.NewDust(base.position, width, height, 165, velocity.X, velocity.Y, 50);
						Dust dust2 = Main.dust[num30];
						dust2.velocity *= 0.5f;
						Main.dust[num30].noGravity = true;
					}
				}
				else if (type == 33)
				{
					if (Main.rand.Next(1) == 0)
					{
						int num31 = Dust.NewDust(base.position, width, height, 40, velocity.X * 0.25f, velocity.Y * 0.25f, 0, default(Color), 1.4f);
						Main.dust[num31].noGravity = true;
					}
				}
				else if (type == 320)
				{
					if (Main.rand.Next(3) == 0)
					{
						int num32 = Dust.NewDust(base.position, width, height, 5, velocity.X * 0.25f, velocity.Y * 0.25f, 0, default(Color), 1.1f);
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num32].scale = 0.9f;
							Dust dust2 = Main.dust[num32];
							dust2.velocity *= 0.2f;
						}
						else
						{
							Main.dust[num32].noGravity = true;
						}
					}
				}
				else if (type == 6)
				{
					if (Main.rand.Next(5) == 0)
					{
						int num33;
						switch (Main.rand.Next(3))
						{
						case 0:
							num33 = 15;
							break;
						case 1:
							num33 = 57;
							break;
						default:
							num33 = 58;
							break;
						}
						Dust.NewDust(base.position, width, height, num33, velocity.X * 0.25f, velocity.Y * 0.25f, 150, default(Color), 0.7f);
					}
				}
				else if (type == 113 && Main.rand.Next(1) == 0)
				{
					int num34 = Dust.NewDust(base.position, width, height, 76, velocity.X * 0.15f, velocity.Y * 0.15f, 0, default(Color), 1.1f);
					Main.dust[num34].noGravity = true;
					Dust.NewDust(base.position, width, height, 15, velocity.X * 0.05f, velocity.Y * 0.05f, 150, default(Color), 0.6f);
				}
				if (this.ai[0] == 0f)
				{
					bool flag = true;
					int num35 = type;
					if (num35 == 866)
					{
						flag = false;
					}
					if (flag)
					{
						this.ai[1] += 1f;
					}
					if (type == 106 && this.ai[1] >= 45f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
					if (type == 320 || type == 383)
					{
						if (this.ai[1] >= 10f)
						{
							velocity.Y += 0.5f;
							if (type == 383 && velocity.Y < 0f)
							{
								velocity.Y += 0.35f;
							}
							velocity.X *= 0.95f;
							if (velocity.Y > 16f)
							{
								velocity.Y = 16f;
							}
							if (type == 383 && Vector2.Distance(base.Center, Main.player[owner].Center) > 800f)
							{
								this.ai[0] = 1f;
							}
						}
					}
					else if (type == 182)
					{
						if (Main.rand.Next(2) == 0)
						{
							int num36 = Dust.NewDust(base.position, width, height, 57, 0f, 0f, 255, default(Color), 0.75f);
							Dust dust2 = Main.dust[num36];
							dust2.velocity *= 0.1f;
							Main.dust[num36].noGravity = true;
						}
						if (velocity.X > 0f)
						{
							spriteDirection = 1;
						}
						else if (velocity.X < 0f)
						{
							spriteDirection = -1;
						}
						float num37 = base.position.X;
						float num38 = base.position.Y;
						float num39 = 800f;
						bool flag2 = false;
						if (this.ai[1] > 10f && this.ai[1] < 360f)
						{
							for (int num40 = 0; num40 < 200; num40++)
							{
								if (Main.npc[num40].CanBeChasedBy(this))
								{
									float num41 = Main.npc[num40].position.X + (float)(Main.npc[num40].width / 2);
									float num42 = Main.npc[num40].position.Y + (float)(Main.npc[num40].height / 2);
									float num43 = Distance(Main.npc[num40].Center);
									if (num43 < num39 && Collision.CanHit(new Vector2(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2)), 1, 1, Main.npc[num40].position, Main.npc[num40].width, Main.npc[num40].height))
									{
										num39 = num43;
										num37 = num41;
										num38 = num42;
										flag2 = true;
									}
								}
							}
						}
						if (!flag2)
						{
							num37 = base.position.X + (float)(width / 2) + velocity.X * 100f;
							num38 = base.position.Y + (float)(height / 2) + velocity.Y * 100f;
							if (this.ai[1] >= 30f)
							{
								this.ai[0] = 1f;
								this.ai[1] = 0f;
								netUpdate = true;
							}
						}
						float num44 = 12f;
						float num45 = 0.25f;
						Vector2 vector3 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num46 = num37 - vector3.X;
						float num47 = num38 - vector3.Y;
						float num48 = (float)Math.Sqrt(num46 * num46 + num47 * num47);
						float num49 = num48;
						num48 = num44 / num48;
						num46 *= num48;
						num47 *= num48;
						if (velocity.X < num46)
						{
							velocity.X += num45;
							if (velocity.X < 0f && num46 > 0f)
							{
								velocity.X += num45 * 2f;
							}
						}
						else if (velocity.X > num46)
						{
							velocity.X -= num45;
							if (velocity.X > 0f && num46 < 0f)
							{
								velocity.X -= num45 * 2f;
							}
						}
						if (velocity.Y < num47)
						{
							velocity.Y += num45;
							if (velocity.Y < 0f && num47 > 0f)
							{
								velocity.Y += num45 * 2f;
							}
						}
						else if (velocity.Y > num47)
						{
							velocity.Y -= num45;
							if (velocity.Y > 0f && num47 < 0f)
							{
								velocity.Y -= num45 * 2f;
							}
						}
					}
					else if (type == 866)
					{
						if (owner == Main.myPlayer && damage > 0)
						{
							float num50 = this.ai[1];
							if (localAI[0] >= 10f && localAI[0] <= 360f)
							{
								int num51 = FindTargetWithLineOfSight();
								this.ai[1] = num51;
							}
							else
							{
								this.ai[1] = -1f;
							}
							if (this.ai[1] != num50)
							{
								netUpdate = true;
							}
						}
						localAI[0] += 1f;
						int num52 = (int)this.ai[1];
						Vector2 vector4;
						if (Main.npc.IndexInRange(num52) && Main.npc[num52].CanBeChasedBy(this))
						{
							vector4 = Main.npc[num52].Center;
						}
						else
						{
							vector4 = base.Center + velocity * 100f;
							int num53 = 30;
							if (owner != Main.myPlayer)
							{
								num53 = 60;
							}
							if (localAI[0] >= (float)num53)
							{
								this.ai[0] = 1f;
								this.ai[1] = 0f;
								netUpdate = true;
							}
						}
						float num54 = 12f;
						float num55 = 0.25f;
						Vector2 vector5 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num56 = vector4.X - vector5.X;
						float num57 = vector4.Y - vector5.Y;
						float num58 = (float)Math.Sqrt(num56 * num56 + num57 * num57);
						float num59 = num58;
						num58 = num54 / num58;
						num56 *= num58;
						num57 *= num58;
						if (velocity.X < num56)
						{
							velocity.X += num55;
							if (velocity.X < 0f && num56 > 0f)
							{
								velocity.X += num55 * 2f;
							}
						}
						else if (velocity.X > num56)
						{
							velocity.X -= num55;
							if (velocity.X > 0f && num56 < 0f)
							{
								velocity.X -= num55 * 2f;
							}
						}
						if (velocity.Y < num57)
						{
							velocity.Y += num55;
							if (velocity.Y < 0f && num57 > 0f)
							{
								velocity.Y += num55 * 2f;
							}
						}
						else if (velocity.Y > num57)
						{
							velocity.Y -= num55;
							if (velocity.Y > 0f && num57 < 0f)
							{
								velocity.Y -= num55 * 2f;
							}
						}
					}
					else if (type == 301)
					{
						if (this.ai[1] >= 20f)
						{
							this.ai[0] = 1f;
							this.ai[1] = 0f;
							netUpdate = true;
						}
					}
					else if (this.ai[1] >= 30f)
					{
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						netUpdate = true;
					}
				}
				else
				{
					tileCollide = false;
					float num60 = 9f;
					float num61 = 0.4f;
					if (type == 19)
					{
						num60 = 20f;
						num61 = 1.5f;
					}
					else if (type == 33)
					{
						num60 = 18f;
						num61 = 1.2f;
					}
					else if (type == 182)
					{
						num60 = 16f;
						num61 = 1.2f;
					}
					else if (type == 866)
					{
						num60 = 16f;
						num61 = 1.2f;
					}
					else if (type == 106)
					{
						num60 = 16f;
						num61 = 1.2f;
					}
					else if (type == 272)
					{
						num60 = 20f;
						num61 = 1.5f;
					}
					else if (type == 333)
					{
						num60 = 12f;
						num61 = 0.6f;
					}
					else if (type == 301)
					{
						num60 = 15f;
						num61 = 3f;
					}
					else if (type == 320)
					{
						num60 = 15f;
						num61 = 3f;
					}
					else if (type == 383)
					{
						num60 = 16f;
						num61 = 4f;
					}
					Vector2 vector6 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num62 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector6.X;
					float num63 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector6.Y;
					float num64 = (float)Math.Sqrt(num62 * num62 + num63 * num63);
					if (num64 > 3000f)
					{
						Kill();
					}
					num64 = num60 / num64;
					num62 *= num64;
					num63 *= num64;
					if (type == 383)
					{
						Vector2 vector7 = new Vector2(num62, num63) - velocity;
						if (vector7 != Vector2.Zero)
						{
							Vector2 vector8 = vector7;
							vector8.Normalize();
							velocity += vector8 * Math.Min(num61, vector7.Length());
						}
					}
					else
					{
						if (velocity.X < num62)
						{
							velocity.X += num61;
							if (velocity.X < 0f && num62 > 0f)
							{
								velocity.X += num61;
							}
						}
						else if (velocity.X > num62)
						{
							velocity.X -= num61;
							if (velocity.X > 0f && num62 < 0f)
							{
								velocity.X -= num61;
							}
						}
						if (velocity.Y < num63)
						{
							velocity.Y += num61;
							if (velocity.Y < 0f && num63 > 0f)
							{
								velocity.Y += num61;
							}
						}
						else if (velocity.Y > num63)
						{
							velocity.Y -= num61;
							if (velocity.Y > 0f && num63 < 0f)
							{
								velocity.Y -= num61;
							}
						}
					}
					if (Main.myPlayer == owner)
					{
						Rectangle rectangle = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
						Rectangle value = new Rectangle((int)Main.player[owner].position.X, (int)Main.player[owner].position.Y, Main.player[owner].width, Main.player[owner].height);
						if (rectangle.Intersects(value))
						{
							Kill();
						}
					}
				}
				if (type == 106)
				{
					rotation += 0.3f * (float)direction;
				}
				else if (type == 866)
				{
					rotation = velocity.ToRotation();
					if (Main.rand.Next(2) == 0)
					{
						int num65 = Dust.NewDust(base.position, width, height, 212);
						Dust dust2 = Main.dust[num65];
						dust2.velocity *= 0.1f;
						Main.dust[num65].noGravity = true;
					}
				}
				else if (type == 383)
				{
					if (this.ai[0] == 0f)
					{
						Vector2 vector9 = velocity;
						vector9.Normalize();
						rotation = (float)Math.Atan2(vector9.Y, vector9.X) + 1.57f;
					}
					else
					{
						Vector2 vector10 = base.Center - Main.player[owner].Center;
						vector10.Normalize();
						rotation = (float)Math.Atan2(vector10.Y, vector10.X) + 1.57f;
					}
				}
				else
				{
					rotation += 0.4f * (float)direction;
				}
			}
			else if (aiStyle == 4)
			{
				if (Main.netMode != 2 && this.ai[1] == 0f && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					LegacySoundStyle legacySoundStyle = SoundID.Item8;
					if (type == 494)
					{
						legacySoundStyle = SoundID.Item101;
					}
					SoundEngine.PlaySound(legacySoundStyle, base.Center);
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				if (this.ai[0] == 0f)
				{
					if (type >= 150 && type <= 152 && this.ai[1] == 0f && alpha == 255 && Main.rand.Next(2) == 0)
					{
						type++;
						netUpdate = true;
					}
					alpha -= 50;
					if (type >= 150 && type <= 152)
					{
						alpha -= 25;
					}
					else if (type == 493 || type == 494)
					{
						alpha -= 50;
					}
					if (alpha > 0)
					{
						return;
					}
					alpha = 0;
					this.ai[0] = 1f;
					if (this.ai[1] == 0f)
					{
						this.ai[1] += 1f;
						base.position += velocity * 1f;
					}
					if (type == 7 && Main.myPlayer == owner)
					{
						int num66 = type;
						if (this.ai[1] >= 6f)
						{
							num66++;
						}
						int num67 = NewProjectile(GetProjectileSource_FromThis(), base.position.X + velocity.X + (float)(width / 2), base.position.Y + velocity.Y + (float)(height / 2), velocity.X, velocity.Y, num66, damage, knockBack, owner);
						Main.projectile[num67].damage = damage;
						Main.projectile[num67].ai[1] = this.ai[1] + 1f;
						NetMessage.SendData(27, -1, -1, null, num67);
					}
					else if (type == 494 && Main.myPlayer == owner)
					{
						int num68 = type;
						if (this.ai[1] >= (float)(7 + Main.rand.Next(2)))
						{
							num68--;
						}
						int num69 = damage;
						float num70 = knockBack;
						if (num68 == 493)
						{
							num69 = (int)((double)damage * 1.25);
							num70 = knockBack * 1.25f;
						}
						int number = NewProjectile(GetProjectileSource_FromThis(), base.position.X + velocity.X + (float)(width / 2), base.position.Y + velocity.Y + (float)(height / 2), velocity.X, velocity.Y, num68, num69, num70, owner, 0f, this.ai[1] + 1f);
						NetMessage.SendData(27, -1, -1, null, number);
					}
					else if ((type == 150 || type == 151) && Main.myPlayer == owner)
					{
						int num71 = type;
						if (type == 150)
						{
							num71 = 151;
						}
						else if (type == 151)
						{
							num71 = 150;
						}
						if (this.ai[1] >= 10f && type == 151)
						{
							num71 = 152;
						}
						int num72 = NewProjectile(GetProjectileSource_FromThis(), base.position.X + velocity.X + (float)(width / 2), base.position.Y + velocity.Y + (float)(height / 2), velocity.X, velocity.Y, num71, damage, knockBack, owner);
						Main.projectile[num72].damage = damage;
						Main.projectile[num72].ai[1] = this.ai[1] + 1f;
						NetMessage.SendData(27, -1, -1, null, num72);
					}
					return;
				}
				if (alpha < 170 && alpha + 5 >= 170)
				{
					if (type >= 150 && type <= 152)
					{
						for (int num73 = 0; num73 < 8; num73++)
						{
							int num74 = Dust.NewDust(base.position, width, height, 7, velocity.X * 0.025f, velocity.Y * 0.025f, 200, default(Color), 1.3f);
							Main.dust[num74].noGravity = true;
							Dust dust2 = Main.dust[num74];
							dust2.velocity *= 0.5f;
						}
					}
					else if (type == 493 || type == 494)
					{
						for (int num75 = 0; num75 < 8; num75++)
						{
							int num76 = Dust.NewDust(base.position, width, height, Main.rand.Next(68, 71), velocity.X * 0.025f, velocity.Y * 0.025f, 200, default(Color), 1.3f);
							Main.dust[num76].noGravity = true;
							Dust dust2 = Main.dust[num76];
							dust2.velocity *= 0.5f;
						}
					}
					else
					{
						for (int num77 = 0; num77 < 3; num77++)
						{
							Dust.NewDust(base.position, width, height, 18, velocity.X * 0.025f, velocity.Y * 0.025f, 170, default(Color), 1.2f);
						}
						Dust.NewDust(base.position, width, height, 14, 0f, 0f, 170, default(Color), 1.1f);
					}
				}
				if (type >= 150 && type <= 152)
				{
					alpha += 3;
				}
				else if (type == 493 || type == 494)
				{
					alpha += 4;
				}
				else
				{
					alpha += 5;
				}
				if (alpha >= 255)
				{
					Kill();
				}
			}
			else if (aiStyle == 5)
			{
				if (type == 12 && Main.dayTime && damage == 1000)
				{
					Kill();
				}
				if (type == 503 || type == 723 || type == 724 || type == 725 || type == 726)
				{
					if (base.Center.Y > this.ai[1])
					{
						tileCollide = true;
					}
				}
				else if (type == 92)
				{
					if (base.position.Y > this.ai[1])
					{
						tileCollide = true;
					}
				}
				else
				{
					if (this.ai[1] == 0f && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[1] = 1f;
						netUpdate = true;
					}
					if (this.ai[1] != 0f)
					{
						tileCollide = true;
					}
				}
				if (soundDelay == 0)
				{
					soundDelay = 20 + Main.rand.Next(40);
					SoundEngine.PlaySound(SoundID.Item9, base.position);
				}
				if (type == 503)
				{
					alpha -= 15;
					int num78 = 150;
					if (base.Center.Y >= this.ai[1])
					{
						num78 = 0;
					}
					if (alpha < num78)
					{
						alpha = num78;
					}
					localAI[0] += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f * (float)direction;
				}
				else if (type == 723 || type == 724 || type == 725 || type == 726)
				{
					alpha -= 15;
					int num79 = 100;
					if (base.Center.Y >= this.ai[1])
					{
						num79 = 0;
					}
					if (alpha < num79)
					{
						alpha = num79;
					}
					localAI[0] += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f * (float)direction;
				}
				else
				{
					if (localAI[0] == 0f)
					{
						localAI[0] = 1f;
					}
					alpha += (int)(25f * localAI[0]);
					if (alpha > 200)
					{
						alpha = 200;
						localAI[0] = -1f;
					}
					if (alpha < 0)
					{
						alpha = 0;
						localAI[0] = 1f;
					}
				}
				if (type == 503)
				{
					rotation = velocity.ToRotation() - (float)Math.PI / 2f;
				}
				else
				{
					rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f * (float)direction;
				}
				if (type == 503)
				{
					if (Main.rand.Next(16) == 0)
					{
						Vector2 vector11 = Vector2.UnitX.RotatedByRandom(1.5707963705062866).RotatedBy(velocity.ToRotation());
						int num80 = Dust.NewDust(base.position, width, height, 58, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.2f);
						Main.dust[num80].velocity = vector11 * 0.66f;
						Main.dust[num80].position = base.Center + vector11 * 12f;
					}
					if (Main.rand.Next(48) == 0)
					{
						int num81 = Gore.NewGore(base.Center, new Vector2(velocity.X * 0.2f, velocity.Y * 0.2f), 16);
						Gore gore = Main.gore[num81];
						gore.velocity *= 0.66f;
						gore = Main.gore[num81];
						gore.velocity += velocity * 0.3f;
					}
				}
				if (type == 12 || type == 955)
				{
					Vector2 vector12 = new Vector2(Main.screenWidth, Main.screenHeight);
					if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector12 / 2f, vector12 + new Vector2(400f))) && Main.rand.Next(6) == 0)
					{
						int num82 = Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17);
						if (Main.tenthAnniversaryWorld)
						{
							num82 = Utils.SelectRandom<int>(Main.rand, 16, 16, 16, 17);
						}
						Gore.NewGore(base.position, velocity * 0.2f, num82);
					}
					light = 0.9f;
					if (Main.rand.Next(20) == 0 || (Main.tenthAnniversaryWorld && Main.rand.Next(15) == 0))
					{
						Dust.NewDust(base.position, width, height, 58, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.2f);
					}
				}
				else if (type == 723 || type == 724 || type == 725 || type == 726)
				{
					if (type == 726 || type == 725 || type == 726)
					{
						Vector2 vector13 = new Vector2(Main.screenWidth, Main.screenHeight);
						if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector13 / 2f, vector13 + new Vector2(400f))) && Main.rand.Next(24) == 0)
						{
							Gore.NewGore(base.position, velocity * 0.2f, Utils.SelectRandom<int>(Main.rand, 16, 17));
						}
						if (Main.rand.Next(3) == 0)
						{
							Dust dust3 = Dust.NewDustDirect(base.position, width, height, 86, 0f, 0f, 127);
							Dust dust2 = dust3;
							dust2.velocity *= 0.5f;
							dust3.noGravity = true;
						}
					}
					if (type == 723)
					{
						Vector2 vector14 = new Vector2(Main.screenWidth, Main.screenHeight);
						if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector14 / 2f, vector14 + new Vector2(400f))) && Main.rand.Next(6) == 0)
						{
							Gore.NewGore(base.position, velocity * 0.2f, 17);
						}
						for (float num83 = 0f; num83 < 3f; num83 += 1f)
						{
							Vector2 vector15 = base.Center + new Vector2(0f, 12f * scale).RotatedBy(base.position.Y / 200f + num83 * ((float)Math.PI * 2f) + rotation) - velocity * 0.5f;
							Dust dust4 = Dust.NewDustPerfect(vector15, 267, velocity * 0.2f * num83, 0, Color.Blue);
							dust4.noLight = true;
							dust4.noGravity = true;
							dust4 = Dust.NewDustPerfect(vector15, 267, velocity * 0.2f * num83, 0, Color.White, 0.4f);
							dust4.noLight = true;
							dust4.noGravity = true;
						}
					}
				}
				else if (this.ai[1] == 1f || type == 92)
				{
					light = 0.9f;
					if (Main.rand.Next(10) == 0)
					{
						Dust.NewDust(base.position, width, height, 58, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.2f);
					}
					if (Main.rand.Next(20) == 0)
					{
						Gore.NewGore(base.position, new Vector2(velocity.X * 0.2f, velocity.Y * 0.2f), Main.rand.Next(16, 18));
					}
				}
			}
			else if (aiStyle == 6)
			{
				velocity *= 0.95f;
				this.ai[0] += 1f;
				if (this.ai[0] == 180f)
				{
					Kill();
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					int num84 = 10 + type;
					if (type == 463)
					{
						num84 = 231;
					}
					for (int num85 = 0; num85 < 30; num85++)
					{
						Dust.NewDust(base.position, width, height, num84, velocity.X, velocity.Y, 50);
					}
				}
				if (type != 10 && type != 11 && type != 463)
				{
					return;
				}
				int num86 = (int)(base.position.X / 16f) - 1;
				int num87 = (int)((base.position.X + (float)width) / 16f) + 2;
				int num88 = (int)(base.position.Y / 16f) - 1;
				int num89 = (int)((base.position.Y + (float)height) / 16f) + 2;
				if (num86 < 0)
				{
					num86 = 0;
				}
				if (num87 > Main.maxTilesX)
				{
					num87 = Main.maxTilesX;
				}
				if (num88 < 0)
				{
					num88 = 0;
				}
				if (num89 > Main.maxTilesY)
				{
					num89 = Main.maxTilesY;
				}
				Vector2 vector16 = default(Vector2);
				for (int num90 = num86; num90 < num87; num90++)
				{
					for (int num91 = num88; num91 < num89; num91++)
					{
						vector16.X = num90 * 16;
						vector16.Y = num91 * 16;
						if (!(base.position.X + (float)width > vector16.X) || !(base.position.X < vector16.X + 16f) || !(base.position.Y + (float)height > vector16.Y) || !(base.position.Y < vector16.Y + 16f) || Main.myPlayer != owner || !Main.tile[num90, num91].active())
						{
							continue;
						}
						if (type == 10)
						{
							if (Main.tile[num90, num91].type == 23 || Main.tile[num90, num91].type == 199)
							{
								Main.tile[num90, num91].type = 2;
								WorldGen.SquareTileFrame(num90, num91);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num90, num91);
								}
							}
							if (Main.tile[num90, num91].type == 25 || Main.tile[num90, num91].type == 203)
							{
								Main.tile[num90, num91].type = 1;
								WorldGen.SquareTileFrame(num90, num91);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num90, num91);
								}
							}
							if (Main.tile[num90, num91].type == 112 || Main.tile[num90, num91].type == 234)
							{
								Main.tile[num90, num91].type = 53;
								WorldGen.SquareTileFrame(num90, num91);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num90, num91);
								}
							}
							if (Main.tile[num90, num91].type == 163 || Main.tile[num90, num91].type == 200)
							{
								Main.tile[num90, num91].type = 161;
								WorldGen.SquareTileFrame(num90, num91);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num90, num91);
								}
							}
							if (Main.tile[num90, num91].type == 400 || Main.tile[num90, num91].type == 401)
							{
								Main.tile[num90, num91].type = 396;
								WorldGen.SquareTileFrame(num90, num91);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num90, num91);
								}
							}
							if (Main.tile[num90, num91].type == 398 || Main.tile[num90, num91].type == 399)
							{
								Main.tile[num90, num91].type = 397;
								WorldGen.SquareTileFrame(num90, num91);
								if (Main.netMode == 1)
								{
									NetMessage.SendTileSquare(-1, num90, num91);
								}
							}
						}
						if (type == 11 || type == 463)
						{
							if (type == 11)
							{
								WorldGen.Convert(num90, num91, 1, 1);
							}
							if (type == 463)
							{
								WorldGen.Convert(num90, num91, 4, 1);
							}
						}
					}
				}
			}
			else if (aiStyle == 7)
			{
				AI_007_GrapplingHooks();
			}
			else if (aiStyle == 8)
			{
				if (type == 258 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item20, base.position);
				}
				if (type == 96 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item20, base.position);
				}
				if (type == 27)
				{
					for (int num92 = 0; num92 < 5; num92++)
					{
						float num93 = velocity.X / 3f * (float)num92;
						float num94 = velocity.Y / 3f * (float)num92;
						int num95 = 4;
						int num96 = Dust.NewDust(new Vector2(base.position.X + (float)num95, base.position.Y + (float)num95), width - num95 * 2, height - num95 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num96].noGravity = true;
						Dust dust2 = Main.dust[num96];
						dust2.velocity *= 0.1f;
						dust2 = Main.dust[num96];
						dust2.velocity += velocity * 0.1f;
						Main.dust[num96].position.X -= num93;
						Main.dust[num96].position.Y -= num94;
					}
					if (Main.rand.Next(5) == 0)
					{
						int num97 = 4;
						int num98 = Dust.NewDust(new Vector2(base.position.X + (float)num97, base.position.Y + (float)num97), width - num97 * 2, height - num97 * 2, 172, 0f, 0f, 100, default(Color), 0.6f);
						Dust dust2 = Main.dust[num98];
						dust2.velocity *= 0.25f;
						dust2 = Main.dust[num98];
						dust2.velocity += velocity * 0.5f;
					}
				}
				else if (type == 502)
				{
					float num99 = (float)Main.DiscoR / 255f;
					float num100 = (float)Main.DiscoG / 255f;
					float num101 = (float)Main.DiscoB / 255f;
					num99 = (0.5f + num99) / 2f;
					num100 = (0.5f + num100) / 2f;
					num101 = (0.5f + num101) / 2f;
					Lighting.AddLight(base.Center, num99, num100, num101);
				}
				else if (type == 95 || type == 96)
				{
					int num102 = Dust.NewDust(new Vector2(base.position.X + velocity.X, base.position.Y + velocity.Y), width, height, 75, velocity.X, velocity.Y, 100, default(Color), 3f * scale);
					Main.dust[num102].noGravity = true;
				}
				else if (type == 253)
				{
					for (int num103 = 0; num103 < 2; num103++)
					{
						int num104 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 135, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num104].noGravity = true;
						Main.dust[num104].velocity.X *= 0.3f;
						Main.dust[num104].velocity.Y *= 0.3f;
					}
				}
				else
				{
					for (int num105 = 0; num105 < 2; num105++)
					{
						int num106 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num106].noGravity = true;
						Main.dust[num106].velocity.X *= 0.3f;
						Main.dust[num106].velocity.Y *= 0.3f;
					}
				}
				if (type != 27 && type != 96 && type != 258)
				{
					this.ai[1] += 1f;
				}
				if (this.ai[1] >= 20f)
				{
					velocity.Y += 0.2f;
				}
				if (type == 502)
				{
					rotation = velocity.ToRotation() + (float)Math.PI / 2f;
					if (velocity.X != 0f)
					{
						spriteDirection = (direction = Math.Sign(velocity.X));
					}
				}
				else
				{
					rotation += 0.3f * (float)direction;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
			}
			else if (aiStyle == 9)
			{
				AI_009_MagicMissiles();
			}
			else if (aiStyle == 10)
			{
				AI_010();
			}
			else if (aiStyle == 11)
			{
				if (type == 72 || type == 86 || type == 87)
				{
					if (velocity.X > 0f)
					{
						spriteDirection = -1;
					}
					else if (velocity.X < 0f)
					{
						spriteDirection = 1;
					}
					rotation = velocity.X * 0.1f;
					frameCounter++;
					if (frameCounter >= 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame >= 4)
					{
						frame = 0;
					}
					if (Main.rand.Next(6) == 0)
					{
						int num107 = 56;
						if (type == 86)
						{
							num107 = 73;
						}
						else if (type == 87)
						{
							num107 = 74;
						}
						int num108 = Dust.NewDust(base.position, width, height, num107, 0f, 0f, 200, default(Color), 0.8f);
						Dust dust2 = Main.dust[num108];
						dust2.velocity *= 0.3f;
						Main.dust[num108].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
					}
				}
				else
				{
					rotation += 0.02f;
				}
				if (type == 72)
				{
					if (Main.player[owner].blueFairy)
					{
						timeLeft = 2;
					}
				}
				else if (type == 86)
				{
					if (Main.player[owner].redFairy)
					{
						timeLeft = 2;
					}
				}
				else if (type == 87)
				{
					if (Main.player[owner].greenFairy)
					{
						timeLeft = 2;
					}
				}
				else if (Main.player[owner].lightOrb)
				{
					timeLeft = 2;
				}
				if (!Main.player[owner].dead)
				{
					float num109 = 3f;
					if (type == 72 || type == 86 || type == 87)
					{
						num109 = 3.75f;
					}
					Vector2 vector17 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num110 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector17.X;
					float num111 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector17.Y;
					int num112 = 70;
					if (type == 18)
					{
						if (Main.player[owner].controlUp)
						{
							num111 = Main.player[owner].position.Y - 40f - vector17.Y;
							num110 -= 6f;
							num112 = 4;
						}
						else if (Main.player[owner].controlDown)
						{
							num111 = Main.player[owner].position.Y + (float)Main.player[owner].height + 40f - vector17.Y;
							num110 -= 6f;
							num112 = 4;
						}
					}
					float num113 = (float)Math.Sqrt(num110 * num110 + num111 * num111);
					num113 = (float)Math.Sqrt(num110 * num110 + num111 * num111);
					if (type == 72 || type == 86 || type == 87)
					{
						num112 = 40;
					}
					if (num113 > 800f)
					{
						base.position.X = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - (float)(width / 2);
						base.position.Y = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - (float)(height / 2);
					}
					else if (num113 > (float)num112)
					{
						num113 = num109 / num113;
						num110 *= num113;
						num111 *= num113;
						velocity.X = num110;
						velocity.Y = num111;
					}
					else
					{
						velocity.X = 0f;
						velocity.Y = 0f;
					}
				}
				else
				{
					Kill();
				}
			}
			else if (aiStyle == 12)
			{
				if (type == 288 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, base.position);
				}
				if (type == 280 || type == 288)
				{
					scale -= 0.002f;
					if (scale <= 0f)
					{
						Kill();
					}
					if (type == 288)
					{
						this.ai[0] = 4f;
					}
					if (this.ai[0] > 3f)
					{
						velocity.Y += 0.075f;
						for (int num114 = 0; num114 < 3; num114++)
						{
							float num115 = velocity.X / 3f * (float)num114;
							float num116 = velocity.Y / 3f * (float)num114;
							int num117 = 14;
							int num118 = Dust.NewDust(new Vector2(base.position.X + (float)num117, base.position.Y + (float)num117), width - num117 * 2, height - num117 * 2, 170, 0f, 0f, 100);
							Main.dust[num118].noGravity = true;
							Dust dust2 = Main.dust[num118];
							dust2.velocity *= 0.1f;
							dust2 = Main.dust[num118];
							dust2.velocity += velocity * 0.5f;
							Main.dust[num118].position.X -= num115;
							Main.dust[num118].position.Y -= num116;
						}
						if (Main.rand.Next(8) == 0)
						{
							int num119 = 16;
							int num120 = Dust.NewDust(new Vector2(base.position.X + (float)num119, base.position.Y + (float)num119), width - num119 * 2, height - num119 * 2, 170, 0f, 0f, 100, default(Color), 0.5f);
							Dust dust2 = Main.dust[num120];
							dust2.velocity *= 0.25f;
							dust2 = Main.dust[num120];
							dust2.velocity += velocity * 0.5f;
						}
					}
					else
					{
						this.ai[0] += 1f;
					}
					return;
				}
				scale -= 0.02f;
				if (scale <= 0f)
				{
					Kill();
				}
				if (this.ai[0] > 3f)
				{
					velocity.Y += 0.2f;
					for (int num121 = 0; num121 < 1; num121++)
					{
						for (int num122 = 0; num122 < 3; num122++)
						{
							float num123 = velocity.X / 3f * (float)num122;
							float num124 = velocity.Y / 3f * (float)num122;
							int num125 = 6;
							int num126 = Dust.NewDust(new Vector2(base.position.X + (float)num125, base.position.Y + (float)num125), width - num125 * 2, height - num125 * 2, 172, 0f, 0f, 100, default(Color), 1.2f);
							Main.dust[num126].noGravity = true;
							Dust dust2 = Main.dust[num126];
							dust2.velocity *= 0.3f;
							dust2 = Main.dust[num126];
							dust2.velocity += velocity * 0.5f;
							Main.dust[num126].position.X -= num123;
							Main.dust[num126].position.Y -= num124;
						}
						if (Main.rand.Next(8) == 0)
						{
							int num127 = 6;
							int num128 = Dust.NewDust(new Vector2(base.position.X + (float)num127, base.position.Y + (float)num127), width - num127 * 2, height - num127 * 2, 172, 0f, 0f, 100, default(Color), 0.75f);
							Dust dust2 = Main.dust[num128];
							dust2.velocity *= 0.5f;
							dust2 = Main.dust[num128];
							dust2.velocity += velocity * 0.5f;
						}
					}
				}
				else
				{
					this.ai[0] += 1f;
				}
			}
			else if (aiStyle == 13)
			{
				bool flag3 = Main.player[owner].dead;
				if (!flag3)
				{
					float num129 = (Main.player[owner].Center - base.Center).Length();
					flag3 = num129 > 2000f;
				}
				if (flag3)
				{
					Kill();
					return;
				}
				if (type != 481)
				{
					Main.player[owner].SetDummyItemTime(5);
				}
				if (alpha == 0)
				{
					if (base.position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
					{
						Main.player[owner].ChangeDir(1);
					}
					else
					{
						Main.player[owner].ChangeDir(-1);
					}
				}
				if (type == 481)
				{
					if (this.ai[0] == 0f)
					{
						extraUpdates = 0;
					}
					else
					{
						extraUpdates = 1;
					}
				}
				Vector2 vector18 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num130 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector18.X;
				float num131 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector18.Y;
				float num132 = (float)Math.Sqrt(num130 * num130 + num131 * num131);
				if (this.ai[0] == 0f)
				{
					if (num132 > 700f)
					{
						this.ai[0] = 1f;
					}
					else if (type == 262 && num132 > 500f)
					{
						this.ai[0] = 1f;
					}
					else if (type == 271 && num132 > 200f)
					{
						this.ai[0] = 1f;
					}
					else if (type == 273 && num132 > 150f)
					{
						this.ai[0] = 1f;
					}
					else if (type == 481 && num132 > 350f)
					{
						this.ai[0] = 1f;
					}
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					this.ai[1] += 1f;
					if (this.ai[1] > 5f)
					{
						alpha = 0;
					}
					if (type == 262 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (type == 271 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (type == 273 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (type == 481 && this.ai[1] > 8f)
					{
						this.ai[1] = 8f;
					}
					if (type == 404 && this.ai[1] > 8f)
					{
						this.ai[1] = 0f;
					}
					if (this.ai[1] >= 10f)
					{
						this.ai[1] = 15f;
						velocity.Y += 0.3f;
					}
					if (type == 262 && velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					else if (type == 262)
					{
						spriteDirection = 1;
					}
					if (type == 271 && velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					else if (type == 271)
					{
						spriteDirection = 1;
					}
				}
				else if (this.ai[0] == 1f)
				{
					tileCollide = false;
					rotation = (float)Math.Atan2(num131, num130) - 1.57f;
					float num133 = 20f;
					if (type == 262)
					{
						num133 = 30f;
					}
					if (num132 < 50f)
					{
						Kill();
					}
					num132 = num133 / num132;
					num130 *= num132;
					num131 *= num132;
					velocity.X = num130;
					velocity.Y = num131;
					if (type == 262 && velocity.X < 0f)
					{
						spriteDirection = 1;
					}
					else if (type == 262)
					{
						spriteDirection = -1;
					}
					if (type == 271 && velocity.X < 0f)
					{
						spriteDirection = 1;
					}
					else if (type == 271)
					{
						spriteDirection = -1;
					}
				}
			}
			else if (aiStyle == 14)
			{
				if (type == 870 && this.ai[1] > 0f)
				{
					aiStyle = 170;
				}
				if (type == 473 && Main.netMode != 2)
				{
					localAI[0] += 1f;
					if (localAI[0] >= 10f)
					{
						localAI[0] = 0f;
						int num134 = 30;
						if ((base.Center - Main.player[Main.myPlayer].Center).Length() < (float)(Main.screenWidth + num134 * 16))
						{
							Main.instance.SpelunkerProjectileHelper.AddSpotToCheck(base.Center);
						}
					}
				}
				if (type == 352)
				{
					if (localAI[1] == 0f)
					{
						localAI[1] = 1f;
					}
					alpha += (int)(25f * localAI[1]);
					if (alpha <= 0)
					{
						alpha = 0;
						localAI[1] = 1f;
					}
					else if (alpha >= 255)
					{
						alpha = 255;
						localAI[1] = -1f;
					}
					scale += localAI[1] * 0.01f;
				}
				if (type == 346)
				{
					if (localAI[0] == 0f)
					{
						localAI[0] = 1f;
						SoundEngine.PlaySound(SoundID.Item1, base.position);
					}
					frame = (int)this.ai[1];
					if (frame == 0)
					{
						Lighting.AddLight(base.Center, 0.25f, 0.2f, 0f);
					}
					else
					{
						Lighting.AddLight(base.Center, 0.15f, 0.15f, 0.15f);
					}
					if (owner == Main.myPlayer && timeLeft == 1)
					{
						for (int num135 = 0; num135 < 5; num135++)
						{
							float num136 = 10f;
							Vector2 vector19 = new Vector2(base.Center.X, base.Center.Y);
							float num137 = Main.rand.Next(-20, 21);
							float num138 = Main.rand.Next(-20, 0);
							float num139 = (float)Math.Sqrt(num137 * num137 + num138 * num138);
							num139 = num136 / num139;
							num137 *= num139;
							num138 *= num139;
							num137 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							num138 *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
							int num140 = NewProjectile(GetProjectileSource_FromThis(), vector19.X, vector19.Y, num137, num138, 347, 40, 0f, Main.myPlayer, 0f, this.ai[1]);
						}
					}
				}
				if (type == 196)
				{
					int num141 = Main.rand.Next(1, 3);
					for (int num142 = 0; num142 < num141; num142++)
					{
						int num143 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100);
						Dust dust2 = Main.dust[num143];
						dust2.alpha += Main.rand.Next(100);
						dust2 = Main.dust[num143];
						dust2.velocity *= 0.3f;
						Main.dust[num143].velocity.X += (float)Main.rand.Next(-10, 11) * 0.025f;
						Main.dust[num143].velocity.Y -= 0.4f + (float)Main.rand.Next(-3, 14) * 0.15f;
						Main.dust[num143].fadeIn = 1.25f + (float)Main.rand.Next(20) * 0.15f;
					}
				}
				if (type == 53)
				{
					try
					{
						int num144 = (int)(base.position.X / 16f) - 1;
						int num145 = (int)((base.position.X + (float)width) / 16f) + 2;
						int num146 = (int)(base.position.Y / 16f) - 1;
						int num147 = (int)((base.position.Y + (float)height) / 16f) + 2;
						if (num144 < 0)
						{
							num144 = 0;
						}
						if (num145 > Main.maxTilesX)
						{
							num145 = Main.maxTilesX;
						}
						if (num146 < 0)
						{
							num146 = 0;
						}
						if (num147 > Main.maxTilesY)
						{
							num147 = Main.maxTilesY;
						}
						Vector2 vector20 = default(Vector2);
						for (int num148 = num144; num148 < num145; num148++)
						{
							for (int num149 = num146; num149 < num147; num149++)
							{
								if (Main.tile[num148, num149] != null && Main.tile[num148, num149].nactive() && Main.tileSolid[Main.tile[num148, num149].type] && !Main.tileSolidTop[Main.tile[num148, num149].type])
								{
									vector20.X = num148 * 16;
									vector20.Y = num149 * 16;
									if (base.position.X + (float)width > vector20.X && base.position.X < vector20.X + 16f && base.position.Y + (float)height > vector20.Y && base.position.Y < vector20.Y + 16f)
									{
										velocity.X = 0f;
										velocity.Y = -0.2f;
									}
								}
							}
						}
					}
					catch
					{
					}
				}
				if (type == 277)
				{
					if (alpha > 0)
					{
						alpha -= 30;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					if (Main.expertMode)
					{
						float num150 = 12f;
						int num151 = Player.FindClosest(base.Center, 1, 1);
						Vector2 vector21 = Main.player[num151].Center - base.Center;
						vector21.Normalize();
						vector21 *= num150;
						int num152 = 200;
						velocity.X = (velocity.X * (float)(num152 - 1) + vector21.X) / (float)num152;
						if (velocity.Length() > 16f)
						{
							velocity.Normalize();
							velocity *= 16f;
						}
					}
				}
				if (type == 261)
				{
					if (localAI[1] == 0f)
					{
						localAI[1] = 1f;
						localAI[0] = 80f;
					}
					rotation += velocity.X * 0.05f;
					if (velocity.Y != 0f)
					{
						rotation += (float)spriteDirection * 0.01f;
					}
					this.ai[0]++;
					if (this.ai[0] > 15f)
					{
						if (velocity.Y == 0f && velocity.X != 0f)
						{
							velocity.X *= 0.97f;
							Math.Abs(velocity.X);
							_ = 2f;
							if (Math.Abs(velocity.X) <= 0.01f)
							{
								Kill();
							}
						}
						this.ai[0] = 15f;
						velocity.Y += 0.2f;
					}
					if (localAI[0] > 0f)
					{
						localAI[0]--;
						int num153 = 5;
						int maxValue = num153;
						if (localAI[0] < 20f)
						{
							maxValue = num153 + num153;
						}
						if (localAI[0] < 10f)
						{
							maxValue = num153 + num153 + num153;
						}
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust5 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(width / 2, height / 2), 31);
							Dust dust2 = dust5;
							dust2.velocity *= 0.33f;
							dust5.scale = 0.7f;
						}
						if (Main.rand.Next(maxValue) == 0)
						{
							Dust dust6 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(width / 2, height / 2), 228, Main.rand.NextVector2Circular(3f, 3f));
							dust6.scale = 0.6f;
							Dust dust2 = dust6;
							dust2.velocity *= 0.33f;
						}
					}
				}
				else if (type == 277)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 15f)
					{
						this.ai[0] = 15f;
						if (velocity.Y == 0f && velocity.X != 0f)
						{
							velocity.X *= 0.97f;
							if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
							{
								Kill();
							}
						}
						velocity.Y += 0.2f;
					}
					rotation += velocity.X * 0.05f;
				}
				else if (type == 378)
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item17, base.position);
						localAI[0] += 1f;
					}
					Rectangle rectangle2 = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
					for (int num154 = 0; num154 < 200; num154++)
					{
						if (Main.npc[num154].CanBeChasedBy(this, ignoreDontTakeDamage: true))
						{
							Rectangle value2 = new Rectangle((int)Main.npc[num154].position.X, (int)Main.npc[num154].position.Y, Main.npc[num154].width, Main.npc[num154].height);
							if (rectangle2.Intersects(value2))
							{
								Kill();
								return;
							}
						}
					}
					this.ai[0] += 1f;
					if (this.ai[0] > 10f)
					{
						this.ai[0] = 90f;
						if (velocity.Y == 0f && velocity.X != 0f)
						{
							velocity.X *= 0.96f;
							if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
							{
								Kill();
							}
						}
						velocity.Y += 0.2f;
					}
					rotation += velocity.X * 0.1f;
				}
				else if (type == 483)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 5f)
					{
						if (owner == Main.myPlayer && this.ai[0] > (float)Main.rand.Next(20, 130))
						{
							Kill();
						}
						if (velocity.Y == 0f && velocity.X != 0f)
						{
							velocity.X *= 0.97f;
							if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
							{
								velocity.X = 0f;
								netUpdate = true;
							}
						}
						velocity.Y += 0.3f;
						velocity.X *= 0.99f;
					}
					rotation += velocity.X * 0.05f;
				}
				else if (type == 538)
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 60f || velocity.Y >= 0f)
					{
						alpha += 6;
						velocity *= 0.5f;
					}
					else if (this.ai[0] > 5f)
					{
						velocity.Y += 0.1f;
						velocity.X *= 1.025f;
						alpha -= 23;
						scale = 0.8f * (255f - (float)alpha) / 255f;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					if (alpha >= 255 && this.ai[0] > 5f)
					{
						Kill();
						return;
					}
				}
				else
				{
					this.ai[0] += 1f;
					if (this.ai[0] > 5f)
					{
						this.ai[0] = 5f;
						if (velocity.Y == 0f && velocity.X != 0f)
						{
							velocity.X *= 0.97f;
							if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
							{
								velocity.X = 0f;
								netUpdate = true;
							}
						}
						velocity.Y += 0.2f;
					}
					rotation += velocity.X * 0.1f;
				}
				if (type == 538)
				{
					if (localAI[1] == 0f)
					{
						localAI[1] = 1f;
						SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 7);
					}
					if (velocity.Y < 0f && this.ai[0] < 60f)
					{
						if (Main.rand.Next(4) == 0)
						{
							int num155 = Dust.NewDust(base.position, width, height, 180, 0f, 0f, 100);
							Main.dust[num155].position = base.Center;
							Dust dust2 = Main.dust[num155];
							dust2.scale += (float)Main.rand.Next(50) * 0.01f;
							Main.dust[num155].noGravity = true;
							Main.dust[num155].velocity.Y -= 2f;
						}
						if (Main.rand.Next(6) == 0)
						{
							int num156 = Dust.NewDust(base.position, width, height, 176, 0f, 0f, 100);
							Main.dust[num156].position = base.Center;
							Dust dust2 = Main.dust[num156];
							dust2.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
							Main.dust[num156].noGravity = true;
							dust2 = Main.dust[num156];
							dust2.velocity *= 0.1f;
						}
					}
				}
				if (type == 450)
				{
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item13, base.position);
					}
					if (Main.rand.Next(2) == 0)
					{
						int num157 = Dust.NewDust(base.position, width, height, 228, 0f, 0f, 100);
						Main.dust[num157].position.X -= 2f;
						Main.dust[num157].position.Y += 2f;
						Dust dust2 = Main.dust[num157];
						dust2.scale += (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num157].noGravity = true;
						Main.dust[num157].velocity.Y -= 2f;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num158 = Dust.NewDust(base.position, width, height, 228, 0f, 0f, 100);
						Main.dust[num158].position.X -= 2f;
						Main.dust[num158].position.Y += 2f;
						Dust dust2 = Main.dust[num158];
						dust2.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num158].noGravity = true;
						dust2 = Main.dust[num158];
						dust2.velocity *= 0.1f;
					}
					if (++frameCounter >= 3)
					{
						frameCounter = 0;
						if (++frame >= 5)
						{
							frame = 0;
						}
					}
					if ((double)velocity.Y < 0.25 && (double)velocity.Y > 0.15)
					{
						velocity.X *= 0.8f;
					}
					rotation = (0f - velocity.X) * 0.05f;
				}
				if (type == 480)
				{
					alpha = 255;
					int num159 = Dust.NewDust(base.position, width, height, 75, 0f, 0f, 100);
					Main.dust[num159].position.X -= 2f;
					Main.dust[num159].position.Y += 2f;
					Dust dust2 = Main.dust[num159];
					dust2.scale += (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num159].noGravity = true;
					Main.dust[num159].velocity.Y -= 2f;
					if (Main.rand.Next(2) == 0)
					{
						int num160 = Dust.NewDust(base.position, width, height, 75, 0f, 0f, 100);
						Main.dust[num160].position.X -= 2f;
						Main.dust[num160].position.Y += 2f;
						dust2 = Main.dust[num160];
						dust2.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num160].noGravity = true;
						dust2 = Main.dust[num160];
						dust2.velocity *= 0.1f;
					}
				}
				if (type >= 326 && type <= 328)
				{
					if (wet)
					{
						Kill();
					}
					if (this.ai[1] == 0f && type >= 326 && type <= 328)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item13, base.position);
					}
					if (Main.rand.Next(3) != 0)
					{
						Dust dust7 = Dust.NewDustDirect(base.position, width, height, 6);
						dust7.velocity.Y -= 2f;
						dust7.noGravity = true;
						Dust dust2 = dust7;
						dust2.scale += Main.rand.NextFloat() * 0.8f + 0.3f;
						dust2 = dust7;
						dust2.velocity += velocity * 1f;
					}
					if ((double)velocity.Y < 0.25 && (double)velocity.Y > 0.15)
					{
						velocity.X *= 0.8f;
					}
					rotation = (0f - velocity.X) * 0.05f;
				}
				if (type >= 400 && type <= 402)
				{
					if (wet)
					{
						Kill();
					}
					if (this.ai[1] == 0f && type >= 326 && type <= 328)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item13, base.position);
					}
					int num161 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 100);
					Main.dust[num161].position.X -= 2f;
					Main.dust[num161].position.Y += 2f;
					Dust dust2 = Main.dust[num161];
					dust2.scale += (float)Main.rand.Next(50) * 0.01f;
					Main.dust[num161].noGravity = true;
					Main.dust[num161].velocity.Y -= 2f;
					if (Main.rand.Next(2) == 0)
					{
						int num162 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 100);
						Main.dust[num162].position.X -= 2f;
						Main.dust[num162].position.Y += 2f;
						dust2 = Main.dust[num162];
						dust2.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num162].noGravity = true;
						dust2 = Main.dust[num162];
						dust2.velocity *= 0.1f;
					}
					if ((double)velocity.Y < 0.25 && (double)velocity.Y > 0.15)
					{
						velocity.X *= 0.8f;
					}
					rotation = (0f - velocity.X) * 0.05f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
			}
			else if (aiStyle == 15)
			{
				AI_015_Flails();
			}
			else if (aiStyle == 16)
			{
				AI_016();
			}
			else if (aiStyle == 17)
			{
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.98f;
				}
				rotation += velocity.X * 0.1f;
				velocity.Y += 0.2f;
				if (owner != Main.myPlayer)
				{
					return;
				}
				int num163 = (int)((base.position.X + (float)(width / 2)) / 16f);
				int num164 = (int)((base.position.Y + (float)height - 4f) / 16f);
				if (Main.tile[num163, num164] == null)
				{
					return;
				}
				int style = 0;
				if (type >= 201 && type <= 205)
				{
					style = type - 200;
				}
				if (type >= 527 && type <= 531)
				{
					style = type - 527 + 6;
				}
				bool flag4 = false;
				TileObject objectData = default(TileObject);
				if (TileObject.CanPlace(num163, num164, 85, style, direction, out objectData))
				{
					flag4 = TileObject.Place(objectData);
				}
				if (flag4)
				{
					NetMessage.SendObjectPlacment(-1, num163, num164, objectData.type, objectData.style, objectData.alternate, objectData.random, direction);
					SoundEngine.PlaySound(0, num163 * 16, num164 * 16);
					int num165 = Sign.ReadSign(num163, num164);
					if (num165 >= 0)
					{
						Sign.TextSign(num165, miscText);
						NetMessage.SendData(47, -1, -1, null, num165, 0f, (int)(byte)new BitsByte(b1: true));
					}
					Kill();
				}
			}
			else if (aiStyle == 18)
			{
				if (this.ai[1] == 0f && type == 44)
				{
					this.ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item8, base.position);
				}
				if (type == 263 || type == 274)
				{
					if (type == 274 && velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					rotation += (float)direction * 0.05f;
					rotation += (float)direction * 0.5f * ((float)timeLeft / 180f);
					if (type == 274)
					{
						velocity *= 0.96f;
					}
					else
					{
						velocity *= 0.95f;
					}
					return;
				}
				rotation += (float)direction * 0.8f;
				this.ai[0] += 1f;
				if (!(this.ai[0] < 30f))
				{
					if (this.ai[0] < 100f)
					{
						velocity *= 1.06f;
					}
					else
					{
						this.ai[0] = 200f;
					}
				}
				for (int num166 = 0; num166 < 2; num166++)
				{
					int num167 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, 0f, 0f, 100);
					Main.dust[num167].noGravity = true;
				}
			}
			else if (aiStyle == 19)
			{
				AI_019_Spears();
			}
			else if (aiStyle == 20)
			{
				timeLeft = 60;
				if (type == 252)
				{
					frameCounter++;
					if (frameCounter >= 4)
					{
						frameCounter = 0;
						frame++;
					}
					if (frame > 3)
					{
						frame = 0;
					}
				}
				if (type == 509)
				{
					frameCounter++;
					if (frameCounter >= 2)
					{
						frameCounter = 0;
						frame++;
					}
					if (frame > 1)
					{
						frame = 0;
					}
				}
				if (soundDelay <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item22, base.position);
					soundDelay = 30;
				}
				Vector2 vector22 = Main.player[owner].RotatedRelativePoint(Main.player[owner].MountedCenter);
				if (Main.myPlayer == owner)
				{
					if (Main.player[owner].channel)
					{
						float num168 = Main.player[owner].inventory[Main.player[owner].selectedItem].shootSpeed * scale;
						Vector2 vector23 = vector22;
						float num169 = (float)Main.mouseX + Main.screenPosition.X - vector23.X;
						float num170 = (float)Main.mouseY + Main.screenPosition.Y - vector23.Y;
						if (Main.player[owner].gravDir == -1f)
						{
							num170 = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector23.Y;
						}
						float num171 = (float)Math.Sqrt(num169 * num169 + num170 * num170);
						num171 = (float)Math.Sqrt(num169 * num169 + num170 * num170);
						num171 = num168 / num171;
						num169 *= num171;
						num170 *= num171;
						if (num169 != velocity.X || num170 != velocity.Y)
						{
							netUpdate = true;
						}
						velocity.X = num169;
						velocity.Y = num170;
					}
					else
					{
						Kill();
					}
				}
				if (velocity.X > 0f)
				{
					Main.player[owner].ChangeDir(1);
				}
				else if (velocity.X < 0f)
				{
					Main.player[owner].ChangeDir(-1);
				}
				spriteDirection = direction;
				Main.player[owner].ChangeDir(direction);
				Main.player[owner].heldProj = whoAmI;
				Main.player[owner].SetDummyItemTime(2);
				base.position.X = vector22.X - (float)(width / 2);
				base.position.Y = vector22.Y - (float)(height / 2);
				rotation = (float)(Math.Atan2(velocity.Y, velocity.X) + 1.5700000524520874);
				if (Main.player[owner].direction == 1)
				{
					Main.player[owner].itemRotation = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
				}
				else
				{
					Main.player[owner].itemRotation = (float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction);
				}
				velocity.X *= 1f + (float)Main.rand.Next(-3, 4) * 0.01f;
				if (Main.rand.Next(6) == 0)
				{
					int num172 = Dust.NewDust(base.position + velocity * Main.rand.Next(6, 10) * 0.1f, width, height, 31, 0f, 0f, 80, default(Color), 1.4f);
					Main.dust[num172].position.X -= 4f;
					Main.dust[num172].noGravity = true;
					Dust dust2 = Main.dust[num172];
					dust2.velocity *= 0.2f;
					Main.dust[num172].velocity.Y = (float)(-Main.rand.Next(7, 13)) * 0.15f;
				}
			}
			else if (aiStyle == 21)
			{
				rotation = velocity.X * 0.1f;
				spriteDirection = -direction;
				if (Main.rand.Next(3) == 0)
				{
					int num173 = Dust.NewDust(base.position, width, height, 27, 0f, 0f, 80);
					Main.dust[num173].noGravity = true;
					Dust dust2 = Main.dust[num173];
					dust2.velocity *= 0.2f;
				}
				if (this.ai[1] == 1f)
				{
					this.ai[1] = 0f;
					Main.musicPitch = this.ai[0];
					SoundEngine.PlaySound(SoundID.Item26, base.position);
				}
			}
			else if (aiStyle == 22)
			{
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					alpha = 255;
				}
				Dust dust2;
				if (this.ai[1] < 0f)
				{
					if (timeLeft > 60)
					{
						timeLeft = 60;
					}
					if (velocity.X > 0f)
					{
						rotation += 0.3f;
					}
					else
					{
						rotation -= 0.3f;
					}
					int num174 = (int)(base.position.X / 16f) - 1;
					int num175 = (int)((base.position.X + (float)width) / 16f) + 2;
					int num176 = (int)(base.position.Y / 16f) - 1;
					int num177 = (int)((base.position.Y + (float)height) / 16f) + 2;
					if (num174 < 0)
					{
						num174 = 0;
					}
					if (num175 > Main.maxTilesX)
					{
						num175 = Main.maxTilesX;
					}
					if (num176 < 0)
					{
						num176 = 0;
					}
					if (num177 > Main.maxTilesY)
					{
						num177 = Main.maxTilesY;
					}
					int num178 = (int)base.position.X + 4;
					int num179 = (int)base.position.Y + 4;
					Vector2 vector24 = default(Vector2);
					for (int num180 = num174; num180 < num175; num180++)
					{
						for (int num181 = num176; num181 < num177; num181++)
						{
							if (Main.tile[num180, num181] != null && Main.tile[num180, num181].active() && Main.tile[num180, num181].type != 127 && Main.tileSolid[Main.tile[num180, num181].type] && !Main.tileSolidTop[Main.tile[num180, num181].type])
							{
								vector24.X = num180 * 16;
								vector24.Y = num181 * 16;
								if ((float)(num178 + 8) > vector24.X && (float)num178 < vector24.X + 16f && (float)(num179 + 8) > vector24.Y && (float)num179 < vector24.Y + 16f)
								{
									Kill();
								}
							}
						}
					}
					int num182 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67);
					Main.dust[num182].noGravity = true;
					dust2 = Main.dust[num182];
					dust2.velocity *= 0.3f;
					return;
				}
				if (this.ai[0] < 0f)
				{
					if (this.ai[0] == -1f)
					{
						for (int num183 = 0; num183 < 10; num183++)
						{
							int num184 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, 0f, 0f, 0, default(Color), 1.1f);
							Main.dust[num184].noGravity = true;
							dust2 = Main.dust[num184];
							dust2.velocity *= 1.3f;
						}
					}
					else if (Main.rand.Next(30) == 0)
					{
						int num185 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67, 0f, 0f, 100);
						dust2 = Main.dust[num185];
						dust2.velocity *= 0.2f;
					}
					int num186 = (int)base.position.X / 16;
					int num187 = (int)base.position.Y / 16;
					if (Main.tile[num186, num187] == null || !Main.tile[num186, num187].active())
					{
						Kill();
					}
					this.ai[0] -= 1f;
					if (this.ai[0] <= -900f && (Main.myPlayer == owner || Main.netMode == 2) && Main.tile[num186, num187].active() && Main.tile[num186, num187].type == 127)
					{
						WorldGen.KillTile(num186, num187);
						if (Main.netMode == 1)
						{
							NetMessage.SendData(17, -1, -1, null, 0, num186, num187);
						}
						Kill();
					}
					return;
				}
				int num188 = (int)(base.position.X / 16f) - 1;
				int num189 = (int)((base.position.X + (float)width) / 16f) + 2;
				int num190 = (int)(base.position.Y / 16f) - 1;
				int num191 = (int)((base.position.Y + (float)height) / 16f) + 2;
				if (num188 < 0)
				{
					num188 = 0;
				}
				if (num189 > Main.maxTilesX)
				{
					num189 = Main.maxTilesX;
				}
				if (num190 < 0)
				{
					num190 = 0;
				}
				if (num191 > Main.maxTilesY)
				{
					num191 = Main.maxTilesY;
				}
				int num192 = (int)base.position.X + 4;
				int num193 = (int)base.position.Y + 4;
				Vector2 vector25 = default(Vector2);
				for (int num194 = num188; num194 < num189; num194++)
				{
					for (int num195 = num190; num195 < num191; num195++)
					{
						if (Main.tile[num194, num195] != null && Main.tile[num194, num195].nactive() && Main.tile[num194, num195].type != 127 && Main.tileSolid[Main.tile[num194, num195].type] && !Main.tileSolidTop[Main.tile[num194, num195].type])
						{
							vector25.X = num194 * 16;
							vector25.Y = num195 * 16;
							if ((float)(num192 + 8) > vector25.X && (float)num192 < vector25.X + 16f && (float)(num193 + 8) > vector25.Y && (float)num193 < vector25.Y + 16f)
							{
								Kill();
							}
						}
					}
				}
				if (lavaWet)
				{
					Kill();
				}
				if (!active)
				{
					return;
				}
				int num196 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 67);
				Main.dust[num196].noGravity = true;
				dust2 = Main.dust[num196];
				dust2.velocity *= 0.3f;
				int num197 = (int)this.ai[0];
				int num198 = (int)this.ai[1];
				if (WorldGen.InWorld(num197, num198) && WorldGen.SolidTile(num197, num198))
				{
					if (Math.Abs(velocity.X) > Math.Abs(velocity.Y))
					{
						if (base.Center.Y < (float)(num198 * 16 + 8) && WorldGen.InWorld(num197, num198 - 1) && !WorldGen.SolidTile(num197, num198 - 1))
						{
							num198--;
						}
						else if (WorldGen.InWorld(num197, num198 + 1) && !WorldGen.SolidTile(num197, num198 + 1))
						{
							num198++;
						}
						else if (WorldGen.InWorld(num197, num198 - 1) && !WorldGen.SolidTile(num197, num198 - 1))
						{
							num198--;
						}
						else if (base.Center.X < (float)(num197 * 16 + 8) && WorldGen.InWorld(num197 - 1, num198) && !WorldGen.SolidTile(num197 - 1, num198))
						{
							num197--;
						}
						else if (WorldGen.InWorld(num197 + 1, num198) && !WorldGen.SolidTile(num197 + 1, num198))
						{
							num197++;
						}
						else if (WorldGen.InWorld(num197 - 1, num198) && !WorldGen.SolidTile(num197 - 1, num198))
						{
							num197--;
						}
					}
					else if (base.Center.X < (float)(num197 * 16 + 8) && WorldGen.InWorld(num197 - 1, num198) && !WorldGen.SolidTile(num197 - 1, num198))
					{
						num197--;
					}
					else if (WorldGen.InWorld(num197 + 1, num198) && !WorldGen.SolidTile(num197 + 1, num198))
					{
						num197++;
					}
					else if (WorldGen.InWorld(num197 - 1, num198) && !WorldGen.SolidTile(num197 - 1, num198))
					{
						num197--;
					}
					else if (base.Center.Y < (float)(num198 * 16 + 8) && WorldGen.InWorld(num197, num198 - 1) && !WorldGen.SolidTile(num197, num198 - 1))
					{
						num198--;
					}
					else if (WorldGen.InWorld(num197, num198 + 1) && !WorldGen.SolidTile(num197, num198 + 1))
					{
						num198++;
					}
					else if (WorldGen.InWorld(num197, num198 - 1) && !WorldGen.SolidTile(num197, num198 - 1))
					{
						num198--;
					}
				}
				if (velocity.X > 0f)
				{
					rotation += 0.3f;
				}
				else
				{
					rotation -= 0.3f;
				}
				if (Main.myPlayer != owner)
				{
					return;
				}
				int num199 = (int)((base.position.X + (float)(width / 2)) / 16f);
				int num200 = (int)((base.position.Y + (float)(height / 2)) / 16f);
				bool flag5 = false;
				if (num199 == num197 && num200 == num198)
				{
					flag5 = true;
				}
				if (((velocity.X <= 0f && num199 <= num197) || (velocity.X >= 0f && num199 >= num197)) && ((velocity.Y <= 0f && num200 <= num198) || (velocity.Y >= 0f && num200 >= num198)))
				{
					flag5 = true;
				}
				if (!flag5)
				{
					return;
				}
				if (WorldGen.PlaceTile(num197, num198, 127, mute: false, forced: false, owner))
				{
					if (Main.netMode == 1)
					{
						NetMessage.SendData(17, -1, -1, null, 1, (int)this.ai[0], (int)this.ai[1], 127f);
					}
					damage = 0;
					this.ai[0] = -1f;
					velocity *= 0f;
					alpha = 255;
					base.position.X = num197 * 16;
					base.position.Y = num198 * 16;
					netUpdate = true;
				}
				else
				{
					this.ai[1] = -1f;
				}
			}
			else if (aiStyle == 23)
			{
				if (type == 188)
				{
					if (this.ai[0] < 8f)
					{
						this.ai[0] = 8f;
					}
					localAI[0]++;
				}
				if (timeLeft > 60)
				{
					timeLeft = 60;
				}
				if (this.ai[0] > 7f)
				{
					float num201 = 1f;
					if (this.ai[0] == 8f)
					{
						num201 = 0.25f;
					}
					else if (this.ai[0] == 9f)
					{
						num201 = 0.5f;
					}
					else if (this.ai[0] == 10f)
					{
						num201 = 0.75f;
					}
					this.ai[0] += 1f;
					int num202 = 6;
					if (type == 101)
					{
						num202 = 75;
					}
					if (num202 == 6 || Main.rand.Next(2) == 0)
					{
						for (int num203 = 0; num203 < 1; num203++)
						{
							int num204 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num202, velocity.X * 0.2f, velocity.Y * 0.2f, 100);
							Dust dust2;
							if (Main.rand.Next(3) != 0 || (num202 == 75 && Main.rand.Next(3) == 0))
							{
								Main.dust[num204].noGravity = true;
								dust2 = Main.dust[num204];
								dust2.scale *= 3f;
								Main.dust[num204].velocity.X *= 2f;
								Main.dust[num204].velocity.Y *= 2f;
							}
							if (type == 188)
							{
								dust2 = Main.dust[num204];
								dust2.scale *= 1.25f;
							}
							else
							{
								dust2 = Main.dust[num204];
								dust2.scale *= 1.5f;
							}
							Main.dust[num204].velocity.X *= 1.2f;
							Main.dust[num204].velocity.Y *= 1.2f;
							dust2 = Main.dust[num204];
							dust2.scale *= num201;
							if (num202 == 75)
							{
								dust2 = Main.dust[num204];
								dust2.velocity += velocity;
								if (!Main.dust[num204].noGravity)
								{
									dust2 = Main.dust[num204];
									dust2.velocity *= 0.5f;
								}
							}
						}
					}
				}
				else
				{
					this.ai[0] += 1f;
				}
				rotation += 0.3f * (float)direction;
			}
			else if (aiStyle == 24)
			{
				light = scale * 0.5f;
				rotation += velocity.X * 0.2f;
				this.ai[1] += 1f;
				if (type == 94)
				{
					if (Main.rand.Next(4) == 0)
					{
						int num205 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 70);
						Main.dust[num205].noGravity = true;
						Dust dust2 = Main.dust[num205];
						dust2.velocity *= 0.5f;
						dust2 = Main.dust[num205];
						dust2.scale *= 0.9f;
					}
					velocity *= 0.985f;
					if (this.ai[1] > 130f)
					{
						scale -= 0.05f;
						if ((double)scale <= 0.2)
						{
							scale = 0.2f;
							Kill();
						}
					}
					return;
				}
				velocity *= 0.96f;
				if (this.ai[1] > 15f)
				{
					scale -= 0.05f;
					if ((double)scale <= 0.2)
					{
						scale = 0.2f;
						Kill();
					}
				}
			}
			else if (aiStyle == 25)
			{
				if (this.ai[0] != 0f && velocity.Y <= 0f && velocity.X == 0f)
				{
					float num206 = 0.5f;
					int i2 = (int)((base.position.X - 8f) / 16f);
					int num207 = (int)(base.position.Y / 16f);
					bool flag6 = false;
					bool flag7 = false;
					if (WorldGen.SolidTile(i2, num207) || WorldGen.SolidTile(i2, num207 + 1))
					{
						flag6 = true;
					}
					i2 = (int)((base.position.X + (float)width + 8f) / 16f);
					if (WorldGen.SolidTile(i2, num207) || WorldGen.SolidTile(i2, num207 + 1))
					{
						flag7 = true;
					}
					if (flag6)
					{
						velocity.X = num206;
					}
					else if (flag7)
					{
						velocity.X = 0f - num206;
					}
					else
					{
						i2 = (int)((base.position.X - 8f - 16f) / 16f);
						num207 = (int)(base.position.Y / 16f);
						flag6 = false;
						flag7 = false;
						if (WorldGen.SolidTile(i2, num207) || WorldGen.SolidTile(i2, num207 + 1))
						{
							flag6 = true;
						}
						i2 = (int)((base.position.X + (float)width + 8f + 16f) / 16f);
						if (WorldGen.SolidTile(i2, num207) || WorldGen.SolidTile(i2, num207 + 1))
						{
							flag7 = true;
						}
						if (flag6)
						{
							velocity.X = num206;
						}
						else if (flag7)
						{
							velocity.X = 0f - num206;
						}
						else
						{
							i2 = (int)((base.position.X - 8f - 32f) / 16f);
							num207 = (int)(base.position.Y / 16f);
							flag6 = false;
							flag7 = false;
							if (WorldGen.SolidTile(i2, num207) || WorldGen.SolidTile(i2, num207 + 1))
							{
								flag6 = true;
							}
							i2 = (int)((base.position.X + (float)width + 8f + 32f) / 16f);
							if (WorldGen.SolidTile(i2, num207) || WorldGen.SolidTile(i2, num207 + 1))
							{
								flag7 = true;
							}
							if (!flag6 && !flag7)
							{
								if ((int)(base.Center.X / 16f) % 2 == 0)
								{
									flag6 = true;
								}
								else
								{
									flag7 = true;
								}
							}
							if (flag6)
							{
								velocity.X = num206;
							}
							else if (flag7)
							{
								velocity.X = 0f - num206;
							}
						}
					}
				}
				rotation += velocity.X * 0.06f;
				this.ai[0] = 1f;
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				if (velocity.Y <= 6f)
				{
					if (velocity.X > 0f && velocity.X < 7f)
					{
						velocity.X += 0.05f;
					}
					if (velocity.X < 0f && velocity.X > -7f)
					{
						velocity.X -= 0.05f;
					}
				}
				velocity.Y += 0.3f;
				if (type == 655 && wet)
				{
					Kill();
				}
			}
			else if (aiStyle == 26)
			{
				AI_026();
			}
			else if (aiStyle == 27)
			{
				if (type == 115)
				{
					this.ai[0] += 1f;
					if (this.ai[0] < 30f)
					{
						velocity *= 1.125f;
					}
				}
				if (type == 115 && localAI[1] < 5f)
				{
					localAI[1] = 5f;
					for (int num208 = 5; num208 < 25; num208++)
					{
						float num209 = velocity.X * (30f / (float)num208);
						float num210 = velocity.Y * (30f / (float)num208);
						num209 *= 80f;
						num210 *= 80f;
						int num211 = Dust.NewDust(new Vector2(base.position.X - num209, base.position.Y - num210), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 0.9f);
						Dust dust2 = Main.dust[num211];
						dust2.velocity *= 0.25f;
						dust2 = Main.dust[num211];
						dust2.velocity -= velocity * 5f;
					}
				}
				if (localAI[1] > 7f && type == 173)
				{
					int num212;
					switch (Main.rand.Next(3))
					{
					case 0:
						num212 = 15;
						break;
					case 1:
						num212 = 57;
						break;
					default:
						num212 = 58;
						break;
					}
					int num213 = Dust.NewDust(new Vector2(base.position.X - velocity.X * 4f + 2f, base.position.Y + 2f - velocity.Y * 4f), 8, 8, num212, 0f, 0f, 100, default(Color), 1.25f);
					Dust dust2 = Main.dust[num213];
					dust2.velocity *= 0.1f;
				}
				if (localAI[1] > 7f && type == 132)
				{
					int num214 = Dust.NewDust(new Vector2(base.position.X - velocity.X * 4f + 2f, base.position.Y + 2f - velocity.Y * 4f), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.25f);
					Dust dust2 = Main.dust[num214];
					dust2.velocity *= -0.25f;
					num214 = Dust.NewDust(new Vector2(base.position.X - velocity.X * 4f + 2f, base.position.Y + 2f - velocity.Y * 4f), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.25f);
					dust2 = Main.dust[num214];
					dust2.velocity *= -0.25f;
					dust2 = Main.dust[num214];
					dust2.position -= velocity * 0.5f;
				}
				if (localAI[1] < 15f)
				{
					localAI[1] += 1f;
				}
				else
				{
					if (type == 114 || type == 115)
					{
						int num215 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 4f), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 0.6f);
						Dust dust2 = Main.dust[num215];
						dust2.velocity *= -0.25f;
					}
					else if (type == 116)
					{
						int num216 = Dust.NewDust(new Vector2(base.position.X - velocity.X * 5f + 2f, base.position.Y + 2f - velocity.Y * 5f), 8, 8, 64, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.5f);
						Dust dust2 = Main.dust[num216];
						dust2.velocity *= -0.25f;
						Main.dust[num216].noGravity = true;
					}
					if (localAI[0] == 0f)
					{
						scale -= 0.02f;
						alpha += 30;
						if (alpha >= 250)
						{
							alpha = 255;
							localAI[0] = 1f;
						}
					}
					else if (localAI[0] == 1f)
					{
						scale += 0.02f;
						alpha -= 30;
						if (alpha <= 0)
						{
							alpha = 0;
							localAI[0] = 0f;
						}
					}
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					if (type == 132)
					{
						SoundEngine.PlaySound(SoundID.Item60, base.position);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item8, base.position);
					}
				}
				if (type == 157)
				{
					rotation += (float)direction * 0.4f;
					spriteDirection = direction;
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 0.785f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
			}
			else if (aiStyle == 28)
			{
				if (type == 967)
				{
					localAI[0]++;
					if (localAI[0] >= 5f && timeLeft % 3 == 0)
					{
						localAI[0] = 5f;
						int num217 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 219, velocity.X, velocity.Y, 0, default(Color), 0.35f + (float)Main.rand.Next(-5, 5) * 0.01f);
						Main.dust[num217].noGravity = true;
						Main.dust[num217].velocity = velocity * 1.5f;
					}
					if (++frameCounter > 6)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
				}
				if (type == 177)
				{
					for (int num218 = 0; num218 < 3; num218++)
					{
						int num219 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 137, velocity.X, velocity.Y, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(-20, 40) * 0.01f);
						Main.dust[num219].noGravity = true;
						Dust dust2 = Main.dust[num219];
						dust2.velocity *= 0.3f;
					}
				}
				if (type == 118)
				{
					for (int num220 = 0; num220 < 2; num220++)
					{
						int num221 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 92, velocity.X, velocity.Y, 50, default(Color), 1.2f);
						Main.dust[num221].noGravity = true;
						Dust dust2 = Main.dust[num221];
						dust2.velocity *= 0.3f;
					}
				}
				if (type == 119 || type == 128 || type == 359)
				{
					for (int num222 = 0; num222 < 3; num222++)
					{
						int num223 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 92, velocity.X, velocity.Y, 50, default(Color), 1.2f);
						Main.dust[num223].noGravity = true;
						Dust dust2 = Main.dust[num223];
						dust2.velocity *= 0.3f;
					}
				}
				if (type == 309)
				{
					for (int num224 = 0; num224 < 3; num224++)
					{
						int num225 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 185, velocity.X, velocity.Y, 50, default(Color), 1.2f);
						Main.dust[num225].noGravity = true;
						Dust dust2 = Main.dust[num225];
						dust2.velocity *= 0.3f;
					}
				}
				if (type == 129)
				{
					for (int num226 = 0; num226 < 6; num226++)
					{
						int num227 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 106, velocity.X, velocity.Y, 100);
						Main.dust[num227].noGravity = true;
						Dust dust2 = Main.dust[num227];
						dust2.velocity *= 0.1f + (float)Main.rand.Next(4) * 0.1f;
						dust2 = Main.dust[num227];
						dust2.scale *= 1f + (float)Main.rand.Next(5) * 0.1f;
					}
				}
				if (this.ai[1] != 0f)
				{
					return;
				}
				this.ai[1] = 1f;
				if (type == 967)
				{
					for (int num228 = 0; num228 < 10; num228++)
					{
						int num229 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 219, velocity.X, velocity.Y, 0, default(Color), 0.4f + (float)Main.rand.Next(-20, 40) * 0.01f);
						Main.dust[num229].noGravity = true;
						Main.dust[num229].velocity = (velocity * 0.5f).RotatedByRandom(0.5);
					}
					SoundEngine.PlaySound(SoundID.Item60, base.position);
				}
				else
				{
					SoundEngine.PlaySound(SoundID.Item28, base.position);
				}
			}
			else if (aiStyle == 29)
			{
				if (type == 619)
				{
					int num230 = (int)this.ai[0];
					for (int num231 = 0; num231 < 3; num231++)
					{
						int num232 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 254, velocity.X, velocity.Y, num230, default(Color), 1.2f);
						Main.dust[num232].position = (Main.dust[num232].position + base.Center) / 2f;
						Main.dust[num232].noGravity = true;
						Dust dust2 = Main.dust[num232];
						dust2.velocity *= 0.5f;
					}
					for (int num233 = 0; num233 < 2; num233++)
					{
						int num232 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 255, velocity.X, velocity.Y, num230, default(Color), 0.4f);
						switch (num233)
						{
						case 0:
							Main.dust[num232].position = (Main.dust[num232].position + base.Center * 5f) / 6f;
							break;
						case 1:
							Main.dust[num232].position = (Main.dust[num232].position + (base.Center + velocity / 2f) * 5f) / 6f;
							break;
						}
						Dust dust2 = Main.dust[num232];
						dust2.velocity *= 0.1f;
						Main.dust[num232].noGravity = true;
						Main.dust[num232].fadeIn = 1f;
					}
				}
				else if (type == 620)
				{
					int num234 = (int)this.ai[0];
					this.ai[1] += 1f;
					float num235 = (60f - this.ai[1]) / 60f;
					if (this.ai[1] > 40f)
					{
						Kill();
					}
					velocity.Y += 0.2f;
					if (velocity.Y > 18f)
					{
						velocity.Y = 18f;
					}
					velocity.X *= 0.98f;
					for (int num236 = 0; num236 < 2; num236++)
					{
						int num237 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num234, velocity.X, velocity.Y, 50, default(Color), 1.1f);
						Main.dust[num237].position = (Main.dust[num237].position + base.Center) / 2f;
						Main.dust[num237].noGravity = true;
						Dust dust2 = Main.dust[num237];
						dust2.velocity *= 0.3f;
						dust2 = Main.dust[num237];
						dust2.scale *= num235;
					}
					for (int num238 = 0; num238 < 1; num238++)
					{
						int num237 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num234, velocity.X, velocity.Y, 50, default(Color), 0.6f);
						Main.dust[num237].position = (Main.dust[num237].position + base.Center * 5f) / 6f;
						Dust dust2 = Main.dust[num237];
						dust2.velocity *= 0.1f;
						Main.dust[num237].noGravity = true;
						Main.dust[num237].fadeIn = 0.9f * num235;
						dust2 = Main.dust[num237];
						dust2.scale *= num235;
					}
				}
				else if (type == 521)
				{
					for (int num239 = 0; num239 < 3; num239++)
					{
						int num240 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 254, velocity.X, velocity.Y, 50, default(Color), 1.2f);
						Main.dust[num240].position = (Main.dust[num240].position + base.Center) / 2f;
						Main.dust[num240].noGravity = true;
						Dust dust2 = Main.dust[num240];
						dust2.velocity *= 0.5f;
					}
					for (int num241 = 0; num241 < 2; num241++)
					{
						int num240 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 255, velocity.X, velocity.Y, 50, default(Color), 0.4f);
						switch (num241)
						{
						case 0:
							Main.dust[num240].position = (Main.dust[num240].position + base.Center * 5f) / 6f;
							break;
						case 1:
							Main.dust[num240].position = (Main.dust[num240].position + (base.Center + velocity / 2f) * 5f) / 6f;
							break;
						}
						Dust dust2 = Main.dust[num240];
						dust2.velocity *= 0.1f;
						Main.dust[num240].noGravity = true;
						Main.dust[num240].fadeIn = 1f;
					}
				}
				else if (type == 522)
				{
					this.ai[1] += 1f;
					float num242 = (60f - this.ai[1]) / 60f;
					if (this.ai[1] > 40f)
					{
						Kill();
					}
					velocity.Y += 0.2f;
					if (velocity.Y > 18f)
					{
						velocity.Y = 18f;
					}
					velocity.X *= 0.98f;
					for (int num243 = 0; num243 < 2; num243++)
					{
						int num244 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 254, velocity.X, velocity.Y, 50, default(Color), 1.1f);
						Main.dust[num244].position = (Main.dust[num244].position + base.Center) / 2f;
						Main.dust[num244].noGravity = true;
						Dust dust2 = Main.dust[num244];
						dust2.velocity *= 0.3f;
						dust2 = Main.dust[num244];
						dust2.scale *= num242;
					}
					for (int num245 = 0; num245 < 1; num245++)
					{
						int num244 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 255, velocity.X, velocity.Y, 50, default(Color), 0.6f);
						Main.dust[num244].position = (Main.dust[num244].position + base.Center * 5f) / 6f;
						Dust dust2 = Main.dust[num244];
						dust2.velocity *= 0.1f;
						Main.dust[num244].noGravity = true;
						Main.dust[num244].fadeIn = 0.9f * num242;
						dust2 = Main.dust[num244];
						dust2.scale *= num242;
					}
				}
				else if (type == 731)
				{
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					alpha -= 15;
					if (alpha < 0)
					{
						alpha = 0;
					}
					this.ai[0]++;
					if ((int)this.ai[0] % 2 != 0 && Main.rand.Next(4) == 0)
					{
						this.ai[0]++;
					}
					float num246 = 5f;
					switch ((int)this.ai[0])
					{
					case 10:
						velocity.Y -= num246;
						break;
					case 12:
						velocity.Y += num246;
						break;
					case 18:
						velocity.Y += num246;
						break;
					case 20:
						velocity.Y -= num246;
						this.ai[0] = 0f;
						break;
					}
					if (Main.rand.Next(3) == 0)
					{
						Dust dust8 = Dust.NewDustDirect(base.position, width, height, 226, velocity.X, velocity.Y, 50, default(Color), 0.4f);
						dust8.noGravity = true;
						dust8.velocity = dust8.velocity * 0f + velocity * 0.5f;
						if (Main.rand.Next(3) != 0)
						{
							Dust dust2 = dust8;
							dust2.velocity *= 1.4f;
						}
					}
					Lighting.AddLight(base.Center, 0.2f, 0.5f, 0.7f);
				}
				else
				{
					int num247 = type - 121 + 86;
					if (type == 597)
					{
						num247 = 262;
					}
					for (int num248 = 0; num248 < 2; num248++)
					{
						int num249 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num247, velocity.X, velocity.Y, 50, default(Color), 1.2f);
						Main.dust[num249].noGravity = true;
						Dust dust2 = Main.dust[num249];
						dust2.velocity *= 0.3f;
					}
					if (this.ai[1] == 0f)
					{
						this.ai[1] = 1f;
						SoundEngine.PlaySound(SoundID.Item8, base.position);
					}
				}
			}
			else if (aiStyle == 30)
			{
				if (type == 907)
				{
					float num250 = 100f;
					float num251 = num250 - 50f;
					if (Main.rand.Next(Math.Max(4, 8 - (int)velocity.Length())) == 0)
					{
						int num252 = 5;
						int num253 = Dust.NewDust(base.position + new Vector2(num252, num252), width - num252 * 2, height - num252 * 2, 43, 0f, 0f, 254, new Color(255, 255, 0));
						Main.dust[num253].velocity = velocity * 0.75f;
					}
					if (this.ai[0] > num251)
					{
						velocity *= 0.9f;
						rotation *= 0.9f;
					}
					else
					{
						rotation += 0.2f;
						if (rotation > (float)Math.PI * 2f)
						{
							rotation -= (float)Math.PI * 2f;
						}
					}
					float num254 = this.ai[0];
					this.ai[0]++;
					if (Main.myPlayer == owner && this.ai[0] < num251 && this.ai[0] % 10f == 0f)
					{
						float num255 = (float)Math.PI / 2f * (float)((this.ai[0] % 20f != 0f) ? 1 : (-1));
						num255 *= (float)((whoAmI % 2 != 0) ? 1 : (-1));
						num255 += (float)Main.rand.Next(-5, 5) * MathHelper.Lerp(0.2f, 0.03f, this.ai[0] / num251);
						Vector2 v = velocity.RotatedBy(num255);
						v = v.SafeNormalize(Vector2.Zero);
						v *= Math.Max(2.5f, (num251 - this.ai[0]) / num251 * (7f + (-2f + (float)Main.rand.Next(2) * 2f)));
						int num256 = NewProjectile(GetProjectileSource_FromThis(), base.Center, v, 335, damage, knockBack * 0.25f, owner, 0f, Main.rand.Next(4));
					}
					if (num254 <= num251 && this.ai[0] > num251)
					{
						netUpdate = true;
					}
					if (this.ai[0] > num250)
					{
						Kill();
					}
				}
				else if (type == 335)
				{
					int num257 = (frame = (int)this.ai[1]);
					if (this.ai[0] < 0f)
					{
						velocity.Y += 0.25f;
						if (velocity.Y > 14f)
						{
							velocity.Y = 14f;
						}
					}
					else
					{
						if (Main.rand.Next(Math.Max(4, 8 - (int)velocity.Length())) == 0)
						{
							Color newColor = Color.White;
							switch (num257)
							{
							case 0:
								newColor = new Color(255, 100, 100);
								break;
							case 1:
								newColor = new Color(100, 255, 100);
								break;
							case 2:
								newColor = new Color(100, 100, 255);
								break;
							case 3:
								newColor = new Color(255, 255, 100);
								break;
							}
							int num258 = 5;
							int num259 = Dust.NewDust(base.position + new Vector2(num258, num258), width - num258 * 2, height - num258 * 2, 43, 0f, 0f, 254, newColor);
							Main.dust[num259].velocity = velocity * 0.75f;
						}
						velocity *= 0.95f;
					}
					if (this.ai[0] >= 0f && velocity.Length() < 0.25f)
					{
						if (velocity != Vector2.Zero)
						{
							velocity = Vector2.Zero;
							if (Main.netMode != 1)
							{
								this.ai[0] = 50f;
								netUpdate = true;
							}
						}
						this.ai[0]--;
					}
					localAI[0]++;
					rotation = (float)Math.Sin(localAI[0] / 10f);
				}
				else
				{
					velocity *= 0.8f;
					rotation += 0.2f;
					alpha += 4;
					if (alpha >= 255)
					{
						Kill();
					}
				}
			}
			else if (aiStyle == 31)
			{
				int num260 = 110;
				int conversionType = 0;
				if (type == 146)
				{
					num260 = 111;
					conversionType = 2;
				}
				if (type == 147)
				{
					num260 = 112;
					conversionType = 1;
				}
				if (type == 148)
				{
					num260 = 113;
					conversionType = 3;
				}
				if (type == 149)
				{
					num260 = 114;
					conversionType = 4;
				}
				if (owner == Main.myPlayer)
				{
					WorldGen.Convert((int)(base.position.X + (float)(width / 2)) / 16, (int)(base.position.Y + (float)(height / 2)) / 16, conversionType, 2);
				}
				if (timeLeft > 133)
				{
					timeLeft = 133;
				}
				if (this.ai[0] > 7f)
				{
					float num261 = 1f;
					if (this.ai[0] == 8f)
					{
						num261 = 0.2f;
					}
					else if (this.ai[0] == 9f)
					{
						num261 = 0.4f;
					}
					else if (this.ai[0] == 10f)
					{
						num261 = 0.6f;
					}
					else if (this.ai[0] == 11f)
					{
						num261 = 0.8f;
					}
					this.ai[0] += 1f;
					for (int num262 = 0; num262 < 1; num262++)
					{
						int num263 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, num260, velocity.X * 0.2f, velocity.Y * 0.2f, 100);
						Main.dust[num263].noGravity = true;
						Dust dust2 = Main.dust[num263];
						dust2.scale *= 1.75f;
						Main.dust[num263].velocity.X *= 2f;
						Main.dust[num263].velocity.Y *= 2f;
						dust2 = Main.dust[num263];
						dust2.scale *= num261;
					}
				}
				else
				{
					this.ai[0] += 1f;
				}
				rotation += 0.3f * (float)direction;
			}
			else if (aiStyle == 32)
			{
				timeLeft = 10;
				this.ai[0] += 1f;
				if (this.ai[0] >= 20f)
				{
					this.ai[0] = 18f;
					Rectangle rectangle3 = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
					for (int num264 = 0; num264 < 255; num264++)
					{
						Entity entity = Main.player[num264];
						if (entity.active && rectangle3.Intersects(entity.Hitbox))
						{
							this.ai[0] = 0f;
							velocity.Y = -4.5f;
							if (velocity.X > 2f)
							{
								velocity.X = 2f;
							}
							if (velocity.X < -2f)
							{
								velocity.X = -2f;
							}
							velocity.X = (velocity.X + (float)entity.direction * 1.75f) / 2f;
							velocity.X += entity.velocity.X * 3f;
							velocity.Y += entity.velocity.Y;
							if (velocity.X > 6f)
							{
								velocity.X = 6f;
							}
							if (velocity.X < -6f)
							{
								velocity.X = -6f;
							}
							if (velocity.Length() > 16f)
							{
								velocity = velocity.SafeNormalize(Vector2.Zero) * 16f;
							}
							netUpdate = true;
							this.ai[1] += 1f;
						}
					}
					for (int num265 = 0; num265 < 1000; num265++)
					{
						if (num265 == whoAmI)
						{
							continue;
						}
						Entity entity = Main.projectile[num265];
						if (entity.active && rectangle3.Intersects(entity.Hitbox))
						{
							this.ai[0] = 0f;
							velocity.Y = -4.5f;
							if (velocity.X > 2f)
							{
								velocity.X = 2f;
							}
							if (velocity.X < -2f)
							{
								velocity.X = -2f;
							}
							velocity.X = (velocity.X + (float)entity.direction * 1.75f) / 2f;
							velocity.X += entity.velocity.X * 3f;
							velocity.Y += entity.velocity.Y;
							if (velocity.X > 6f)
							{
								velocity.X = 6f;
							}
							if (velocity.X < -6f)
							{
								velocity.X = -6f;
							}
							if (velocity.Length() > 16f)
							{
								velocity = velocity.SafeNormalize(Vector2.Zero) * 16f;
							}
							netUpdate = true;
							this.ai[1] += 1f;
						}
					}
				}
				if (velocity.X == 0f && velocity.Y == 0f)
				{
					Kill();
				}
				rotation += 0.02f * velocity.X;
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.98f;
				}
				else if (wet)
				{
					velocity.X *= 0.99f;
				}
				else
				{
					velocity.X *= 0.995f;
				}
				if ((double)velocity.X > -0.03 && (double)velocity.X < 0.03)
				{
					velocity.X = 0f;
				}
				if (wet)
				{
					this.ai[1] = 0f;
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.95f;
					}
					velocity.Y -= 0.1f;
					if (velocity.Y < -4f)
					{
						velocity.Y = -4f;
					}
					if (velocity.X == 0f)
					{
						Kill();
					}
				}
				else
				{
					velocity.Y += 0.1f;
				}
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else if (aiStyle == 33)
			{
				if (alpha > 0)
				{
					alpha -= 50;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				float num266 = 4f;
				float num267 = this.ai[0];
				float num268 = this.ai[1];
				if (num267 == 0f && num268 == 0f)
				{
					num267 = 1f;
				}
				float num269 = (float)Math.Sqrt(num267 * num267 + num268 * num268);
				num269 = num266 / num269;
				num267 *= num269;
				num268 *= num269;
				if (alpha < 70)
				{
					int num270 = 127;
					if (type == 310)
					{
						num270 = 187;
					}
					int num271 = Dust.NewDust(new Vector2(base.position.X, base.position.Y - 2f), 6, 6, num270, velocity.X, velocity.Y, 100, default(Color), 1.6f);
					Main.dust[num271].noGravity = true;
					Main.dust[num271].position.X -= num267 * 1f;
					Main.dust[num271].position.Y -= num268 * 1f;
					Main.dust[num271].velocity.X -= num267;
					Main.dust[num271].velocity.Y -= num268;
				}
				if (localAI[0] == 0f)
				{
					this.ai[0] = velocity.X;
					this.ai[1] = velocity.Y;
					localAI[1] += 1f;
					if (localAI[1] >= 30f)
					{
						velocity.Y += 0.09f;
						localAI[1] = 30f;
					}
				}
				else
				{
					if (!Collision.SolidCollision(base.position, width, height))
					{
						localAI[0] = 0f;
						localAI[1] = 30f;
					}
					damage = 0;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				rotation = (float)Math.Atan2(this.ai[1], this.ai[0]) + 1.57f;
			}
			else if (aiStyle == 34)
			{
				rotation = velocity.ToRotation() + (float)Math.PI / 2f;
				if (this.ai[1] == 1f)
				{
					this.ai[0]++;
					if (this.ai[0] == 1f)
					{
						for (int num272 = 0; num272 < 8; num272++)
						{
							int num273 = Dust.NewDust(base.position, width, height, 6, 0f, 0f, 100, default(Color), 1.8f);
							Main.dust[num273].noGravity = true;
							Dust dust2 = Main.dust[num273];
							dust2.velocity *= 3f;
							Main.dust[num273].fadeIn = 0.5f;
							dust2 = Main.dust[num273];
							dust2.position += velocity / 2f;
							dust2 = Main.dust[num273];
							dust2.velocity += velocity / 4f + Main.player[owner].velocity * 0.1f;
						}
					}
					if (this.ai[0] > 2f)
					{
						int num274 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 20f), 8, 8, 6, velocity.X, velocity.Y, 100, default(Color), 1.2f);
						Main.dust[num274].noGravity = true;
						Dust dust2 = Main.dust[num274];
						dust2.velocity *= 0.2f;
						Main.dust[num274].position = Main.dust[num274].position.RotatedBy(rotation, base.Center);
						num274 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 15f), 8, 8, 6, velocity.X, velocity.Y, 100, default(Color), 1.2f);
						Main.dust[num274].noGravity = true;
						dust2 = Main.dust[num274];
						dust2.velocity *= 0.2f;
						Main.dust[num274].position = Main.dust[num274].position.RotatedBy(rotation, base.Center);
						num274 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 10f), 8, 8, 6, velocity.X, velocity.Y, 100, default(Color), 1.2f);
						Main.dust[num274].noGravity = true;
						dust2 = Main.dust[num274];
						dust2.velocity *= 0.2f;
						Main.dust[num274].position = Main.dust[num274].position.RotatedBy(rotation, base.Center);
					}
				}
				else if (type >= 415 && type <= 418)
				{
					this.ai[0]++;
					if (this.ai[0] > 4f)
					{
						int num275 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 20f), 8, 8, 6, velocity.X, velocity.Y, 100, default(Color), 1.2f);
						Main.dust[num275].noGravity = true;
						Dust dust2 = Main.dust[num275];
						dust2.velocity *= 0.2f;
						Main.dust[num275].position = Main.dust[num275].position.RotatedBy(rotation, base.Center);
					}
				}
				else
				{
					int num276 = Dust.NewDust(new Vector2(base.position.X + 2f, base.position.Y + 20f), 8, 8, 6, velocity.X, velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num276].noGravity = true;
					Dust dust2 = Main.dust[num276];
					dust2.velocity *= 0.2f;
					Main.dust[num276].position = Main.dust[num276].position.RotatedBy(rotation, base.Center);
				}
			}
			else if (aiStyle == 35)
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 30f)
				{
					velocity.Y += 0.2f;
					velocity.X *= 0.985f;
					if (velocity.Y > 14f)
					{
						velocity.Y = 14f;
					}
				}
				rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * (float)direction * 0.02f;
				if (owner != Main.myPlayer)
				{
					return;
				}
				Vector2 vector26 = Collision.TileCollision(base.position, velocity, width, height, fallThrough: true, fall2: true);
				bool flag8 = false;
				if (vector26 != velocity)
				{
					flag8 = true;
				}
				else
				{
					int num277 = (int)(base.Center.X + velocity.X) / 16;
					int num278 = (int)(base.Center.Y + velocity.Y) / 16;
					if (Main.tile[num277, num278] != null && Main.tile[num277, num278].active() && Main.tile[num277, num278].bottomSlope())
					{
						flag8 = true;
						base.position.Y = num278 * 16 + 16 + 8;
						base.position.X = num277 * 16 + 8;
					}
				}
				if (!flag8)
				{
					return;
				}
				int num279 = 213;
				if (type == 475)
				{
					num279 = 353;
				}
				if (type == 506)
				{
					num279 = 366;
				}
				if (type == 505)
				{
					num279 = 365;
				}
				int num280 = (int)(base.position.X + (float)(width / 2)) / 16;
				int num281 = (int)(base.position.Y + (float)(height / 2)) / 16;
				base.position += vector26;
				int num282 = 10;
				if (Main.tile[num280, num281] == null)
				{
					return;
				}
				for (; Main.tile[num280, num281] != null && Main.tile[num280, num281].active() && Main.tileRope[Main.tile[num280, num281].type]; num281++)
				{
				}
				while (num282 > 0)
				{
					num282--;
					if (Main.tile[num280, num281] == null)
					{
						break;
					}
					if (Main.tile[num280, num281].active() && (Main.tileCut[Main.tile[num280, num281].type] || Main.tile[num280, num281].type == 165))
					{
						WorldGen.KillTile(num280, num281);
						NetMessage.SendData(17, -1, -1, null, 0, num280, num281);
					}
					if (!Main.tile[num280, num281].active())
					{
						WorldGen.PlaceTile(num280, num281, num279);
						NetMessage.SendData(17, -1, -1, null, 1, num280, num281, num279);
						this.ai[1] += 1f;
					}
					else
					{
						num282 = 0;
					}
					num281++;
				}
				Kill();
			}
			else if (aiStyle == 36)
			{
				if (type != 307 && wet && !honeyWet)
				{
					Kill();
				}
				if (alpha > 0)
				{
					alpha -= 50;
				}
				else
				{
					extraUpdates = 0;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (type == 307)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
					frameCounter++;
					if (frameCounter >= 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame >= 2)
					{
						frame = 0;
					}
					for (int num283 = 0; num283 < 3; num283++)
					{
						float num284 = velocity.X / 3f * (float)num283;
						float num285 = velocity.Y / 3f * (float)num283;
						int num286 = Dust.NewDust(base.position, width, height, 184);
						Main.dust[num286].position.X = base.Center.X - num284;
						Main.dust[num286].position.Y = base.Center.Y - num285;
						Dust dust2 = Main.dust[num286];
						dust2.velocity *= 0f;
						Main.dust[num286].scale = 0.5f;
					}
				}
				else
				{
					if (type == 316)
					{
						if (velocity.X > 0f)
						{
							spriteDirection = -1;
						}
						else if (velocity.X < 0f)
						{
							spriteDirection = 1;
						}
					}
					else if (velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					else if (velocity.X < 0f)
					{
						spriteDirection = -1;
					}
					rotation = velocity.X * 0.1f;
					frameCounter++;
					if (frameCounter >= 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame >= 3)
					{
						frame = 0;
					}
				}
				float num287 = base.position.X;
				float num288 = base.position.Y;
				float num289 = 100000f;
				bool flag9 = false;
				this.ai[0] += 1f;
				if (this.ai[0] > 30f)
				{
					this.ai[0] = 30f;
					for (int num290 = 0; num290 < 200; num290++)
					{
						if (Main.npc[num290].CanBeChasedBy(this) && (!Main.npc[num290].wet || Main.npc[num290].type == 370 || type == 307))
						{
							float num291 = Main.npc[num290].position.X + (float)(Main.npc[num290].width / 2);
							float num292 = Main.npc[num290].position.Y + (float)(Main.npc[num290].height / 2);
							float num293 = Math.Abs(base.position.X + (float)(width / 2) - num291) + Math.Abs(base.position.Y + (float)(height / 2) - num292);
							if (num293 < 800f && num293 < num289 && Collision.CanHit(base.position, width, height, Main.npc[num290].position, Main.npc[num290].width, Main.npc[num290].height))
							{
								num289 = num293;
								num287 = num291;
								num288 = num292;
								flag9 = true;
							}
						}
					}
				}
				if (!flag9)
				{
					num287 = base.position.X + (float)(width / 2) + velocity.X * 100f;
					num288 = base.position.Y + (float)(height / 2) + velocity.Y * 100f;
				}
				else if (type == 307)
				{
					friendly = true;
				}
				float num294 = 6f;
				float num295 = 0.1f;
				if (type == 189)
				{
					num294 = 7f;
					num295 = 0.15f;
				}
				if (type == 307)
				{
					num294 = 9f;
					num295 = 0.2f;
				}
				if (type == 316)
				{
					num294 = 10f;
					num295 = 0.25f;
				}
				if (type == 566)
				{
					num294 = 6.8f;
					num295 = 0.14f;
				}
				Vector2 vector27 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num296 = num287 - vector27.X;
				float num297 = num288 - vector27.Y;
				float num298 = (float)Math.Sqrt(num296 * num296 + num297 * num297);
				float num299 = num298;
				num298 = num294 / num298;
				num296 *= num298;
				num297 *= num298;
				if (velocity.X < num296)
				{
					velocity.X += num295;
					if (velocity.X < 0f && num296 > 0f)
					{
						velocity.X += num295 * 2f;
					}
				}
				else if (velocity.X > num296)
				{
					velocity.X -= num295;
					if (velocity.X > 0f && num296 < 0f)
					{
						velocity.X -= num295 * 2f;
					}
				}
				if (velocity.Y < num297)
				{
					velocity.Y += num295;
					if (velocity.Y < 0f && num297 > 0f)
					{
						velocity.Y += num295 * 2f;
					}
				}
				else if (velocity.Y > num297)
				{
					velocity.Y -= num295;
					if (velocity.Y > 0f && num297 < 0f)
					{
						velocity.Y -= num295 * 2f;
					}
				}
			}
			else if (aiStyle == 37)
			{
				if (this.ai[1] == 0f)
				{
					this.ai[1] = 1f;
					localAI[0] = base.Center.X - velocity.X * 1.5f;
					localAI[1] = base.Center.Y - velocity.Y * 1.5f;
				}
				Vector2 vector28 = new Vector2(localAI[0], localAI[1]);
				rotation = (base.Center - vector28).ToRotation() - (float)Math.PI / 2f;
				if (this.ai[0] == 0f)
				{
					if (Collision.SolidCollision(base.position, width, height))
					{
						velocity *= -1f;
						this.ai[0] += 1f;
						return;
					}
					float num300 = Vector2.Distance(base.Center, vector28);
					if (num300 > 300f)
					{
						velocity *= -1f;
						this.ai[0] += 1f;
					}
				}
				else if (Collision.SolidCollision(base.position, width, height) || Vector2.Distance(base.Center, vector28) < velocity.Length())
				{
					Kill();
				}
			}
			else if (aiStyle == 38)
			{
				this.ai[0] += 1f;
				if (this.ai[0] >= 6f)
				{
					this.ai[0] = 0f;
					SoundEngine.PlaySound(SoundID.Item34, base.position);
					if (Main.myPlayer == owner)
					{
						NewProjectile(GetProjectileSource_FromThis(), base.position.X, base.position.Y, velocity.X, velocity.Y, 188, damage, knockBack, owner);
					}
				}
			}
			else if (aiStyle == 39)
			{
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (!active || !Main.player[owner].active || Main.player[owner].dead || Vector2.Distance(Main.player[owner].Center, base.Center) > 2000f)
				{
					Kill();
					return;
				}
				if (active && alpha == 0)
				{
					Main.player[owner].SetDummyItemTime(5);
					if (base.Center.X > Main.player[owner].Center.X)
					{
						Main.player[owner].ChangeDir(1);
					}
					else
					{
						Main.player[owner].ChangeDir(-1);
					}
				}
				Vector2 center = base.Center;
				float num301 = Main.player[owner].Center.X - center.X;
				float num302 = Main.player[owner].Center.Y - center.Y;
				float num303 = (float)Math.Sqrt(num301 * num301 + num302 * num302);
				if (!Main.player[owner].channel && active && alpha == 0)
				{
					this.ai[0] = 1f;
					this.ai[1] = -1f;
				}
				if (this.ai[1] > 0f && num303 > 1500f)
				{
					this.ai[1] = 0f;
					this.ai[0] = 1f;
				}
				if (this.ai[1] > 0f)
				{
					tileCollide = false;
					int num304 = (int)this.ai[1] - 1;
					if (Main.npc[num304].active && Main.npc[num304].life > 0)
					{
						float num305 = 16f;
						center = base.Center;
						num301 = Main.npc[num304].Center.X - center.X;
						num302 = Main.npc[num304].Center.Y - center.Y;
						num303 = (float)Math.Sqrt(num301 * num301 + num302 * num302);
						if (num303 < num305)
						{
							velocity.X = num301;
							velocity.Y = num302;
							if (num303 > num305 / 3f)
							{
								if (velocity.X < 0f)
								{
									spriteDirection = -1;
									rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
								}
								else
								{
									spriteDirection = 1;
									rotation = (float)Math.Atan2(velocity.Y, velocity.X);
								}
								if (type == 190)
								{
									velocity.X = 0f;
									velocity.Y = 0f;
								}
							}
						}
						else
						{
							if (num303 == 0f)
							{
								num303 = 0.0001f;
							}
							num303 = num305 / num303;
							num301 *= num303;
							num302 *= num303;
							velocity.X = num301;
							velocity.Y = num302;
							if (velocity.X < 0f)
							{
								spriteDirection = -1;
								rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
							}
							else
							{
								spriteDirection = 1;
								rotation = (float)Math.Atan2(velocity.Y, velocity.X);
							}
						}
						if (type == 190)
						{
							for (int num306 = 0; num306 < 1000; num306++)
							{
								if (num306 != whoAmI && Main.projectile[num306].active && Main.projectile[num306].owner == owner && Main.projectile[num306].type == 190 && Vector2.Distance(base.Center, Main.projectile[num306].Center) < 8f)
								{
									if (base.position.X < Main.projectile[num306].position.X)
									{
										velocity.X -= 4f;
									}
									else
									{
										velocity.X += 4f;
									}
									if (base.position.Y < Main.projectile[num306].position.Y)
									{
										velocity.Y -= 4f;
									}
									else
									{
										velocity.Y += 4f;
									}
								}
							}
						}
						this.ai[0] = 1f;
					}
					else
					{
						this.ai[1] = 0f;
						float num307 = base.position.X;
						float num308 = base.position.Y;
						float num309 = 3000f;
						int num310 = -1;
						for (int num311 = 0; num311 < 200; num311++)
						{
							if (Main.npc[num311].CanBeChasedBy(this))
							{
								float x = Main.npc[num311].Center.X;
								float y = Main.npc[num311].Center.Y;
								float num312 = Math.Abs(base.Center.X - x) + Math.Abs(base.Center.Y - y);
								if (num312 < num309 && Collision.CanHit(base.position, width, height, Main.npc[num311].position, Main.npc[num311].width, Main.npc[num311].height))
								{
									num309 = num312;
									num307 = x;
									num308 = y;
									num310 = num311;
								}
							}
						}
						if (num310 >= 0)
						{
							float num313 = 16f;
							center = base.Center;
							num301 = num307 - center.X;
							num302 = num308 - center.Y;
							num303 = (float)Math.Sqrt(num301 * num301 + num302 * num302);
							if (num303 == 0f)
							{
								num303 = 0.0001f;
							}
							num303 = num313 / num303;
							num301 *= num303;
							num302 *= num303;
							velocity.X = num301;
							velocity.Y = num302;
							this.ai[0] = 0f;
							this.ai[1] = num310 + 1;
						}
					}
				}
				else if (this.ai[0] == 0f)
				{
					if (num303 > 700f)
					{
						this.ai[0] = 1f;
					}
					if (velocity.X < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
					}
					else
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					}
				}
				else if (this.ai[0] == 1f)
				{
					tileCollide = false;
					if (velocity.X < 0f)
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
					}
					else
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					}
					if (velocity.X < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
					}
					else
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					}
					float num314 = 20f;
					if (num303 < 70f)
					{
						Kill();
					}
					num303 = num314 / num303;
					num301 *= num303;
					num302 *= num303;
					velocity.X = num301;
					velocity.Y = num302;
					if (type == 190)
					{
						base.position += Main.player[owner].velocity;
					}
				}
				frameCounter++;
				if (frameCounter >= 4)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 4)
				{
					frame = 0;
				}
			}
			else if (aiStyle == 40)
			{
				localAI[0] += 1f;
				if (localAI[0] > 3f)
				{
					localAI[0] = 100f;
					alpha -= 50;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 5)
				{
					frame = 0;
				}
				velocity.X += this.ai[0];
				velocity.Y += this.ai[1];
				localAI[1] += 1f;
				if (localAI[1] == 50f)
				{
					localAI[1] = 51f;
					this.ai[0] = (float)Main.rand.Next(-100, 101) * 6E-05f;
					this.ai[1] = (float)Main.rand.Next(-100, 101) * 6E-05f;
				}
				if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 16f)
				{
					velocity.X *= 0.95f;
					velocity.Y *= 0.95f;
				}
				if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 12f)
				{
					velocity.X *= 1.05f;
					velocity.Y *= 1.05f;
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
			}
			else if (aiStyle == 41)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					frame = Main.rand.Next(3);
				}
				rotation += velocity.X * 0.01f;
			}
			else if (aiStyle == 42)
			{
				if (!Main.player[owner].crystalLeaf)
				{
					Kill();
					return;
				}
				base.position.X = Main.player[owner].Center.X - (float)(width / 2);
				base.position.Y = Main.player[owner].Center.Y - (float)(height / 2) + Main.player[owner].gfxOffY - 60f;
				if (Main.player[owner].gravDir == -1f)
				{
					base.position.Y += 120f;
					rotation = 3.14f;
				}
				else
				{
					rotation = 0f;
				}
				base.position.X = (int)base.position.X;
				base.position.Y = (int)base.position.Y;
				float num315 = (float)(int)Main.mouseTextColor / 200f - 0.35f;
				num315 *= 0.2f;
				scale = num315 + 0.95f;
				if (owner != Main.myPlayer)
				{
					return;
				}
				if (this.ai[0] == 0f)
				{
					float num316 = base.position.X;
					float num317 = base.position.Y;
					float num318 = 700f;
					bool flag10 = false;
					for (int num319 = 0; num319 < 200; num319++)
					{
						if (Main.npc[num319].CanBeChasedBy(this))
						{
							float num320 = Main.npc[num319].position.X + (float)(Main.npc[num319].width / 2);
							float num321 = Main.npc[num319].position.Y + (float)(Main.npc[num319].height / 2);
							float num322 = Math.Abs(base.position.X + (float)(width / 2) - num320) + Math.Abs(base.position.Y + (float)(height / 2) - num321);
							if (num322 < num318 && Collision.CanHit(base.position, width, height, Main.npc[num319].position, Main.npc[num319].width, Main.npc[num319].height))
							{
								num318 = num322;
								num316 = num320;
								num317 = num321;
								flag10 = true;
							}
						}
					}
					if (flag10)
					{
						float num323 = 12f;
						Vector2 vector29 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num324 = num316 - vector29.X;
						float num325 = num317 - vector29.Y;
						float num326 = (float)Math.Sqrt(num324 * num324 + num325 * num325);
						float num327 = num326;
						num326 = num323 / num326;
						num324 *= num326;
						num325 *= num326;
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X - 4f, base.Center.Y, num324, num325, 227, Player.crystalLeafDamage, Player.crystalLeafKB, owner);
						this.ai[0] = 40f;
					}
				}
				else
				{
					this.ai[0] -= 1f;
				}
			}
			else if (aiStyle == 43)
			{
				Dust dust2;
				if (localAI[1] == 0f)
				{
					SoundEngine.PlaySound(6, (int)base.position.X, (int)base.position.Y);
					localAI[1] += 1f;
					for (int num328 = 0; num328 < 5; num328++)
					{
						int num329 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 157);
						Main.dust[num329].noGravity = true;
						dust2 = Main.dust[num329];
						dust2.velocity *= 3f;
						Main.dust[num329].scale = 1.5f;
					}
				}
				this.ai[0] = (float)Main.rand.Next(-100, 101) * 0.0025f;
				this.ai[1] = (float)Main.rand.Next(-100, 101) * 0.0025f;
				if (localAI[0] == 0f)
				{
					scale += 0.05f;
					if ((double)scale > 1.2)
					{
						localAI[0] = 1f;
					}
				}
				else
				{
					scale -= 0.05f;
					if ((double)scale < 0.8)
					{
						localAI[0] = 0f;
					}
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
				int num330 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 157);
				Main.dust[num330].noGravity = true;
				dust2 = Main.dust[num330];
				dust2.velocity *= 0.1f;
				Main.dust[num330].scale = 1.5f;
			}
			else if (aiStyle == 44)
			{
				int num331 = 6;
				if (type == 228)
				{
					velocity *= 0.96f;
					alpha += 4;
					if (alpha > 255)
					{
						Kill();
					}
				}
				else if (type == 732)
				{
					num331 = 3;
					alpha += 20;
					if (alpha > 255)
					{
						Kill();
					}
					if (Main.rand.Next(5) == 0)
					{
						Dust dust9 = Dust.NewDustDirect(base.position, width, height, 226, 0f, 0f, 150, default(Color), 0.8f);
						dust9.noGravity = true;
						Dust dust2 = dust9;
						dust2.velocity *= 1.2f;
					}
					rotation = velocity.ToRotation();
					Lighting.AddLight(base.Center, 0.3f, 0.6f, 0.8f);
				}
				else if (type == 229)
				{
					if (this.ai[0] == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item8, base.position);
					}
					this.ai[0] += 1f;
					if (this.ai[0] > 20f)
					{
						velocity.Y += 0.3f;
						velocity.X *= 0.98f;
					}
				}
				if (++frameCounter >= num331)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
			}
			else if (aiStyle == 45)
			{
				if (type == 237 || type == 243)
				{
					float num332 = this.ai[0];
					float num333 = this.ai[1];
					if (num332 != 0f && num333 != 0f)
					{
						bool flag11 = false;
						bool flag12 = false;
						if ((velocity.X < 0f && base.Center.X < num332) || (velocity.X > 0f && base.Center.X > num332))
						{
							flag11 = true;
						}
						if ((velocity.Y < 0f && base.Center.Y < num333) || (velocity.Y > 0f && base.Center.Y > num333))
						{
							flag12 = true;
						}
						if (flag11 && flag12)
						{
							Kill();
						}
					}
					rotation += velocity.X * 0.02f;
					frameCounter++;
					if (frameCounter > 4)
					{
						frameCounter = 0;
						frame++;
						if (frame > 3)
						{
							frame = 0;
						}
					}
				}
				else if (type == 238 || type == 244)
				{
					bool flag13 = true;
					int num334 = (int)base.Center.X;
					int num335 = (int)(base.position.Y + (float)height);
					if (Collision.SolidTiles(new Vector2(num334, num335), 2, 20))
					{
						flag13 = false;
					}
					frameCounter++;
					if (frameCounter > 8)
					{
						frameCounter = 0;
						frame++;
						if ((!flag13 && frame > 2) || frame > 5)
						{
							frame = 0;
						}
					}
					this.ai[1] += 1f;
					if (type == 244 && this.ai[1] >= 3600f)
					{
						alpha += 5;
						if (alpha > 255)
						{
							alpha = 255;
							Kill();
						}
					}
					else if (type == 238 && this.ai[1] >= 7200f)
					{
						alpha += 5;
						if (alpha > 255)
						{
							alpha = 255;
							Kill();
						}
					}
					else if (flag13)
					{
						this.ai[0] += 1f;
						if (type == 244)
						{
							if (this.ai[0] > 10f)
							{
								this.ai[0] = 0f;
								if (owner == Main.myPlayer)
								{
									num334 += Main.rand.Next(-14, 15);
									NewProjectile(GetProjectileSource_FromThis(), num334, num335, 0f, 5f, 245, damage, 0f, owner);
								}
							}
						}
						else if (this.ai[0] > 8f)
						{
							this.ai[0] = 0f;
							if (owner == Main.myPlayer)
							{
								num334 += Main.rand.Next(-14, 15);
								NewProjectile(GetProjectileSource_FromThis(), num334, num335, 0f, 5f, 239, damage, 0f, owner);
							}
						}
					}
					localAI[0] += 1f;
					if (!(localAI[0] >= 10f))
					{
						return;
					}
					localAI[0] = 0f;
					int num336 = 0;
					int num337 = 0;
					float num338 = 0f;
					int num339 = type;
					for (int num340 = 0; num340 < 1000; num340++)
					{
						if (Main.projectile[num340].active && Main.projectile[num340].owner == owner && Main.projectile[num340].type == num339 && Main.projectile[num340].ai[1] < 3600f)
						{
							num336++;
							if (Main.projectile[num340].ai[1] > num338)
							{
								num337 = num340;
								num338 = Main.projectile[num340].ai[1];
							}
						}
					}
					if (type == 244)
					{
						if (num336 > 1)
						{
							Main.projectile[num337].netUpdate = true;
							Main.projectile[num337].ai[1] = 36000f;
						}
					}
					else if (num336 > 2)
					{
						Main.projectile[num337].netUpdate = true;
						Main.projectile[num337].ai[1] = 36000f;
					}
				}
				else if (type == 239)
				{
					alpha = 50;
				}
				else if (type == 245)
				{
					alpha = 100;
				}
				else if (type == 264)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (aiStyle == 46)
			{
				int num341 = 1200;
				if (type == 250)
				{
					if (owner == Main.myPlayer)
					{
						localAI[0] += 1f;
						if (localAI[0] > 4f)
						{
							localAI[0] = 3f;
							NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, velocity.X * 0.001f, velocity.Y * 0.001f, 251, damage, knockBack, owner);
						}
						if (timeLeft > num341)
						{
							timeLeft = num341;
						}
					}
					float num342 = 1f;
					if (velocity.Y < 0f)
					{
						num342 -= velocity.Y / 3f;
					}
					this.ai[0] += num342;
					if (this.ai[0] > 30f)
					{
						velocity.Y += 0.5f;
						if (velocity.Y > 0f)
						{
							velocity.X *= 0.95f;
						}
						else
						{
							velocity.X *= 1.05f;
						}
					}
					float x2 = velocity.X;
					float y2 = velocity.Y;
					float num343 = (float)Math.Sqrt(x2 * x2 + y2 * y2);
					num343 = 15.95f * scale / num343;
					x2 *= num343;
					y2 *= num343;
					velocity.X = x2;
					velocity.Y = y2;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
					return;
				}
				if (localAI[0] == 0f)
				{
					if (velocity.X > 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
					}
					else
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
					}
					localAI[0] = 1f;
					timeLeft = num341;
				}
				velocity.X *= 0.98f;
				velocity.Y *= 0.98f;
				if (rotation == 0f)
				{
					alpha = 255;
				}
				else if (timeLeft < 10)
				{
					alpha = 255 - (int)(255f * (float)timeLeft / 10f);
				}
				else if (timeLeft > num341 - 10)
				{
					int num344 = num341 - timeLeft;
					alpha = 255 - (int)(255f * (float)num344 / 10f);
				}
				else
				{
					alpha = 0;
				}
			}
			else if (aiStyle == 47)
			{
				if (this.ai[0] == 0f)
				{
					this.ai[0] = velocity.X;
					this.ai[1] = velocity.Y;
				}
				if (velocity.X > 0f)
				{
					rotation += (Math.Abs(velocity.Y) + Math.Abs(velocity.X)) * 0.001f;
				}
				else
				{
					rotation -= (Math.Abs(velocity.Y) + Math.Abs(velocity.X)) * 0.001f;
				}
				frameCounter++;
				if (frameCounter > 6)
				{
					frameCounter = 0;
					frame++;
					if (frame > 4)
					{
						frame = 0;
					}
				}
				if (Math.Sqrt(velocity.X * velocity.X + velocity.Y * velocity.Y) > 2.0)
				{
					velocity *= 0.98f;
				}
				for (int num345 = 0; num345 < 1000; num345++)
				{
					if (num345 != whoAmI && Main.projectile[num345].active && Main.projectile[num345].owner == owner && Main.projectile[num345].type == type && timeLeft > Main.projectile[num345].timeLeft && Main.projectile[num345].timeLeft > 30)
					{
						Main.projectile[num345].timeLeft = 30;
					}
				}
				int[] array = new int[20];
				int num346 = 0;
				float num347 = 300f;
				bool flag14 = false;
				float num348 = 0f;
				float num349 = 0f;
				for (int num350 = 0; num350 < 200; num350++)
				{
					if (!Main.npc[num350].CanBeChasedBy(this))
					{
						continue;
					}
					float num351 = Main.npc[num350].position.X + (float)(Main.npc[num350].width / 2);
					float num352 = Main.npc[num350].position.Y + (float)(Main.npc[num350].height / 2);
					float num353 = Math.Abs(base.position.X + (float)(width / 2) - num351) + Math.Abs(base.position.Y + (float)(height / 2) - num352);
					if (num353 < num347 && Collision.CanHit(base.Center, 1, 1, Main.npc[num350].Center, 1, 1))
					{
						if (num346 < 20)
						{
							array[num346] = num350;
							num346++;
							num348 = num351;
							num349 = num352;
						}
						flag14 = true;
					}
				}
				if (timeLeft < 30)
				{
					flag14 = false;
				}
				if (flag14)
				{
					int num354 = Main.rand.Next(num346);
					num354 = array[num354];
					num348 = Main.npc[num354].position.X + (float)(Main.npc[num354].width / 2);
					num349 = Main.npc[num354].position.Y + (float)(Main.npc[num354].height / 2);
					localAI[0] += 1f;
					if (localAI[0] > 8f)
					{
						localAI[0] = 0f;
						float num355 = 6f;
						Vector2 vector30 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						vector30 += velocity * 4f;
						float num356 = num348 - vector30.X;
						float num357 = num349 - vector30.Y;
						float num358 = (float)Math.Sqrt(num356 * num356 + num357 * num357);
						float num359 = num358;
						num358 = num355 / num358;
						num356 *= num358;
						num357 *= num358;
						NewProjectile(GetProjectileSource_FromThis(), vector30.X, vector30.Y, num356, num357, 255, damage, knockBack, owner);
					}
				}
			}
			else if (aiStyle == 48)
			{
				if (type == 255)
				{
					for (int num360 = 0; num360 < 4; num360++)
					{
						Vector2 vector31 = base.position;
						vector31 -= velocity * ((float)num360 * 0.25f);
						alpha = 255;
						int num361 = Dust.NewDust(vector31, 1, 1, 160);
						Main.dust[num361].position = vector31;
						Main.dust[num361].position.X += width / 2;
						Main.dust[num361].position.Y += height / 2;
						Main.dust[num361].scale = (float)Main.rand.Next(70, 110) * 0.013f;
						Dust dust2 = Main.dust[num361];
						dust2.velocity *= 0.2f;
					}
					return;
				}
				if (type == 433)
				{
					for (int num362 = 0; num362 < 2; num362++)
					{
						Vector2 vector32 = base.position;
						vector32 -= velocity * ((float)num362 * 0.25f);
						alpha = 255;
						int num363 = Dust.NewDust(vector32, 1, 1, 160);
						Main.dust[num363].position = vector32;
						Main.dust[num363].position.X += width / 2;
						Main.dust[num363].position.Y += height / 2;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num363].color = Color.LimeGreen;
						}
						else
						{
							Main.dust[num363].color = Color.CornflowerBlue;
						}
						Main.dust[num363].scale = (float)Main.rand.Next(70, 110) * 0.013f;
						Dust dust2 = Main.dust[num363];
						dust2.velocity *= 0.2f;
					}
					return;
				}
				if (type == 290)
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item8, base.position);
					}
					localAI[0] += 1f;
					if (localAI[0] > 3f)
					{
						for (int num364 = 0; num364 < 3; num364++)
						{
							Vector2 vector33 = base.position;
							vector33 -= velocity * ((float)num364 * 0.3334f);
							alpha = 255;
							int num365 = Dust.NewDust(vector33, 1, 1, 173);
							Main.dust[num365].position = vector33;
							Main.dust[num365].scale = (float)Main.rand.Next(70, 110) * 0.013f;
							Dust dust2 = Main.dust[num365];
							dust2.velocity *= 0.2f;
						}
					}
					return;
				}
				if (type == 294)
				{
					localAI[0] += 1f;
					if (localAI[0] > 9f)
					{
						for (int num366 = 0; num366 < 4; num366++)
						{
							Vector2 vector34 = base.position;
							vector34 -= velocity * ((float)num366 * 0.25f);
							alpha = 255;
							int num367 = Dust.NewDust(vector34, 1, 1, 173);
							Main.dust[num367].position = vector34;
							Main.dust[num367].scale = (float)Main.rand.Next(70, 110) * 0.013f;
							Dust dust2 = Main.dust[num367];
							dust2.velocity *= 0.2f;
						}
					}
					return;
				}
				localAI[0] += 1f;
				if (localAI[0] > 3f)
				{
					for (int num368 = 0; num368 < 4; num368++)
					{
						Vector2 vector35 = base.position;
						vector35 -= velocity * ((float)num368 * 0.25f);
						alpha = 255;
						int num369 = Dust.NewDust(vector35, 1, 1, 162);
						Main.dust[num369].position = vector35;
						Main.dust[num369].position.X += width / 2;
						Main.dust[num369].position.Y += height / 2;
						Main.dust[num369].scale = (float)Main.rand.Next(70, 110) * 0.013f;
						Dust dust2 = Main.dust[num369];
						dust2.velocity *= 0.2f;
					}
				}
			}
			else if (aiStyle == 49)
			{
				if (this.ai[0] == -2f)
				{
					hostile = true;
					Kill();
					return;
				}
				if (this.ai[0] == -3f)
				{
					Kill();
					return;
				}
				if (soundDelay == 0)
				{
					soundDelay = 3000;
					SoundEngine.PlaySound(SoundID.Item14, base.position);
				}
				if (this.ai[0] >= 0f)
				{
					if (velocity.X > 0f)
					{
						direction = 1;
					}
					else if (velocity.X < 0f)
					{
						direction = -1;
					}
					spriteDirection = direction;
					this.ai[0] += 1f;
					rotation += velocity.X * 0.05f + (float)direction * 0.05f;
					if (this.ai[0] >= 18f)
					{
						velocity.Y += 0.28f;
						velocity.X *= 0.99f;
					}
					if ((double)velocity.Y > 15.9)
					{
						velocity.Y = 15.9f;
					}
					if (!(this.ai[0] > 2f))
					{
						return;
					}
					alpha = 0;
					if (this.ai[0] == 3f)
					{
						for (int num370 = 0; num370 < 10; num370++)
						{
							int num371 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust2 = Main.dust[num371];
							dust2.velocity *= 0.5f;
							dust2 = Main.dust[num371];
							dust2.velocity += velocity * 0.1f;
						}
						for (int num372 = 0; num372 < 5; num372++)
						{
							int num373 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num373].noGravity = true;
							Dust dust2 = Main.dust[num373];
							dust2.velocity *= 3f;
							dust2 = Main.dust[num373];
							dust2.velocity += velocity * 0.2f;
							num373 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100);
							dust2 = Main.dust[num373];
							dust2.velocity *= 2f;
							dust2 = Main.dust[num373];
							dust2.velocity += velocity * 0.3f;
						}
						for (int num374 = 0; num374 < 1; num374++)
						{
							int num375 = Gore.NewGore(new Vector2(base.position.X - 10f, base.position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
							Gore gore = Main.gore[num375];
							gore.position += velocity * 1.25f;
							Main.gore[num375].scale = 1.5f;
							gore = Main.gore[num375];
							gore.velocity += velocity * 0.5f;
							gore = Main.gore[num375];
							gore.velocity *= 0.02f;
						}
					}
				}
				else if (this.ai[0] == -1f)
				{
					rotation = 0f;
					velocity.X *= 0.95f;
					velocity.Y += 0.2f;
				}
			}
			else if (aiStyle == 50)
			{
				if (type == 291)
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item20, base.position);
						localAI[0] += 1f;
					}
					bool flag15 = false;
					bool flag16 = false;
					if (velocity.X < 0f && base.position.X < this.ai[0])
					{
						flag15 = true;
					}
					if (velocity.X > 0f && base.position.X > this.ai[0])
					{
						flag15 = true;
					}
					if (velocity.Y < 0f && base.position.Y < this.ai[1])
					{
						flag16 = true;
					}
					if (velocity.Y > 0f && base.position.Y > this.ai[1])
					{
						flag16 = true;
					}
					if (flag15 && flag16)
					{
						Kill();
					}
					for (int num376 = 0; num376 < 10; num376++)
					{
						int num377 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num377].noGravity = true;
						Dust dust2 = Main.dust[num377];
						dust2.velocity *= 0.5f;
						dust2 = Main.dust[num377];
						dust2.velocity += velocity * 0.1f;
					}
					return;
				}
				if (type == 295)
				{
					for (int num378 = 0; num378 < 8; num378++)
					{
						int num379 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.2f);
						Main.dust[num379].noGravity = true;
						Dust dust2 = Main.dust[num379];
						dust2.velocity *= 0.5f;
						dust2 = Main.dust[num379];
						dust2.velocity += velocity * 0.1f;
					}
					return;
				}
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item74, base.position);
					localAI[0] += 1f;
				}
				this.ai[0] += 1f;
				if (type == 296)
				{
					this.ai[0] += 3f;
				}
				float num380 = 25f;
				if (this.ai[0] > 180f)
				{
					num380 -= (this.ai[0] - 180f) / 2f;
				}
				if (num380 <= 0f)
				{
					num380 = 0f;
					Kill();
				}
				if (type == 296)
				{
					num380 *= 0.7f;
				}
				for (int num381 = 0; (float)num381 < num380; num381++)
				{
					float num382 = Main.rand.Next(-10, 11);
					float num383 = Main.rand.Next(-10, 11);
					float num384 = Main.rand.Next(3, 9);
					float num385 = (float)Math.Sqrt(num382 * num382 + num383 * num383);
					num385 = num384 / num385;
					num382 *= num385;
					num383 *= num385;
					int num386 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 174, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num386].noGravity = true;
					Main.dust[num386].position.X = base.Center.X;
					Main.dust[num386].position.Y = base.Center.Y;
					Main.dust[num386].position.X += Main.rand.Next(-10, 11);
					Main.dust[num386].position.Y += Main.rand.Next(-10, 11);
					Main.dust[num386].velocity.X = num382;
					Main.dust[num386].velocity.Y = num383;
				}
			}
			else if (aiStyle == 51)
			{
				if (type == 297)
				{
					localAI[0] += 1f;
					if (localAI[0] > 4f)
					{
						for (int num387 = 0; num387 < 5; num387++)
						{
							int num388 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 2f);
							Main.dust[num388].noGravity = true;
							Dust dust2 = Main.dust[num388];
							dust2.velocity *= 0f;
						}
					}
				}
				else
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item8, base.position);
						localAI[0] += 1f;
					}
					for (int num389 = 0; num389 < 9; num389++)
					{
						int num390 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.3f);
						Main.dust[num390].noGravity = true;
						Dust dust2 = Main.dust[num390];
						dust2.velocity *= 0f;
					}
				}
				float num391 = base.Center.X;
				float num392 = base.Center.Y;
				float num393 = 400f;
				bool flag17 = false;
				int num394 = 0;
				if (type == 297)
				{
					for (int num395 = 0; num395 < 200; num395++)
					{
						if (Main.npc[num395].CanBeChasedBy(this) && Distance(Main.npc[num395].Center) < num393 && Collision.CanHit(base.Center, 1, 1, Main.npc[num395].Center, 1, 1))
						{
							float num396 = Main.npc[num395].position.X + (float)(Main.npc[num395].width / 2);
							float num397 = Main.npc[num395].position.Y + (float)(Main.npc[num395].height / 2);
							float num398 = Math.Abs(base.position.X + (float)(width / 2) - num396) + Math.Abs(base.position.Y + (float)(height / 2) - num397);
							if (num398 < num393)
							{
								num393 = num398;
								num391 = num396;
								num392 = num397;
								flag17 = true;
								num394 = num395;
							}
						}
					}
				}
				else
				{
					num393 = 200f;
					for (int num399 = 0; num399 < 255; num399++)
					{
						if (Main.player[num399].active && !Main.player[num399].dead)
						{
							float num400 = Main.player[num399].position.X + (float)(Main.player[num399].width / 2);
							float num401 = Main.player[num399].position.Y + (float)(Main.player[num399].height / 2);
							float num402 = Math.Abs(base.position.X + (float)(width / 2) - num400) + Math.Abs(base.position.Y + (float)(height / 2) - num401);
							if (num402 < num393)
							{
								num393 = num402;
								num391 = num400;
								num392 = num401;
								flag17 = true;
								num394 = num399;
							}
						}
					}
				}
				if (flag17)
				{
					float num403 = 3f;
					if (type == 297)
					{
						num403 = 6f;
					}
					Vector2 vector36 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num404 = num391 - vector36.X;
					float num405 = num392 - vector36.Y;
					float num406 = (float)Math.Sqrt(num404 * num404 + num405 * num405);
					float num407 = num406;
					num406 = num403 / num406;
					num404 *= num406;
					num405 *= num406;
					if (type == 297)
					{
						velocity.X = (velocity.X * 20f + num404) / 21f;
						velocity.Y = (velocity.Y * 20f + num405) / 21f;
					}
					else
					{
						velocity.X = (velocity.X * 100f + num404) / 101f;
						velocity.Y = (velocity.Y * 100f + num405) / 101f;
					}
				}
			}
			else if (aiStyle == 52)
			{
				int num408 = (int)this.ai[0];
				float num409 = 4f;
				Vector2 vector37 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
				float num410 = Main.player[num408].Center.X - vector37.X;
				float num411 = Main.player[num408].Center.Y - vector37.Y;
				float num412 = (float)Math.Sqrt(num410 * num410 + num411 * num411);
				float num413 = num412;
				if (num412 < 50f && base.position.X < Main.player[num408].position.X + (float)Main.player[num408].width && base.position.X + (float)width > Main.player[num408].position.X && base.position.Y < Main.player[num408].position.Y + (float)Main.player[num408].height && base.position.Y + (float)height > Main.player[num408].position.Y)
				{
					if (owner == Main.myPlayer && !Main.player[Main.myPlayer].moonLeech)
					{
						int num414 = (int)this.ai[1];
						Main.player[num408].HealEffect(num414, broadcast: false);
						Player player3 = Main.player[num408];
						player3.statLife += num414;
						if (Main.player[num408].statLife > Main.player[num408].statLifeMax2)
						{
							Main.player[num408].statLife = Main.player[num408].statLifeMax2;
						}
						NetMessage.SendData(66, -1, -1, null, num408, num414);
					}
					Kill();
				}
				num412 = num409 / num412;
				num410 *= num412;
				num411 *= num412;
				velocity.X = (velocity.X * 15f + num410) / 16f;
				velocity.Y = (velocity.Y * 15f + num411) / 16f;
				if (type == 305)
				{
					for (int num415 = 0; num415 < 3; num415++)
					{
						float num416 = velocity.X * 0.334f * (float)num415;
						float num417 = (0f - velocity.Y * 0.334f) * (float)num415;
						int num418 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 183, 0f, 0f, 100, default(Color), 1.1f);
						Main.dust[num418].noGravity = true;
						Dust dust2 = Main.dust[num418];
						dust2.velocity *= 0f;
						Main.dust[num418].position.X -= num416;
						Main.dust[num418].position.Y -= num417;
					}
				}
				else
				{
					for (int num419 = 0; num419 < 5; num419++)
					{
						float num420 = velocity.X * 0.2f * (float)num419;
						float num421 = (0f - velocity.Y * 0.2f) * (float)num419;
						int num422 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.3f);
						Main.dust[num422].noGravity = true;
						Dust dust2 = Main.dust[num422];
						dust2.velocity *= 0f;
						Main.dust[num422].position.X -= num420;
						Main.dust[num422].position.Y -= num421;
					}
				}
			}
			else if (aiStyle == 53)
			{
				if (localAI[0] == 0f)
				{
					localAI[1] = 1f;
					localAI[0] = 1f;
					this.ai[0] = 120f;
					int num423 = 80;
					SoundEngine.PlaySound(SoundID.Item46, base.position);
					if (type == 308)
					{
						for (int num424 = 0; num424 < num423; num424++)
						{
							int num425 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + 16f), width, height - 16, 185);
							Dust dust2 = Main.dust[num425];
							dust2.velocity *= 2f;
							Main.dust[num425].noGravity = true;
							dust2 = Main.dust[num425];
							dust2.scale *= 1.15f;
						}
					}
					if (type == 377)
					{
						frame = 4;
						num423 = 40;
						for (int num426 = 0; num426 < num423; num426++)
						{
							int num427 = Dust.NewDust(base.position + Vector2.UnitY * 16f, width, height - 16, 171, 0f, 0f, 100);
							Main.dust[num427].scale = (float)Main.rand.Next(1, 10) * 0.1f;
							Main.dust[num427].noGravity = true;
							Main.dust[num427].fadeIn = 1.5f;
							Dust dust2 = Main.dust[num427];
							dust2.velocity *= 0.75f;
						}
					}
					if (type == 966)
					{
						this.ai[1] = -1f;
						frame = 0;
						num423 = 30;
						int num428 = 25;
						int num429 = 30;
						for (int num430 = 0; num430 < num423; num430++)
						{
							int num431 = Dust.NewDust(base.Center - new Vector2(num428, num429), num428 * 2, num429 * 2, 219);
							Dust dust2 = Main.dust[num431];
							dust2.velocity *= 2f;
							Main.dust[num431].noGravity = true;
							dust2 = Main.dust[num431];
							dust2.scale *= 0.5f;
						}
					}
				}
				velocity.X = 0f;
				velocity.Y += 0.2f;
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				bool flag18 = false;
				float num432 = base.Center.X;
				float num433 = base.Center.Y;
				float num434 = 1000f;
				int num435 = -1;
				NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
				{
					float num436 = ownerMinionAttackTargetNPC.position.X + (float)(ownerMinionAttackTargetNPC.width / 2);
					float num437 = ownerMinionAttackTargetNPC.position.Y + (float)(ownerMinionAttackTargetNPC.height / 2);
					float num438 = Math.Abs(base.position.X + (float)(width / 2) - num436) + Math.Abs(base.position.Y + (float)(height / 2) - num437);
					if (num438 < num434 && Collision.CanHit(base.position, width, height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
					{
						num434 = num438;
						num432 = num436;
						num433 = num437;
						flag18 = true;
						num435 = ownerMinionAttackTargetNPC.whoAmI;
					}
				}
				if (!flag18)
				{
					for (int num439 = 0; num439 < 200; num439++)
					{
						if (Main.npc[num439].CanBeChasedBy(this))
						{
							float num440 = Main.npc[num439].position.X + (float)(Main.npc[num439].width / 2);
							float num441 = Main.npc[num439].position.Y + (float)(Main.npc[num439].height / 2);
							float num442 = Math.Abs(base.position.X + (float)(width / 2) - num440) + Math.Abs(base.position.Y + (float)(height / 2) - num441);
							if (num442 < num434 && Collision.CanHit(base.position, width, height, Main.npc[num439].position, Main.npc[num439].width, Main.npc[num439].height))
							{
								num434 = num442;
								num432 = num440;
								num433 = num441;
								flag18 = true;
								num435 = Main.npc[num439].whoAmI;
							}
						}
					}
				}
				if (flag18)
				{
					if (type == 966 && this.ai[1] != (float)num435)
					{
						this.ai[1] = num435;
						netUpdate = true;
					}
					float num443 = num432;
					float num444 = num433;
					num432 -= base.Center.X;
					num433 -= base.Center.Y;
					int num445 = 0;
					if (type != 966)
					{
						if (frameCounter > 0)
						{
							frameCounter--;
						}
						if (frameCounter <= 0)
						{
							int num446 = spriteDirection;
							if (num432 < 0f)
							{
								spriteDirection = -1;
							}
							else
							{
								spriteDirection = 1;
							}
							num445 = ((!(num433 > 0f)) ? ((Math.Abs(num433) > Math.Abs(num432) * 3f) ? 4 : ((Math.Abs(num433) > Math.Abs(num432) * 2f) ? 3 : ((!(Math.Abs(num432) > Math.Abs(num433) * 3f)) ? ((Math.Abs(num432) > Math.Abs(num433) * 2f) ? 1 : 2) : 0))) : 0);
							int num447 = frame;
							if (type == 308)
							{
								frame = num445 * 2;
							}
							else if (type == 377)
							{
								frame = num445;
							}
							if (this.ai[0] > 40f && localAI[1] == 0f && type == 308)
							{
								frame++;
							}
							if (num447 != frame || num446 != spriteDirection)
							{
								frameCounter = 8;
								if (this.ai[0] <= 0f)
								{
									frameCounter = 4;
								}
							}
						}
					}
					if (this.ai[0] <= 0f)
					{
						float num448 = 60f;
						if (type == 966)
						{
							num448 = 90f;
						}
						localAI[1] = 0f;
						this.ai[0] = num448;
						netUpdate = true;
						if (Main.myPlayer == owner)
						{
							float num449 = 6f;
							int num450 = 309;
							if (type == 377)
							{
								num450 = 378;
								num449 = 9f;
							}
							if (type == 966)
							{
								num450 = 967;
								num449 = 12.5f;
							}
							Vector2 vector38 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
							if (type == 966)
							{
								vector38.Y -= 16f;
							}
							else
							{
								switch (num445)
								{
								case 0:
									vector38.Y += 12f;
									vector38.X += 24 * spriteDirection;
									break;
								case 1:
									vector38.Y += 0f;
									vector38.X += 24 * spriteDirection;
									break;
								case 2:
									vector38.Y -= 2f;
									vector38.X += 24 * spriteDirection;
									break;
								case 3:
									vector38.Y -= 6f;
									vector38.X += 14 * spriteDirection;
									break;
								case 4:
									vector38.Y -= 14f;
									vector38.X += 2 * spriteDirection;
									break;
								}
							}
							if (type != 966 && spriteDirection < 0)
							{
								vector38.X += 10f;
							}
							float num451 = num443 - vector38.X;
							float num452 = num444 - vector38.Y;
							float num453 = (float)Math.Sqrt(num451 * num451 + num452 * num452);
							float num454 = num453;
							num453 = num449 / num453;
							num451 *= num453;
							num452 *= num453;
							int num455 = damage;
							int num456 = NewProjectile(GetProjectileSource_FromThis(), vector38.X, vector38.Y, num451, num452, num450, num455, knockBack, Main.myPlayer);
						}
					}
				}
				else
				{
					if (type == 966 && this.ai[1] != -1f)
					{
						this.ai[1] = -1f;
						netUpdate = true;
					}
					if (type != 966 && this.ai[0] <= 60f && (frame == 1 || frame == 3 || frame == 5 || frame == 7 || frame == 9))
					{
						frame--;
					}
				}
				if (this.ai[0] > 0f)
				{
					this.ai[0] -= 1f;
				}
			}
			else if (aiStyle == 54)
			{
				if (type == 317)
				{
					if (Main.player[Main.myPlayer].dead)
					{
						Main.player[Main.myPlayer].raven = false;
					}
					if (Main.player[Main.myPlayer].raven)
					{
						timeLeft = 2;
					}
				}
				for (int num457 = 0; num457 < 1000; num457++)
				{
					if (num457 != whoAmI && Main.projectile[num457].active && Main.projectile[num457].owner == owner && Main.projectile[num457].type == type && Math.Abs(base.position.X - Main.projectile[num457].position.X) + Math.Abs(base.position.Y - Main.projectile[num457].position.Y) < (float)width)
					{
						if (base.position.X < Main.projectile[num457].position.X)
						{
							velocity.X -= 0.05f;
						}
						else
						{
							velocity.X += 0.05f;
						}
						if (base.position.Y < Main.projectile[num457].position.Y)
						{
							velocity.Y -= 0.05f;
						}
						else
						{
							velocity.Y += 0.05f;
						}
					}
				}
				float num458 = base.position.X;
				float num459 = base.position.Y;
				float num460 = 900f;
				bool flag19 = false;
				int num461 = 500;
				if (this.ai[1] != 0f || friendly)
				{
					num461 = 1400;
				}
				if (Math.Abs(base.Center.X - Main.player[owner].Center.X) + Math.Abs(base.Center.Y - Main.player[owner].Center.Y) > (float)num461)
				{
					this.ai[0] = 1f;
				}
				if (this.ai[0] == 0f)
				{
					tileCollide = true;
					NPC ownerMinionAttackTargetNPC2 = OwnerMinionAttackTargetNPC;
					if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this))
					{
						float num462 = ownerMinionAttackTargetNPC2.position.X + (float)(ownerMinionAttackTargetNPC2.width / 2);
						float num463 = ownerMinionAttackTargetNPC2.position.Y + (float)(ownerMinionAttackTargetNPC2.height / 2);
						float num464 = Math.Abs(base.position.X + (float)(width / 2) - num462) + Math.Abs(base.position.Y + (float)(height / 2) - num463);
						if (num464 < num460 && Collision.CanHit(base.position, width, height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height))
						{
							num460 = num464;
							num458 = num462;
							num459 = num463;
							flag19 = true;
						}
					}
					if (!flag19)
					{
						for (int num465 = 0; num465 < 200; num465++)
						{
							if (Main.npc[num465].CanBeChasedBy(this))
							{
								float num466 = Main.npc[num465].position.X + (float)(Main.npc[num465].width / 2);
								float num467 = Main.npc[num465].position.Y + (float)(Main.npc[num465].height / 2);
								float num468 = Math.Abs(base.position.X + (float)(width / 2) - num466) + Math.Abs(base.position.Y + (float)(height / 2) - num467);
								if (num468 < num460 && Collision.CanHit(base.position, width, height, Main.npc[num465].position, Main.npc[num465].width, Main.npc[num465].height))
								{
									num460 = num468;
									num458 = num466;
									num459 = num467;
									flag19 = true;
								}
							}
						}
					}
				}
				else
				{
					tileCollide = false;
				}
				if (!flag19)
				{
					friendly = true;
					float num469 = 8f;
					if (this.ai[0] == 1f)
					{
						num469 = 12f;
					}
					Vector2 vector39 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num470 = Main.player[owner].Center.X - vector39.X;
					float num471 = Main.player[owner].Center.Y - vector39.Y - 60f;
					float num472 = (float)Math.Sqrt(num470 * num470 + num471 * num471);
					float num473 = num472;
					if (num472 < 100f && this.ai[0] == 1f && !Collision.SolidCollision(base.position, width, height))
					{
						this.ai[0] = 0f;
					}
					if (num472 > 2000f)
					{
						base.position.X = Main.player[owner].Center.X - (float)(width / 2);
						base.position.Y = Main.player[owner].Center.Y - (float)(width / 2);
					}
					if (num472 > 70f)
					{
						num472 = num469 / num472;
						num470 *= num472;
						num471 *= num472;
						velocity.X = (velocity.X * 20f + num470) / 21f;
						velocity.Y = (velocity.Y * 20f + num471) / 21f;
					}
					else
					{
						if (velocity.X == 0f && velocity.Y == 0f)
						{
							velocity.X = -0.15f;
							velocity.Y = -0.05f;
						}
						velocity *= 1.01f;
					}
					friendly = false;
					rotation = velocity.X * 0.05f;
					frameCounter++;
					if (frameCounter >= 4)
					{
						frameCounter = 0;
						frame++;
					}
					if (frame > 3)
					{
						frame = 0;
					}
					if ((double)Math.Abs(velocity.X) > 0.2)
					{
						spriteDirection = -direction;
					}
					return;
				}
				if (this.ai[1] == -1f)
				{
					this.ai[1] = 17f;
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1] -= 1f;
				}
				if (this.ai[1] == 0f)
				{
					friendly = true;
					float num474 = 16f;
					Vector2 vector40 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num475 = num458 - vector40.X;
					float num476 = num459 - vector40.Y;
					float num477 = (float)Math.Sqrt(num475 * num475 + num476 * num476);
					float num478 = num477;
					if (num477 < 100f)
					{
						num474 = 10f;
					}
					num477 = num474 / num477;
					num475 *= num477;
					num476 *= num477;
					velocity.X = (velocity.X * 14f + num475) / 15f;
					velocity.Y = (velocity.Y * 14f + num476) / 15f;
				}
				else
				{
					friendly = false;
					if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 10f)
					{
						velocity *= 1.05f;
					}
				}
				rotation = velocity.X * 0.05f;
				frameCounter++;
				if (frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
				}
				if (frame < 4)
				{
					frame = 4;
				}
				if (frame > 7)
				{
					frame = 4;
				}
				if ((double)Math.Abs(velocity.X) > 0.2)
				{
					spriteDirection = -direction;
				}
			}
			else if (aiStyle == 55)
			{
				frameCounter++;
				if (frameCounter > 0)
				{
					frame++;
					frameCounter = 0;
					if (frame > 2)
					{
						frame = 0;
					}
				}
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
				if (this.ai[0] >= 0f && this.ai[0] < 200f)
				{
					int num479 = (int)this.ai[0];
					if (Main.npc[num479].active)
					{
						float num480 = 8f;
						Vector2 vector41 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num481 = Main.npc[num479].position.X - vector41.X;
						float num482 = Main.npc[num479].position.Y - vector41.Y;
						float num483 = (float)Math.Sqrt(num481 * num481 + num482 * num482);
						float num484 = num483;
						num483 = num480 / num483;
						num481 *= num483;
						num482 *= num483;
						velocity.X = (velocity.X * 14f + num481) / 15f;
						velocity.Y = (velocity.Y * 14f + num482) / 15f;
					}
					else
					{
						float num485 = 1000f;
						for (int num486 = 0; num486 < 200; num486++)
						{
							if (Main.npc[num486].CanBeChasedBy(this))
							{
								float num487 = Main.npc[num486].position.X + (float)(Main.npc[num486].width / 2);
								float num488 = Main.npc[num486].position.Y + (float)(Main.npc[num486].height / 2);
								float num489 = Math.Abs(base.position.X + (float)(width / 2) - num487) + Math.Abs(base.position.Y + (float)(height / 2) - num488);
								if (num489 < num485 && Collision.CanHit(base.position, width, height, Main.npc[num486].position, Main.npc[num486].width, Main.npc[num486].height))
								{
									num485 = num489;
									this.ai[0] = num486;
								}
							}
						}
					}
					int num490 = 8;
					int num491 = Dust.NewDust(new Vector2(base.position.X + (float)num490, base.position.Y + (float)num490), width - num490 * 2, height - num490 * 2, 6);
					Dust dust2 = Main.dust[num491];
					dust2.velocity *= 0.5f;
					dust2 = Main.dust[num491];
					dust2.velocity += velocity * 0.5f;
					Main.dust[num491].noGravity = true;
					Main.dust[num491].noLight = true;
					Main.dust[num491].scale = 1.4f;
				}
				else
				{
					Kill();
				}
			}
			else if (aiStyle == 56)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					rotation = this.ai[0];
					spriteDirection = -(int)this.ai[1];
				}
				if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 16f)
				{
					velocity *= 1.05f;
				}
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.025f * (float)direction;
			}
			else if (aiStyle == 57)
			{
				this.ai[0] += 1f;
				if (this.ai[0] > 30f)
				{
					this.ai[0] = 30f;
					velocity.Y += 0.25f;
					if (velocity.Y > 16f)
					{
						velocity.Y = 16f;
					}
					velocity.X *= 0.995f;
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (owner != Main.myPlayer)
				{
					return;
				}
				localAI[0] += 1f;
				if (!(localAI[0] >= 4f))
				{
					return;
				}
				localAI[0] = 0f;
				int num492 = 0;
				for (int num493 = 0; num493 < 1000; num493++)
				{
					if (Main.projectile[num493].active && Main.projectile[num493].owner == owner && Main.projectile[num493].type == 344)
					{
						num492++;
					}
				}
				float num494 = (float)damage * 0.8f;
				float num495 = 1f;
				if (num492 > 100)
				{
					num495 = num492 - 100;
					num495 = 1f - num495 / 100f;
					num494 *= num495;
				}
				if (num492 > 100)
				{
					localAI[0] -= 1f;
				}
				if (num492 > 120)
				{
					localAI[0] -= 1f;
				}
				if (num492 > 140)
				{
					localAI[0] -= 1f;
				}
				if (num492 > 150)
				{
					localAI[0] -= 1f;
				}
				if (num492 > 160)
				{
					localAI[0] -= 1f;
				}
				if (num492 > 165)
				{
					localAI[0] -= 1f;
				}
				if (num492 > 170)
				{
					localAI[0] -= 2f;
				}
				if (num492 > 175)
				{
					localAI[0] -= 3f;
				}
				if (num492 > 180)
				{
					localAI[0] -= 4f;
				}
				if (num492 > 185)
				{
					localAI[0] -= 5f;
				}
				if (num492 > 190)
				{
					localAI[0] -= 6f;
				}
				if (num492 > 195)
				{
					localAI[0] -= 7f;
				}
				if (num494 > (float)damage * 0.1f)
				{
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 344, (int)num494, knockBack * 0.55f, owner, 0f, Main.rand.Next(3));
				}
			}
			else if (aiStyle == 58)
			{
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (this.ai[0] == 0f)
				{
					frame = 0;
					this.ai[1] += 1f;
					if (this.ai[1] > 30f)
					{
						velocity.Y += 0.1f;
					}
					if (velocity.Y >= 0f)
					{
						this.ai[0] = 1f;
					}
				}
				if (this.ai[0] == 1f)
				{
					frame = 1;
					velocity.Y += 0.1f;
					if (velocity.Y > 3f)
					{
						velocity.Y = 3f;
					}
					velocity.X *= 0.99f;
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
			}
			else if (aiStyle == 59)
			{
				this.ai[1] += 1f;
				if (this.ai[1] >= 60f)
				{
					friendly = true;
					int num496 = (int)this.ai[0];
					if (!Main.npc[num496].active)
					{
						num496 = -1;
						int[] array2 = new int[200];
						int num497 = 0;
						for (int num498 = 0; num498 < 200; num498++)
						{
							if (Main.npc[num498].CanBeChasedBy(this))
							{
								float num499 = Math.Abs(Main.npc[num498].position.X + (float)(Main.npc[num498].width / 2) - base.position.X + (float)(width / 2)) + Math.Abs(Main.npc[num498].position.Y + (float)(Main.npc[num498].height / 2) - base.position.Y + (float)(height / 2));
								if (num499 < 800f)
								{
									array2[num497] = num498;
									num497++;
								}
							}
						}
						if (num497 == 0)
						{
							Kill();
							return;
						}
						num496 = array2[Main.rand.Next(num497)];
						this.ai[0] = num496;
					}
					float num500 = 4f;
					Vector2 vector42 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
					float num501 = Main.npc[num496].Center.X - vector42.X;
					float num502 = Main.npc[num496].Center.Y - vector42.Y;
					float num503 = (float)Math.Sqrt(num501 * num501 + num502 * num502);
					float num504 = num503;
					num503 = num500 / num503;
					num501 *= num503;
					num502 *= num503;
					int num505 = 30;
					velocity.X = (velocity.X * (float)(num505 - 1) + num501) / (float)num505;
					velocity.Y = (velocity.Y * (float)(num505 - 1) + num502) / (float)num505;
				}
				for (int num506 = 0; num506 < 5; num506++)
				{
					float num507 = velocity.X * 0.2f * (float)num506;
					float num508 = (0f - velocity.Y * 0.2f) * (float)num506;
					int num509 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 175, 0f, 0f, 100, default(Color), 1.3f);
					Main.dust[num509].noGravity = true;
					Dust dust2 = Main.dust[num509];
					dust2.velocity *= 0f;
					Main.dust[num509].position.X -= num507;
					Main.dust[num509].position.Y -= num508;
				}
			}
			else if (aiStyle == 60)
			{
				scale -= 0.015f;
				if (scale <= 0f)
				{
					velocity *= 5f;
					oldVelocity = velocity;
					Kill();
				}
				if (this.ai[0] > 3f)
				{
					int num510 = 103;
					if (type == 406)
					{
						num510 = 137;
					}
					if (owner == Main.myPlayer)
					{
						Rectangle rectangle4 = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
						for (int num511 = 0; num511 < 200; num511++)
						{
							if (Main.npc[num511].active && !Main.npc[num511].dontTakeDamage && Main.npc[num511].lifeMax > 1)
							{
								Rectangle value3 = new Rectangle((int)Main.npc[num511].position.X, (int)Main.npc[num511].position.Y, Main.npc[num511].width, Main.npc[num511].height);
								if (rectangle4.Intersects(value3))
								{
									Main.npc[num511].AddBuff(num510, 1500);
									Kill();
								}
							}
						}
						for (int num512 = 0; num512 < 255; num512++)
						{
							if (num512 != owner && Main.player[num512].active && !Main.player[num512].dead)
							{
								Rectangle value4 = new Rectangle((int)Main.player[num512].position.X, (int)Main.player[num512].position.Y, Main.player[num512].width, Main.player[num512].height);
								if (rectangle4.Intersects(value4))
								{
									Main.player[num512].AddBuff(num510, 1500, quiet: false);
									Kill();
								}
							}
						}
					}
					this.ai[0] += this.ai[1];
					if (this.ai[0] > 30f)
					{
						velocity.Y += 0.1f;
					}
					if (type == 358)
					{
						for (int num513 = 0; num513 < 1; num513++)
						{
							for (int num514 = 0; num514 < 6; num514++)
							{
								float num515 = velocity.X / 6f * (float)num514;
								float num516 = velocity.Y / 6f * (float)num514;
								int num517 = 6;
								int num518 = Dust.NewDust(new Vector2(base.position.X + (float)num517, base.position.Y + (float)num517), width - num517 * 2, height - num517 * 2, 211, 0f, 0f, 75, default(Color), 1.2f);
								Dust dust2;
								if (Main.rand.Next(2) == 0)
								{
									dust2 = Main.dust[num518];
									dust2.alpha += 25;
								}
								if (Main.rand.Next(2) == 0)
								{
									dust2 = Main.dust[num518];
									dust2.alpha += 25;
								}
								if (Main.rand.Next(2) == 0)
								{
									dust2 = Main.dust[num518];
									dust2.alpha += 25;
								}
								Main.dust[num518].noGravity = true;
								dust2 = Main.dust[num518];
								dust2.velocity *= 0.3f;
								dust2 = Main.dust[num518];
								dust2.velocity += velocity * 0.5f;
								Main.dust[num518].position = base.Center;
								Main.dust[num518].position.X -= num515;
								Main.dust[num518].position.Y -= num516;
								dust2 = Main.dust[num518];
								dust2.velocity *= 0.2f;
							}
							if (Main.rand.Next(4) == 0)
							{
								int num519 = 6;
								int num520 = Dust.NewDust(new Vector2(base.position.X + (float)num519, base.position.Y + (float)num519), width - num519 * 2, height - num519 * 2, 211, 0f, 0f, 75, default(Color), 0.65f);
								Dust dust2 = Main.dust[num520];
								dust2.velocity *= 0.5f;
								dust2 = Main.dust[num520];
								dust2.velocity += velocity * 0.5f;
							}
						}
					}
					if (type != 406)
					{
						return;
					}
					int num521 = 175;
					Color newColor2 = new Color(0, 80, 255, 100);
					for (int num522 = 0; num522 < 6; num522++)
					{
						Vector2 vector43 = velocity * num522 / 6f;
						int num523 = 6;
						int num524 = Dust.NewDust(base.position + Vector2.One * 6f, width - num523 * 2, height - num523 * 2, 4, 0f, 0f, num521, newColor2, 1.2f);
						Dust dust2;
						if (Main.rand.Next(2) == 0)
						{
							dust2 = Main.dust[num524];
							dust2.alpha += 25;
						}
						if (Main.rand.Next(2) == 0)
						{
							dust2 = Main.dust[num524];
							dust2.alpha += 25;
						}
						if (Main.rand.Next(2) == 0)
						{
							dust2 = Main.dust[num524];
							dust2.alpha += 25;
						}
						Main.dust[num524].noGravity = true;
						dust2 = Main.dust[num524];
						dust2.velocity *= 0.3f;
						dust2 = Main.dust[num524];
						dust2.velocity += velocity * 0.5f;
						Main.dust[num524].position = base.Center;
						Main.dust[num524].position.X -= vector43.X;
						Main.dust[num524].position.Y -= vector43.Y;
						dust2 = Main.dust[num524];
						dust2.velocity *= 0.2f;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num525 = 6;
						int num526 = Dust.NewDust(base.position + Vector2.One * 6f, width - num525 * 2, height - num525 * 2, 4, 0f, 0f, num521, newColor2, 1.2f);
						Dust dust2 = Main.dust[num526];
						dust2.velocity *= 0.5f;
						dust2 = Main.dust[num526];
						dust2.velocity += velocity * 0.5f;
					}
				}
				else
				{
					this.ai[0] += 1f;
				}
			}
			else if (aiStyle == 61)
			{
				AI_061_FishingBobber();
			}
			else if (aiStyle == 62)
			{
				AI_062();
			}
			else if (aiStyle == 63)
			{
				if (!Main.player[owner].active)
				{
					active = false;
					return;
				}
				Vector2 center2 = base.position;
				bool flag20 = false;
				float num527 = 2000f;
				for (int num528 = 0; num528 < 200; num528++)
				{
					NPC nPC = Main.npc[num528];
					if (nPC.CanBeChasedBy(this))
					{
						float num529 = Vector2.Distance(nPC.Center, base.Center);
						if (!(num529 >= num527) && Collision.CanHit(base.position, width, height, nPC.position, nPC.width, nPC.height))
						{
							num527 = num529;
							center2 = nPC.Center;
							flag20 = true;
						}
					}
				}
				if (!flag20)
				{
					velocity.X *= 0.95f;
				}
				else
				{
					float num530 = 5f;
					float num531 = 0.08f;
					if (velocity.Y == 0f)
					{
						bool flag21 = false;
						if (base.Center.Y - 50f > center2.Y)
						{
							flag21 = true;
						}
						if (flag21)
						{
							velocity.Y = -6f;
						}
					}
					else
					{
						num530 = 8f;
						num531 = 0.12f;
					}
					velocity.X += (float)Math.Sign(center2.X - base.Center.X) * num531;
					if (velocity.X < 0f - num530)
					{
						velocity.X = 0f - num530;
					}
					if (velocity.X > num530)
					{
						velocity.X = num530;
					}
				}
				float num532 = 0f;
				Collision.StepUp(ref base.position, ref velocity, width, height, ref num532, ref gfxOffY);
				if (velocity.Y != 0f)
				{
					frame = 3;
				}
				else
				{
					if (Math.Abs(velocity.X) > 0.2f)
					{
						frameCounter++;
					}
					if (frameCounter >= 9)
					{
						frameCounter = 0;
					}
					if (frameCounter >= 6)
					{
						frame = 2;
					}
					else if (frameCounter >= 3)
					{
						frame = 1;
					}
					else
					{
						frame = 0;
					}
				}
				if (velocity.X != 0f)
				{
					direction = Math.Sign(velocity.X);
				}
				spriteDirection = -direction;
				velocity.Y += 0.2f;
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
			}
			else if (aiStyle == 64)
			{
				int num533 = 10;
				int num534 = 15;
				float num535 = 1f;
				int num536 = 150;
				int num537 = 42;
				if (type == 386)
				{
					num533 = 16;
					num534 = 16;
					num535 = 1.5f;
				}
				if (velocity.X != 0f)
				{
					direction = (spriteDirection = -Math.Sign(velocity.X));
				}
				frameCounter++;
				if (frameCounter > 2)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame >= 6)
				{
					frame = 0;
				}
				if (localAI[0] == 0f && Main.myPlayer == owner)
				{
					localAI[0] = 1f;
					base.position.X += width / 2;
					base.position.Y += height / 2;
					scale = ((float)(num533 + num534) - this.ai[1]) * num535 / (float)(num534 + num533);
					width = (int)((float)num536 * scale);
					height = (int)((float)num537 * scale);
					base.position.X -= width / 2;
					base.position.Y -= height / 2;
					netUpdate = true;
				}
				if (this.ai[1] != -1f)
				{
					scale = ((float)(num533 + num534) - this.ai[1]) * num535 / (float)(num534 + num533);
					width = (int)((float)num536 * scale);
					height = (int)((float)num537 * scale);
				}
				if (!Collision.SolidCollision(base.position, width, height))
				{
					alpha -= 30;
					if (alpha < 60)
					{
						alpha = 60;
					}
					if (type == 386 && alpha < 100)
					{
						alpha = 100;
					}
				}
				else
				{
					alpha += 30;
					if (alpha > 150)
					{
						alpha = 150;
					}
				}
				if (this.ai[0] > 0f)
				{
					this.ai[0]--;
				}
				if (this.ai[0] == 1f && this.ai[1] > 0f && owner == Main.myPlayer)
				{
					netUpdate = true;
					Vector2 center3 = base.Center;
					center3.Y -= (float)num537 * scale / 2f;
					float num538 = ((float)(num533 + num534) - this.ai[1] + 1f) * num535 / (float)(num534 + num533);
					center3.Y -= (float)num537 * num538 / 2f;
					center3.Y += 2f;
					NewProjectile(GetProjectileSource_FromThis(), center3.X, center3.Y, velocity.X, velocity.Y, type, damage, knockBack, owner, 10f, this.ai[1] - 1f);
					int num539 = 4;
					if (type == 386)
					{
						num539 = 2;
					}
					if ((int)this.ai[1] % num539 == 0 && this.ai[1] != 0f)
					{
						int num540 = 372;
						if (type == 386)
						{
							num540 = 373;
						}
						int num541 = NPC.NewNPC((int)center3.X, (int)center3.Y, num540);
						Main.npc[num541].velocity = velocity;
						Main.npc[num541].netUpdate = true;
						if (type == 386)
						{
							Main.npc[num541].ai[2] = width;
							Main.npc[num541].ai[3] = -1.5f;
						}
					}
				}
				if (this.ai[0] <= 0f)
				{
					float num542 = (float)Math.PI / 30f;
					float num543 = (float)width / 5f;
					if (type == 386)
					{
						num543 *= 2f;
					}
					float num544 = (float)(Math.Cos(num542 * (0f - this.ai[0])) - 0.5) * num543;
					base.position.X -= num544 * (float)(-direction);
					this.ai[0]--;
					num544 = (float)(Math.Cos(num542 * (0f - this.ai[0])) - 0.5) * num543;
					base.position.X += num544 * (float)(-direction);
				}
			}
			else if (aiStyle == 65)
			{
				if (this.ai[1] > 0f)
				{
					int num545 = (int)this.ai[1] - 1;
					if (num545 < 255)
					{
						localAI[0]++;
						if (localAI[0] > 10f)
						{
							int num546 = 6;
							for (int num547 = 0; num547 < num546; num547++)
							{
								Vector2 spinningpoint = Vector2.Normalize(velocity) * new Vector2((float)width / 2f, height) * 0.75f;
								spinningpoint = spinningpoint.RotatedBy((double)(num547 - (num546 / 2 - 1)) * Math.PI / (double)num546) + base.Center;
								Vector2 vector44 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
								int num548 = Dust.NewDust(spinningpoint + vector44, 0, 0, 172, vector44.X * 2f, vector44.Y * 2f, 100, default(Color), 1.4f);
								Main.dust[num548].noGravity = true;
								Main.dust[num548].noLight = true;
								Dust dust2 = Main.dust[num548];
								dust2.velocity /= 4f;
								dust2 = Main.dust[num548];
								dust2.velocity -= velocity;
							}
							alpha -= 5;
							if (alpha < 100)
							{
								alpha = 100;
							}
							rotation += velocity.X * 0.1f;
							frame = (int)(localAI[0] / 3f) % 3;
						}
						Vector2 value5 = Main.player[num545].Center - base.Center;
						float num549 = 4f;
						num549 += localAI[0] / 20f;
						velocity = Vector2.Normalize(value5) * num549;
						if (value5.Length() < 50f)
						{
							Kill();
						}
					}
				}
				else
				{
					float num550 = (float)Math.PI / 15f;
					float num551 = 4f;
					float num552 = (float)(Math.Cos(num550 * this.ai[0]) - 0.5) * num551;
					velocity.Y -= num552;
					this.ai[0]++;
					num552 = (float)(Math.Cos(num550 * this.ai[0]) - 0.5) * num551;
					velocity.Y += num552;
					localAI[0]++;
					if (localAI[0] > 10f)
					{
						alpha -= 5;
						if (alpha < 100)
						{
							alpha = 100;
						}
						rotation += velocity.X * 0.1f;
						frame = (int)(localAI[0] / 3f) % 3;
					}
				}
				if (wet)
				{
					base.position.Y -= 16f;
					Kill();
				}
			}
			else if (aiStyle == 66)
			{
				float num553 = 0f;
				float num554 = 0f;
				float num555 = 0f;
				float num556 = 0f;
				if (type == 387 || type == 388)
				{
					num553 = 2000f;
					num554 = 800f;
					num555 = 1200f;
					num556 = 150f;
					if (Main.player[owner].dead)
					{
						Main.player[owner].twinsMinion = false;
					}
					if (Main.player[owner].twinsMinion)
					{
						timeLeft = 2;
					}
				}
				if (type == 533)
				{
					num553 = 2000f;
					num554 = 900f;
					num555 = 1500f;
					num556 = 450f;
					if (Main.player[owner].dead)
					{
						Main.player[owner].DeadlySphereMinion = false;
					}
					if (Main.player[owner].DeadlySphereMinion)
					{
						timeLeft = 2;
					}
				}
				float num557 = 0.05f;
				for (int num558 = 0; num558 < 1000; num558++)
				{
					bool flag22 = (Main.projectile[num558].type == 387 || Main.projectile[num558].type == 388) && (type == 387 || type == 388);
					if (!flag22)
					{
						flag22 = type == 533 && Main.projectile[num558].type == 533;
					}
					if (num558 != whoAmI && Main.projectile[num558].active && Main.projectile[num558].owner == owner && flag22 && Math.Abs(base.position.X - Main.projectile[num558].position.X) + Math.Abs(base.position.Y - Main.projectile[num558].position.Y) < (float)width)
					{
						if (base.position.X < Main.projectile[num558].position.X)
						{
							velocity.X -= num557;
						}
						else
						{
							velocity.X += num557;
						}
						if (base.position.Y < Main.projectile[num558].position.Y)
						{
							velocity.Y -= num557;
						}
						else
						{
							velocity.Y += num557;
						}
					}
				}
				if (type == 533)
				{
					if ((int)this.ai[0] % 3 != 2)
					{
						Lighting.AddLight(base.Center, 0.8f, 0.3f, 0.1f);
					}
					else
					{
						Lighting.AddLight(base.Center, 0.3f, 0.5f, 0.7f);
					}
				}
				bool flag23 = false;
				if (this.ai[0] == 2f && type == 388)
				{
					this.ai[1]++;
					extraUpdates = 1;
					rotation = velocity.ToRotation() + (float)Math.PI;
					frameCounter++;
					if (frameCounter > 1)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 2)
					{
						frame = 0;
					}
					if (this.ai[1] > 40f)
					{
						this.ai[1] = 1f;
						this.ai[0] = 0f;
						extraUpdates = 0;
						numUpdates = 0;
						netUpdate = true;
					}
					else
					{
						flag23 = true;
					}
				}
				if (type == 533 && this.ai[0] >= 3f && this.ai[0] <= 5f)
				{
					int num559 = 2;
					flag23 = true;
					velocity *= 0.9f;
					this.ai[1]++;
					int num560 = (int)this.ai[1] / num559 + (int)(this.ai[0] - 3f) * 8;
					if (num560 < 4)
					{
						frame = 17 + num560;
					}
					else if (num560 < 5)
					{
						frame = 0;
					}
					else if (num560 < 8)
					{
						frame = 1 + num560 - 5;
					}
					else if (num560 < 11)
					{
						frame = 11 - num560;
					}
					else if (num560 < 12)
					{
						frame = 0;
					}
					else if (num560 < 16)
					{
						frame = num560 - 2;
					}
					else if (num560 < 20)
					{
						frame = 29 - num560;
					}
					else if (num560 < 21)
					{
						frame = 0;
					}
					else
					{
						frame = num560 - 4;
					}
					if (this.ai[1] > (float)(num559 * 8))
					{
						this.ai[0] -= 3f;
						this.ai[1] = 0f;
					}
				}
				if (type == 533 && this.ai[0] >= 6f && this.ai[0] <= 8f)
				{
					this.ai[1]++;
					MaxUpdates = 2;
					if (this.ai[0] == 7f)
					{
						rotation = velocity.ToRotation() + (float)Math.PI;
					}
					else
					{
						rotation += (float)Math.PI / 6f;
					}
					int num561 = 0;
					switch ((int)this.ai[0])
					{
					case 6:
						frame = 5;
						num561 = 40;
						break;
					case 7:
						frame = 13;
						num561 = 30;
						break;
					case 8:
						frame = 17;
						num561 = 30;
						break;
					}
					if (this.ai[1] > (float)num561)
					{
						this.ai[1] = 1f;
						this.ai[0] -= 6f;
						localAI[0]++;
						extraUpdates = 0;
						numUpdates = 0;
						netUpdate = true;
					}
					else
					{
						flag23 = true;
					}
					if (this.ai[0] == 8f)
					{
						for (int num562 = 0; num562 < 4; num562++)
						{
							int num563 = Utils.SelectRandom<int>(Main.rand, 226, 228, 75);
							int num564 = Dust.NewDust(base.Center, 0, 0, num563);
							Dust dust10 = Main.dust[num564];
							Vector2 vector45 = Vector2.One.RotatedBy((float)num562 * ((float)Math.PI / 2f)).RotatedBy(rotation);
							dust10.position = base.Center + vector45 * 10f;
							dust10.velocity = vector45 * 1f;
							dust10.scale = 0.6f + Main.rand.NextFloat() * 0.5f;
							dust10.noGravity = true;
						}
					}
				}
				if (flag23)
				{
					return;
				}
				Vector2 center4 = base.position;
				bool flag24 = false;
				if (this.ai[0] != 1f && (type == 387 || type == 388))
				{
					tileCollide = true;
				}
				if (type == 533 && this.ai[0] < 9f)
				{
					tileCollide = true;
				}
				if (tileCollide && WorldGen.SolidTile(Framing.GetTileSafely((int)base.Center.X / 16, (int)base.Center.Y / 16)))
				{
					tileCollide = false;
				}
				NPC ownerMinionAttackTargetNPC3 = OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC3 != null && ownerMinionAttackTargetNPC3.CanBeChasedBy(this))
				{
					float num565 = Vector2.Distance(ownerMinionAttackTargetNPC3.Center, base.Center);
					float num566 = num553 * 3f;
					if (num565 < num566 && !flag24 && Collision.CanHitLine(base.position, width, height, ownerMinionAttackTargetNPC3.position, ownerMinionAttackTargetNPC3.width, ownerMinionAttackTargetNPC3.height))
					{
						num553 = num565;
						center4 = ownerMinionAttackTargetNPC3.Center;
						flag24 = true;
					}
				}
				if (!flag24)
				{
					for (int num567 = 0; num567 < 200; num567++)
					{
						NPC nPC2 = Main.npc[num567];
						if (nPC2.CanBeChasedBy(this))
						{
							float num568 = Vector2.Distance(nPC2.Center, base.Center);
							if (!(num568 >= num553) && Collision.CanHitLine(base.position, width, height, nPC2.position, nPC2.width, nPC2.height))
							{
								num553 = num568;
								center4 = nPC2.Center;
								flag24 = true;
							}
						}
					}
				}
				float num569 = num554;
				if (flag24)
				{
					num569 = num555;
				}
				Player player4 = Main.player[owner];
				if (Vector2.Distance(player4.Center, base.Center) > num569)
				{
					if (type == 387 || type == 388)
					{
						this.ai[0] = 1f;
					}
					if (type == 533 && this.ai[0] < 9f)
					{
						this.ai[0] += 3 * (3 - (int)(this.ai[0] / 3f));
					}
					tileCollide = false;
					netUpdate = true;
				}
				if ((type == 388 || type == 387) && flag24 && this.ai[0] == 0f)
				{
					Vector2 vector46 = center4 - base.Center;
					float num570 = vector46.Length();
					vector46.Normalize();
					if (num570 > 200f)
					{
						float num571 = 6f;
						if (type == 388)
						{
							num571 = 14f;
						}
						vector46 *= num571;
						velocity = (velocity * 40f + vector46) / 41f;
					}
					else
					{
						float num572 = 4f;
						vector46 *= 0f - num572;
						velocity = (velocity * 40f + vector46) / 41f;
					}
				}
				else
				{
					bool flag25 = false;
					if (!flag25)
					{
						flag25 = this.ai[0] == 1f && (type == 387 || type == 388);
					}
					if (!flag25)
					{
						flag25 = this.ai[0] >= 9f && type == 533;
					}
					float num573 = 6f;
					if (type == 533)
					{
						num573 = 12f;
					}
					if (flag25)
					{
						num573 = 15f;
					}
					Vector2 center5 = base.Center;
					Vector2 vector47 = player4.Center - center5 + new Vector2(0f, -60f);
					float num574 = vector47.Length();
					float num575 = num574;
					if (num574 > 200f && num573 < 8f)
					{
						num573 = 8f;
					}
					if (num574 < num556 && flag25 && !Collision.SolidCollision(base.position, width, height))
					{
						if (type == 387 || type == 388)
						{
							this.ai[0] = 0f;
						}
						if (type == 533)
						{
							this.ai[0] -= 9f;
						}
						netUpdate = true;
					}
					if (num574 > 2000f)
					{
						base.position.X = Main.player[owner].Center.X - (float)(width / 2);
						base.position.Y = Main.player[owner].Center.Y - (float)(height / 2);
						netUpdate = true;
					}
					if (num574 > 70f)
					{
						Vector2 vector48 = vector47;
						vector47.Normalize();
						vector47 *= num573;
						velocity = (velocity * 40f + vector47) / 41f;
					}
					else if (velocity.X == 0f && velocity.Y == 0f)
					{
						velocity.X = -0.15f;
						velocity.Y = -0.05f;
					}
				}
				if (type == 388)
				{
					rotation = velocity.ToRotation() + (float)Math.PI;
				}
				if (type == 387)
				{
					if (flag24)
					{
						rotation = (center4 - base.Center).ToRotation() + (float)Math.PI;
					}
					else
					{
						rotation = velocity.ToRotation() + (float)Math.PI;
					}
				}
				if (type == 533 && (this.ai[0] < 3f || this.ai[0] >= 9f))
				{
					rotation += velocity.X * 0.04f;
				}
				if (type == 388 || type == 387)
				{
					frameCounter++;
					if (frameCounter > 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 2)
					{
						frame = 0;
					}
				}
				else if (type == 533)
				{
					if (this.ai[0] < 3f || this.ai[0] >= 9f)
					{
						frameCounter++;
						if (frameCounter >= 24)
						{
							frameCounter = 0;
						}
						int num576 = frameCounter / 4;
						frame = 4 + num576;
						switch ((int)this.ai[0])
						{
						case 0:
						case 9:
							frame = 4 + num576;
							break;
						case 1:
						case 10:
							num576 = frameCounter / 8;
							frame = 14 + num576;
							break;
						case 2:
						case 11:
							num576 = frameCounter / 3;
							if (num576 >= 4)
							{
								num576 -= 4;
							}
							frame = 17 + num576;
							break;
						}
					}
					if (this.ai[0] == 2f && Main.rand.Next(2) == 0)
					{
						for (int num577 = 0; num577 < 4; num577++)
						{
							if (Main.rand.Next(2) != 0)
							{
								int num578 = Utils.SelectRandom<int>(Main.rand, 226, 228, 75);
								int num579 = Dust.NewDust(base.Center, 0, 0, num578);
								Dust dust11 = Main.dust[num579];
								Vector2 vector49 = Vector2.One.RotatedBy((float)num577 * ((float)Math.PI / 2f)).RotatedBy(rotation);
								dust11.position = base.Center + vector49 * 10f;
								dust11.velocity = vector49 * 1f;
								dust11.scale = 0.3f + Main.rand.NextFloat() * 0.5f;
								dust11.noGravity = true;
								dust11.customData = this;
								dust11.noLight = true;
							}
						}
					}
				}
				if (this.ai[1] > 0f && (type == 387 || type == 388))
				{
					this.ai[1] += Main.rand.Next(1, 4);
				}
				if (this.ai[1] > 90f && type == 387)
				{
					this.ai[1] = 0f;
					netUpdate = true;
				}
				if (this.ai[1] > 40f && type == 388)
				{
					this.ai[1] = 0f;
					netUpdate = true;
				}
				if (this.ai[1] > 0f && type == 533)
				{
					this.ai[1]++;
					int num580 = 10;
					if (this.ai[1] > (float)num580)
					{
						this.ai[1] = 0f;
						netUpdate = true;
					}
				}
				if (this.ai[0] == 0f && (type == 387 || type == 388))
				{
					if (type == 387)
					{
						float num581 = 8f;
						int num582 = 389;
						if (flag24 && this.ai[1] == 0f)
						{
							this.ai[1]++;
							if (Main.myPlayer == owner && Collision.CanHitLine(base.position, width, height, center4, 0, 0))
							{
								Vector2 vector50 = center4 - base.Center;
								vector50.Normalize();
								vector50 *= num581;
								int num583 = NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector50.X, vector50.Y, num582, (int)((float)damage * 0.8f), 0f, Main.myPlayer);
								Main.projectile[num583].timeLeft = 300;
								netUpdate = true;
							}
						}
					}
					if (type == 388 && this.ai[1] == 0f && flag24 && num553 < 500f)
					{
						this.ai[1]++;
						if (Main.myPlayer == owner)
						{
							this.ai[0] = 2f;
							Vector2 vector51 = center4 - base.Center;
							vector51.Normalize();
							velocity = vector51 * 8f;
							netUpdate = true;
						}
					}
				}
				else
				{
					if (type != 533 || !(this.ai[0] < 3f))
					{
						return;
					}
					int num584 = 0;
					switch ((int)this.ai[0])
					{
					case 0:
					case 3:
					case 6:
						num584 = 400;
						break;
					case 1:
					case 4:
					case 7:
						num584 = 400;
						break;
					case 2:
					case 5:
					case 8:
						num584 = 600;
						break;
					}
					if (!(this.ai[1] == 0f && flag24) || !(num553 < (float)num584))
					{
						return;
					}
					this.ai[1]++;
					if (Main.myPlayer != owner)
					{
						return;
					}
					if (localAI[0] >= 3f)
					{
						this.ai[0] += 4f;
						if (this.ai[0] == 6f)
						{
							this.ai[0] = 3f;
						}
						localAI[0] = 0f;
					}
					else
					{
						this.ai[0] += 6f;
						Vector2 vector52 = center4 - base.Center;
						vector52.Normalize();
						float num585 = ((this.ai[0] == 8f) ? 12f : 10f);
						velocity = vector52 * num585;
						netUpdate = true;
					}
				}
			}
			else if (aiStyle == 67)
			{
				AI_067_FreakingPirates();
			}
			else if (aiStyle == 68)
			{
				rotation += 0.25f * (float)direction;
				bool flag26 = type == 399;
				bool flag27 = type == 669;
				this.ai[0] += 1f;
				if (this.ai[0] >= 3f)
				{
					alpha -= 40;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (this.ai[0] >= 15f)
				{
					velocity.Y += 0.2f;
					if (velocity.Y > 16f)
					{
						velocity.Y = 16f;
					}
					velocity.X *= 0.99f;
				}
				if (alpha == 0)
				{
					if (flag26)
					{
						Vector2 vector53 = new Vector2(4f, -8f);
						float num586 = rotation;
						if (direction == -1)
						{
							vector53.X = -4f;
						}
						vector53 = vector53.RotatedBy(num586);
						for (int num587 = 0; num587 < 1; num587++)
						{
							int num588 = Dust.NewDust(base.Center + vector53 - Vector2.One * 5f, 4, 4, 6);
							Main.dust[num588].scale = 1.5f;
							Main.dust[num588].noGravity = true;
							Main.dust[num588].velocity = Main.dust[num588].velocity * 0.25f + Vector2.Normalize(vector53) * 1f;
							Main.dust[num588].velocity = Main.dust[num588].velocity.RotatedBy(-(float)Math.PI / 2f * (float)direction);
						}
					}
					if (flag27)
					{
						for (int num589 = 0; num589 < 2; num589++)
						{
							Vector2 spinningpoint2 = new Vector2(MathHelper.Lerp(-8f, 8f, Main.rand.NextFloat()), -4f);
							float num590 = rotation;
							spinningpoint2 = spinningpoint2.RotatedBy(num590);
							int num591 = Dust.NewDust(base.Center + spinningpoint2 - Vector2.One * 5f, 4, 4, 4);
							Main.dust[num591].scale = 0.8f - Main.rand.NextFloat() * 0.2f;
							Main.dust[num591].velocity = Main.dust[num591].velocity * 0.25f + Vector2.Normalize(spinningpoint2) * 1f;
							Main.dust[num591].velocity = Main.dust[num591].velocity.RotatedBy(-(float)Math.PI / 2f * (float)direction);
							Main.dust[num591].color = Utils.SelectRandom<Color>(Main.rand, new Color(255, 255, 255, 110), new Color(245, 200, 30, 110));
						}
					}
				}
				spriteDirection = direction;
				if (timeLeft <= 3)
				{
					tileCollide = false;
					alpha = 255;
					base.position.X += width / 2;
					base.position.Y += height / 2;
					width = 80;
					height = 80;
					base.position.X -= width / 2;
					base.position.Y -= height / 2;
					knockBack = 8f;
				}
				if (wet && timeLeft > 3)
				{
					timeLeft = 3;
				}
			}
			else if (aiStyle == 69)
			{
				Vector2 vector54 = Main.player[owner].Center - base.Center;
				rotation = vector54.ToRotation() - 1.57f;
				if (Main.player[owner].dead)
				{
					Kill();
					return;
				}
				Main.player[owner].SetDummyItemTime(10);
				_ = vector54.X;
				_ = 0f;
				if (vector54.X < 0f)
				{
					Main.player[owner].ChangeDir(1);
					direction = 1;
				}
				else
				{
					Main.player[owner].ChangeDir(-1);
					direction = -1;
				}
				Main.player[owner].itemRotation = (vector54 * -1f * direction).ToRotation();
				spriteDirection = ((!(vector54.X > 0f)) ? 1 : (-1));
				if (this.ai[0] == 0f && vector54.Length() > 400f)
				{
					this.ai[0] = 1f;
				}
				if (this.ai[0] == 1f || this.ai[0] == 2f)
				{
					float num592 = vector54.Length();
					if (num592 > 1500f)
					{
						Kill();
						return;
					}
					if (num592 > 600f)
					{
						this.ai[0] = 2f;
					}
					tileCollide = false;
					float num593 = 20f;
					if (this.ai[0] == 2f)
					{
						num593 = 40f;
					}
					velocity = Vector2.Normalize(vector54) * num593;
					if (vector54.Length() < num593)
					{
						Kill();
						return;
					}
				}
				this.ai[1]++;
				if (this.ai[1] > 5f)
				{
					alpha = 0;
				}
				if ((int)this.ai[1] % 4 == 0 && owner == Main.myPlayer)
				{
					Vector2 spinningpoint3 = vector54 * -1f;
					spinningpoint3.Normalize();
					spinningpoint3 *= (float)Main.rand.Next(45, 65) * 0.1f;
					spinningpoint3 = spinningpoint3.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, spinningpoint3.X, spinningpoint3.Y, 405, damage, knockBack, owner, -10f);
				}
			}
			else if (aiStyle == 70)
			{
				if (this.ai[0] == 0f)
				{
					float num594 = 500f;
					int num595 = -1;
					for (int num596 = 0; num596 < 200; num596++)
					{
						NPC nPC3 = Main.npc[num596];
						float num597 = (nPC3.Center - base.Center).Length();
						if (!(num597 >= num594) && nPC3.CanBeChasedBy(this) && Collision.CanHit(base.position, width, height, nPC3.position, nPC3.width, nPC3.height))
						{
							num595 = num596;
							num594 = num597;
						}
					}
					this.ai[0] = num595 + 1;
					if (this.ai[0] == 0f)
					{
						this.ai[0] = -15f;
					}
					if (this.ai[0] > 0f)
					{
						float num598 = (float)Main.rand.Next(35, 75) / 30f;
						velocity = (velocity * 20f + Vector2.Normalize(Main.npc[(int)this.ai[0] - 1].Center - base.Center + new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101))) * num598) / 21f;
						netUpdate = true;
					}
				}
				else if (this.ai[0] > 0f)
				{
					Vector2 vector55 = Vector2.Normalize(Main.npc[(int)this.ai[0] - 1].Center - base.Center);
					velocity = (velocity * 40f + vector55 * 12f) / 41f;
				}
				else
				{
					this.ai[0]++;
					alpha -= 25;
					if (alpha < 50)
					{
						alpha = 50;
					}
					velocity *= 0.95f;
				}
				if (this.ai[1] == 0f)
				{
					this.ai[1] = (float)Main.rand.Next(80, 121) / 100f;
					netUpdate = true;
				}
				scale = this.ai[1];
			}
			else if (aiStyle == 71)
			{
				localAI[1]++;
				if (localAI[1] > 10f && Main.rand.Next(3) == 0)
				{
					int num599 = 6;
					for (int num600 = 0; num600 < num599; num600++)
					{
						Vector2 spinningpoint4 = Vector2.Normalize(velocity) * new Vector2(width, height) / 2f;
						spinningpoint4 = spinningpoint4.RotatedBy((double)(num600 - (num599 / 2 - 1)) * Math.PI / (double)num599) + base.Center;
						Vector2 vector56 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - (float)Math.PI / 2f).ToRotationVector2() * Main.rand.Next(3, 8);
						int num601 = Dust.NewDust(spinningpoint4 + vector56, 0, 0, 217, vector56.X * 2f, vector56.Y * 2f, 100, default(Color), 1.4f);
						Main.dust[num601].noGravity = true;
						Main.dust[num601].noLight = true;
						Dust dust2 = Main.dust[num601];
						dust2.velocity /= 4f;
						dust2 = Main.dust[num601];
						dust2.velocity -= velocity;
					}
					alpha -= 5;
					if (alpha < 50)
					{
						alpha = 50;
					}
					rotation += velocity.X * 0.1f;
					frame = (int)(localAI[1] / 3f) % 3;
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.1f, 0.4f, 0.6f);
				}
				int num602 = -1;
				Vector2 vector57 = base.Center;
				float num603 = 500f;
				if (localAI[0] > 0f)
				{
					localAI[0]--;
				}
				if (this.ai[0] == 0f && localAI[0] == 0f)
				{
					for (int num604 = 0; num604 < 200; num604++)
					{
						NPC nPC4 = Main.npc[num604];
						if (nPC4.CanBeChasedBy(this) && (this.ai[0] == 0f || this.ai[0] == (float)(num604 + 1)))
						{
							Vector2 center6 = nPC4.Center;
							float num605 = Vector2.Distance(center6, vector57);
							if (num605 < num603 && Collision.CanHit(base.position, width, height, nPC4.position, nPC4.width, nPC4.height))
							{
								num603 = num605;
								vector57 = center6;
								num602 = num604;
							}
						}
					}
					if (num602 >= 0)
					{
						this.ai[0] = num602 + 1;
						netUpdate = true;
					}
					num602 = -1;
				}
				if (localAI[0] == 0f && this.ai[0] == 0f)
				{
					localAI[0] = 30f;
				}
				bool flag28 = false;
				if (this.ai[0] != 0f)
				{
					int num606 = (int)(this.ai[0] - 1f);
					if (Main.npc[num606].active && !Main.npc[num606].dontTakeDamage && Main.npc[num606].immune[owner] == 0)
					{
						float num607 = Main.npc[num606].position.X + (float)(Main.npc[num606].width / 2);
						float num608 = Main.npc[num606].position.Y + (float)(Main.npc[num606].height / 2);
						float num609 = Math.Abs(base.position.X + (float)(width / 2) - num607) + Math.Abs(base.position.Y + (float)(height / 2) - num608);
						if (num609 < 1000f)
						{
							flag28 = true;
							vector57 = Main.npc[num606].Center;
						}
					}
					else
					{
						this.ai[0] = 0f;
						flag28 = false;
						netUpdate = true;
					}
				}
				if (flag28)
				{
					Vector2 v2 = vector57 - base.Center;
					float num610 = velocity.ToRotation();
					float num611 = v2.ToRotation();
					double num612 = num611 - num610;
					if (num612 > Math.PI)
					{
						num612 -= Math.PI * 2.0;
					}
					if (num612 < -Math.PI)
					{
						num612 += Math.PI * 2.0;
					}
					velocity = velocity.RotatedBy(num612 * 0.10000000149011612);
				}
				float num613 = velocity.Length();
				velocity.Normalize();
				velocity *= num613 + 0.0025f;
			}
			else if (aiStyle == 72)
			{
				localAI[0]++;
				if (localAI[0] > 5f)
				{
					alpha -= 25;
					if (alpha < 50)
					{
						alpha = 50;
					}
				}
				velocity *= 0.96f;
				if (this.ai[1] == 0f)
				{
					this.ai[1] = (float)Main.rand.Next(60, 121) / 100f;
					netUpdate = true;
				}
				scale = this.ai[1];
				base.position = base.Center;
				int num614 = 14;
				int num615 = 14;
				width = (int)((float)num614 * this.ai[1]);
				height = (int)((float)num615 * this.ai[1]);
				base.position -= new Vector2(width / 2, height / 2);
			}
			else if (aiStyle == 73)
			{
				int num616 = (int)this.ai[0];
				int num617 = (int)this.ai[1];
				Tile tile = Main.tile[num616, num617];
				if (tile == null || !tile.active() || tile.type != 338)
				{
					Kill();
					return;
				}
				float num618 = 2f;
				float num619 = (float)timeLeft / 60f;
				if (num619 < 1f)
				{
					num618 *= num619;
				}
				if (type == 419)
				{
					for (int num620 = 0; num620 < 2; num620++)
					{
						Vector2 spinningpoint5 = new Vector2(0f, 0f - num618);
						spinningpoint5 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
						spinningpoint5 = spinningpoint5.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
						int num621 = Dust.NewDust(base.position, width, height, 222, 0f, 0f, 100);
						Dust dust12 = Main.dust[num621];
						dust12.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
						Dust dust2 = dust12;
						dust2.velocity *= 0.5f;
						if (dust12.velocity.Y > 0f)
						{
							dust12.velocity.Y *= -1f;
						}
						dust2 = dust12;
						dust2.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
						dust2 = dust12;
						dust2.velocity += spinningpoint5;
						dust12.scale = 0.6f;
						dust12.fadeIn = dust12.scale + 0.2f;
						dust12.velocity.Y *= 2f;
					}
				}
				if (type == 420)
				{
					for (int num622 = 0; num622 < 2; num622++)
					{
						Vector2 spinningpoint6 = new Vector2(0f, 0f - num618);
						spinningpoint6 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
						spinningpoint6 = spinningpoint6.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
						int num623 = 219;
						if (Main.rand.Next(5) == 0)
						{
							num623 = 222;
						}
						int num624 = Dust.NewDust(base.position, width, height, num623, 0f, 0f, 100);
						Dust dust13 = Main.dust[num624];
						dust13.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
						Dust dust2 = dust13;
						dust2.velocity *= 0.5f;
						if (dust13.velocity.Y > 0f)
						{
							dust13.velocity.Y *= -1f;
						}
						dust2 = dust13;
						dust2.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
						dust2 = dust13;
						dust2.velocity += spinningpoint6;
						dust13.velocity.X *= 0.5f;
						dust13.scale = 0.6f;
						dust13.fadeIn = dust13.scale + 0.2f;
						dust13.velocity.Y *= 2f;
					}
				}
				if (type == 421)
				{
					for (int num625 = 0; num625 < 2; num625++)
					{
						Vector2 spinningpoint7 = new Vector2(0f, 0f - num618);
						spinningpoint7 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
						spinningpoint7 = spinningpoint7.RotatedBy((Main.rand.NextDouble() - 0.5) * 0.78539818525314331);
						int num626 = Dust.NewDust(base.position, width, height, 221, 0f, 0f, 100);
						Dust dust14 = Main.dust[num626];
						dust14.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
						Dust dust2 = dust14;
						dust2.velocity *= 0.1f;
						if (dust14.velocity.Y > 0f)
						{
							dust14.velocity.Y *= -1f;
						}
						dust2 = dust14;
						dust2.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
						dust2 = dust14;
						dust2.velocity += spinningpoint7;
						dust14.scale = 0.6f;
						dust14.fadeIn = dust14.scale + 0.2f;
						dust14.velocity.Y *= 2.5f;
					}
					if (timeLeft % 10 == 0)
					{
						float num627 = 0.85f + (float)Main.rand.NextDouble() * 0.2f;
						for (int num628 = 0; num628 < 9; num628++)
						{
							Vector2 vector58 = new Vector2((float)(num628 - 4) / 5f, (0f - num618) * num627);
							int num629 = Dust.NewDust(base.position, width, height, 222, 0f, 0f, 100);
							Dust dust15 = Main.dust[num629];
							dust15.scale = 0.7f + (float)Main.rand.NextDouble() * 0.3f;
							Dust dust2 = dust15;
							dust2.velocity *= 0f;
							if (dust15.velocity.Y > 0f)
							{
								dust15.velocity.Y *= -1f;
							}
							dust2 = dust15;
							dust2.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
							dust2 = dust15;
							dust2.velocity += vector58;
							dust15.scale = 0.6f;
							dust15.fadeIn = dust15.scale + 0.2f;
							dust15.velocity.Y *= 2f;
						}
					}
				}
				if (type != 422)
				{
					return;
				}
				for (int num630 = 0; num630 < 2; num630++)
				{
					Vector2 spinningpoint8 = new Vector2(0f, 0f - num618);
					spinningpoint8 *= 0.85f + (float)Main.rand.NextDouble() * 0.2f;
					spinningpoint8 = spinningpoint8.RotatedBy((Main.rand.NextDouble() - 0.5) * 1.5707963705062866);
					int num631 = Dust.NewDust(base.position, width, height, 219 + Main.rand.Next(5), 0f, 0f, 100);
					Dust dust16 = Main.dust[num631];
					dust16.scale = 1f + (float)Main.rand.NextDouble() * 0.3f;
					Dust dust2 = dust16;
					dust2.velocity *= 0.5f;
					if (dust16.velocity.Y > 0f)
					{
						dust16.velocity.Y *= -1f;
					}
					dust2 = dust16;
					dust2.position -= new Vector2(2 + Main.rand.Next(-2, 3), 0f);
					dust2 = dust16;
					dust2.velocity += spinningpoint8;
					dust16.scale = 0.6f;
					dust16.fadeIn = dust16.scale + 0.2f;
					dust16.velocity.Y *= 2f;
				}
			}
			else if (aiStyle == 74)
			{
				if (extraUpdates == 1)
				{
					localAI[0] *= localAI[1];
					localAI[1] -= 0.001f;
					if ((double)localAI[0] < 0.01)
					{
						Kill();
					}
				}
			}
			else if (aiStyle == 75)
			{
				AI_075();
			}
			else if (aiStyle == 76)
			{
				Player player5 = Main.player[owner];
				player5.heldProj = whoAmI;
				if (type == 441)
				{
					if (player5.mount.Type != 9)
					{
						Kill();
						return;
					}
				}
				else if (type == 453 && player5.mount.Type != 8)
				{
					Kill();
					return;
				}
				if (Main.myPlayer == owner)
				{
					base.position.X = Main.screenPosition.X + (float)Main.mouseX;
					base.position.Y = Main.screenPosition.Y + (float)Main.mouseY;
					if (this.ai[0] != base.position.X - player5.position.X || this.ai[1] != base.position.Y - player5.position.Y)
					{
						netUpdate = true;
					}
					this.ai[0] = base.position.X - player5.position.X;
					this.ai[1] = base.position.Y - player5.position.Y;
					player5.mount.AimAbility(player5, base.position);
					if (!player5.channel)
					{
						player5.mount.UseAbility(player5, base.position, toggleOn: false);
						Kill();
					}
					return;
				}
				base.position.X = player5.position.X + this.ai[0];
				base.position.Y = player5.position.Y + this.ai[1];
				if (type == 441)
				{
					if (!player5.mount.AbilityCharging)
					{
						player5.mount.StartAbilityCharge(player5);
					}
				}
				else if (type == 453 && !player5.mount.AbilityActive)
				{
					player5.mount.UseAbility(player5, base.position, toggleOn: false);
				}
				player5.mount.AimAbility(player5, base.position);
			}
			else if (aiStyle == 77)
			{
				ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]));
				SlotId invalid;
				if (activeSound != null)
				{
					if (activeSound.Volume == 0f)
					{
						activeSound.Stop();
						float[] array3 = localAI;
						invalid = SlotId.Invalid;
						array3[0] = ((SlotId)(invalid)).ToFloat();
					}
					activeSound.Volume = Math.Max(0f, activeSound.Volume - 0.05f);
				}
				else
				{
					float[] array4 = localAI;
					invalid = SlotId.Invalid;
					array4[0] = ((SlotId)(invalid)).ToFloat();
				}
				if (this.ai[1] == 1f)
				{
					friendly = false;
					if (alpha < 255)
					{
						alpha += 51;
					}
					if (alpha >= 255)
					{
						alpha = 255;
						Kill();
						return;
					}
				}
				else
				{
					if (alpha > 0)
					{
						alpha -= 50;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				float num632 = 30f;
				float num633 = num632 * 4f;
				this.ai[0]++;
				if (this.ai[0] > num633)
				{
					this.ai[0] = 0f;
				}
				Vector2 vector59 = -Vector2.UnitY.RotatedBy((float)Math.PI * 2f * this.ai[0] / num632);
				float val = 0.75f + vector59.Y * 0.25f;
				float val2 = 0.8f - vector59.Y * 0.2f;
				float num634 = Math.Max(val, val2);
				base.position += new Vector2(width, height) / 2f;
				width = (height = (int)(80f * num634));
				base.position -= new Vector2(width, height) / 2f;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frameCounter = 0;
					frame++;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				for (int num635 = 0; num635 < 1; num635++)
				{
					float num636 = 55f * num634;
					float num637 = 11f * num634;
					float num638 = 0.5f;
					int num639 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num639].noGravity = true;
					Dust dust2 = Main.dust[num639];
					dust2.velocity *= 2f;
					Main.dust[num639].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (num637 + num638 * (float)Main.rand.NextDouble() * num636) + base.Center;
					Main.dust[num639].velocity = Main.dust[num639].velocity / 2f + Vector2.Normalize(Main.dust[num639].position - base.Center);
					if (Main.rand.Next(2) == 0)
					{
						num639 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.9f);
						Main.dust[num639].noGravity = true;
						dust2 = Main.dust[num639];
						dust2.velocity *= 1.2f;
						Main.dust[num639].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (num637 + num638 * (float)Main.rand.NextDouble() * num636) + base.Center;
						Main.dust[num639].velocity = Main.dust[num639].velocity / 2f + Vector2.Normalize(Main.dust[num639].position - base.Center);
					}
					if (Main.rand.Next(4) == 0)
					{
						num639 = Dust.NewDust(base.position, width, height, 226, 0f, 0f, 100, default(Color), 0.7f);
						Main.dust[num639].noGravity = true;
						dust2 = Main.dust[num639];
						dust2.velocity *= 1.2f;
						Main.dust[num639].position = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (num637 + num638 * (float)Main.rand.NextDouble() * num636) + base.Center;
						Main.dust[num639].velocity = Main.dust[num639].velocity / 2f + Vector2.Normalize(Main.dust[num639].position - base.Center);
					}
				}
			}
			else if (aiStyle == 78)
			{
				if (alpha > 0)
				{
					alpha -= 30;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				Vector2 v3 = this.ai[0].ToRotationVector2();
				float num640 = velocity.ToRotation();
				float num641 = v3.ToRotation();
				double num642 = num641 - num640;
				if (num642 > Math.PI)
				{
					num642 -= Math.PI * 2.0;
				}
				if (num642 < -Math.PI)
				{
					num642 += Math.PI * 2.0;
				}
				velocity = velocity.RotatedBy(num642 * 0.05000000074505806);
				velocity *= 0.96f;
				rotation = velocity.ToRotation() - (float)Math.PI / 2f;
				if (Main.myPlayer == owner && timeLeft > 60)
				{
					timeLeft = 60;
				}
			}
			else if (aiStyle == 79)
			{
				bool flag29 = true;
				int num643 = (int)this.ai[0] - 1;
				if (type == 447 && (this.ai[0] == 0f || ((!Main.npc[num643].active || Main.npc[num643].type != 392) && (!Main.npc[num643].active || Main.npc[num643].type != 395 || !(Main.npc[num643].ai[3] % 120f >= 60f) || Main.npc[num643].ai[0] != 2f))))
				{
					flag29 = false;
				}
				if (!flag29)
				{
					Kill();
					return;
				}
				NPC nPC5 = Main.npc[num643];
				float num644 = nPC5.Center.Y + 46f;
				float num645 = num644;
				if (type == 447)
				{
					int target = nPC5.target;
					if (nPC5.type == 392)
					{
						target = Main.npc[(int)nPC5.ai[0]].target;
					}
					Player player6 = Main.player[target];
					if (player6 != null && player6.active && !player6.dead)
					{
						num645 = player6.Bottom.Y;
					}
				}
				num645 /= 16f;
				int num646 = (int)nPC5.Center.X / 16;
				int num647 = (int)num644 / 16;
				int num648 = 0;
				if ((float)num647 >= num645 && Main.tile[num646, num647].nactive() && Main.tileSolid[Main.tile[num646, num647].type] && !Main.tileSolidTop[Main.tile[num646, num647].type])
				{
					num648 = 1;
				}
				else
				{
					for (; num648 < 150 && num647 + num648 < Main.maxTilesY; num648++)
					{
						int num649 = num647 + num648;
						if ((float)num649 >= num645 && Main.tile[num646, num649].nactive() && Main.tileSolid[Main.tile[num646, num649].type] && !Main.tileSolidTop[Main.tile[num646, num649].type])
						{
							num648--;
							break;
						}
					}
				}
				base.position.X = nPC5.Center.X - (float)(width / 2);
				base.position.Y = num644;
				height = (num648 + 1) * 16;
				int num650 = (int)base.position.Y + height;
				if (Main.tile[num646, num650 / 16].nactive() && Main.tileSolid[Main.tile[num646, num650 / 16].type] && !Main.tileSolidTop[Main.tile[num646, num650 / 16].type])
				{
					int num651 = num650 % 16;
					height -= num651 - 2;
				}
				if (type == 447)
				{
					for (int num652 = 0; num652 < 2; num652++)
					{
						int num653 = Dust.NewDust(new Vector2(base.position.X, base.position.Y + (float)height - 16f), width, 16, 228);
						Main.dust[num653].noGravity = true;
						Dust dust2 = Main.dust[num653];
						dust2.velocity *= 0.5f;
						Main.dust[num653].velocity.X -= (float)num652 - nPC5.velocity.X * 2f / 3f;
						Main.dust[num653].scale = 2.8f;
					}
					if (Main.rand.Next(5) == 0)
					{
						int num654 = Dust.NewDust(new Vector2(base.position.X + (float)(width / 2) - (float)(width / 2 * Math.Sign(nPC5.velocity.X)) - 4f, base.position.Y + (float)height - 16f), 4, 16, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust2 = Main.dust[num654];
						dust2.velocity *= 0.5f;
						Main.dust[num654].velocity.X -= nPC5.velocity.X / 2f;
						Main.dust[num654].velocity.Y = 0f - Math.Abs(Main.dust[num654].velocity.Y);
					}
				}
				if (type == 447 && ++frameCounter >= 5)
				{
					frameCounter = 0;
					if (++frame >= 4)
					{
						frame = 0;
					}
				}
			}
			else if (aiStyle == 80)
			{
				if (this.ai[0] == 0f && this.ai[1] > 0f)
				{
					this.ai[1]--;
				}
				else if (this.ai[0] == 0f && this.ai[1] == 0f)
				{
					this.ai[0] = 1f;
					this.ai[1] = (int)Player.FindClosest(base.position, width, height);
					netUpdate = true;
					float num655 = velocity.Length();
					velocity = Vector2.Normalize(velocity) * (num655 + 4f);
					for (int num656 = 0; num656 < 8; num656++)
					{
						Vector2 spinningpoint9 = Vector2.UnitX * -8f;
						spinningpoint9 += -Vector2.UnitY.RotatedBy((float)num656 * (float)Math.PI / 4f) * new Vector2(2f, 8f);
						spinningpoint9 = spinningpoint9.RotatedBy(rotation - (float)Math.PI / 2f);
						int num657 = Dust.NewDust(base.Center, 0, 0, 228);
						Main.dust[num657].scale = 1.5f;
						Main.dust[num657].noGravity = true;
						Main.dust[num657].position = base.Center + spinningpoint9;
						Main.dust[num657].velocity = velocity * 0f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					tileCollide = true;
					localAI[1]++;
					float num658 = 180f;
					float num659 = 0f;
					float num660 = 30f;
					if (localAI[1] == num658)
					{
						Kill();
						return;
					}
					if (localAI[1] >= num659 && localAI[1] < num659 + num660)
					{
						Vector2 v4 = Main.player[(int)this.ai[1]].Center - base.Center;
						float num661 = velocity.ToRotation();
						float num662 = v4.ToRotation();
						double num663 = num662 - num661;
						if (num663 > Math.PI)
						{
							num663 -= Math.PI * 2.0;
						}
						if (num663 < -Math.PI)
						{
							num663 += Math.PI * 2.0;
						}
						velocity = velocity.RotatedBy(num663 * 0.20000000298023224);
					}
					if (localAI[1] % 5f == 0f)
					{
						for (int num664 = 0; num664 < 4; num664++)
						{
							Vector2 spinningpoint10 = Vector2.UnitX * -8f;
							spinningpoint10 += -Vector2.UnitY.RotatedBy((float)num664 * (float)Math.PI / 4f) * new Vector2(2f, 4f);
							spinningpoint10 = spinningpoint10.RotatedBy(rotation - (float)Math.PI / 2f);
							int num665 = Dust.NewDust(base.Center, 0, 0, 228);
							Main.dust[num665].scale = 1.5f;
							Main.dust[num665].noGravity = true;
							Main.dust[num665].position = base.Center + spinningpoint10;
							Main.dust[num665].velocity = velocity * 0f;
						}
					}
				}
				rotation = velocity.ToRotation() + (float)Math.PI / 2f;
				if (++frameCounter >= 3)
				{
					frameCounter = 0;
					if (++frame >= 3)
					{
						frame = 0;
					}
				}
				for (int num666 = 0; (float)num666 < 1f + this.ai[0]; num666++)
				{
					Vector2 vector60 = Vector2.UnitY.RotatedBy(rotation) * 8f * (num666 + 1);
					int num667 = Dust.NewDust(base.Center, 0, 0, 228);
					Main.dust[num667].position = base.Center + vector60;
					Main.dust[num667].scale = 1f;
					Main.dust[num667].noGravity = true;
				}
				for (int num668 = 0; num668 < 255; num668++)
				{
					Player player7 = Main.player[num668];
					if (player7.active && !player7.dead && Vector2.Distance(player7.Center, base.Center) <= 42f)
					{
						Kill();
						break;
					}
				}
			}
			else if (aiStyle == 81)
			{
				int num669 = penetrate;
				if (this.ai[0] == 0f)
				{
					tileCollide = true;
					localAI[0]++;
					if (localAI[0] > 7f)
					{
						int num670 = Utils.SelectRandom<int>(Main.rand, 226, 229);
						Vector2 center7 = base.Center;
						Vector2 spinningpoint11 = new Vector2(-16f, 16f);
						float num671 = 1f;
						spinningpoint11 += new Vector2(-16f, 16f);
						spinningpoint11 = spinningpoint11.RotatedBy(rotation);
						int num672 = 4;
						int num673 = Dust.NewDust(center7 + spinningpoint11 + Vector2.One * -num672, num672 * 2, num672 * 2, num670, 0f, 0f, 100, default(Color), num671);
						Dust dust2 = Main.dust[num673];
						dust2.velocity *= 0.1f;
						if (Main.rand.Next(6) != 0)
						{
							Main.dust[num673].noGravity = true;
						}
					}
					float num674 = 0.01f;
					int num675 = 5;
					int num676 = num675 * 15;
					int num677 = 0;
					if (localAI[0] > 7f)
					{
						if (localAI[1] == 0f)
						{
							scale -= num674;
							alpha += num675;
							if (alpha > num676)
							{
								alpha = num676;
								localAI[1] = 1f;
							}
						}
						else if (localAI[1] == 1f)
						{
							scale += num674;
							alpha -= num675;
							if (alpha <= num677)
							{
								alpha = num677;
								localAI[1] = 0f;
							}
						}
					}
					rotation = velocity.ToRotation() + (float)Math.PI / 4f;
				}
				else if (this.ai[0] >= 1f && this.ai[0] < (float)(1 + num669))
				{
					tileCollide = false;
					alpha += 15;
					velocity *= 0.98f;
					localAI[0] = 0f;
					if (alpha >= 255)
					{
						if (this.ai[0] == 1f)
						{
							Kill();
							return;
						}
						int num678 = -1;
						Vector2 vector61 = base.Center;
						float num679 = 250f;
						for (int num680 = 0; num680 < 200; num680++)
						{
							NPC nPC6 = Main.npc[num680];
							if (nPC6.CanBeChasedBy(this))
							{
								Vector2 center8 = nPC6.Center;
								float num681 = Vector2.Distance(center8, base.Center);
								if (num681 < num679)
								{
									num679 = num681;
									vector61 = center8;
									num678 = num680;
								}
							}
						}
						if (num678 >= 0)
						{
							netUpdate = true;
							this.ai[0] += num669;
							base.position = vector61 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * 100f - new Vector2(width, height) / 2f;
							velocity = Vector2.Normalize(vector61 - base.Center) * 15f;
							rotation = velocity.ToRotation() + (float)Math.PI / 4f;
						}
						else
						{
							Kill();
						}
					}
					if (Main.rand.Next(3) == 0)
					{
						int num682 = Utils.SelectRandom<int>(Main.rand, 226, 229);
						Vector2 center9 = base.Center;
						Vector2 vector62 = new Vector2(-16f, 16f);
						vector62 = vector62;
						float num683 = 0.6f;
						vector62 += new Vector2(-16f, 16f);
						vector62 = vector62.RotatedBy(rotation);
						int num684 = 4;
						int num685 = Dust.NewDust(center9 + vector62 + Vector2.One * -num684, num684 * 2, num684 * 2, num682, 0f, 0f, 100, default(Color), num683);
						Dust dust2 = Main.dust[num685];
						dust2.velocity *= 0.1f;
						Main.dust[num685].noGravity = true;
					}
				}
				else if (this.ai[0] >= (float)(1 + num669) && this.ai[0] < (float)(1 + num669 * 2))
				{
					scale = 0.9f;
					tileCollide = false;
					rotation = velocity.ToRotation() + (float)Math.PI / 4f;
					this.ai[1]++;
					if (this.ai[1] >= 15f)
					{
						alpha += 51;
						velocity *= 0.8f;
						if (alpha >= 255)
						{
							Kill();
						}
					}
					else
					{
						alpha -= 125;
						if (alpha < 0)
						{
							alpha = 0;
						}
						velocity *= 0.98f;
					}
					localAI[0]++;
					int num686 = Utils.SelectRandom<int>(Main.rand, 226, 229);
					Vector2 center10 = base.Center;
					Vector2 spinningpoint12 = new Vector2(-16f, 16f);
					float num687 = 0.6f;
					spinningpoint12 += new Vector2(-16f, 16f);
					spinningpoint12 = spinningpoint12.RotatedBy(rotation);
					int num688 = 4;
					int num689 = Dust.NewDust(center10 + spinningpoint12 + Vector2.One * -num688, num688 * 2, num688 * 2, num686, 0f, 0f, 100, default(Color), num687);
					Dust dust2 = Main.dust[num689];
					dust2.velocity *= 0.1f;
					Main.dust[num689].noGravity = true;
				}
				float num690 = (float)alpha / 255f;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f * num690, 0.4f * num690, 1f * num690);
			}
			else if (aiStyle == 82)
			{
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (this.ai[0] == 0f)
				{
					localAI[0]++;
					if (localAI[0] >= 45f)
					{
						localAI[0] = 0f;
						this.ai[0] = 1f;
						this.ai[1] = 0f - this.ai[1];
						netUpdate = true;
					}
					velocity.X = velocity.RotatedBy(this.ai[1]).X;
					velocity.X = MathHelper.Clamp(velocity.X, -6f, 6f);
					velocity.Y -= 0.08f;
					if (velocity.Y > 0f)
					{
						velocity.Y -= 0.2f;
					}
					if (velocity.Y < -7f)
					{
						velocity.Y = -7f;
					}
				}
				else if (this.ai[0] == 1f)
				{
					localAI[0]++;
					if (localAI[0] >= 90f)
					{
						localAI[0] = 0f;
						this.ai[0] = 2f;
						this.ai[1] = (int)Player.FindClosest(base.position, width, height);
						netUpdate = true;
					}
					velocity.X = velocity.RotatedBy(this.ai[1]).X;
					velocity.X = MathHelper.Clamp(velocity.X, -6f, 6f);
					velocity.Y -= 0.08f;
					if (velocity.Y > 0f)
					{
						velocity.Y -= 0.2f;
					}
					if (velocity.Y < -7f)
					{
						velocity.Y = -7f;
					}
				}
				else if (this.ai[0] == 2f)
				{
					Vector2 value6 = Main.player[(int)this.ai[1]].Center - base.Center;
					if (value6.Length() < 30f)
					{
						Kill();
						return;
					}
					value6.Normalize();
					value6 *= 14f;
					value6 = Vector2.Lerp(velocity, value6, 0.6f);
					if (value6.Y < 6f)
					{
						value6.Y = 6f;
					}
					float num691 = 0.4f;
					if (velocity.X < value6.X)
					{
						velocity.X += num691;
						if (velocity.X < 0f && value6.X > 0f)
						{
							velocity.X += num691;
						}
					}
					else if (velocity.X > value6.X)
					{
						velocity.X -= num691;
						if (velocity.X > 0f && value6.X < 0f)
						{
							velocity.X -= num691;
						}
					}
					if (velocity.Y < value6.Y)
					{
						velocity.Y += num691;
						if (velocity.Y < 0f && value6.Y > 0f)
						{
							velocity.Y += num691;
						}
					}
					else if (velocity.Y > value6.Y)
					{
						velocity.Y -= num691;
						if (velocity.Y > 0f && value6.Y < 0f)
						{
							velocity.Y -= num691;
						}
					}
				}
				if (alpha < 40)
				{
					int num692 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229, (0f - velocity.X) / 3f, (0f - velocity.Y) / 3f, 150, Color.Transparent, 1.2f);
					Main.dust[num692].noGravity = true;
				}
				rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			}
			else if (aiStyle == 83)
			{
				if (alpha > 200)
				{
					alpha = 200;
				}
				alpha -= 5;
				if (alpha < 0)
				{
					alpha = 0;
				}
				float num693 = (float)alpha / 255f;
				scale = 1f - num693;
				if (this.ai[0] >= 0f)
				{
					this.ai[0]++;
				}
				if (this.ai[0] == -1f)
				{
					frame = 1;
					extraUpdates = 1;
				}
				else if (this.ai[0] < 30f)
				{
					base.position = Main.npc[(int)this.ai[1]].Center - new Vector2(width, height) / 2f - velocity;
				}
				else
				{
					velocity *= 0.96f;
					if (++frameCounter >= 6)
					{
						frameCounter = 0;
						if (++frame >= 2)
						{
							frame = 0;
						}
					}
				}
				if (alpha >= 40)
				{
					return;
				}
				for (int num694 = 0; num694 < 2; num694++)
				{
					float num695 = (float)Main.rand.NextDouble() * 1f - 0.5f;
					if (num695 < -0.5f)
					{
						num695 = -0.5f;
					}
					if (num695 > 0.5f)
					{
						num695 = 0.5f;
					}
					Vector2 vector63 = new Vector2((float)(-width) * 0.65f * scale, 0f).RotatedBy(num695 * ((float)Math.PI * 2f)).RotatedBy(velocity.ToRotation());
					int num696 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 229, (0f - velocity.X) / 3f, (0f - velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
					Main.dust[num696].velocity = Vector2.Zero;
					Main.dust[num696].position = base.Center + vector63;
					Main.dust[num696].noGravity = true;
				}
			}
			else if (aiStyle == 84)
			{
				Vector2? vector64 = null;
				if (velocity.HasNaNs() || velocity == Vector2.Zero)
				{
					velocity = -Vector2.UnitY;
				}
				if (type == 455 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 396)
				{
					if (Main.npc[(int)this.ai[1]].ai[0] == -2f)
					{
						Kill();
						return;
					}
					Vector2 vector65 = Utils.Vector2FromElipse(elipseSizes: new Vector2(27f, 59f) * Main.npc[(int)this.ai[1]].localAI[1], angleVector: Main.npc[(int)this.ai[1]].localAI[0].ToRotationVector2());
					base.position = Main.npc[(int)this.ai[1]].Center + vector65 - new Vector2(width, height) / 2f;
				}
				else if (type == 455 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 400)
				{
					Vector2 vector66 = Utils.Vector2FromElipse(elipseSizes: new Vector2(30f, 30f) * Main.npc[(int)this.ai[1]].localAI[1], angleVector: Main.npc[(int)this.ai[1]].localAI[0].ToRotationVector2());
					base.position = Main.npc[(int)this.ai[1]].Center + vector66 - new Vector2(width, height) / 2f;
				}
				else if (type == 537 && Main.npc[(int)this.ai[1]].active && Main.npc[(int)this.ai[1]].type == 411)
				{
					Vector2 vector67 = new Vector2(Main.npc[(int)this.ai[1]].direction * 6, -4f);
					base.position = Main.npc[(int)this.ai[1]].Center + vector67 - base.Size / 2f + new Vector2(0f, 0f - Main.npc[(int)this.ai[1]].gfxOffY);
				}
				else if (type == 461 && Main.projectile[(int)this.ai[1]].active && Main.projectile[(int)this.ai[1]].type == 460)
				{
					Vector2 vector68 = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
					base.position = Main.projectile[(int)this.ai[1]].Center + vector68 * 16f - new Vector2(width, height) / 2f + new Vector2(0f, 0f - Main.projectile[(int)this.ai[1]].gfxOffY);
					velocity = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
				}
				else if (type == 642 && Main.projectile[(int)this.ai[1]].active && Main.projectile[(int)this.ai[1]].type == 641)
				{
					base.Center = Main.projectile[(int)this.ai[1]].Center;
					velocity = Vector2.Normalize(Main.projectile[(int)this.ai[1]].ai[1].ToRotationVector2());
				}
				else
				{
					if (type != 632 || !Main.projectile[(int)this.ai[1]].active || Main.projectile[(int)this.ai[1]].type != 633)
					{
						Kill();
						return;
					}
					float num697 = (float)(int)this.ai[0] - 2.5f;
					Vector2 vector69 = Vector2.Normalize(Main.projectile[(int)this.ai[1]].velocity);
					Projectile projectile = Main.projectile[(int)this.ai[1]];
					float num698 = num697 * ((float)Math.PI / 6f);
					float num699 = 20f;
					Vector2 zero = Vector2.Zero;
					float num700 = 1f;
					float num701 = 15f;
					float num702 = -2f;
					if (projectile.ai[0] < 180f)
					{
						num700 = 1f - projectile.ai[0] / 180f;
						num701 = 20f - projectile.ai[0] / 180f * 14f;
						if (projectile.ai[0] < 120f)
						{
							num699 = 20f - 4f * (projectile.ai[0] / 120f);
							Opacity = projectile.ai[0] / 120f * 0.4f;
						}
						else
						{
							num699 = 16f - 10f * ((projectile.ai[0] - 120f) / 60f);
							Opacity = 0.4f + (projectile.ai[0] - 120f) / 60f * 0.6f;
						}
						num702 = -22f + projectile.ai[0] / 180f * 20f;
					}
					else
					{
						num700 = 0f;
						num699 = 1.75f;
						num701 = 6f;
						Opacity = 1f;
						num702 = -2f;
					}
					float num703 = (projectile.ai[0] + num697 * num699) / (num699 * 6f) * ((float)Math.PI * 2f);
					num698 = Vector2.UnitY.RotatedBy(num703).Y * ((float)Math.PI / 6f) * num700;
					zero = (Vector2.UnitY.RotatedBy(num703) * new Vector2(4f, num701)).RotatedBy(projectile.velocity.ToRotation());
					base.position = projectile.Center + vector69 * 16f - base.Size / 2f + new Vector2(0f, 0f - Main.projectile[(int)this.ai[1]].gfxOffY);
					base.position += projectile.velocity.ToRotation().ToRotationVector2() * num702;
					base.position += zero;
					velocity = Vector2.Normalize(projectile.velocity).RotatedBy(num698);
					scale = 1.4f * (1f - num700);
					damage = projectile.damage;
					if (projectile.ai[0] >= 180f)
					{
						damage *= 3;
						vector64 = projectile.Center;
					}
					if (!Collision.CanHitLine(Main.player[owner].Center, 0, 0, projectile.Center, 0, 0))
					{
						vector64 = Main.player[owner].Center;
					}
					friendly = projectile.ai[0] > 30f;
				}
				if (velocity.HasNaNs() || velocity == Vector2.Zero)
				{
					velocity = -Vector2.UnitY;
				}
				if (type == 461)
				{
					this.ai[0]++;
					if (this.ai[0] >= 300f)
					{
						Kill();
						return;
					}
					scale = (float)Math.Sin(this.ai[0] * (float)Math.PI / 300f) * 10f;
					if (scale > 1f)
					{
						scale = 1f;
					}
				}
				if (type == 455)
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlaySound(29, (int)base.position.X, (int)base.position.Y, 104);
					}
					float num704 = 1f;
					if (Main.npc[(int)this.ai[1]].type == 400)
					{
						num704 = 0.4f;
					}
					localAI[0]++;
					if (localAI[0] >= 180f)
					{
						Kill();
						return;
					}
					scale = (float)Math.Sin(localAI[0] * (float)Math.PI / 180f) * 10f * num704;
					if (scale > num704)
					{
						scale = num704;
					}
				}
				if (type == 642)
				{
					float num705 = 1f;
					localAI[0]++;
					if (localAI[0] >= 50f)
					{
						Kill();
						return;
					}
					scale = (float)Math.Sin(localAI[0] * (float)Math.PI / 50f) * 10f * num705;
					if (scale > num705)
					{
						scale = num705;
					}
				}
				if (type == 537)
				{
					float num706 = 0.8f;
					localAI[0]++;
					if (localAI[0] >= 60f)
					{
						Kill();
						return;
					}
					scale = (float)Math.Sin(localAI[0] * (float)Math.PI / 60f) * 10f * num706;
					if (scale > num706)
					{
						scale = num706;
					}
				}
				float num707 = velocity.ToRotation();
				if (type == 455)
				{
					num707 += this.ai[0];
				}
				rotation = num707 - (float)Math.PI / 2f;
				velocity = num707.ToRotationVector2();
				float num708 = 0f;
				float num709 = 0f;
				Vector2 samplingPoint = base.Center;
				if (vector64.HasValue)
				{
					samplingPoint = vector64.Value;
				}
				if (type == 455)
				{
					num708 = 3f;
					num709 = width;
				}
				else if (type == 461)
				{
					num708 = 2f;
					num709 = 0f;
				}
				else if (type == 642)
				{
					num708 = 2f;
					num709 = 0f;
				}
				else if (type == 632)
				{
					num708 = 2f;
					num709 = 0f;
				}
				else if (type == 537)
				{
					num708 = 2f;
					num709 = 0f;
				}
				float[] array5 = new float[(int)num708];
				Collision.LaserScan(samplingPoint, velocity, num709 * scale, 2400f, array5);
				float num710 = 0f;
				for (int num711 = 0; num711 < array5.Length; num711++)
				{
					num710 += array5[num711];
				}
				num710 /= num708;
				float amount = 0.5f;
				if (type == 455)
				{
					NPC nPC7 = Main.npc[(int)this.ai[1]];
					if (nPC7.type == 396)
					{
						Player player8 = Main.player[nPC7.target];
						if (!Collision.CanHitLine(nPC7.position, nPC7.width, nPC7.height, player8.position, player8.width, player8.height))
						{
							num710 = Math.Min(2400f, Vector2.Distance(nPC7.Center, player8.Center) + 150f);
							amount = 0.75f;
						}
					}
				}
				if (type == 632)
				{
					amount = 0.75f;
				}
				localAI[1] = MathHelper.Lerp(localAI[1], num710, amount);
				if (type == 455)
				{
					Vector2 vector70 = base.Center + velocity * (localAI[1] - 14f);
					for (int num712 = 0; num712 < 2; num712++)
					{
						float num713 = velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num714 = (float)Main.rand.NextDouble() * 2f + 2f;
						Vector2 vector71 = new Vector2((float)Math.Cos(num713) * num714, (float)Math.Sin(num713) * num714);
						int num715 = Dust.NewDust(vector70, 0, 0, 229, vector71.X, vector71.Y);
						Main.dust[num715].noGravity = true;
						Main.dust[num715].scale = 1.7f;
					}
					if (Main.rand.Next(5) == 0)
					{
						Vector2 vector72 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
						int num716 = Dust.NewDust(vector70 + vector72 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust2 = Main.dust[num716];
						dust2.velocity *= 0.5f;
						Main.dust[num716].velocity.Y = 0f - Math.Abs(Main.dust[num716].velocity.Y);
					}
					DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
					Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
				}
				else if (type == 642)
				{
					Vector2 vector73 = base.Center + velocity * (localAI[1] - 14f);
					for (int num717 = 0; num717 < 2; num717++)
					{
						float num718 = velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num719 = (float)Main.rand.NextDouble() * 2f + 2f;
						Vector2 vector74 = new Vector2((float)Math.Cos(num718) * num719, (float)Math.Sin(num718) * num719);
						int num720 = Dust.NewDust(vector73, 0, 0, 229, vector74.X, vector74.Y);
						Main.dust[num720].noGravity = true;
						Main.dust[num720].scale = 1.7f;
					}
					if (Main.rand.Next(5) == 0)
					{
						Vector2 vector75 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
						int num721 = Dust.NewDust(vector73 + vector75 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust2 = Main.dust[num721];
						dust2.velocity *= 0.5f;
						Main.dust[num721].velocity.Y = 0f - Math.Abs(Main.dust[num721].velocity.Y);
					}
					DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
					Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
				}
				if (type == 461)
				{
					Vector2 vector76 = base.Center + velocity * (localAI[1] - 8f);
					for (int num722 = 0; num722 < 2; num722++)
					{
						float num723 = velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num724 = (float)Main.rand.NextDouble() * 0.8f + 1f;
						Vector2 vector77 = new Vector2((float)Math.Cos(num723) * num724, (float)Math.Sin(num723) * num724);
						int num725 = Dust.NewDust(vector76, 0, 0, 226, vector77.X, vector77.Y);
						Main.dust[num725].noGravity = true;
						Main.dust[num725].scale = 1.2f;
					}
					if (Main.rand.Next(5) == 0)
					{
						Vector2 vector78 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
						int num726 = Dust.NewDust(vector76 + vector78 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust2 = Main.dust[num726];
						dust2.velocity *= 0.5f;
						Main.dust[num726].velocity.Y = 0f - Math.Abs(Main.dust[num726].velocity.Y);
					}
					DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
					Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
				}
				if (type == 537)
				{
					Vector2 vector79 = base.Center + velocity * (localAI[1] - 8f);
					for (int num727 = 0; num727 < 2; num727++)
					{
						float num728 = velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
						float num729 = (float)Main.rand.NextDouble() * 0.8f + 1f;
						Vector2 vector80 = new Vector2((float)Math.Cos(num728) * num729, (float)Math.Sin(num728) * num729);
						int num730 = Dust.NewDust(vector79, 0, 0, 226, vector80.X, vector80.Y);
						Main.dust[num730].noGravity = true;
						Main.dust[num730].scale = 1.2f;
					}
					if (Main.rand.Next(5) == 0)
					{
						Vector2 vector81 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
						int num731 = Dust.NewDust(vector79 + vector81 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust2 = Main.dust[num731];
						dust2.velocity *= 0.5f;
						Main.dust[num731].velocity.Y = 0f - Math.Abs(Main.dust[num731].velocity.Y);
					}
					DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
					Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
				}
				if (type != 632 || !(Math.Abs(localAI[1] - num710) < 100f) || !(scale > 0.15f))
				{
					return;
				}
				float laserLuminance = 0.5f;
				float laserAlphaMultiplier = 0f;
				float lastPrismHue = GetLastPrismHue(this.ai[0], ref laserLuminance, ref laserAlphaMultiplier);
				Color color = Main.hslToRgb(lastPrismHue, 1f, laserLuminance);
				color.A = (byte)((float)(int)color.A * laserAlphaMultiplier);
				Color color2 = color;
				Vector2 vector82 = base.Center + velocity * (localAI[1] - 14.5f * scale);
				float x3 = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
				for (int num732 = 0; num732 < 2; num732++)
				{
					float num733 = velocity.ToRotation() + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
					float num734 = (float)Main.rand.NextDouble() * 0.8f + 1f;
					Vector2 vector83 = new Vector2((float)Math.Cos(num733) * num734, (float)Math.Sin(num733) * num734);
					int num735 = Dust.NewDust(vector82, 0, 0, 267, vector83.X, vector83.Y);
					Main.dust[num735].color = color;
					Main.dust[num735].scale = 1.2f;
					if (scale > 1f)
					{
						Dust dust2 = Main.dust[num735];
						dust2.velocity *= scale;
						dust2 = Main.dust[num735];
						dust2.scale *= scale;
					}
					Main.dust[num735].noGravity = true;
					if (scale != 1.4f && num735 != 6000)
					{
						Dust dust17 = Dust.CloneDust(num735);
						dust17.color = Color.White;
						Dust dust2 = dust17;
						dust2.scale /= 2f;
					}
					float hue = (x3 + Main.rand.NextFloat() * 0.4f) % 1f;
					Main.dust[num735].color = Color.Lerp(color, Main.hslToRgb(hue, 1f, 0.75f), scale / 1.4f);
				}
				if (Main.rand.Next(5) == 0)
				{
					Vector2 vector84 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
					int num736 = Dust.NewDust(vector82 + vector84 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust2 = Main.dust[num736];
					dust2.velocity *= 0.5f;
					Main.dust[num736].velocity.Y = 0f - Math.Abs(Main.dust[num736].velocity.Y);
				}
				DelegateMethods.v3_1 = color.ToVector3() * 0.3f;
				float value7 = 0.1f * (float)Math.Sin(Main.GlobalTimeWrappedHourly * 20f);
				Vector2 size = new Vector2(velocity.Length() * localAI[1], (float)width * scale);
				float num737 = velocity.ToRotation();
				if (Main.netMode != 2)
				{
					((WaterShaderData)Filters.Scene["WaterDistortion"].GetShader()).QueueRipple(base.position + new Vector2(size.X * 0.5f, 0f).RotatedBy(num737), new Color(0.5f, 0.1f * (float)Math.Sign(value7) + 0.5f, 0f, 1f) * Math.Abs(value7), size, RippleShape.Square, num737);
				}
				Utils.PlotTileLine(base.Center, base.Center + velocity * localAI[1], (float)width * scale, DelegateMethods.CastLight);
			}
			else if (aiStyle == 85)
			{
				Vector2 vector85 = new Vector2(0f, 216f);
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				int num738 = (int)Math.Abs(this.ai[0]) - 1;
				int num739 = (int)this.ai[1];
				if (!Main.npc[num738].active || Main.npc[num738].type != 396)
				{
					Kill();
					return;
				}
				localAI[0]++;
				if (localAI[0] >= 330f && this.ai[0] > 0f && Main.netMode != 1)
				{
					this.ai[0] *= -1f;
					netUpdate = true;
				}
				if (Main.netMode != 1 && this.ai[0] > 0f && (!Main.player[(int)this.ai[1]].active || Main.player[(int)this.ai[1]].dead))
				{
					this.ai[0] *= -1f;
					netUpdate = true;
				}
				rotation = (Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center - Main.player[(int)this.ai[1]].Center + vector85).ToRotation() + (float)Math.PI / 2f;
				if (this.ai[0] > 0f)
				{
					Vector2 value8 = Main.player[(int)this.ai[1]].Center - base.Center;
					if (value8.X != 0f || value8.Y != 0f)
					{
						velocity = Vector2.Normalize(value8) * Math.Min(16f, value8.Length());
					}
					else
					{
						velocity = Vector2.Zero;
					}
					if (value8.Length() < 20f && localAI[1] == 0f)
					{
						localAI[1] = 1f;
						int timeToAdd = 840;
						if (Main.expertMode)
						{
							timeToAdd = 960;
						}
						if (!Main.player[num739].creativeGodMode)
						{
							Main.player[num739].AddBuff(145, timeToAdd);
						}
					}
				}
				else
				{
					Vector2 value9 = Main.npc[(int)Math.Abs(this.ai[0]) - 1].Center - base.Center + vector85;
					if (value9.X != 0f || value9.Y != 0f)
					{
						velocity = Vector2.Normalize(value9) * Math.Min(16f, value9.Length());
					}
					else
					{
						velocity = Vector2.Zero;
					}
					if (value9.Length() < 20f)
					{
						Kill();
					}
				}
			}
			else if (aiStyle == 86)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item120, base.position);
				}
				this.ai[0]++;
				if (this.ai[1] == 1f)
				{
					if (this.ai[0] >= 130f)
					{
						alpha += 10;
					}
					else
					{
						alpha -= 10;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (alpha > 255)
					{
						alpha = 255;
					}
					if (this.ai[0] >= 150f)
					{
						Kill();
						return;
					}
					if (this.ai[0] % 30f == 0f && Main.netMode != 1)
					{
						Vector2 vector86 = rotation.ToRotationVector2();
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector86.X, vector86.Y, 464, damage, knockBack, owner);
					}
					rotation += (float)Math.PI / 30f;
					Lighting.AddLight(base.Center, 0.3f, 0.75f, 0.9f);
					return;
				}
				base.position -= velocity;
				if (this.ai[0] >= 40f)
				{
					alpha += 3;
				}
				else
				{
					alpha -= 40;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha > 255)
				{
					alpha = 255;
				}
				if (this.ai[0] >= 45f)
				{
					Kill();
					return;
				}
				Vector2 vector87 = new Vector2(0f, -720f).RotatedBy(velocity.ToRotation());
				float num740 = this.ai[0] % 45f / 45f;
				Vector2 spinningpoint13 = vector87 * num740;
				for (int num741 = 0; num741 < 6; num741++)
				{
					Vector2 vector88 = base.Center + spinningpoint13.RotatedBy((float)num741 * ((float)Math.PI * 2f) / 6f);
					Lighting.AddLight(vector88, 0.3f, 0.75f, 0.9f);
					for (int num742 = 0; num742 < 2; num742++)
					{
						int num743 = Dust.NewDust(vector88 + Utils.RandomVector2(Main.rand, -8f, 8f) / 2f, 8, 8, 197, 0f, 0f, 100, Color.Transparent);
						Main.dust[num743].noGravity = true;
					}
				}
			}
			else if (aiStyle == 87)
			{
				base.position.Y = this.ai[0];
				height = (int)this.ai[1];
				if (base.Center.X > Main.player[owner].Center.X)
				{
					direction = 1;
				}
				else
				{
					direction = -1;
				}
				velocity.X = (float)direction * 1E-06f;
				if (owner == Main.myPlayer)
				{
					for (int num744 = 0; num744 < 1000; num744++)
					{
						if (Main.projectile[num744].active && num744 != whoAmI && Main.projectile[num744].type == type && Main.projectile[num744].owner == owner && Main.projectile[num744].timeLeft > timeLeft)
						{
							Kill();
							return;
						}
					}
				}
				float num745 = (float)(width * height) * 0.0045f;
				for (int num746 = 0; (float)num746 < num745; num746++)
				{
					int num747 = Dust.NewDust(base.position, width, height, 75, 0f, 0f, 100);
					Main.dust[num747].noGravity = true;
					Dust dust2 = Main.dust[num747];
					dust2.velocity *= 0.5f;
					Main.dust[num747].velocity.Y -= 0.5f;
					Main.dust[num747].scale = 1.4f;
					Main.dust[num747].position.X += 6f;
					Main.dust[num747].position.Y -= 2f;
				}
			}
			else if (aiStyle == 88)
			{
				if (type == 465)
				{
					if (localAI[1] == 0f)
					{
						SoundEngine.PlaySound(SoundID.Item121, base.position);
						localAI[1] = 1f;
					}
					if (this.ai[0] < 180f)
					{
						alpha -= 5;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					else
					{
						alpha += 5;
						if (alpha > 255)
						{
							alpha = 255;
							Kill();
							return;
						}
					}
					this.ai[0]++;
					if (this.ai[0] % 30f == 0f && this.ai[0] < 180f && Main.netMode != 1)
					{
						int[] array6 = new int[5];
						Vector2[] array7 = new Vector2[5];
						int num748 = 0;
						float num749 = 2000f;
						for (int num750 = 0; num750 < 255; num750++)
						{
							if (!Main.player[num750].active || Main.player[num750].dead)
							{
								continue;
							}
							Vector2 center11 = Main.player[num750].Center;
							float num751 = Vector2.Distance(center11, base.Center);
							if (num751 < num749 && Collision.CanHit(base.Center, 1, 1, center11, 1, 1))
							{
								array6[num748] = num750;
								array7[num748] = center11;
								int num35 = num748 + 1;
								num748 = num35;
								if (num35 >= array7.Length)
								{
									break;
								}
							}
						}
						for (int num752 = 0; num752 < num748; num752++)
						{
							Vector2 vector89 = array7[num752] - base.Center;
							float ai = Main.rand.Next(100);
							Vector2 vector90 = Vector2.Normalize(vector89.RotatedByRandom(0.78539818525314331)) * 7f;
							NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector90.X, vector90.Y, 466, damage, 0f, Main.myPlayer, vector89.ToRotation(), ai);
						}
					}
					Lighting.AddLight(base.Center, 0.4f, 0.85f, 0.9f);
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					if (alpha >= 150 || !(this.ai[0] < 180f))
					{
						return;
					}
					for (int num753 = 0; num753 < 1; num753++)
					{
						float num754 = (float)Main.rand.NextDouble() * 1f - 0.5f;
						if (num754 < -0.5f)
						{
							num754 = -0.5f;
						}
						if (num754 > 0.5f)
						{
							num754 = 0.5f;
						}
						Vector2 vector91 = new Vector2((float)(-width) * 0.2f * scale, 0f).RotatedBy(num754 * ((float)Math.PI * 2f)).RotatedBy(velocity.ToRotation());
						int num755 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226, (0f - velocity.X) / 3f, (0f - velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
						Main.dust[num755].position = base.Center + vector91;
						Main.dust[num755].velocity = Vector2.Normalize(Main.dust[num755].position - base.Center) * 2f;
						Main.dust[num755].noGravity = true;
					}
					for (int num756 = 0; num756 < 1; num756++)
					{
						float num757 = (float)Main.rand.NextDouble() * 1f - 0.5f;
						if (num757 < -0.5f)
						{
							num757 = -0.5f;
						}
						if (num757 > 0.5f)
						{
							num757 = 0.5f;
						}
						Vector2 vector92 = new Vector2((float)(-width) * 0.6f * scale, 0f).RotatedBy(num757 * ((float)Math.PI * 2f)).RotatedBy(velocity.ToRotation());
						int num758 = Dust.NewDust(base.Center - Vector2.One * 5f, 10, 10, 226, (0f - velocity.X) / 3f, (0f - velocity.Y) / 3f, 150, Color.Transparent, 0.7f);
						Main.dust[num758].velocity = Vector2.Zero;
						Main.dust[num758].position = base.Center + vector92;
						Main.dust[num758].noGravity = true;
					}
				}
				else if (type == 466)
				{
					frameCounter++;
					Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
					if (velocity == Vector2.Zero)
					{
						if (frameCounter >= extraUpdates * 2)
						{
							frameCounter = 0;
							bool flag30 = true;
							for (int num759 = 1; num759 < oldPos.Length; num759++)
							{
								if (oldPos[num759] != oldPos[0])
								{
									flag30 = false;
								}
							}
							if (flag30)
							{
								Kill();
								return;
							}
						}
						if (Main.rand.Next(extraUpdates) == 0)
						{
							for (int num760 = 0; num760 < 2; num760++)
							{
								float num761 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
								float num762 = (float)Main.rand.NextDouble() * 0.8f + 1f;
								Vector2 vector93 = new Vector2((float)Math.Cos(num761) * num762, (float)Math.Sin(num761) * num762);
								int num763 = Dust.NewDust(base.Center, 0, 0, 226, vector93.X, vector93.Y);
								Main.dust[num763].noGravity = true;
								Main.dust[num763].scale = 1.2f;
							}
							if (Main.rand.Next(5) == 0)
							{
								Vector2 vector94 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
								int num764 = Dust.NewDust(base.Center + vector94 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust2 = Main.dust[num764];
								dust2.velocity *= 0.5f;
								Main.dust[num764].velocity.Y = 0f - Math.Abs(Main.dust[num764].velocity.Y);
							}
						}
					}
					else
					{
						if (frameCounter < extraUpdates * 2)
						{
							return;
						}
						frameCounter = 0;
						float num765 = velocity.Length();
						UnifiedRandom unifiedRandom = new UnifiedRandom((int)this.ai[1]);
						int num766 = 0;
						Vector2 spinningpoint14 = -Vector2.UnitY;
						while (true)
						{
							int num767 = unifiedRandom.Next();
							this.ai[1] = num767;
							num767 %= 100;
							float f = (float)num767 / 100f * ((float)Math.PI * 2f);
							Vector2 vector95 = f.ToRotationVector2();
							if (vector95.Y > 0f)
							{
								vector95.Y *= -1f;
							}
							bool flag31 = false;
							if (vector95.Y > -0.02f)
							{
								flag31 = true;
							}
							if (vector95.X * (float)(extraUpdates + 1) * 2f * num765 + localAI[0] > 40f)
							{
								flag31 = true;
							}
							if (vector95.X * (float)(extraUpdates + 1) * 2f * num765 + localAI[0] < -40f)
							{
								flag31 = true;
							}
							if (flag31)
							{
								if (num766++ >= 100)
								{
									velocity = Vector2.Zero;
									localAI[1] = 1f;
									break;
								}
								continue;
							}
							spinningpoint14 = vector95;
							break;
						}
						if (velocity != Vector2.Zero)
						{
							localAI[0] += spinningpoint14.X * (float)(extraUpdates + 1) * 2f * num765;
							velocity = spinningpoint14.RotatedBy(this.ai[0] + (float)Math.PI / 2f) * num765;
							rotation = velocity.ToRotation() + (float)Math.PI / 2f;
						}
					}
				}
				else
				{
					if (type != 580)
					{
						return;
					}
					if (localAI[1] == 0f && this.ai[0] >= 900f)
					{
						this.ai[0] -= 1000f;
						localAI[1] = -1f;
					}
					frameCounter++;
					Lighting.AddLight(base.Center, 0.3f, 0.45f, 0.5f);
					if (velocity == Vector2.Zero)
					{
						if (frameCounter >= extraUpdates * 2)
						{
							frameCounter = 0;
							bool flag32 = true;
							for (int num768 = 1; num768 < oldPos.Length; num768++)
							{
								if (oldPos[num768] != oldPos[0])
								{
									flag32 = false;
								}
							}
							if (flag32)
							{
								Kill();
								return;
							}
						}
						if (Main.rand.Next(extraUpdates) == 0 && (velocity != Vector2.Zero || Main.rand.Next((localAI[1] == 2f) ? 2 : 6) == 0))
						{
							for (int num769 = 0; num769 < 2; num769++)
							{
								float num770 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
								float num771 = (float)Main.rand.NextDouble() * 0.8f + 1f;
								Vector2 vector96 = new Vector2((float)Math.Cos(num770) * num771, (float)Math.Sin(num770) * num771);
								int num772 = Dust.NewDust(base.Center, 0, 0, 226, vector96.X, vector96.Y);
								Main.dust[num772].noGravity = true;
								Main.dust[num772].scale = 1.2f;
							}
							if (Main.rand.Next(5) == 0)
							{
								Vector2 vector97 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
								int num773 = Dust.NewDust(base.Center + vector97 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
								Dust dust2 = Main.dust[num773];
								dust2.velocity *= 0.5f;
								Main.dust[num773].velocity.Y = 0f - Math.Abs(Main.dust[num773].velocity.Y);
							}
						}
					}
					else
					{
						if (frameCounter < extraUpdates * 2)
						{
							return;
						}
						frameCounter = 0;
						float num774 = velocity.Length();
						UnifiedRandom unifiedRandom2 = new UnifiedRandom((int)this.ai[1]);
						int num775 = 0;
						Vector2 spinningpoint15 = -Vector2.UnitY;
						while (true)
						{
							int num776 = unifiedRandom2.Next();
							this.ai[1] = num776;
							num776 %= 100;
							float f2 = (float)num776 / 100f * ((float)Math.PI * 2f);
							Vector2 vector98 = f2.ToRotationVector2();
							if (vector98.Y > 0f)
							{
								vector98.Y *= -1f;
							}
							bool flag33 = false;
							if (vector98.Y > -0.02f)
							{
								flag33 = true;
							}
							if (vector98.X * (float)(extraUpdates + 1) * 2f * num774 + localAI[0] > 40f)
							{
								flag33 = true;
							}
							if (vector98.X * (float)(extraUpdates + 1) * 2f * num774 + localAI[0] < -40f)
							{
								flag33 = true;
							}
							if (flag33)
							{
								if (num775++ >= 100)
								{
									velocity = Vector2.Zero;
									if (localAI[1] < 1f)
									{
										localAI[1] += 2f;
									}
									break;
								}
								continue;
							}
							spinningpoint15 = vector98;
							break;
						}
						if (!(velocity != Vector2.Zero))
						{
							return;
						}
						localAI[0] += spinningpoint15.X * (float)(extraUpdates + 1) * 2f * num774;
						velocity = spinningpoint15.RotatedBy(this.ai[0] + (float)Math.PI / 2f) * num774;
						rotation = velocity.ToRotation() + (float)Math.PI / 2f;
						if (Main.rand.Next(4) == 0 && Main.netMode != 1 && localAI[1] == 0f)
						{
							float num777 = (float)Main.rand.Next(-3, 4) * ((float)Math.PI / 3f) / 3f;
							Vector2 vector99 = this.ai[0].ToRotationVector2().RotatedBy(num777) * velocity.Length();
							if (!Collision.CanHitLine(base.Center, 0, 0, base.Center + vector99 * 50f, 0, 0))
							{
								NewProjectile(GetProjectileSource_FromThis(), base.Center.X - vector99.X, base.Center.Y - vector99.Y, vector99.X, vector99.Y, type, damage, knockBack, owner, vector99.ToRotation() + 1000f, this.ai[1]);
							}
						}
					}
				}
			}
			else if (aiStyle == 89)
			{
				if (this.ai[1] == -1f)
				{
					alpha += 12;
				}
				else if (this.ai[0] < 300f)
				{
					alpha -= 5;
				}
				else
				{
					alpha += 12;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha > 255)
				{
					alpha = 255;
				}
				scale = 1f - (float)alpha / 255f;
				scale *= 0.6f;
				rotation += (float)Math.PI / 210f;
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item123, base.position);
				}
				if (alpha == 0)
				{
					for (int num778 = 0; num778 < 2; num778++)
					{
						float num779 = Main.rand.Next(2, 4);
						float num780 = scale;
						if (num778 == 1)
						{
							num780 *= 0.42f;
							num779 *= -0.75f;
						}
						Vector2 vector100 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
						vector100.Normalize();
						int num781 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 228, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num781].noGravity = true;
						Main.dust[num781].noLight = true;
						Main.dust[num781].position = base.Center + vector100 * 204f * num780;
						if (Main.rand.Next(8) == 0)
						{
							Main.dust[num781].velocity = vector100 * (0f - num779) * 2f;
							Dust dust2 = Main.dust[num781];
							dust2.scale += 0.5f;
						}
						else
						{
							Main.dust[num781].velocity = vector100 * (0f - num779);
						}
					}
				}
				this.ai[0]++;
				if (this.ai[0] >= 60f)
				{
					int num782 = (int)(this.ai[0] - 0f) / 60;
					float num783 = scale * 0.4f;
					for (int num784 = 0; num784 < 1; num784++)
					{
						float num785 = Main.rand.Next(1, 3);
						Vector2 vector101 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
						vector101.Normalize();
						int num786 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 228, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num786].noGravity = true;
						Main.dust[num786].noLight = true;
						Main.dust[num786].position = base.Center;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num786].velocity = vector101 * num785 * 2f;
							Dust dust2 = Main.dust[num786];
							dust2.scale += 0.5f;
						}
						else
						{
							Main.dust[num786].velocity = vector101 * num785;
						}
						Main.dust[num786].fadeIn = 2f;
					}
				}
				if (this.ai[0] == 300f && this.ai[1] != -1f && Main.netMode != 1)
				{
					if (!NPC.AnyNPCs(454))
					{
						this.ai[1] = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 454);
					}
					else
					{
						this.ai[1] = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 521);
					}
				}
				else if (this.ai[0] == 320f)
				{
					Kill();
					return;
				}
				bool flag34 = false;
				if (this.ai[1] == -1f)
				{
					if (alpha == 255)
					{
						flag34 = true;
					}
				}
				else
				{
					flag34 = !(this.ai[1] >= 0f) || !Main.npc[(int)this.ai[1]].active;
					if ((flag34 || Main.npc[(int)this.ai[1]].type != 439) && (flag34 || Main.npc[(int)this.ai[1]].type != 454) && (flag34 || Main.npc[(int)this.ai[1]].type != 521))
					{
						flag34 = true;
					}
				}
				if (flag34)
				{
					Kill();
				}
				else
				{
					Lighting.AddLight(base.Center, 1.1f, 0.9f, 0.4f);
				}
			}
			else if (aiStyle == 90)
			{
				if (Main.player[owner].dead)
				{
					Kill();
				}
				if (Main.player[owner].magicLantern)
				{
					timeLeft = 2;
				}
				if (tileCollide)
				{
					if (!Collision.CanHit(base.position, width, height, Main.player[owner].Center, 1, 1))
					{
						tileCollide = false;
					}
					else if (!Collision.SolidCollision(base.position, width, height) && Collision.CanHitLine(base.position, width, height, Main.player[owner].Center, 1, 1))
					{
						tileCollide = true;
					}
				}
				direction = Main.player[owner].direction;
				spriteDirection = direction;
				Lighting.AddLight(base.position, 0.35f, 0.35f, 0.1f);
				localAI[0] += 1f;
				if (localAI[0] >= 10f)
				{
					localAI[0] = 0f;
					int num787 = 17;
					if ((base.Center - Main.player[Main.myPlayer].Center).Length() < (float)(Main.screenWidth + num787 * 16))
					{
						int num788 = (int)base.Center.X / 16;
						int num789 = (int)base.Center.Y / 16;
						for (int num790 = num788 - num787; num790 <= num788 + num787; num790++)
						{
							for (int num791 = num789 - num787; num791 <= num789 + num787; num791++)
							{
								if (Main.rand.Next(4) == 0 && new Vector2(num788 - num790, num789 - num791).Length() < (float)num787 && num790 > 0 && num790 < Main.maxTilesX - 1 && num791 > 0 && num791 < Main.maxTilesY - 1 && Main.tile[num790, num791] != null && Main.tile[num790, num791].active() && Main.IsTileSpelunkable(Main.tile[num790, num791]))
								{
									int num792 = Dust.NewDust(new Vector2(num790 * 16, num791 * 16), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
									Main.dust[num792].fadeIn = 0.75f;
									Dust dust2 = Main.dust[num792];
									dust2.velocity *= 0.1f;
									Main.dust[num792].noLight = true;
								}
							}
						}
					}
				}
				Vector2 vector102 = Main.player[owner].Center - base.Center;
				vector102.X += 40 * direction;
				vector102.Y -= 40f;
				float num793 = vector102.Length();
				if (num793 > 1000f)
				{
					base.Center = Main.player[owner].Center;
				}
				float num794 = 3f;
				float num795 = 4f;
				if (num793 > 200f)
				{
					num795 += (num793 - 200f) * 0.1f;
					tileCollide = false;
				}
				if (num793 < num795)
				{
					velocity *= 0.25f;
					num795 = num793;
				}
				if (vector102.X != 0f || vector102.Y != 0f)
				{
					vector102.Normalize();
					vector102 *= num795;
				}
				velocity = (velocity * (num794 - 1f) + vector102) / num794;
				if (velocity.Length() > 6f)
				{
					float num796 = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					if ((double)Math.Abs(rotation - num796) >= 3.14)
					{
						if (num796 < rotation)
						{
							rotation -= 6.28f;
						}
						else
						{
							rotation += 6.28f;
						}
					}
					rotation = (rotation * 4f + num796) / 5f;
					frameCounter++;
					if (frameCounter > 4)
					{
						frameCounter = 0;
						frame++;
						if (frame > 7)
						{
							frame = 4;
						}
					}
					if (frame < 4)
					{
						frame = 7;
					}
					return;
				}
				if ((double)rotation > 3.14)
				{
					rotation -= 6.28f;
				}
				if ((double)rotation > -0.01 && (double)rotation < 0.01)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.9f;
				}
				frameCounter++;
				if (frameCounter > 6)
				{
					frameCounter = 0;
					frame++;
					if (frame > 3)
					{
						frame = 0;
					}
				}
			}
			else if (aiStyle == 91)
			{
				Vector2 center12 = base.Center;
				scale = 1f - localAI[0];
				width = (int)(20f * scale);
				height = width;
				base.position.X = center12.X - (float)(width / 2);
				base.position.Y = center12.Y - (float)(height / 2);
				if ((double)localAI[0] < 0.1)
				{
					localAI[0] += 0.01f;
				}
				else
				{
					localAI[0] += 0.025f;
				}
				if (localAI[0] >= 0.95f)
				{
					Kill();
				}
				velocity.X += this.ai[0] * 1.5f;
				velocity.Y += this.ai[1] * 1.5f;
				if (velocity.Length() > 16f)
				{
					velocity.Normalize();
					velocity *= 16f;
				}
				this.ai[0] *= 1.05f;
				this.ai[1] *= 1.05f;
				if (scale < 1f)
				{
					for (int num797 = 0; (float)num797 < scale * 10f; num797++)
					{
						int num798 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 27, velocity.X, velocity.Y, 100, default(Color), 1.1f);
						Main.dust[num798].position = (Main.dust[num798].position + base.Center) / 2f;
						Main.dust[num798].noGravity = true;
						Dust dust2 = Main.dust[num798];
						dust2.velocity *= 0.1f;
						dust2 = Main.dust[num798];
						dust2.velocity -= velocity * (1.3f - scale);
						Main.dust[num798].fadeIn = 100 + owner;
						dust2 = Main.dust[num798];
						dust2.scale += scale * 0.75f;
					}
				}
			}
			else if (aiStyle == 92)
			{
				tileCollide = false;
				this.ai[1] += 1f;
				if (this.ai[1] > 60f)
				{
					this.ai[0] += 10f;
				}
				if (this.ai[0] > 255f)
				{
					Kill();
					this.ai[0] = 255f;
				}
				alpha = (int)(100.0 + (double)this.ai[0] * 0.7);
				rotation += velocity.X * 0.1f;
				rotation += (float)direction * 0.003f;
				velocity *= 0.96f;
				Rectangle rectangle5 = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
				for (int num799 = 0; num799 < 1000; num799++)
				{
					if (num799 == whoAmI || !Main.projectile[num799].active || Main.projectile[num799].type < 511 || Main.projectile[num799].type > 513)
					{
						continue;
					}
					Rectangle value10 = new Rectangle((int)Main.projectile[num799].position.X, (int)Main.projectile[num799].position.Y, Main.projectile[num799].width, Main.projectile[num799].height);
					if (!rectangle5.Intersects(value10))
					{
						continue;
					}
					Vector2 vector103 = Main.projectile[num799].Center - base.Center;
					if (vector103.X == 0f && vector103.Y == 0f)
					{
						if (num799 < whoAmI)
						{
							vector103.X = -1f;
							vector103.Y = 1f;
						}
						else
						{
							vector103.X = 1f;
							vector103.Y = -1f;
						}
					}
					vector103.Normalize();
					vector103 *= 0.005f;
					velocity -= vector103;
					Projectile projectile2 = Main.projectile[num799];
					projectile2.velocity += vector103;
				}
			}
			else if (aiStyle == 93)
			{
				if (alpha > 0)
				{
					alpha -= 25;
					if (alpha <= 0)
					{
						alpha = 0;
					}
				}
				if (velocity.Y > 18f)
				{
					velocity.Y = 18f;
				}
				if (this.ai[0] == 0f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] > 20f)
					{
						velocity.Y += 0.1f;
						velocity.X *= 0.992f;
					}
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					return;
				}
				tileCollide = false;
				if (this.ai[0] == 1f)
				{
					tileCollide = false;
					velocity *= 0.6f;
				}
				else
				{
					tileCollide = false;
					int num800 = (int)(0f - this.ai[0]);
					num800--;
					base.position = Main.npc[num800].Center - velocity;
					base.position.X -= width / 2;
					base.position.Y -= height / 2;
					if (!Main.npc[num800].active || Main.npc[num800].life < 0)
					{
						tileCollide = true;
						this.ai[0] = 0f;
						this.ai[1] = 20f;
						velocity = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						velocity.Normalize();
						velocity *= 6f;
						netUpdate = true;
					}
					else if (velocity.Length() > (float)((Main.npc[num800].width + Main.npc[num800].height) / 3))
					{
						velocity *= 0.99f;
					}
				}
				if (this.ai[0] != 0f)
				{
					this.ai[1] += 1f;
					if (this.ai[1] > 90f)
					{
						Kill();
					}
				}
			}
			else if (aiStyle == 94)
			{
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				this.ai[0]++;
				if (this.ai[0] <= 40f)
				{
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					velocity *= 0.85f;
					if (this.ai[0] == 40f)
					{
						netUpdate = true;
						switch (Main.rand.Next(3))
						{
						case 0:
							this.ai[1] = 10f;
							break;
						case 1:
							this.ai[1] = 15f;
							break;
						case 2:
							this.ai[1] = 30f;
							break;
						}
					}
				}
				else if (this.ai[0] <= 60f)
				{
					velocity = Vector2.Zero;
					if (this.ai[0] == 60f)
					{
						netUpdate = true;
					}
				}
				else if (this.ai[0] <= 210f)
				{
					if (Main.netMode != 1 && (localAI[0] += 1f) >= this.ai[1])
					{
						localAI[0] = 0f;
						int num801 = Item.NewItem((int)base.Center.X, (int)base.Center.Y, 0, 0, 73);
						Main.item[num801].velocity = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * new Vector2(3f, 2f) * (Main.rand.NextFloat() * 0.5f + 0.5f) - Vector2.UnitY * 1f;
					}
					if (this.ai[0] == 210f)
					{
						netUpdate = true;
					}
				}
				else
				{
					scale -= 71f / (678f * (float)Math.PI);
					alpha += 15;
					if (this.ai[0] == 239f)
					{
						netUpdate = true;
					}
					if (this.ai[0] == 240f)
					{
						Kill();
					}
				}
				if (alpha < 90 && Main.rand.Next(3) == 0)
				{
					Vector2 vector104 = new Vector2(width, height) * scale * 0.85f;
					vector104 /= 2f;
					Vector2 vector105 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * vector104;
					int num802 = Dust.NewDust(base.Center + vector105, 0, 0, 246);
					Main.dust[num802].position = base.Center + vector105;
					Main.dust[num802].velocity = Vector2.Zero;
				}
				float num803 = 0.8f;
				float num804 = 181f / 255f;
				float num805 = 24f / 85f;
				Lighting.AddLight(base.Center, num803 * 0.3f, num804 * 0.3f, num805 * 0.3f);
			}
			else if (aiStyle == 95)
			{
				if (localAI[0] > 2f)
				{
					alpha -= 20;
					if (alpha < 100)
					{
						alpha = 100;
					}
				}
				else
				{
					localAI[0] += 1f;
				}
				if (this.ai[0] > 30f)
				{
					if (velocity.Y > -8f)
					{
						velocity.Y -= 0.05f;
					}
					velocity.X *= 0.98f;
				}
				else
				{
					this.ai[0] += 1f;
				}
				rotation = velocity.X * 0.1f;
				if (wet)
				{
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.98f;
					}
					if (velocity.Y > -8f)
					{
						velocity.Y -= 0.2f;
					}
					velocity.X *= 0.94f;
				}
			}
			else if (aiStyle == 96)
			{
				this.ai[0] += 0.6f;
				if (this.ai[0] > 500f)
				{
					Kill();
				}
				for (int num806 = 0; num806 < 2; num806++)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num807 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 170, 0f, 0f, 100);
						Main.dust[num807].position = (Main.dust[num807].position + base.Center) / 2f;
						Main.dust[num807].noGravity = true;
						Dust dust2 = Main.dust[num807];
						dust2.velocity *= 0.1f;
						if (num806 == 1)
						{
							dust2 = Main.dust[num807];
							dust2.position += velocity / 2f;
						}
						float num808 = (800f - this.ai[0]) / 800f;
						dust2 = Main.dust[num807];
						dust2.scale *= num808 + 0.1f;
					}
				}
				velocity.Y += 0.008f;
			}
			else if (aiStyle == 97)
			{
				frameCounter++;
				float num809 = 4f;
				if ((float)frameCounter < num809 * 1f)
				{
					frame = 0;
				}
				else if ((float)frameCounter < num809 * 2f)
				{
					frame = 1;
				}
				else if ((float)frameCounter < num809 * 3f)
				{
					frame = 2;
				}
				else if ((float)frameCounter < num809 * 4f)
				{
					frame = 3;
				}
				else if ((float)frameCounter < num809 * 5f)
				{
					frame = 4;
				}
				else if ((float)frameCounter < num809 * 6f)
				{
					frame = 3;
				}
				else if ((float)frameCounter < num809 * 7f)
				{
					frame = 2;
				}
				else if ((float)frameCounter < num809 * 8f)
				{
					frame = 1;
				}
				else
				{
					frameCounter = 0;
					frame = 0;
				}
				Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = true;
				if (owner == Main.myPlayer)
				{
					for (int num810 = 0; num810 < 1000; num810++)
					{
						if (num810 != whoAmI && Main.projectile[num810].active && Main.projectile[num810].owner == owner && Main.projectile[num810].type == type)
						{
							if (timeLeft >= Main.projectile[num810].timeLeft)
							{
								Main.projectile[num810].Kill();
							}
							else
							{
								Kill();
							}
						}
					}
				}
				if (this.ai[0] == 0f)
				{
					if ((double)velocity.Length() < 0.1)
					{
						velocity.X = 0f;
						velocity.Y = 0f;
						this.ai[0] = 1f;
						this.ai[1] = 45f;
						return;
					}
					velocity *= 0.94f;
					if (velocity.X < 0f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					spriteDirection = direction;
					return;
				}
				if (Main.player[owner].Center.X < base.Center.X)
				{
					direction = -1;
				}
				else
				{
					direction = 1;
				}
				spriteDirection = direction;
				this.ai[1] += 1f;
				float num811 = 0.005f;
				if (this.ai[1] > 0f)
				{
					velocity.Y -= num811;
				}
				else
				{
					velocity.Y += num811;
				}
				if (this.ai[1] >= 90f)
				{
					this.ai[1] *= -1f;
				}
			}
			else if (aiStyle == 98)
			{
				Vector2 vector106 = new Vector2(this.ai[0], this.ai[1]);
				Vector2 value11 = vector106 - base.Center;
				if (value11.Length() < velocity.Length())
				{
					Kill();
					return;
				}
				value11.Normalize();
				value11 *= 15f;
				velocity = Vector2.Lerp(velocity, value11, 0.1f);
				for (int num812 = 0; num812 < 2; num812++)
				{
					int num813 = Dust.NewDust(base.Center, 0, 0, 228, 0f, 0f, 100);
					Main.dust[num813].noGravity = true;
					Dust dust2 = Main.dust[num813];
					dust2.position += new Vector2(4f);
					dust2 = Main.dust[num813];
					dust2.scale += Main.rand.NextFloat() * 1f;
				}
			}
			else if (aiStyle == 99 && type >= 556 && type <= 561)
			{
				AI_099_1();
			}
			else if (aiStyle == 99)
			{
				AI_099_2();
			}
			else if (aiStyle == 100)
			{
				AI_100_Medusa();
			}
			else if (aiStyle == 101)
			{
				float num814 = 20f;
				localAI[0]++;
				alpha = (int)MathHelper.Lerp(0f, 255f, localAI[0] / num814);
				int num815 = (int)this.ai[0];
				int num816 = -1;
				int num817 = -1;
				switch (type)
				{
				case 536:
					num816 = 535;
					num817 = 0;
					break;
				case 591:
					num817 = 1;
					break;
				}
				switch (num817)
				{
				case 1:
					if (localAI[0] >= num814 || num815 < 0 || num815 > 255 || !Main.player[num815].active || Main.player[num815].dead)
					{
						Kill();
						return;
					}
					if (type == 591)
					{
						base.Center = Mount.GetMinecartMechPoint(Main.player[num815], 20, -19) - velocity;
						rotation = velocity.ToRotation() + (float)Math.PI / 2f;
						if (Math.Sign(velocity.X) != Math.Sign(Main.player[num815].velocity.X) && Main.player[num815].velocity.X != 0f)
						{
							Kill();
							return;
						}
					}
					else
					{
						base.Center = Main.player[num815].Center - velocity;
					}
					break;
				case 0:
					if (localAI[0] >= num814 || num815 < 0 || num815 > 1000 || !Main.projectile[num815].active || Main.projectile[num815].type != num816)
					{
						Kill();
						return;
					}
					base.Center = Main.projectile[num815].Center - velocity;
					break;
				}
				rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			}
			else if (aiStyle == 102)
			{
				int num818 = 0;
				float num819 = 0f;
				float x4 = 0f;
				float y3 = 0f;
				int num820 = -1;
				int num821 = 0;
				float num822 = 0f;
				bool flag35 = true;
				bool flag36 = false;
				bool flag37 = false;
				switch (type)
				{
				case 539:
					num818 = 407;
					num819 = 210f;
					x4 = 0.15f;
					y3 = 0.075f;
					num822 = 16f;
					break;
				case 573:
					num818 = 424;
					num819 = 90f;
					num822 = 20f;
					flag35 = false;
					flag36 = true;
					break;
				case 574:
					num818 = 420;
					num819 = 180f;
					x4 = 0.15f;
					y3 = 0.075f;
					num822 = 8f;
					flag35 = false;
					num820 = 576;
					num821 = 65;
					if (Main.expertMode)
					{
						num821 = 50;
					}
					flag37 = true;
					break;
				}
				if (flag37)
				{
					int num823 = (int)this.ai[1];
					if (!Main.npc[num823].active || Main.npc[num823].type != num818)
					{
						Kill();
						return;
					}
					timeLeft = 2;
				}
				this.ai[0]++;
				if (this.ai[0] < num819)
				{
					bool flag38 = true;
					int num824 = (int)this.ai[1];
					if (Main.npc[num824].active && Main.npc[num824].type == num818)
					{
						if (!flag36 && Main.npc[num824].oldPos[1] != Vector2.Zero)
						{
							base.position += Main.npc[num824].position - Main.npc[num824].oldPos[1];
						}
					}
					else
					{
						this.ai[0] = num819;
						flag38 = false;
					}
					if (flag38 && !flag36)
					{
						velocity += new Vector2(Math.Sign(Main.npc[num824].Center.X - base.Center.X), Math.Sign(Main.npc[num824].Center.Y - base.Center.Y)) * new Vector2(x4, y3);
						if (velocity.Length() > 6f)
						{
							velocity *= 6f / velocity.Length();
						}
					}
					if (type == 539)
					{
						if (Main.rand.Next(12) == 0)
						{
							int num825 = Dust.NewDust(base.Center, 8, 8, 180);
							Main.dust[num825].position = base.Center;
							Dust dust2 = Main.dust[num825];
							dust2.velocity *= 0.2f;
							Main.dust[num825].noGravity = true;
						}
						if (++frameCounter >= 4)
						{
							frameCounter = 0;
							if (++frame >= Main.projFrames[type])
							{
								frame = 0;
							}
						}
						rotation = velocity.X * 0.1f;
					}
					if (type == 573)
					{
						if (Main.rand.Next(2) == 0)
						{
							int num826 = Dust.NewDust(base.Center, 8, 8, 242);
							Main.dust[num826].position = base.Center;
							Main.dust[num826].velocity = velocity;
							Main.dust[num826].noGravity = true;
							Main.dust[num826].scale = 1.5f;
						}
						alpha = 255;
					}
					if (type == 574)
					{
						if (Main.rand.Next(10) == 0)
						{
							int num827 = Dust.NewDust(base.Center, 8, 8, 242);
							Main.dust[num827].position = base.Center;
							Main.dust[num827].velocity = velocity;
							Main.dust[num827].noGravity = true;
							Main.dust[num827].scale = 1.5f;
						}
						if (flag38)
						{
							int target2 = Main.npc[num824].target;
							float num828 = velocity.ToRotation();
							if (Collision.CanHitLine(base.Center, 0, 0, Main.player[target2].Center, 0, 0))
							{
								num828 = DirectionTo(Main.player[target2].Center).ToRotation();
							}
							rotation = rotation.AngleLerp(num828 + (float)Math.PI / 2f, 0.2f);
						}
						frame = 1;
					}
				}
				if (this.ai[0] == num819)
				{
					bool flag39 = true;
					int num829 = -1;
					if (!flag35)
					{
						int num830 = (int)this.ai[1];
						if (Main.npc[num830].active && Main.npc[num830].type == num818)
						{
							num829 = Main.npc[num830].target;
						}
						else
						{
							flag39 = false;
						}
					}
					else
					{
						flag39 = false;
					}
					if (!flag39)
					{
						num829 = Player.FindClosest(base.position, width, height);
					}
					Vector2 value12 = Main.player[num829].Center - base.Center;
					value12.X += Main.rand.Next(-50, 51);
					value12.Y += Main.rand.Next(-50, 51);
					value12.X *= (float)Main.rand.Next(80, 121) * 0.01f;
					value12.Y *= (float)Main.rand.Next(80, 121) * 0.01f;
					Vector2 vector107 = Vector2.Normalize(value12);
					if (vector107.HasNaNs())
					{
						vector107 = Vector2.UnitY;
					}
					if (num820 == -1)
					{
						velocity = vector107 * num822;
						netUpdate = true;
					}
					else
					{
						if (Main.netMode != 1 && Collision.CanHitLine(base.Center, 0, 0, Main.player[num829].Center, 0, 0))
						{
							NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector107.X * num822, vector107.Y * num822, num820, num821, 1f, Main.myPlayer);
						}
						this.ai[0] = 0f;
					}
				}
				if (!(this.ai[0] >= num819))
				{
					return;
				}
				rotation = rotation.AngleLerp(velocity.ToRotation() + (float)Math.PI / 2f, 0.4f);
				if (type == 539)
				{
					if (++frameCounter >= 2)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					if (Main.rand.Next(2) == 0)
					{
						int num831 = Dust.NewDust(base.position, width, height, 180, 0f, 0f, 100);
						Dust dust2 = Main.dust[num831];
						dust2.scale += (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num831].noGravity = true;
						dust2 = Main.dust[num831];
						dust2.velocity *= 0.1f;
						Main.dust[num831].fadeIn = Main.rand.NextFloat() * 1.5f;
					}
					if (Main.rand.Next(3) == 0)
					{
						int num832 = Dust.NewDust(base.position, width, height, 176, 0f, 0f, 100);
						Dust dust2 = Main.dust[num832];
						dust2.scale += 0.3f + (float)Main.rand.Next(50) * 0.01f;
						Main.dust[num832].noGravity = true;
						dust2 = Main.dust[num832];
						dust2.velocity *= 0.1f;
						Main.dust[num832].fadeIn = Main.rand.NextFloat() * 1.5f;
					}
				}
				if (type == 573)
				{
					if (Main.rand.Next(4) == 0)
					{
						int num833 = Dust.NewDust(base.Center, 8, 8, 242);
						Main.dust[num833].position = base.Center;
						Dust dust2 = Main.dust[num833];
						dust2.velocity *= 0.2f;
						Main.dust[num833].noGravity = true;
						Main.dust[num833].scale = 1.5f;
					}
					alpha = 0;
				}
			}
			else if (aiStyle == 103)
			{
				scale = this.ai[1];
				this.ai[0]++;
				if (this.ai[0] >= 30f)
				{
					alpha += 25;
					if (alpha >= 250)
					{
						Kill();
					}
				}
				else
				{
					if (!(this.ai[0] >= 0f))
					{
						return;
					}
					alpha -= 25;
					if (alpha < 0)
					{
						alpha = 0;
						if (localAI[1] == 0f && Main.netMode != 1 && localAI[0] != 0f)
						{
							localAI[1] = 1f;
							NPC.NewNPC((int)base.Center.X, (int)base.Bottom.Y, (int)localAI[0]);
						}
					}
				}
			}
			else if (aiStyle == 104)
			{
				if (this.ai[0] == 1f)
				{
					scale *= 0.995f;
					alpha += 3;
					if (alpha >= 250)
					{
						Kill();
					}
				}
				else
				{
					scale *= 1.01f;
					alpha -= 7;
					if (alpha < 0)
					{
						alpha = 0;
						this.ai[0] = 1f;
					}
				}
				frameCounter++;
				if (frameCounter > 6)
				{
					frameCounter = 0;
					frame++;
					if (frame > 3)
					{
						frame = 0;
					}
				}
				velocity.Y -= 0.03f;
				velocity.X *= 0.97f;
			}
			else if (aiStyle == 105)
			{
				float num834 = 1f - (float)alpha / 255f;
				num834 *= scale;
				Lighting.AddLight(base.Center, 0.2f * num834, 0.275f * num834, 0.075f * num834);
				localAI[0] += 1f;
				if (localAI[0] >= 90f)
				{
					localAI[0] *= -1f;
				}
				if (localAI[0] >= 0f)
				{
					scale += 0.003f;
				}
				else
				{
					scale -= 0.003f;
				}
				rotation += 0.0025f * scale;
				float num835 = 1f;
				float num836 = 1f;
				if (identity % 6 == 0)
				{
					num836 *= -1f;
				}
				if (identity % 6 == 1)
				{
					num835 *= -1f;
				}
				if (identity % 6 == 2)
				{
					num836 *= -1f;
					num835 *= -1f;
				}
				if (identity % 6 == 3)
				{
					num836 = 0f;
				}
				if (identity % 6 == 4)
				{
					num835 = 0f;
				}
				localAI[1] += 1f;
				if (localAI[1] > 60f)
				{
					localAI[1] = -180f;
				}
				if (localAI[1] >= -60f)
				{
					velocity.X += 0.002f * num836;
					velocity.Y += 0.002f * num835;
				}
				else
				{
					velocity.X -= 0.002f * num836;
					velocity.Y -= 0.002f * num835;
				}
				this.ai[0] += 1f;
				if (this.ai[0] > 5400f)
				{
					damage = 0;
					this.ai[1] = 1f;
					if (alpha < 255)
					{
						alpha += 5;
						if (alpha > 255)
						{
							alpha = 255;
						}
					}
					else if (owner == Main.myPlayer)
					{
						Kill();
					}
				}
				else
				{
					float num837 = (base.Center - Main.player[owner].Center).Length() / 100f;
					if (num837 > 4f)
					{
						num837 *= 1.1f;
					}
					if (num837 > 5f)
					{
						num837 *= 1.2f;
					}
					if (num837 > 6f)
					{
						num837 *= 1.3f;
					}
					if (num837 > 7f)
					{
						num837 *= 1.4f;
					}
					if (num837 > 8f)
					{
						num837 *= 1.5f;
					}
					if (num837 > 9f)
					{
						num837 *= 1.6f;
					}
					if (num837 > 10f)
					{
						num837 *= 1.7f;
					}
					if (!Main.player[owner].sporeSac)
					{
						num837 += 100f;
					}
					this.ai[0] += num837;
					if (alpha > 50)
					{
						alpha -= 10;
						if (alpha < 50)
						{
							alpha = 50;
						}
					}
				}
				bool flag40 = false;
				Vector2 vector108 = new Vector2(0f, 0f);
				float num838 = 280f;
				for (int num839 = 0; num839 < 200; num839++)
				{
					if (Main.npc[num839].CanBeChasedBy(this))
					{
						float num840 = Main.npc[num839].position.X + (float)(Main.npc[num839].width / 2);
						float num841 = Main.npc[num839].position.Y + (float)(Main.npc[num839].height / 2);
						float num842 = Math.Abs(base.position.X + (float)(width / 2) - num840) + Math.Abs(base.position.Y + (float)(height / 2) - num841);
						if (num842 < num838)
						{
							num838 = num842;
							vector108 = Main.npc[num839].Center;
							flag40 = true;
						}
					}
				}
				if (flag40)
				{
					Vector2 vector109 = vector108 - base.Center;
					vector109.Normalize();
					vector109 *= 0.75f;
					velocity = (velocity * 10f + vector109) / 11f;
				}
				else if ((double)velocity.Length() > 0.2)
				{
					velocity *= 0.98f;
				}
			}
			else if (aiStyle == 106)
			{
				rotation += velocity.X * 0.02f;
				if (velocity.X < 0f)
				{
					rotation -= Math.Abs(velocity.Y) * 0.02f;
				}
				else
				{
					rotation += Math.Abs(velocity.Y) * 0.02f;
				}
				velocity *= 0.98f;
				this.ai[0] += 1f;
				if (this.ai[0] >= 60f)
				{
					if (alpha < 255)
					{
						alpha += 5;
						if (alpha > 255)
						{
							alpha = 255;
						}
					}
					else if (owner == Main.myPlayer)
					{
						Kill();
					}
				}
				else if (alpha > 80)
				{
					alpha -= 30;
					if (alpha < 80)
					{
						alpha = 80;
					}
				}
			}
			else if (aiStyle == 107)
			{
				float num843 = 10f;
				float num844 = 5f;
				float num845 = 40f;
				if (type == 575)
				{
					if (timeLeft > 30 && alpha > 0)
					{
						alpha -= 25;
					}
					if (timeLeft > 30 && alpha < 128 && Collision.SolidCollision(base.position, width, height))
					{
						alpha = 128;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (++frameCounter > 4)
					{
						frameCounter = 0;
						if (++frame >= 4)
						{
							frame = 0;
						}
					}
					Lighting.AddLight(base.Center, 0.5f, 0.1f, 0.3f);
				}
				else if (type == 596)
				{
					num843 = 10f;
					num844 = 7.5f;
					if (timeLeft > 30 && alpha > 0)
					{
						alpha -= 25;
					}
					if (timeLeft > 30 && alpha < 128 && Collision.SolidCollision(base.position, width, height))
					{
						alpha = 128;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (++frameCounter > 4)
					{
						frameCounter = 0;
						if (++frame >= 4)
						{
							frame = 0;
						}
					}
					float num846 = 0.5f;
					if (timeLeft < 120)
					{
						num846 = 1.1f;
					}
					if (timeLeft < 60)
					{
						num846 = 1.6f;
					}
					this.ai[1]++;
					float num847 = this.ai[1] / 180f * ((float)Math.PI * 2f);
					for (float num848 = 0f; num848 < 3f; num848++)
					{
						if (Main.rand.Next(3) != 0)
						{
							return;
						}
						Dust dust18 = Main.dust[Dust.NewDust(base.Center, 0, 0, 27, 0f, -2f)];
						dust18.position = base.Center + Vector2.UnitY.RotatedBy(num848 * ((float)Math.PI * 2f) / 3f + this.ai[1]) * 10f;
						dust18.noGravity = true;
						dust18.velocity = DirectionFrom(dust18.position);
						dust18.scale = num846;
						dust18.fadeIn = 0.5f;
						dust18.alpha = 200;
					}
					if (timeLeft < 4)
					{
						int num849 = 40;
						if (Main.expertMode)
						{
							num849 = 30;
						}
						base.position = base.Center;
						width = (height = 60);
						base.Center = base.position;
						damage = num849;
						for (int num850 = 0; num850 < 10; num850++)
						{
							Dust dust18 = Main.dust[Dust.NewDust(base.position, width, height, Utils.SelectRandom<int>(Main.rand, 27, 6), 0f, -2f)];
							dust18.noGravity = true;
							if (dust18.position != base.Center)
							{
								dust18.velocity = DirectionTo(dust18.position) * 3f;
							}
						}
					}
				}
				int num851 = (int)this.ai[0];
				if (num851 >= 0 && Main.player[num851].active && !Main.player[num851].dead)
				{
					if (Distance(Main.player[num851].Center) > num845)
					{
						Vector2 vector110 = DirectionTo(Main.player[num851].Center);
						if (vector110.HasNaNs())
						{
							vector110 = Vector2.UnitY;
						}
						velocity = (velocity * (num843 - 1f) + vector110 * num844) / num843;
					}
				}
				else
				{
					if (timeLeft > 30)
					{
						timeLeft = 30;
					}
					if (this.ai[0] != -1f)
					{
						this.ai[0] = -1f;
						netUpdate = true;
					}
				}
			}
			else if (aiStyle == 108)
			{
				if (type == 578 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					int num852 = Player.FindClosest(base.Center, 0, 0);
					Vector2 vector111 = Main.player[num852].Center - base.Center;
					if (vector111 == Vector2.Zero)
					{
						vector111 = Vector2.UnitY;
					}
					this.ai[1] = vector111.ToRotation();
					netUpdate = true;
				}
				this.ai[0]++;
				if (this.ai[0] <= 50f)
				{
					if (type == 579)
					{
						if (Main.rand.Next(4) == 0)
						{
							Vector2 vector112 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust19 = Main.dust[Dust.NewDust(base.Center - vector112 * 30f, 0, 0, 229)];
							dust19.noGravity = true;
							dust19.position = base.Center - vector112 * Main.rand.Next(10, 21);
							dust19.velocity = vector112.RotatedBy(1.5707963705062866) * 4f;
							dust19.scale = 0.5f + Main.rand.NextFloat();
							dust19.fadeIn = 0.5f;
						}
						if (Main.rand.Next(4) == 0)
						{
							Vector2 vector113 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust20 = Main.dust[Dust.NewDust(base.Center - vector113 * 30f, 0, 0, 240)];
							dust20.noGravity = true;
							dust20.position = base.Center - vector113 * 30f;
							dust20.velocity = vector113.RotatedBy(-1.5707963705062866) * 2f;
							dust20.scale = 0.5f + Main.rand.NextFloat();
							dust20.fadeIn = 0.5f;
						}
					}
					if (type == 578 && Main.rand.Next(2) == 0)
					{
						Vector2 vector114 = this.ai[1].ToRotationVector2();
						Vector2 vector115 = vector114.RotatedBy(1.5707963705062866) * (Main.rand.Next(2) == 0).ToDirectionInt() * Main.rand.Next(10, 21);
						Vector2 vector116 = vector114 * Main.rand.Next(-80, 81);
						Vector2 vector117 = vector116 - vector115;
						vector117 /= 10f;
						int num853 = 229;
						Dust dust21 = Main.dust[Dust.NewDust(base.Center, 0, 0, num853)];
						dust21.noGravity = true;
						dust21.position = base.Center + vector115;
						dust21.velocity = vector117;
						dust21.scale = 0.5f + Main.rand.NextFloat();
						dust21.fadeIn = 0.5f;
						vector116 = vector114 * Main.rand.Next(40, 121);
						vector117 = vector116 - vector115 / 2f;
						vector117 /= 10f;
						dust21 = Main.dust[Dust.NewDust(base.Center, 0, 0, num853)];
						dust21.noGravity = true;
						dust21.position = base.Center + vector115 / 2f;
						dust21.velocity = vector117;
						dust21.scale = 1f + Main.rand.NextFloat();
					}
					if (type == 813)
					{
						if (Main.rand.Next(4) == 0)
						{
							Vector2 vector118 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust22 = Main.dust[Dust.NewDust(base.Center - vector118 * 30f, 0, 0, 5)];
							dust22.noGravity = true;
							dust22.position = base.Center - vector118 * Main.rand.Next(10, 21);
							dust22.velocity = vector118.RotatedBy(1.5707963705062866) * 4f;
							dust22.scale = 0.5f + Main.rand.NextFloat();
							dust22.fadeIn = 0.5f;
						}
						if (Main.rand.Next(4) == 0)
						{
							Vector2 vector119 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust23 = Main.dust[Dust.NewDust(base.Center - vector119 * 30f, 0, 0, 240)];
							dust23.noGravity = true;
							dust23.position = base.Center - vector119 * 30f;
							dust23.velocity = vector119.RotatedBy(-1.5707963705062866) * 2f;
							dust23.scale = 0.5f + Main.rand.NextFloat();
							dust23.fadeIn = 0.5f;
						}
					}
				}
				else if (this.ai[0] <= 90f)
				{
					if (this.ai[0] == 90f)
					{
						SoundEngine.PlaySound(SoundID.Item8, base.position);
					}
					scale = (this.ai[0] - 50f) / 40f;
					alpha = 255 - (int)(255f * scale);
					rotation -= (float)Math.PI / 20f;
					if (type == 579)
					{
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector120 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust24 = Main.dust[Dust.NewDust(base.Center - vector120 * 30f, 0, 0, 229)];
							dust24.noGravity = true;
							dust24.position = base.Center - vector120 * Main.rand.Next(10, 21);
							dust24.velocity = vector120.RotatedBy(1.5707963705062866) * 6f;
							dust24.scale = 0.5f + Main.rand.NextFloat();
							dust24.fadeIn = 0.5f;
							dust24.customData = base.Center;
						}
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector121 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust25 = Main.dust[Dust.NewDust(base.Center - vector121 * 30f, 0, 0, 240)];
							dust25.noGravity = true;
							dust25.position = base.Center - vector121 * 30f;
							dust25.velocity = vector121.RotatedBy(-1.5707963705062866) * 3f;
							dust25.scale = 0.5f + Main.rand.NextFloat();
							dust25.fadeIn = 0.5f;
							dust25.customData = base.Center;
						}
					}
					if (type == 578)
					{
						Vector2 vector122 = this.ai[1].ToRotationVector2();
						Vector2 vector123 = vector122.RotatedBy(1.5707963705062866) * (Main.rand.Next(2) == 0).ToDirectionInt() * Main.rand.Next(10, 21);
						vector122 *= (float)Main.rand.Next(-80, 81);
						Vector2 vector124 = vector122 - vector123;
						vector124 /= 10f;
						int num854 = Utils.SelectRandom<int>(Main.rand, 229, 229);
						Dust dust26 = Main.dust[Dust.NewDust(base.Center, 0, 0, num854)];
						dust26.noGravity = true;
						dust26.position = base.Center + vector123;
						dust26.velocity = vector124;
						dust26.scale = 0.5f + Main.rand.NextFloat();
						dust26.fadeIn = 0.5f;
						if (this.ai[0] == 90f && Main.netMode != 1)
						{
							Vector2 vector125 = this.ai[1].ToRotationVector2() * 8f;
							float ai2 = Main.rand.Next(80);
							NewProjectile(GetProjectileSource_FromThis(), base.Center.X - vector125.X, base.Center.Y - vector125.Y, vector125.X, vector125.Y, 580, 50, 1f, Main.myPlayer, this.ai[1], ai2);
						}
					}
					else if (type == 579)
					{
						if (this.ai[0] == 90f && Main.netMode != 1)
						{
							for (int num855 = 0; num855 < 2; num855++)
							{
								int num856 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 427, whoAmI);
								Main.npc[num856].velocity = -Vector2.UnitY.RotatedByRandom(6.2831854820251465) * Main.rand.Next(4, 9) - Vector2.UnitY * 2f;
								Main.npc[num856].netUpdate = true;
							}
						}
					}
					else if (type == 813)
					{
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector126 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust27 = Main.dust[Dust.NewDust(base.Center - vector126 * 30f, 0, 0, 5)];
							dust27.noGravity = true;
							dust27.position = base.Center - vector126 * Main.rand.Next(10, 21);
							dust27.velocity = vector126.RotatedBy(1.5707963705062866) * 6f;
							dust27.scale = 0.5f + Main.rand.NextFloat();
							dust27.fadeIn = 0.5f;
							dust27.customData = base.Center;
						}
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector127 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust28 = Main.dust[Dust.NewDust(base.Center - vector127 * 30f, 0, 0, 240)];
							dust28.noGravity = true;
							dust28.position = base.Center - vector127 * 30f;
							dust28.velocity = vector127.RotatedBy(-1.5707963705062866) * 3f;
							dust28.scale = 0.5f + Main.rand.NextFloat();
							dust28.fadeIn = 0.5f;
							dust28.customData = base.Center;
						}
						if (this.ai[0] == 90f && Main.netMode != 1)
						{
							int num857 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, 619, whoAmI);
							Main.npc[num857].netUpdate = true;
						}
					}
				}
				else if (this.ai[0] <= 120f)
				{
					scale = 1f;
					alpha = 0;
					rotation -= (float)Math.PI / 60f;
					if (type == 813)
					{
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector128 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust29 = Main.dust[Dust.NewDust(base.Center - vector128 * 30f, 0, 0, 5)];
							dust29.noGravity = true;
							dust29.position = base.Center - vector128 * Main.rand.Next(10, 21);
							dust29.velocity = vector128.RotatedBy(1.5707963705062866) * 6f;
							dust29.scale = 0.5f + Main.rand.NextFloat();
							dust29.fadeIn = 0.5f;
							dust29.customData = base.Center;
						}
						else
						{
							Vector2 vector129 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust30 = Main.dust[Dust.NewDust(base.Center - vector129 * 30f, 0, 0, 240)];
							dust30.noGravity = true;
							dust30.position = base.Center - vector129 * 30f;
							dust30.velocity = vector129.RotatedBy(-1.5707963705062866) * 3f;
							dust30.scale = 0.5f + Main.rand.NextFloat();
							dust30.fadeIn = 0.5f;
							dust30.customData = base.Center;
						}
					}
					else if (Main.rand.Next(2) == 0)
					{
						Vector2 vector130 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust31 = Main.dust[Dust.NewDust(base.Center - vector130 * 30f, 0, 0, 229)];
						dust31.noGravity = true;
						dust31.position = base.Center - vector130 * Main.rand.Next(10, 21);
						dust31.velocity = vector130.RotatedBy(1.5707963705062866) * 6f;
						dust31.scale = 0.5f + Main.rand.NextFloat();
						dust31.fadeIn = 0.5f;
						dust31.customData = base.Center;
					}
					else
					{
						Vector2 vector131 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust32 = Main.dust[Dust.NewDust(base.Center - vector131 * 30f, 0, 0, 240)];
						dust32.noGravity = true;
						dust32.position = base.Center - vector131 * 30f;
						dust32.velocity = vector131.RotatedBy(-1.5707963705062866) * 3f;
						dust32.scale = 0.5f + Main.rand.NextFloat();
						dust32.fadeIn = 0.5f;
						dust32.customData = base.Center;
					}
				}
				else
				{
					scale = 1f - (this.ai[0] - 120f) / 60f;
					alpha = 255 - (int)(255f * scale);
					rotation -= (float)Math.PI / 30f;
					if (alpha >= 255)
					{
						Kill();
					}
					if (type == 813)
					{
						for (int num858 = 0; num858 < 2; num858++)
						{
							switch (Main.rand.Next(3))
							{
							case 0:
							{
								Vector2 vector133 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
								Dust dust34 = Main.dust[Dust.NewDust(base.Center - vector133 * 30f, 0, 0, 5)];
								dust34.noGravity = true;
								dust34.position = base.Center - vector133 * Main.rand.Next(10, 21);
								dust34.velocity = vector133.RotatedBy(1.5707963705062866) * 6f;
								dust34.scale = 0.5f + Main.rand.NextFloat();
								dust34.fadeIn = 0.5f;
								dust34.customData = base.Center;
								break;
							}
							case 1:
							{
								Vector2 vector132 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
								Dust dust33 = Main.dust[Dust.NewDust(base.Center - vector132 * 30f, 0, 0, 240)];
								dust33.noGravity = true;
								dust33.position = base.Center - vector132 * 30f;
								dust33.velocity = vector132.RotatedBy(-1.5707963705062866) * 3f;
								dust33.scale = 0.5f + Main.rand.NextFloat();
								dust33.fadeIn = 0.5f;
								dust33.customData = base.Center;
								break;
							}
							}
						}
					}
					else
					{
						for (int num859 = 0; num859 < 2; num859++)
						{
							switch (Main.rand.Next(3))
							{
							case 0:
							{
								Vector2 vector135 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
								Dust dust36 = Main.dust[Dust.NewDust(base.Center - vector135 * 30f, 0, 0, 229)];
								dust36.noGravity = true;
								dust36.position = base.Center - vector135 * Main.rand.Next(10, 21);
								dust36.velocity = vector135.RotatedBy(1.5707963705062866) * 6f;
								dust36.scale = 0.5f + Main.rand.NextFloat();
								dust36.fadeIn = 0.5f;
								dust36.customData = base.Center;
								break;
							}
							case 1:
							{
								Vector2 vector134 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * scale;
								Dust dust35 = Main.dust[Dust.NewDust(base.Center - vector134 * 30f, 0, 0, 240)];
								dust35.noGravity = true;
								dust35.position = base.Center - vector134 * 30f;
								dust35.velocity = vector134.RotatedBy(-1.5707963705062866) * 3f;
								dust35.scale = 0.5f + Main.rand.NextFloat();
								dust35.fadeIn = 0.5f;
								dust35.customData = base.Center;
								break;
							}
							}
						}
					}
				}
				if (type == 813 && Main.rand.NextFloat() < Opacity)
				{
					Dust dust37 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(3f, 20f), 90);
					dust37.velocity = Vector2.UnitY;
					dust37.noGravity = true;
					dust37.scale = scale;
				}
			}
			else if (aiStyle == 109)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = velocity.Length();
				}
				if (this.ai[0] == 0f)
				{
					localAI[0]++;
					if (localAI[0] > 30f)
					{
						this.ai[0] = 1f;
						localAI[0] = 0f;
						return;
					}
				}
				else if (this.ai[0] == 1f)
				{
					Vector2 zero2 = Vector2.Zero;
					if (type != 582 || !Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].type != 124)
					{
						Kill();
						return;
					}
					NPC.lazyNPCOwnedProjectileSearchArray[(int)this.ai[1]] = whoAmI;
					zero2 = Main.npc[(int)this.ai[1]].Center;
					tileCollide = false;
					float num860 = localAI[1];
					Vector2 value13 = zero2 - base.Center;
					if (value13.Length() < num860)
					{
						Kill();
						return;
					}
					value13.Normalize();
					value13 *= num860;
					velocity = Vector2.Lerp(velocity, value13, 0.04f);
				}
				rotation += (float)Math.PI / 10f;
			}
			else if (aiStyle == 110)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = velocity.Length();
				}
				Vector2 zero3 = Vector2.Zero;
				if (Main.npc[(int)this.ai[0]].active && Main.npc[(int)this.ai[0]].townNPC)
				{
					zero3 = Main.npc[(int)this.ai[0]].Center;
					float num861 = localAI[1];
					Vector2 value14 = zero3 - base.Center;
					if (value14.Length() < num861 || base.Hitbox.Intersects(Main.npc[(int)this.ai[0]].Hitbox))
					{
						Kill();
						int num862 = Main.npc[(int)this.ai[0]].lifeMax - Main.npc[(int)this.ai[0]].life;
						if (num862 > 20)
						{
							num862 = 20;
						}
						if (num862 > 0)
						{
							NPC nPC8 = Main.npc[(int)this.ai[0]];
							nPC8.life += num862;
							Main.npc[(int)this.ai[0]].HealEffect(num862);
						}
					}
					else
					{
						value14.Normalize();
						value14 *= num861;
						if (value14.Y < velocity.Y)
						{
							value14.Y = velocity.Y;
						}
						value14.Y += 1f;
						velocity = Vector2.Lerp(velocity, value14, 0.04f);
						rotation += velocity.X * 0.05f;
					}
				}
				else
				{
					Kill();
				}
			}
			else if (aiStyle == 111)
			{
				if (!Main.npc[(int)this.ai[1]].active || Main.npc[(int)this.ai[1]].type != 20 || Main.npc[(int)this.ai[1]].ai[0] != 14f)
				{
					Kill();
					return;
				}
				this.ai[0]++;
				rotation += (float)Math.PI / 300f;
				scale = this.ai[0] / 100f;
				if (scale > 1f)
				{
					scale = 1f;
				}
				alpha = (int)(255f * (1f - scale));
				float num863 = 300f;
				if (this.ai[0] >= 100f)
				{
					num863 = MathHelper.Lerp(300f, 600f, (this.ai[0] - 100f) / 200f);
				}
				if (num863 > 600f)
				{
					num863 = 600f;
				}
				if (this.ai[0] >= 500f)
				{
					alpha = (int)MathHelper.Lerp(0f, 255f, (this.ai[0] - 500f) / 100f);
					num863 = MathHelper.Lerp(600f, 1200f, (this.ai[0] - 500f) / 100f);
					rotation += (float)Math.PI / 300f;
				}
				if (Main.rand.Next(4) == 0)
				{
					float num864 = num863;
					Vector2 vector136 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
					float num865 = Main.rand.Next(3, 9);
					vector136.Normalize();
					int num866 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 163, 0f, 0f, 100);
					Main.dust[num866].noGravity = true;
					Main.dust[num866].position = base.Center + vector136 * num864;
					if (Main.rand.Next(8) == 0)
					{
						Main.dust[num866].velocity = vector136 * (0f - num865) * 3f;
						Dust dust2 = Main.dust[num866];
						dust2.scale += 0.5f;
					}
					else
					{
						Main.dust[num866].velocity = vector136 * (0f - num865);
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					Vector2 vector137 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
					float num867 = Main.rand.Next(3, 9);
					vector137.Normalize();
					int num868 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 163, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num868].noGravity = true;
					Main.dust[num868].position = base.Center + vector137 * 30f;
					if (Main.rand.Next(8) == 0)
					{
						Main.dust[num868].velocity = vector137 * (0f - num867) * 3f;
						Dust dust2 = Main.dust[num868];
						dust2.scale += 0.5f;
					}
					else
					{
						Main.dust[num868].velocity = vector137 * (0f - num867);
					}
				}
				if (this.ai[0] >= 30f && Main.netMode != 2)
				{
					Player player9 = Main.player[Main.myPlayer];
					if (player9.active && !player9.dead && Distance(player9.Center) <= num863 && player9.FindBuffIndex(165) == -1)
					{
						player9.AddBuff(165, 120);
					}
				}
				if (this.ai[0] >= 30f && this.ai[0] % 10f == 0f && Main.netMode != 1)
				{
					for (int num869 = 0; num869 < 200; num869++)
					{
						NPC nPC9 = Main.npc[num869];
						if (nPC9.type != 488 && nPC9.active && Distance(nPC9.Center) <= num863)
						{
							if (nPC9.townNPC && (nPC9.FindBuffIndex(165) == -1 || nPC9.buffTime[nPC9.FindBuffIndex(165)] <= 20))
							{
								nPC9.AddBuff(165, 120);
							}
							else if (!nPC9.friendly && nPC9.lifeMax > 5 && !nPC9.dontTakeDamage && (nPC9.FindBuffIndex(186) == -1 || nPC9.buffTime[nPC9.FindBuffIndex(186)] <= 20) && (nPC9.dryadBane || Collision.CanHit(base.Center, 1, 1, nPC9.position, nPC9.width, nPC9.height)))
							{
								nPC9.AddBuff(186, 120);
							}
						}
					}
				}
				if (this.ai[0] >= 570f)
				{
					Kill();
				}
			}
			else if (aiStyle == 112)
			{
				if (type == 836)
				{
					if (localAI[0] == 0f)
					{
						localAI[0] = 1f;
						for (int num870 = 0; num870 < 3; num870++)
						{
							int num871 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 50, Color.White, 1.2f);
							Dust dust2 = Main.dust[num871];
							dust2.velocity *= 0.3f;
							Main.dust[num871].noGravity = true;
						}
					}
					if (++frameCounter >= 6)
					{
						frameCounter = 0;
						if (++frame >= 4)
						{
							frame = 0;
						}
					}
					Player player10 = Main.player[(int)this.ai[1]];
					bool flag41 = player10.active && !player10.dead && Vector2.Distance(player10.Center, base.Center) < 800f;
					int num872 = (spriteDirection = ((Main.WindForVisuals > 0f) ? 1 : (-1)));
					direction = ((player10.Center.X > base.Center.X) ? 1 : (-1));
					bool flag42 = num872 != direction;
					float num873 = 2.5f;
					float num874 = 2f;
					if (flag42)
					{
						num873 = 1.5f;
						num874 = 1f;
					}
					if (flag41)
					{
						if (!flag42)
						{
							float num875 = player10.Center.X - base.Center.X;
							velocity.X += 0.05f * (float)direction * (0.6f + Math.Abs(Main.WindForVisuals));
							if (velocity.X > num873)
							{
								velocity.X -= 0.1f;
							}
							if (velocity.X < 0f - num873)
							{
								velocity.X += 0.1f;
							}
						}
						if (player10.Top.Y >= base.Center.Y || flag42)
						{
							velocity.Y += 0.05f;
							if (velocity.Y > num873)
							{
								velocity.Y -= 0.1f;
							}
						}
						else if (player10.Top.Y < base.Center.Y)
						{
							velocity.Y -= 0.1f;
							if (velocity.Y < 0f - num874)
							{
								velocity.Y += 0.2f;
							}
						}
					}
					else
					{
						velocity.Y += 0.2f;
						if (velocity.Y < 0f - num874)
						{
							velocity.Y += 0.2f;
						}
						if (velocity.Y > num874)
						{
							velocity.Y -= 0.2f;
						}
					}
					rotation = velocity.X * 0.125f;
				}
				if (type == 590)
				{
					if (++frameCounter >= 4)
					{
						frameCounter = 0;
						if (++frame >= 3)
						{
							frame = 0;
						}
					}
					if (alpha > 0)
					{
						alpha -= 15;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (alpha == 0)
					{
						float num876 = (float)Main.rand.Next(28, 42) * 0.005f;
						num876 += (float)(270 - Main.mouseTextColor) / 500f;
						float num877 = 0.1f;
						float num878 = 0.3f + num876 / 2f;
						float num879 = 0.6f + num876;
						float num880 = 0.35f;
						num877 *= num880;
						num878 *= num880;
						num879 *= num880;
						Lighting.AddLight(base.Center, num877, num878, num879);
					}
					velocity = new Vector2(0f, (float)Math.Sin((float)Math.PI * 2f * this.ai[0] / 180f) * 0.15f);
					this.ai[0]++;
					if (this.ai[0] >= 180f)
					{
						this.ai[0] = 0f;
					}
				}
				if (type != 644)
				{
					return;
				}
				Color newColor3 = Main.hslToRgb(this.ai[0], 1f, 0.5f);
				int num881 = (int)this.ai[1];
				if (num881 < 0 || num881 >= 1000 || (!Main.projectile[num881].active && Main.projectile[num881].type != 643))
				{
					this.ai[1] = -1f;
				}
				else
				{
					DelegateMethods.v3_1 = newColor3.ToVector3() * 0.5f;
					Utils.PlotTileLine(base.Center, Main.projectile[num881].Center, 8f, DelegateMethods.CastLight);
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = Main.rand.NextFloat() * 0.8f + 0.8f;
					direction = ((Main.rand.Next(2) > 0) ? 1 : (-1));
				}
				rotation = localAI[1] / 40f * ((float)Math.PI * 2f) * (float)direction;
				if (alpha > 0)
				{
					alpha -= 8;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha == 0)
				{
					Lighting.AddLight(base.Center, newColor3.ToVector3() * 0.5f);
				}
				for (int num882 = 0; num882 < 2; num882++)
				{
					if (Main.rand.Next(10) == 0)
					{
						Vector2 vector138 = Vector2.UnitY.RotatedBy((float)num882 * (float)Math.PI).RotatedBy(rotation);
						Dust dust38 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor3, 1.5f)];
						dust38.noGravity = true;
						dust38.noLight = true;
						dust38.scale = Opacity * localAI[0];
						dust38.position = base.Center;
						dust38.velocity = vector138 * 2.5f;
					}
				}
				for (int num883 = 0; num883 < 2; num883++)
				{
					if (Main.rand.Next(10) == 0)
					{
						Vector2 vector139 = Vector2.UnitY.RotatedBy((float)num883 * (float)Math.PI);
						Dust dust39 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor3, 1.5f)];
						dust39.noGravity = true;
						dust39.noLight = true;
						dust39.scale = Opacity * localAI[0];
						dust39.position = base.Center;
						dust39.velocity = vector139 * 2.5f;
					}
				}
				if (Main.rand.Next(10) == 0)
				{
					float num884 = 1f + Main.rand.NextFloat() * 2f;
					float fadeIn = 1f + Main.rand.NextFloat();
					float num885 = 1f + Main.rand.NextFloat();
					Vector2 vector140 = Utils.RandomVector2(Main.rand, -1f, 1f);
					if (vector140 != Vector2.Zero)
					{
						vector140.Normalize();
					}
					vector140 *= 20f + Main.rand.NextFloat() * 100f;
					Vector2 vec = base.Center + vector140;
					Point point = vec.ToTileCoordinates();
					bool flag43 = true;
					if (!WorldGen.InWorld(point.X, point.Y))
					{
						flag43 = false;
					}
					if (flag43 && WorldGen.SolidTile(point.X, point.Y))
					{
						flag43 = false;
					}
					if (flag43)
					{
						Dust dust40 = Main.dust[Dust.NewDust(vec, 0, 0, 267, 0f, 0f, 127, newColor3)];
						dust40.noGravity = true;
						dust40.position = vec;
						dust40.velocity = -Vector2.UnitY * num884 * (Main.rand.NextFloat() * 0.9f + 1.6f);
						dust40.fadeIn = fadeIn;
						dust40.scale = num885;
						dust40.noLight = true;
						if (dust40.dustIndex != 6000)
						{
							Dust dust41 = Dust.CloneDust(dust40);
							Dust dust2 = dust41;
							dust2.scale *= 0.65f;
							dust2 = dust41;
							dust2.fadeIn *= 0.65f;
							dust41.color = new Color(255, 255, 255, 255);
						}
					}
				}
				scale = Opacity / 2f * localAI[0];
				velocity = Vector2.Zero;
				localAI[1]++;
				if (localAI[1] >= 60f)
				{
					Kill();
				}
				if (localAI[1] == 30f)
				{
					DoRainbowCrystalStaffExplosion();
					if (Main.myPlayer == owner)
					{
						friendly = true;
						int num886 = width;
						int num887 = height;
						int num888 = penetrate;
						base.position = base.Center;
						width = (height = 60);
						base.Center = base.position;
						penetrate = -1;
						maxPenetrate = -1;
						Damage();
						penetrate = num888;
						base.position = base.Center;
						width = num886;
						height = num887;
						base.Center = base.position;
						friendly = false;
					}
				}
			}
			else if (aiStyle == 113)
			{
				int num889 = 25;
				if (type == 614)
				{
					num889 = 63;
				}
				if (alpha > 0)
				{
					alpha -= num889;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (this.ai[0] == 0f)
				{
					if (type == 614)
					{
						int num890 = (int)this.ai[1];
						if (!Main.npc[num890].CanBeChasedBy(this, ignoreDontTakeDamage: true))
						{
							Kill();
							return;
						}
						float num891 = velocity.ToRotation();
						Vector2 vector141 = Main.npc[num890].Center - base.Center;
						if (vector141 != Vector2.Zero)
						{
							vector141.Normalize();
							vector141 *= 14f;
						}
						float num892 = 5f;
						velocity = (velocity * (num892 - 1f) + vector141) / num892;
					}
					else
					{
						this.ai[1]++;
						if (this.ai[1] >= 45f)
						{
							float num893 = 0.98f;
							float num894 = 0.35f;
							if (type == 636)
							{
								num893 = 0.995f;
								num894 = 0.15f;
							}
							this.ai[1] = 45f;
							velocity.X *= num893;
							velocity.Y += num894;
						}
						rotation = velocity.ToRotation() + (float)Math.PI / 2f;
					}
				}
				if (this.ai[0] == 1f)
				{
					Vector2 center13 = base.Center;
					ignoreWater = true;
					tileCollide = false;
					int num895 = 15;
					if (type == 636)
					{
						num895 = 5 * MaxUpdates;
					}
					if (type == 971)
					{
						num895 = 9 * MaxUpdates;
					}
					bool flag44 = false;
					bool flag45 = false;
					localAI[0]++;
					if (localAI[0] % 30f == 0f)
					{
						flag45 = true;
					}
					int num896 = (int)this.ai[1];
					if (localAI[0] >= (float)(60 * num895))
					{
						flag44 = true;
					}
					else if (num896 < 0 || num896 >= 200)
					{
						flag44 = true;
					}
					else if (Main.npc[num896].active && !Main.npc[num896].dontTakeDamage)
					{
						base.Center = Main.npc[num896].Center - velocity * 2f;
						gfxOffY = Main.npc[num896].gfxOffY;
						if (flag45)
						{
							Main.npc[num896].HitEffect(0, 1.0);
						}
					}
					else
					{
						flag44 = true;
					}
					if (flag44)
					{
						Kill();
					}
					if (!flag44 && type == 971)
					{
						if (num896 > 0 && num896 < 200 && timeLeft % 2 == 0)
						{
							Vector2 vector142 = center13 - velocity.SafeNormalize(Vector2.Zero) * 8f;
							Vector2 value15 = Main.npc[num896].velocity + new Vector2(Main.rand.NextFloatDirection() * 0.35f, 2.5f);
							Dust dust42 = Dust.NewDustPerfect(vector142, 4, value15, 0, new Color(120, 50, 120), 0.65f);
							dust42.fadeIn = 0.25f;
							dust42.noGravity = true;
						}
						if (localAI[1] == 0f)
						{
							localAI[1] = 1f;
							rotation = velocity.ToRotation() + (float)Math.PI / 2f;
						}
					}
				}
				if (type == 614)
				{
					Lighting.AddLight(base.Center, 0.2f, 0.6f, 0.7f);
				}
				if (type == 636)
				{
					Lighting.AddLight(base.Center, 0.8f, 0.7f, 0.4f);
				}
			}
			else if (aiStyle == 114)
			{
				if (Main.netMode == 2 && localAI[0] == 0f)
				{
					PortalHelper.SyncPortalSections(base.Center, 1);
					localAI[0] = 1f;
				}
				timeLeft = 3;
				bool flag46 = false;
				if (owner != 255 && (!Main.player[owner].active || Main.player[owner].dead || Distance(Main.player[owner].Center) > 12800f))
				{
					flag46 = true;
				}
				if (!flag46 && !WorldGen.InWorld((int)base.Center.X / 16, (int)base.Center.Y / 16, Lighting.OffScreenTiles))
				{
					flag46 = true;
				}
				if (!flag46 && !PortalHelper.SupportedTilesAreFine(base.Center, this.ai[0]))
				{
					flag46 = true;
				}
				if (flag46)
				{
					Kill();
					return;
				}
				Color portalColor = PortalHelper.GetPortalColor(owner, (int)this.ai[1]);
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha == 0)
				{
					Lighting.AddLight(base.Center + velocity * 3f, portalColor.ToVector3() * 0.5f);
				}
				if (++frameCounter >= 6)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				rotation = this.ai[0] - (float)Math.PI / 2f;
			}
			else if (aiStyle == 115)
			{
				Lighting.AddLight(base.Center, new Vector3(0.075f, 0.3f, 0.15f));
				velocity *= 0.985f;
				rotation += velocity.X * 0.2f;
				if (velocity.X > 0f)
				{
					rotation += 0.08f;
				}
				else
				{
					rotation -= 0.08f;
				}
				this.ai[1] += 1f;
				if (this.ai[1] > 30f)
				{
					alpha += 10;
					if (alpha >= 255)
					{
						alpha = 255;
						Kill();
					}
				}
			}
			else if (aiStyle == 116)
			{
				if (localAI[0] == 0f)
				{
					rotation = this.ai[1];
					localAI[0] = 1f;
				}
				Player player11 = Main.player[owner];
				if (player11.setSolar)
				{
					timeLeft = 2;
				}
				float angle = (float)player11.miscCounter / 300f * ((float)Math.PI * 4f) + this.ai[1];
				angle = MathHelper.WrapAngle(angle);
				rotation = rotation.AngleLerp(angle, 0.05f);
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				velocity = rotation.ToRotationVector2() * 100f - player11.velocity;
				base.Center = player11.Center - velocity;
			}
			else if (aiStyle == 117)
			{
				this.ai[1] += 0.01f;
				scale = this.ai[1];
				this.ai[0]++;
				if (this.ai[0] >= (float)(3 * Main.projFrames[type]))
				{
					Kill();
					return;
				}
				if (++frameCounter >= 3)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						hide = true;
					}
				}
				alpha -= 63;
				if (alpha < 0)
				{
					alpha = 0;
				}
				bool flag47 = type == 612 || type == 953;
				bool flag48 = type == 624;
				if (flag47)
				{
					Lighting.AddLight(base.Center, 0.9f, 0.8f, 0.6f);
				}
				if (this.ai[0] != 1f)
				{
					return;
				}
				base.position = base.Center;
				width = (height = (int)(52f * scale));
				base.Center = base.position;
				Damage();
				if (flag47)
				{
					SoundEngine.PlaySound(SoundID.Item14, base.position);
					for (int num897 = 0; num897 < 4; num897++)
					{
						int num898 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num898].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					}
					for (int num899 = 0; num899 < 10; num899++)
					{
						int num900 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 200, default(Color), 2.7f);
						Main.dust[num900].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
						Main.dust[num900].noGravity = true;
						Dust dust2 = Main.dust[num900];
						dust2.velocity *= 3f;
						num900 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num900].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
						dust2 = Main.dust[num900];
						dust2.velocity *= 2f;
						Main.dust[num900].noGravity = true;
						Main.dust[num900].fadeIn = 2.5f;
					}
					for (int num901 = 0; num901 < 5; num901++)
					{
						int num902 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
						Main.dust[num902].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
						Main.dust[num902].noGravity = true;
						Dust dust2 = Main.dust[num902];
						dust2.velocity *= 3f;
					}
					for (int num903 = 0; num903 < 10; num903++)
					{
						int num904 = Dust.NewDust(new Vector2(base.position.X, base.position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num904].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
						Main.dust[num904].noGravity = true;
						Dust dust2 = Main.dust[num904];
						dust2.velocity *= 3f;
					}
				}
				if (!flag48)
				{
					return;
				}
				SoundEngine.PlaySound(SoundID.Item14, base.position);
				for (int num905 = 0; num905 < 20; num905++)
				{
					int num906 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num906].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Dust dust2 = Main.dust[num906];
					dust2.velocity *= 2f;
					Main.dust[num906].noGravity = true;
					Main.dust[num906].fadeIn = 2.5f;
					Main.dust[num906].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				}
				for (int num907 = 0; num907 < 15; num907++)
				{
					int num908 = Dust.NewDust(base.position, width, height, 135, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num908].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num908].noGravity = true;
					Dust dust2 = Main.dust[num908];
					dust2.velocity *= 3f;
					Main.dust[num908].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				}
				float num909 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
				float num910 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
				float num911 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
				float num912 = 7f + (float)Main.rand.NextDouble() * 7f;
				float num913 = 7f + (float)Main.rand.NextDouble() * 7f;
				float num914 = 7f + (float)Main.rand.NextDouble() * 7f;
				float num915 = num912;
				if (num913 > num915)
				{
					num915 = num913;
				}
				if (num914 > num915)
				{
					num915 = num914;
				}
				for (int num916 = 0; num916 < 200; num916++)
				{
					int num917 = 135;
					float num918 = num915;
					if (num916 > 50)
					{
						num918 = num913;
					}
					if (num916 > 100)
					{
						num918 = num912;
					}
					if (num916 > 150)
					{
						num918 = num914;
					}
					int num919 = Dust.NewDust(base.position, 6, 6, num917, 0f, 0f, 100);
					Vector2 vector143 = Main.dust[num919].velocity;
					Main.dust[num919].position = base.Center;
					vector143.Normalize();
					vector143 *= num918;
					if (num916 > 150)
					{
						vector143.Y *= 0.5f;
						vector143 = vector143.RotatedBy(num911);
					}
					else if (num916 > 100)
					{
						vector143.X *= 0.5f;
						vector143 = vector143.RotatedBy(num909);
					}
					else if (num916 > 50)
					{
						vector143.Y *= 0.5f;
						vector143 = vector143.RotatedBy(num910);
					}
					Dust dust2 = Main.dust[num919];
					dust2.velocity *= 0.2f;
					dust2 = Main.dust[num919];
					dust2.velocity += vector143;
					Main.dust[num919].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
					if (num916 <= 200)
					{
						Main.dust[num919].scale = 2f;
						Main.dust[num919].noGravity = true;
						Main.dust[num919].fadeIn = Main.rand.NextFloat() * 2f;
						if (Main.rand.Next(4) == 0)
						{
							Main.dust[num919].fadeIn = 2.5f;
						}
						Main.dust[num919].noLight = true;
						if (num916 < 100)
						{
							dust2 = Main.dust[num919];
							dust2.position += Main.dust[num919].velocity * 20f;
							dust2 = Main.dust[num919];
							dust2.velocity *= -1f;
						}
					}
				}
			}
			else if (aiStyle == 118)
			{
				this.ai[0]++;
				int num920 = 0;
				if (velocity.Length() <= 4f)
				{
					num920 = 1;
				}
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				switch (num920)
				{
				case 0:
					rotation -= (float)Math.PI / 30f;
					if (Main.rand.Next(3) == 0)
					{
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector149 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust45 = Main.dust[Dust.NewDust(base.Center - vector149 * 30f, 0, 0, Utils.SelectRandom<int>(Main.rand, 86, 90))];
							dust45.noGravity = true;
							dust45.position = base.Center - vector149 * Main.rand.Next(10, 21);
							dust45.velocity = vector149.RotatedBy(1.5707963705062866) * 6f;
							dust45.scale = 0.5f + Main.rand.NextFloat();
							dust45.fadeIn = 0.5f;
							dust45.customData = this;
						}
						else
						{
							Vector2 vector150 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust46 = Main.dust[Dust.NewDust(base.Center - vector150 * 30f, 0, 0, 240)];
							dust46.noGravity = true;
							dust46.position = base.Center - vector150 * 30f;
							dust46.velocity = vector150.RotatedBy(-1.5707963705062866) * 3f;
							dust46.scale = 0.5f + Main.rand.NextFloat();
							dust46.fadeIn = 0.5f;
							dust46.customData = this;
						}
					}
					if (this.ai[0] >= 30f)
					{
						velocity *= 0.98f;
						scale += 0.00744680827f;
						if (scale > 1.3f)
						{
							scale = 1.3f;
						}
						rotation -= (float)Math.PI / 180f;
					}
					if (velocity.Length() < 4.1f)
					{
						velocity.Normalize();
						velocity *= 4f;
						this.ai[0] = 0f;
					}
					break;
				case 1:
				{
					rotation -= (float)Math.PI / 30f;
					for (int num921 = 0; num921 < 1; num921++)
					{
						if (Main.rand.Next(2) == 0)
						{
							Vector2 vector144 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust43 = Main.dust[Dust.NewDust(base.Center - vector144 * 30f, 0, 0, 86)];
							dust43.noGravity = true;
							dust43.position = base.Center - vector144 * Main.rand.Next(10, 21);
							dust43.velocity = vector144.RotatedBy(1.5707963705062866) * 6f;
							dust43.scale = 0.9f + Main.rand.NextFloat();
							dust43.fadeIn = 0.5f;
							dust43.customData = this;
							vector144 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							dust43 = Main.dust[Dust.NewDust(base.Center - vector144 * 30f, 0, 0, 90)];
							dust43.noGravity = true;
							dust43.position = base.Center - vector144 * Main.rand.Next(10, 21);
							dust43.velocity = vector144.RotatedBy(1.5707963705062866) * 6f;
							dust43.scale = 0.9f + Main.rand.NextFloat();
							dust43.fadeIn = 0.5f;
							dust43.customData = this;
							dust43.color = Color.Crimson;
						}
						else
						{
							Vector2 vector145 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
							Dust dust44 = Main.dust[Dust.NewDust(base.Center - vector145 * 30f, 0, 0, 240)];
							dust44.noGravity = true;
							dust44.position = base.Center - vector145 * Main.rand.Next(20, 31);
							dust44.velocity = vector145.RotatedBy(-1.5707963705062866) * 5f;
							dust44.scale = 0.9f + Main.rand.NextFloat();
							dust44.fadeIn = 0.5f;
							dust44.customData = this;
						}
					}
					if (this.ai[0] % 30f == 0f && this.ai[0] < 241f && Main.myPlayer == owner)
					{
						Vector2 vector146 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * 12f;
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector146.X, vector146.Y, 618, damage / 2, 0f, owner, 0f, whoAmI);
					}
					Vector2 vector147 = base.Center;
					float num922 = 800f;
					bool flag49 = false;
					int num923 = 0;
					if (this.ai[1] == 0f)
					{
						for (int num924 = 0; num924 < 200; num924++)
						{
							if (Main.npc[num924].CanBeChasedBy(this))
							{
								Vector2 center14 = Main.npc[num924].Center;
								if (Distance(center14) < num922 && Collision.CanHit(new Vector2(base.position.X + (float)(width / 2), base.position.Y + (float)(height / 2)), 1, 1, Main.npc[num924].position, Main.npc[num924].width, Main.npc[num924].height))
								{
									num922 = Distance(center14);
									vector147 = center14;
									flag49 = true;
									num923 = num924;
								}
							}
						}
						if (flag49)
						{
							if (this.ai[1] != (float)(num923 + 1))
							{
								netUpdate = true;
							}
							this.ai[1] = num923 + 1;
						}
						flag49 = false;
					}
					if (this.ai[1] != 0f)
					{
						int num925 = (int)(this.ai[1] - 1f);
						if (Main.npc[num925].active && Main.npc[num925].CanBeChasedBy(this, ignoreDontTakeDamage: true) && Distance(Main.npc[num925].Center) < 1000f)
						{
							flag49 = true;
							vector147 = Main.npc[num925].Center;
						}
					}
					if (!friendly)
					{
						flag49 = false;
					}
					if (flag49)
					{
						float num926 = 4f;
						int num927 = 8;
						Vector2 vector148 = new Vector2(base.position.X + (float)width * 0.5f, base.position.Y + (float)height * 0.5f);
						float num928 = vector147.X - vector148.X;
						float num929 = vector147.Y - vector148.Y;
						float num930 = (float)Math.Sqrt(num928 * num928 + num929 * num929);
						float num931 = num930;
						num930 = num926 / num930;
						num928 *= num930;
						num929 *= num930;
						velocity.X = (velocity.X * (float)(num927 - 1) + num928) / (float)num927;
						velocity.Y = (velocity.Y * (float)(num927 - 1) + num929) / (float)num927;
					}
					break;
				}
				}
				if (alpha < 150)
				{
					Lighting.AddLight(base.Center, 0.7f, 0.2f, 0.6f);
				}
				if (this.ai[0] >= 600f)
				{
					Kill();
				}
			}
			else if (aiStyle == 119)
			{
				int num932 = 0;
				float num933 = 0f;
				float x5 = 0f;
				float y4 = 0f;
				bool flag50 = false;
				bool flag51 = false;
				int num35 = type;
				if (num35 == 618)
				{
					num932 = 617;
					num933 = 420f;
					x5 = 0.15f;
					y4 = 0.15f;
				}
				if (flag51)
				{
					int num934 = (int)this.ai[1];
					if (!Main.projectile[num934].active || Main.projectile[num934].type != num932)
					{
						Kill();
						return;
					}
					timeLeft = 2;
				}
				this.ai[0]++;
				if (!(this.ai[0] < num933))
				{
					return;
				}
				bool flag52 = true;
				int num935 = (int)this.ai[1];
				if (Main.projectile[num935].active && Main.projectile[num935].type == num932)
				{
					if (!flag50 && Main.projectile[num935].oldPos[1] != Vector2.Zero)
					{
						base.position += Main.projectile[num935].position - Main.projectile[num935].oldPos[1];
					}
					if (base.Center.HasNaNs())
					{
						Kill();
						return;
					}
				}
				else
				{
					this.ai[0] = num933;
					flag52 = false;
					Kill();
				}
				if (flag52 && !flag50)
				{
					velocity += new Vector2(Math.Sign(Main.projectile[num935].Center.X - base.Center.X), Math.Sign(Main.projectile[num935].Center.Y - base.Center.Y)) * new Vector2(x5, y4);
					if (velocity.Length() > 6f)
					{
						velocity *= 6f / velocity.Length();
					}
				}
				if (type == 618)
				{
					if (Main.rand.Next(2) == 0)
					{
						int num936 = Dust.NewDust(base.Center, 8, 8, 86);
						Main.dust[num936].position = base.Center;
						Main.dust[num936].velocity = velocity;
						Main.dust[num936].noGravity = true;
						Main.dust[num936].scale = 1.5f;
						if (flag52)
						{
							Main.dust[num936].customData = Main.projectile[(int)this.ai[1]];
						}
					}
					alpha = 255;
				}
				else
				{
					Kill();
				}
			}
			else if (aiStyle == 120)
			{
				AI_120_StardustGuardian();
			}
			else if (aiStyle == 121)
			{
				AI_121_StardustDragon();
			}
			else if (aiStyle == 122)
			{
				int num937 = (int)this.ai[0];
				bool flag53 = false;
				if (num937 == -1 || !Main.npc[num937].active)
				{
					flag53 = true;
				}
				if (flag53)
				{
					if (type == 629)
					{
						Kill();
						return;
					}
					if (type == 631 && this.ai[0] != -1f)
					{
						this.ai[0] = -1f;
						netUpdate = true;
					}
				}
				if (!flag53 && base.Hitbox.Intersects(Main.npc[num937].Hitbox))
				{
					Kill();
					if (type == 631)
					{
						localAI[1] = 1f;
						Damage();
					}
					return;
				}
				if (type == 629)
				{
					Vector2 value16 = Main.npc[num937].Center - base.Center;
					velocity = Vector2.Normalize(value16) * 5f;
					Dust.QuickDust(base.Center, Color.Red);
				}
				if (type != 631)
				{
					return;
				}
				if (this.ai[1] > 0f)
				{
					this.ai[1]--;
					velocity = Vector2.Zero;
					return;
				}
				if (flag53)
				{
					if (velocity == Vector2.Zero)
					{
						Kill();
					}
					tileCollide = true;
					alpha += 10;
					if (alpha > 255)
					{
						Kill();
					}
				}
				else
				{
					Vector2 value17 = Main.npc[num937].Center - base.Center;
					velocity = Vector2.Normalize(value17) * 12f;
					alpha -= 15;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				rotation = velocity.ToRotation() - (float)Math.PI / 2f;
			}
			else if (aiStyle == 123)
			{
				bool flag54 = type == 641;
				bool flag55 = type == 643;
				float num938 = 1000f;
				velocity = Vector2.Zero;
				if (flag54)
				{
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (direction == 0)
					{
						direction = Main.player[owner].direction;
					}
					rotation -= (float)direction * ((float)Math.PI * 2f) / 120f;
					scale = Opacity;
					Lighting.AddLight(base.Center, new Vector3(0.3f, 0.9f, 0.7f) * Opacity);
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector151 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust47 = Main.dust[Dust.NewDust(base.Center - vector151 * 30f, 0, 0, 229)];
						dust47.noGravity = true;
						dust47.position = base.Center - vector151 * Main.rand.Next(10, 21);
						dust47.velocity = vector151.RotatedBy(1.5707963705062866) * 6f;
						dust47.scale = 0.5f + Main.rand.NextFloat();
						dust47.fadeIn = 0.5f;
						dust47.customData = base.Center;
					}
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector152 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
						Dust dust48 = Main.dust[Dust.NewDust(base.Center - vector152 * 30f, 0, 0, 240)];
						dust48.noGravity = true;
						dust48.position = base.Center - vector152 * 30f;
						dust48.velocity = vector152.RotatedBy(-1.5707963705062866) * 3f;
						dust48.scale = 0.5f + Main.rand.NextFloat();
						dust48.fadeIn = 0.5f;
						dust48.customData = base.Center;
					}
					if (this.ai[0] < 0f)
					{
						Vector2 center15 = base.Center;
						int num939 = Dust.NewDust(center15 - Vector2.One * 8f, 16, 16, 229, velocity.X / 2f, velocity.Y / 2f);
						Dust dust2 = Main.dust[num939];
						dust2.velocity *= 2f;
						Main.dust[num939].noGravity = true;
						Main.dust[num939].scale = Utils.SelectRandom<float>(Main.rand, 0.8f, 1.65f);
						Main.dust[num939].customData = this;
					}
				}
				if (flag55)
				{
					alpha -= 5;
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (direction == 0)
					{
						direction = Main.player[owner].direction;
					}
					if (++frameCounter >= 3)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
					if (alpha == 0 && Main.rand.Next(15) == 0)
					{
						Dust dust49 = Main.dust[Dust.NewDust(base.Top, 0, 0, 261, 0f, 0f, 100)];
						dust49.velocity.X = 0f;
						dust49.noGravity = true;
						dust49.fadeIn = 1f;
						dust49.position = base.Center + Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (4f * Main.rand.NextFloat() + 26f);
						dust49.scale = 0.5f;
					}
					localAI[0]++;
					if (localAI[0] >= 60f)
					{
						localAI[0] = 0f;
					}
				}
				if (this.ai[0] < 0f)
				{
					this.ai[0]++;
					if (flag54)
					{
						this.ai[1] -= (float)direction * ((float)Math.PI / 8f) / 50f;
					}
				}
				if (this.ai[0] == 0f)
				{
					int num940 = -1;
					float num941 = num938;
					NPC ownerMinionAttackTargetNPC4 = OwnerMinionAttackTargetNPC;
					if (ownerMinionAttackTargetNPC4 != null && ownerMinionAttackTargetNPC4.CanBeChasedBy(this))
					{
						float num942 = Distance(ownerMinionAttackTargetNPC4.Center);
						if (num942 < num941 && Collision.CanHitLine(base.Center, 0, 0, ownerMinionAttackTargetNPC4.Center, 0, 0))
						{
							num941 = num942;
							num940 = ownerMinionAttackTargetNPC4.whoAmI;
						}
					}
					if (num940 < 0)
					{
						for (int num943 = 0; num943 < 200; num943++)
						{
							NPC nPC10 = Main.npc[num943];
							if (nPC10.CanBeChasedBy(this))
							{
								float num944 = Distance(nPC10.Center);
								if (num944 < num941 && Collision.CanHitLine(base.Center, 0, 0, nPC10.Center, 0, 0))
								{
									num941 = num944;
									num940 = num943;
								}
							}
						}
					}
					if (num940 != -1)
					{
						this.ai[0] = 1f;
						this.ai[1] = num940;
						netUpdate = true;
						return;
					}
				}
				if (!(this.ai[0] > 0f))
				{
					return;
				}
				int num945 = (int)this.ai[1];
				if (!Main.npc[num945].CanBeChasedBy(this))
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
					netUpdate = true;
					return;
				}
				this.ai[0]++;
				float num946 = 30f;
				if (flag55)
				{
					num946 = 5f;
				}
				if (!(this.ai[0] >= num946))
				{
					return;
				}
				Vector2 vector153 = DirectionTo(Main.npc[num945].Center);
				if (vector153.HasNaNs())
				{
					vector153 = Vector2.UnitY;
				}
				float num947 = vector153.ToRotation();
				int num948 = ((vector153.X > 0f) ? 1 : (-1));
				if (flag54)
				{
					direction = num948;
					this.ai[0] = -60f;
					this.ai[1] = num947 + (float)num948 * (float)Math.PI / 16f;
					netUpdate = true;
					if (owner == Main.myPlayer)
					{
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector153.X, vector153.Y, 642, damage, knockBack, owner, 0f, whoAmI);
					}
				}
				if (!flag55)
				{
					return;
				}
				direction = num948;
				this.ai[0] = -20f;
				netUpdate = true;
				if (owner != Main.myPlayer)
				{
					return;
				}
				NPC nPC11 = Main.npc[num945];
				Vector2 vector154 = nPC11.position + nPC11.Size * Utils.RandomVector2(Main.rand, 0f, 1f) - base.Center;
				for (int num949 = 0; num949 < 3; num949++)
				{
					Vector2 other = base.Center + vector154;
					Vector2 vector155 = nPC11.velocity * 30f;
					other += vector155;
					float num950 = MathHelper.Lerp(0.1f, 0.75f, Utils.GetLerpValue(800f, 200f, Distance(other)));
					if (num949 > 0)
					{
						other = base.Center + vector154.RotatedByRandom(0.78539818525314331) * (Main.rand.NextFloat() * num950 + 0.5f);
					}
					float x6 = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
					NewProjectile(GetProjectileSource_FromThis(), other.X, other.Y, 0f, 0f, 644, damage, knockBack, owner, x6, whoAmI);
				}
			}
			else if (aiStyle == 124)
			{
				bool flag56 = type == 650;
				Player player12 = Main.player[owner];
				if (player12.dead)
				{
					Kill();
					return;
				}
				if (type == 650 && player12.suspiciouslookingTentacle)
				{
					timeLeft = 2;
				}
				if (type == 882 && player12.petFlagEyeOfCthulhuPet)
				{
					timeLeft = 2;
				}
				if (type == 888 && player12.petFlagTwinsPet)
				{
					timeLeft = 2;
				}
				if (type == 895 && player12.petFlagFairyQueenPet)
				{
					timeLeft = 2;
				}
				if (type == 896 && player12.petFlagPumpkingPet)
				{
					timeLeft = 2;
				}
				if (type == 898 && player12.petFlagIceQueenPet)
				{
					timeLeft = 2;
				}
				if (type == 957 && player12.petFlagGlommerPet)
				{
					timeLeft = 2;
				}
				direction = (spriteDirection = player12.direction);
				if (type == 650)
				{
					Vector3 vector156 = (DelegateMethods.v3_1 = new Vector3(0.5f, 0.9f, 1f) * 2f);
					Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 20f, DelegateMethods.CastLightOpen);
					Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
					Utils.PlotTileLine(player12.Center, player12.Center + player12.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
					Utils.PlotTileLine(player12.Left, player12.Right, 40f, DelegateMethods.CastLightOpen);
				}
				if (type == 895)
				{
					Vector3 vector157 = new Vector3(1f, 0.6f, 1f) * 1.5f;
					DelegateMethods.v3_1 = vector157 * 0.75f;
					Utils.PlotTileLine(player12.Center, player12.Center + player12.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
					Utils.PlotTileLine(player12.Left, player12.Right, 40f, DelegateMethods.CastLightOpen);
					DelegateMethods.v3_1 = vector157 * 1.5f;
					Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 30f, DelegateMethods.CastLightOpen);
					Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
				}
				if (type == 896)
				{
					Vector3 vector158 = new Vector3(1f, 0.7f, 0.05f) * 1.5f;
					DelegateMethods.v3_1 = vector158 * 0.75f;
					Utils.PlotTileLine(player12.Center, player12.Center + player12.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
					Utils.PlotTileLine(player12.Left, player12.Right, 40f, DelegateMethods.CastLightOpen);
					DelegateMethods.v3_1 = vector158 * 1.5f;
					Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 30f, DelegateMethods.CastLightOpen);
					Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
				}
				float num951 = 30f;
				float y5 = -20f;
				int num952 = player12.direction;
				if (type == 882 && player12.ownedProjectileCounts[650] > 0)
				{
					num952 *= -1;
				}
				if (type == 888)
				{
					num951 = 30f;
					y5 = -50f;
					if (player12.ownedProjectileCounts[650] > 0)
					{
						y5 = -70f;
					}
				}
				if (type == 895)
				{
					num951 = -36f;
					y5 = -50f;
				}
				if (type == 896)
				{
					num951 = 30f;
					y5 = -60f;
					if (player12.ownedProjectileCounts[888] > 0)
					{
						num951 = -30f;
					}
				}
				if (type == 898)
				{
					num951 = -30f;
					y5 = -50f;
					if (player12.ownedProjectileCounts[895] > 0)
					{
						num951 = 30f;
					}
				}
				if (type == 957)
				{
					num951 = -40f;
					y5 = -40f;
					if (player12.ownedProjectileCounts[895] > 0)
					{
						num951 = 40f;
					}
				}
				Vector2 vector159 = new Vector2((float)num952 * num951, y5);
				Vector2 vector160 = player12.MountedCenter + vector159;
				float num953 = Vector2.Distance(base.Center, vector160);
				if (num953 > 1000f)
				{
					base.Center = player12.Center + vector159;
				}
				Vector2 vector161 = vector160 - base.Center;
				float num954 = 4f;
				if (num953 < num954)
				{
					velocity *= 0.25f;
				}
				if (vector161 != Vector2.Zero)
				{
					if (vector161.Length() < num954)
					{
						velocity = vector161;
					}
					else
					{
						velocity = vector161 * 0.1f;
					}
				}
				if (num953 > 50f && (type == 895 || type == 898 || type == 957))
				{
					direction = (spriteDirection = 1);
					if (velocity.X < 0f)
					{
						direction = (spriteDirection = -1);
					}
				}
				if (velocity.Length() > 6f)
				{
					if (type == 650)
					{
						float num955 = velocity.ToRotation() + (float)Math.PI / 2f;
						if (Math.Abs(rotation - num955) >= (float)Math.PI)
						{
							if (num955 < rotation)
							{
								rotation -= (float)Math.PI * 2f;
							}
							else
							{
								rotation += (float)Math.PI * 2f;
							}
						}
						float num956 = 12f;
						rotation = (rotation * (num956 - 1f) + num955) / num956;
						if (++frameCounter >= 4)
						{
							frameCounter = 0;
							if (++frame >= Main.projFrames[type])
							{
								frame = 0;
							}
						}
					}
					else if (type == 882)
					{
						rotation = velocity.X * 0.125f;
						if (++frameCounter >= 3)
						{
							frameCounter = 0;
							if (frame < 6)
							{
								frame = 6;
							}
							else
							{
								frame++;
								if (frame > 15)
								{
									frame = 10;
								}
							}
						}
					}
					else if (type == 888)
					{
						float num957 = velocity.ToRotation() + (float)Math.PI / 2f;
						if (Math.Abs(rotation - num957) >= (float)Math.PI)
						{
							if (num957 < rotation)
							{
								rotation -= (float)Math.PI * 2f;
							}
							else
							{
								rotation += (float)Math.PI * 2f;
							}
						}
						float num958 = 12f;
						rotation = (rotation * (num958 - 1f) + num957) / num958;
						if (++frameCounter >= 3)
						{
							frameCounter = 0;
							if (frame < 6)
							{
								frame = 6;
							}
							else
							{
								frame++;
								if (frame > 17)
								{
									frame = 6;
								}
							}
						}
					}
					else if (type == 895)
					{
						float num959 = velocity.X * 0.1f;
						if (Math.Abs(rotation - num959) >= (float)Math.PI)
						{
							if (num959 < rotation)
							{
								rotation -= (float)Math.PI * 2f;
							}
							else
							{
								rotation += (float)Math.PI * 2f;
							}
						}
						float num960 = 12f;
						rotation = (rotation * (num960 - 1f) + num959) / num960;
						if (++frameCounter >= 3)
						{
							frameCounter = 0;
							frame++;
							if (frame >= Main.projFrames[type])
							{
								frame = 0;
							}
						}
						if (frameCounter == 0)
						{
							int num961 = Dust.NewDust(base.position, width, height, 242, 0f, 0f, 50, default(Color), 2f);
							Main.dust[num961].noGravity = true;
						}
					}
					else if (type == 896)
					{
						float num962 = velocity.ToRotation() + (float)Math.PI / 2f;
						if (Math.Abs(rotation - num962) >= (float)Math.PI)
						{
							if (num962 < rotation)
							{
								rotation -= (float)Math.PI * 2f;
							}
							else
							{
								rotation += (float)Math.PI * 2f;
							}
						}
						float num963 = 12f;
						rotation = (rotation * (num963 - 1f) + num962) / num963;
						if (++frameCounter >= 4)
						{
							frameCounter = 0;
							if (frame < 8)
							{
								frame = 8;
							}
							else
							{
								frame++;
								if (frame >= Main.projFrames[type])
								{
									frame = 8;
								}
							}
						}
					}
					else if (type == 898)
					{
						float num964 = velocity.X * 0.1f;
						if (Math.Abs(rotation - num964) >= (float)Math.PI)
						{
							if (num964 < rotation)
							{
								rotation -= (float)Math.PI * 2f;
							}
							else
							{
								rotation += (float)Math.PI * 2f;
							}
						}
						float num965 = 12f;
						rotation = (rotation * (num965 - 1f) + num964) / num965;
						if (++frameCounter >= 3)
						{
							frameCounter = 0;
							frame++;
							if (frame >= Main.projFrames[type])
							{
								frame = 0;
							}
						}
						if (frameCounter == 0)
						{
							int num966 = Dust.NewDust(base.position, width, height, 80, 0f, 0f, 50);
							Main.dust[num966].noGravity = true;
						}
					}
					else if (type == 957)
					{
						float num967 = velocity.X * 0.05f;
						if (Math.Abs(rotation - num967) >= (float)Math.PI)
						{
							if (num967 < rotation)
							{
								rotation -= (float)Math.PI * 2f;
							}
							else
							{
								rotation += (float)Math.PI * 2f;
							}
						}
						float num968 = 12f;
						rotation = (rotation * (num968 - 1f) + num967) / num968;
						if (++frameCounter >= 4)
						{
							frameCounter = 0;
							frame++;
							if (frame >= Main.projFrames[type] * 2)
							{
								frame = 0;
							}
						}
					}
				}
				else if (type == 650)
				{
					if (rotation > (float)Math.PI)
					{
						rotation -= (float)Math.PI * 2f;
					}
					if (rotation > -0.005f && rotation < 0.005f)
					{
						rotation = 0f;
					}
					else
					{
						rotation *= 0.96f;
					}
					if (++frameCounter >= 6)
					{
						frameCounter = 0;
						if (++frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
				}
				else if (type == 882)
				{
					rotation = velocity.X * 0.125f;
					if (++frameCounter >= 5)
					{
						frameCounter = 0;
						frame++;
						if (frame == 6 || frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
				}
				else if (type == 888)
				{
					if (rotation > (float)Math.PI)
					{
						rotation -= (float)Math.PI * 2f;
					}
					if (rotation > -0.005f && rotation < 0.005f)
					{
						rotation = 0f;
					}
					else
					{
						rotation *= 0.96f;
					}
					if (++frameCounter >= 5)
					{
						frameCounter = 0;
						frame++;
						if (frame == 6 || frame >= 18)
						{
							frame = 0;
						}
					}
				}
				else if (type == 895)
				{
					if (rotation > (float)Math.PI)
					{
						rotation -= (float)Math.PI * 2f;
					}
					if (rotation > -0.005f && rotation < 0.005f)
					{
						rotation = 0f;
					}
					else
					{
						rotation *= 0.96f;
					}
					if (++frameCounter >= 5)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
				}
				else if (type == 896)
				{
					if (rotation > (float)Math.PI)
					{
						rotation -= (float)Math.PI * 2f;
					}
					if (rotation > -0.005f && rotation < 0.005f)
					{
						rotation = 0f;
					}
					else
					{
						rotation *= 0.96f;
					}
					if (++frameCounter >= 5)
					{
						frameCounter = 0;
						frame++;
						if (frame == 8 || frame >= Main.projFrames[type])
						{
							frame = 0;
							if (Main.rand.Next(15) == 0)
							{
								frame = 8;
							}
						}
					}
				}
				else if (type == 898)
				{
					if (rotation > (float)Math.PI)
					{
						rotation -= (float)Math.PI * 2f;
					}
					if (rotation > -0.005f && rotation < 0.005f)
					{
						rotation = 0f;
					}
					else
					{
						rotation *= 0.96f;
					}
					if (++frameCounter >= 5)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 0;
						}
					}
				}
				else if (type == 957)
				{
					int num969 = Main.projFrames[type];
					if (rotation > (float)Math.PI)
					{
						rotation -= (float)Math.PI * 2f;
					}
					if (rotation > -0.005f && rotation < 0.005f)
					{
						rotation = 0f;
					}
					else
					{
						rotation *= 0.96f;
					}
					if (velocity.Length() <= 0.01f)
					{
						bool flag57 = true;
						int num970 = (int)base.Center.X / 16;
						int num971 = (int)base.Center.Y / 16;
						int num972 = 4;
						for (int num973 = 0; num973 < num972 + 1; num973++)
						{
							if (num970 < 0 || num970 >= Main.maxTilesX || num971 < 0 || num971 >= Main.maxTilesY)
							{
								flag57 = false;
								break;
							}
							bool flag58 = WorldGen.SolidTileAllowBottomSlope(num970, num971);
							if ((num973 == num972 && !flag58) || (num973 < num972 && flag58))
							{
								flag57 = false;
								break;
							}
							num971++;
						}
						if (flag57)
						{
							localAI[0]--;
							if (localAI[0] <= 0f)
							{
								localAI[0] = 0f;
								if (frame < num969 * 2)
								{
									frame = num969 * 2;
								}
								int num974 = 3;
								if (frame <= 30 && frame <= 33)
								{
									num974 = 2;
								}
								if (++frameCounter >= num974)
								{
									frameCounter = 0;
									frame++;
									if (frame >= num969 * 3)
									{
										localAI[0] = 200 + Main.rand.Next(150);
										frame = 0;
									}
									if (frame == 32)
									{
										SoundEngine.PlaySound(SoundID.GlommerBounce, base.Bottom);
									}
								}
							}
							else if (++frameCounter >= 4)
							{
								frameCounter = 0;
								frame++;
								if (frame >= num969 * 2)
								{
									frame = 0;
								}
							}
						}
						else
						{
							localAI[0] = 300f;
							if (++frameCounter >= 4)
							{
								frameCounter = 0;
								frame++;
								if (frame >= num969 * 2)
								{
									frame = 0;
								}
							}
						}
					}
					else
					{
						localAI[0] = 300f;
						if (++frameCounter >= 4)
						{
							frameCounter = 0;
							frame++;
							if (frame >= num969 * 2)
							{
								frame = 0;
							}
						}
					}
				}
				if (flag56 && this.ai[0] > 0f && (this.ai[0] += 1f) >= 60f)
				{
					this.ai[0] = 0f;
					this.ai[1] = 0f;
				}
				if (flag56 && Main.rand.Next(15) == 0)
				{
					int num975 = -1;
					int num976 = -1;
					float num977 = -1f;
					int num978 = 17;
					if ((base.Center - player12.Center).Length() < (float)Main.screenWidth)
					{
						int num979 = (int)base.Center.X / 16;
						int num980 = (int)base.Center.Y / 16;
						num979 = (int)MathHelper.Clamp(num979, num978 + 1, Main.maxTilesX - num978 - 1);
						num980 = (int)MathHelper.Clamp(num980, num978 + 1, Main.maxTilesY - num978 - 1);
						for (int num981 = num979 - num978; num981 <= num979 + num978; num981++)
						{
							for (int num982 = num980 - num978; num982 <= num980 + num978; num982++)
							{
								int num983 = Main.rand.Next(8);
								if (num983 < 4 && new Vector2(num979 - num981, num980 - num982).Length() < (float)num978 && Main.tile[num981, num982] != null && Main.tile[num981, num982].active() && Main.IsTileSpelunkable(Main.tile[num981, num982]))
								{
									float num984 = Distance(new Vector2(num981 * 16 + 8, num982 * 16 + 8));
									if (num984 < num977 || num977 == -1f)
									{
										num977 = num984;
										num975 = num981;
										num976 = num982;
										this.ai[0] = 1f;
										this.ai[1] = AngleTo(new Vector2(num981 * 16 + 8, num982 * 16 + 8));
									}
									if (num983 < 2)
									{
										int num985 = Dust.NewDust(new Vector2(num981 * 16, num982 * 16), 16, 16, 204, 0f, 0f, 150, default(Color), 0.3f);
										Main.dust[num985].fadeIn = 0.75f;
										Dust dust2 = Main.dust[num985];
										dust2.velocity *= 0.1f;
									}
								}
							}
						}
					}
				}
				if (!flag56)
				{
					return;
				}
				float f3 = localAI[0] % ((float)Math.PI * 2f) - (float)Math.PI;
				float num986 = (float)Math.IEEERemainder(localAI[1], 1.0);
				if (num986 < 0f)
				{
					num986 += 1f;
				}
				float num987 = (float)Math.Floor(localAI[1]);
				float max = 0.999f;
				float num988 = 0f;
				int num989 = 0;
				float amount2 = 0.1f;
				bool flag59 = player12.velocity.Length() > 3f;
				int num990 = -1;
				int num991 = -1;
				float num992 = 300f;
				float num993 = 500f;
				for (int num994 = 0; num994 < 200; num994++)
				{
					NPC nPC12 = Main.npc[num994];
					if (!nPC12.active || !nPC12.chaseable || nPC12.dontTakeDamage || nPC12.immortal)
					{
						continue;
					}
					float num995 = Distance(nPC12.Center);
					if (nPC12.friendly || nPC12.lifeMax <= 5)
					{
						if (num995 < num992 && !flag59)
						{
							num992 = num995;
							num991 = num994;
						}
					}
					else if (num995 < num993)
					{
						num993 = num995;
						num990 = num994;
					}
				}
				if (flag59)
				{
					num988 = AngleTo(base.Center + player12.velocity);
					num989 = 1;
					num986 = MathHelper.Clamp(num986 + 0.05f, 0f, max);
					num987 += (float)Math.Sign(-10f - num987);
				}
				else if (num990 != -1)
				{
					num988 = AngleTo(Main.npc[num990].Center);
					num989 = 2;
					num986 = MathHelper.Clamp(num986 + 0.05f, 0f, max);
					num987 += (float)Math.Sign(-12f - num987);
				}
				else if (num991 != -1)
				{
					num988 = AngleTo(Main.npc[num991].Center);
					num989 = 3;
					num986 = MathHelper.Clamp(num986 + 0.05f, 0f, max);
					num987 += (float)Math.Sign(6f - num987);
				}
				else if (this.ai[0] > 0f)
				{
					num988 = this.ai[1];
					num986 = MathHelper.Clamp(num986 + (float)Math.Sign(0.75f - num986) * 0.05f, 0f, max);
					num989 = 4;
					num987 += (float)Math.Sign(10f - num987);
					if (Main.rand.Next(10) == 0)
					{
						int num996 = Dust.NewDust(base.Center + f3.ToRotationVector2() * 6f * num986 - Vector2.One * 4f, 8, 8, 204, 0f, 0f, 150, default(Color), 0.3f);
						Main.dust[num996].fadeIn = 0.75f;
						Dust dust2 = Main.dust[num996];
						dust2.velocity *= 0.1f;
					}
				}
				else
				{
					num988 = ((player12.direction == 1) ? 0f : 3.14160275f);
					num986 = MathHelper.Clamp(num986 + (float)Math.Sign(0.75f - num986) * 0.05f, 0f, max);
					num987 += (float)Math.Sign(0f - num987);
					amount2 = 0.12f;
				}
				Vector2 value18 = num988.ToRotationVector2();
				num988 = Vector2.Lerp(f3.ToRotationVector2(), value18, amount2).ToRotation();
				localAI[0] = num988 + (float)num989 * ((float)Math.PI * 2f) + (float)Math.PI;
				localAI[1] = num987 + num986;
			}
			else if (aiStyle == 125)
			{
				Player player13 = Main.player[owner];
				if (Main.myPlayer == owner)
				{
					if (localAI[1] > 0f)
					{
						localAI[1]--;
					}
					if (player13.noItems || player13.CCed || player13.dead)
					{
						Kill();
					}
					else if (Main.mouseRight && Main.mouseRightRelease)
					{
						Kill();
						player13.mouseInterface = true;
						Main.blockMouse = true;
					}
					else if (!player13.channel)
					{
						if (localAI[0] == 0f)
						{
							localAI[0] = 1f;
						}
						Kill();
					}
					else if (localAI[1] == 0f)
					{
						Vector2 vector162 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY);
						if (player13.gravDir == -1f)
						{
							vector162.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
						}
						if (vector162 != base.Center)
						{
							netUpdate = true;
							base.Center = vector162;
							localAI[1] = 1f;
						}
						if (this.ai[0] == 0f && this.ai[1] == 0f)
						{
							this.ai[0] = (int)base.Center.X / 16;
							this.ai[1] = (int)base.Center.Y / 16;
							netUpdate = true;
							velocity = Vector2.Zero;
						}
					}
					velocity = Vector2.Zero;
					Point point2 = new Vector2(this.ai[0], this.ai[1]).ToPoint();
					Point point3 = base.Center.ToTileCoordinates();
					int num997 = Math.Abs(point2.X - point3.X);
					int num998 = Math.Abs(point2.Y - point3.Y);
					int num999 = Math.Sign(point3.X - point2.X);
					int num1000 = Math.Sign(point3.Y - point2.Y);
					Point point4 = default(Point);
					bool flag60 = false;
					bool flag61 = player13.direction == 1;
					int num1001;
					int num1002;
					int num1003;
					if (flag61)
					{
						point4.X = point2.X;
						num1001 = point2.Y;
						num1002 = point3.Y;
						num1003 = num1000;
					}
					else
					{
						point4.Y = point2.Y;
						num1001 = point2.X;
						num1002 = point3.X;
						num1003 = num999;
					}
					for (int num1004 = num1001; num1004 != num1002; num1004 += num1003)
					{
						if (flag60)
						{
							break;
						}
						if (flag61)
						{
							point4.Y = num1004;
						}
						else
						{
							point4.X = num1004;
						}
						if (WorldGen.InWorld(point4.X, point4.Y, 1))
						{
							Tile tile2 = Main.tile[point4.X, point4.Y];
						}
					}
					if (flag61)
					{
						point4.Y = point3.Y;
						num1001 = point2.X;
						num1002 = point3.X;
						num1003 = num999;
					}
					else
					{
						point4.X = point3.X;
						num1001 = point2.Y;
						num1002 = point3.Y;
						num1003 = num1000;
					}
					for (int num1005 = num1001; num1005 != num1002; num1005 += num1003)
					{
						if (flag60)
						{
							break;
						}
						if (!flag61)
						{
							point4.Y = num1005;
						}
						else
						{
							point4.X = num1005;
						}
						if (WorldGen.InWorld(point4.X, point4.Y, 1))
						{
							Tile tile2 = Main.tile[point4.X, point4.Y];
						}
					}
				}
				int num1006 = Math.Sign(player13.velocity.X);
				if (num1006 != 0)
				{
					player13.ChangeDir(num1006);
				}
				player13.heldProj = whoAmI;
				player13.SetDummyItemTime(2);
				player13.itemRotation = 0f;
			}
			else if (aiStyle == 126)
			{
				int num1007 = Math.Sign(velocity.Y);
				int num1008 = ((num1007 != -1) ? 1 : 0);
				if (this.ai[0] == 0f)
				{
					if (!Collision.SolidCollision(base.position + new Vector2(0f, (num1007 == -1) ? (height - 48) : 0), width, 48) && !Collision.WetCollision(base.position + new Vector2(0f, (num1007 == -1) ? (height - 20) : 0), width, 20))
					{
						velocity = new Vector2(0f, (float)Math.Sign(velocity.Y) * 0.001f);
						this.ai[0] = 1f;
						this.ai[1] = 0f;
						timeLeft = 60;
					}
					this.ai[1]++;
					if (this.ai[1] >= 60f)
					{
						Kill();
					}
					for (int num1009 = 0; num1009 < 3; num1009++)
					{
						int num1010 = Dust.NewDust(base.position, width, height, 31, 0f, 0f, 100);
						Main.dust[num1010].scale = 0.1f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num1010].fadeIn = 1.5f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num1010].noGravity = true;
						Main.dust[num1010].position = base.Center + new Vector2(0f, -height / 2).RotatedBy(rotation) * 1.1f;
					}
				}
				if (this.ai[0] != 1f)
				{
					return;
				}
				velocity = new Vector2(0f, (float)Math.Sign(velocity.Y) * 0.001f);
				if (num1007 != 0)
				{
					int num1011 = 16;
					int num1012 = 320;
					if (type == 670)
					{
						num1012 -= (int)Math.Abs(localAI[1]) * 64;
					}
					for (; num1011 < num1012 && !Collision.SolidCollision(base.position + new Vector2(0f, (num1007 == -1) ? (height - num1011 - 16) : 0), width, num1011 + 16); num1011 += 16)
					{
					}
					if (num1007 == -1)
					{
						base.position.Y += height;
						height = num1011;
						base.position.Y -= num1011;
					}
					else
					{
						height = num1011;
					}
				}
				this.ai[1]++;
				if (type == 670 && owner == Main.myPlayer && this.ai[1] == 12f && localAI[1] < 3f && localAI[1] > -3f)
				{
					if (localAI[1] == 0f)
					{
						int num1013 = NewProjectile(GetProjectileSource_FromThis(), base.Bottom + new Vector2(-50f, -10f), -Vector2.UnitY, type, damage, knockBack, owner);
						Main.projectile[num1013].localAI[1] = localAI[1] - 1f;
						num1013 = NewProjectile(GetProjectileSource_FromThis(), base.Bottom + new Vector2(50f, -10f), -Vector2.UnitY, type, damage, knockBack, owner);
						Main.projectile[num1013].localAI[1] = localAI[1] + 1f;
					}
					else
					{
						int num1014 = Math.Sign(localAI[1]);
						int num1015 = NewProjectile(GetProjectileSource_FromThis(), base.Bottom + new Vector2(50 * num1014, -10f), -Vector2.UnitY, type, damage, knockBack, owner);
						Main.projectile[num1015].localAI[1] = localAI[1] + (float)num1014;
					}
				}
				if (this.ai[1] >= 60f)
				{
					Kill();
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num1016 = 0; (float)num1016 < 60f; num1016++)
					{
						int num1017 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
						int num1018 = Dust.NewDust(base.position, width, height, num1017, 0f, -2.5f * (float)(-num1007));
						Main.dust[num1018].alpha = 200;
						Dust dust2 = Main.dust[num1018];
						dust2.velocity *= new Vector2(0.3f, 2f);
						Main.dust[num1018].velocity.Y += 2 * num1007;
						dust2 = Main.dust[num1018];
						dust2.scale += Main.rand.NextFloat();
						Main.dust[num1018].position = new Vector2(base.Center.X, base.Center.Y + (float)height * 0.5f * (float)(-num1007));
						Main.dust[num1018].customData = num1008;
						if (num1007 == -1 && Main.rand.Next(4) != 0)
						{
							Main.dust[num1018].velocity.Y -= 0.2f;
						}
					}
					SoundEngine.PlaySound(SoundID.Item34, base.position);
				}
				if (num1007 == 1)
				{
					for (int num1019 = 0; (float)num1019 < 9f; num1019++)
					{
						int num1020 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
						int num1021 = Dust.NewDust(base.position, width, height, num1020, 0f, -2.5f * (float)(-num1007));
						Main.dust[num1021].alpha = 200;
						Dust dust2 = Main.dust[num1021];
						dust2.velocity *= new Vector2(0.3f, 2f);
						Main.dust[num1021].velocity.Y += 2 * num1007;
						dust2 = Main.dust[num1021];
						dust2.scale += Main.rand.NextFloat();
						Main.dust[num1021].position = new Vector2(base.Center.X, base.Center.Y + (float)height * 0.5f * (float)(-num1007));
						Main.dust[num1021].customData = num1008;
						if (num1007 == -1 && Main.rand.Next(4) != 0)
						{
							Main.dust[num1021].velocity.Y -= 0.2f;
						}
					}
				}
				int num1022 = (int)(this.ai[1] / 60f * (float)height) * 3;
				if (num1022 > height)
				{
					num1022 = height;
				}
				Vector2 vector163 = base.position + ((num1007 == -1) ? new Vector2(0f, height - num1022) : Vector2.Zero);
				Vector2 vector164 = base.position + ((num1007 == -1) ? new Vector2(0f, height) : Vector2.Zero);
				for (int num1023 = 0; (float)num1023 < 6f; num1023++)
				{
					if (Main.rand.Next(3) < 2)
					{
						int num1024 = Dust.NewDust(vector163, width, num1022, 6, 0f, 0f, 90, default(Color), 2.5f);
						Main.dust[num1024].noGravity = true;
						Main.dust[num1024].fadeIn = 1f;
						if (Main.dust[num1024].velocity.Y > 0f)
						{
							Main.dust[num1024].velocity.Y *= -1f;
						}
						if (Main.rand.Next(6) < 3)
						{
							Main.dust[num1024].position.Y = MathHelper.Lerp(Main.dust[num1024].position.Y, vector164.Y, 0.5f);
							Dust dust2 = Main.dust[num1024];
							dust2.velocity *= 5f;
							Main.dust[num1024].velocity.Y -= 3f;
							Main.dust[num1024].position.X = base.Center.X;
							Main.dust[num1024].noGravity = false;
							Main.dust[num1024].noLight = true;
							Main.dust[num1024].fadeIn = 0.4f;
							dust2 = Main.dust[num1024];
							dust2.scale *= 0.3f;
						}
						else
						{
							Main.dust[num1024].velocity = DirectionFrom(Main.dust[num1024].position) * Main.dust[num1024].velocity.Length() * 0.25f;
						}
						Main.dust[num1024].velocity.Y *= -num1007;
						Main.dust[num1024].customData = num1008;
					}
				}
				for (int num1025 = 0; (float)num1025 < 6f; num1025++)
				{
					if (!(Main.rand.NextFloat() < 0.5f))
					{
						int num1026 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
						int num1027 = Dust.NewDust(vector163, width, num1022, num1026, 0f, -2.5f * (float)(-num1007));
						Main.dust[num1027].alpha = 200;
						Dust dust2 = Main.dust[num1027];
						dust2.velocity *= new Vector2(0.6f, 1.5f);
						dust2 = Main.dust[num1027];
						dust2.scale += Main.rand.NextFloat();
						if (num1007 == -1 && Main.rand.Next(4) != 0)
						{
							Main.dust[num1027].velocity.Y -= 0.2f;
						}
						Main.dust[num1027].customData = num1008;
					}
				}
			}
			else if (aiStyle == 127)
			{
				float num1028 = 900f;
				if (type == 657)
				{
					num1028 = 300f;
				}
				if (soundDelay == 0)
				{
					soundDelay = -1;
					SoundEngine.PlaySound(SoundID.Item82, base.Center);
				}
				this.ai[0]++;
				if (this.ai[0] >= num1028)
				{
					Kill();
				}
				if (type == 656 && localAI[0] >= 30f)
				{
					damage = 0;
					if (this.ai[0] < num1028 - 120f)
					{
						float num1029 = this.ai[0] % 60f;
						this.ai[0] = num1028 - 120f + num1029;
						netUpdate = true;
					}
				}
				float num1030 = 15f;
				float num1031 = 15f;
				Point point5 = base.Center.ToTileCoordinates();
				Collision.ExpandVertically(point5.X, point5.Y, out var topY, out var bottomY, (int)num1030, (int)num1031);
				topY++;
				bottomY--;
				Vector2 value19 = new Vector2(point5.X, topY) * 16f + new Vector2(8f);
				Vector2 value20 = new Vector2(point5.X, bottomY) * 16f + new Vector2(8f);
				Vector2 vector165 = Vector2.Lerp(value19, value20, 0.5f);
				Vector2 vector166 = new Vector2(0f, value20.Y - value19.Y);
				vector166.X = vector166.Y * 0.2f;
				width = (int)(vector166.X * 0.65f);
				height = (int)vector166.Y;
				base.Center = vector165;
				if (type == 656 && owner == Main.myPlayer)
				{
					bool flag62 = false;
					Vector2 center16 = Main.player[owner].Center;
					Vector2 top = Main.player[owner].Top;
					for (float num1032 = 0f; num1032 < 1f; num1032 += 0.05f)
					{
						Vector2 position = Vector2.Lerp(value19, value20, num1032);
						if (Collision.CanHitLine(position, 0, 0, center16, 0, 0) || Collision.CanHitLine(position, 0, 0, top, 0, 0))
						{
							flag62 = true;
							break;
						}
					}
					if (!flag62 && this.ai[0] < num1028 - 120f)
					{
						float num1033 = this.ai[0] % 60f;
						this.ai[0] = num1028 - 120f + num1033;
						netUpdate = true;
					}
				}
				if (!(this.ai[0] < num1028 - 120f))
				{
					return;
				}
				for (int num1034 = 0; num1034 < 1; num1034++)
				{
					float value21 = -0.5f;
					float value22 = 0.9f;
					float amount3 = Main.rand.NextFloat();
					Vector2 vector167 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value21, value22, amount3));
					vector167.X *= MathHelper.Lerp(2.2f, 0.6f, amount3);
					vector167.X *= -1f;
					Vector2 vector168 = new Vector2(6f, 10f);
					Vector2 vector169 = vector165 + vector166 * vector167 * 0.5f + vector168;
					Dust dust50 = Main.dust[Dust.NewDust(vector169, 0, 0, 269)];
					dust50.position = vector169;
					dust50.customData = vector165 + vector168;
					dust50.fadeIn = 1f;
					dust50.scale = 0.3f;
					if (vector167.X > -1.2f)
					{
						dust50.velocity.X = 1f + Main.rand.NextFloat();
					}
					dust50.velocity.Y = Main.rand.NextFloat() * -0.5f - 1f;
				}
			}
			else if (aiStyle == 128)
			{
				Color newColor4 = new Color(255, 255, 255);
				if (soundDelay == 0)
				{
					soundDelay = -1;
					SoundEngine.PlaySound(SoundID.Item60, base.Center);
				}
				if (localAI[1] < 30f)
				{
					for (int num1035 = 0; num1035 < 1; num1035++)
					{
						float value23 = -0.5f;
						float value24 = 0.9f;
						float amount4 = Main.rand.NextFloat();
						Vector2 vector170 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value23, value24, amount4));
						vector170.X *= MathHelper.Lerp(2.2f, 0.6f, amount4);
						vector170.X *= -1f;
						Vector2 vector171 = new Vector2(2f, 10f);
						Vector2 vector172 = base.Center + new Vector2(60f, 200f) * vector170 * 0.5f + vector171;
						Dust dust51 = Main.dust[Dust.NewDust(vector172, 0, 0, 269)];
						dust51.position = vector172;
						dust51.customData = base.Center + vector171;
						dust51.fadeIn = 1f;
						dust51.scale = 0.3f;
						if (vector170.X > -1.2f)
						{
							dust51.velocity.X = 1f + Main.rand.NextFloat();
						}
						dust51.velocity.Y = Main.rand.NextFloat() * -0.5f - 1f;
					}
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 0.8f;
					direction = 1;
					Point point6 = base.Center.ToTileCoordinates();
					base.Center = new Vector2(point6.X * 16 + 8, point6.Y * 16 + 8);
				}
				rotation = localAI[1] / 40f * ((float)Math.PI * 2f) * (float)direction;
				if (localAI[1] < 33f)
				{
					if (alpha > 0)
					{
						alpha -= 8;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (localAI[1] > 103f)
				{
					if (alpha < 255)
					{
						alpha += 16;
					}
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
				if (alpha == 0)
				{
					Lighting.AddLight(base.Center, newColor4.ToVector3() * 0.5f);
				}
				for (int num1036 = 0; num1036 < 2; num1036++)
				{
					if (Main.rand.Next(10) == 0)
					{
						Vector2 vector173 = Vector2.UnitY.RotatedBy((float)num1036 * (float)Math.PI).RotatedBy(rotation);
						Dust dust52 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor4, 1.5f)];
						dust52.noGravity = true;
						dust52.noLight = true;
						dust52.scale = Opacity * localAI[0];
						dust52.position = base.Center;
						dust52.velocity = vector173 * 2.5f;
					}
				}
				for (int num1037 = 0; num1037 < 2; num1037++)
				{
					if (Main.rand.Next(10) == 0)
					{
						Vector2 vector174 = Vector2.UnitY.RotatedBy((float)num1037 * (float)Math.PI);
						Dust dust53 = Main.dust[Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 225, newColor4, 1.5f)];
						dust53.noGravity = true;
						dust53.noLight = true;
						dust53.scale = Opacity * localAI[0];
						dust53.position = base.Center;
						dust53.velocity = vector174 * 2.5f;
					}
				}
				if (localAI[1] < 33f || localAI[1] > 87f)
				{
					scale = Opacity / 2f * localAI[0];
				}
				velocity = Vector2.Zero;
				localAI[1]++;
				if (localAI[1] == 60f && owner == Main.myPlayer)
				{
					int num1038 = 30;
					if (Main.expertMode)
					{
						num1038 = 22;
					}
					NewProjectile(GetProjectileSource_FromThis(), base.Center, Vector2.Zero, 657, num1038, 3f, owner);
				}
				if (localAI[1] >= 120f)
				{
					Kill();
				}
			}
			else if (aiStyle == 129)
			{
				float num1039 = 10f;
				float num1040 = 5f;
				float num1041 = 40f;
				if (type == 659)
				{
					num1039 = 3f;
					num1040 = 7.5f;
					num1041 = 1f;
					if (localAI[0] > 0f)
					{
						localAI[0]--;
					}
					if (localAI[0] == 0f && this.ai[0] < 0f && owner == Main.myPlayer)
					{
						localAI[0] = 5f;
						for (int num1042 = 0; num1042 < 200; num1042++)
						{
							NPC nPC13 = Main.npc[num1042];
							if (nPC13.CanBeChasedBy(this))
							{
								bool flag63 = this.ai[0] < 0f || Main.npc[(int)this.ai[0]].Distance(base.Center) > nPC13.Distance(base.Center);
								if ((flag63 & (nPC13.Distance(base.Center) < 400f)) && (Collision.CanHitLine(base.Center, 0, 0, nPC13.Center, 0, 0) || Collision.CanHitLine(base.Center, 0, 0, nPC13.Top, 0, 0)))
								{
									this.ai[0] = num1042;
								}
							}
						}
						if (this.ai[0] >= 0f)
						{
							timeLeft = 300;
							netUpdate = true;
						}
					}
					if (timeLeft > 30 && alpha > 0)
					{
						alpha -= 12;
					}
					if (timeLeft > 30 && alpha < 128 && Collision.SolidCollision(base.position, width, height))
					{
						alpha = 128;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (++frameCounter > 4)
					{
						frameCounter = 0;
						if (++frame >= 4)
						{
							frame = 0;
						}
					}
					float num1043 = 0.5f;
					if (timeLeft < 120)
					{
						num1043 = 1.1f;
					}
					if (timeLeft < 60)
					{
						num1043 = 1.6f;
					}
					this.ai[1]++;
					float num1044 = this.ai[1] / 180f * ((float)Math.PI * 2f);
					for (float num1045 = 0f; num1045 < 3f; num1045++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust dust54 = Main.dust[Dust.NewDust(base.Center, 0, 0, 27, 0f, -2f)];
							dust54.position = base.Center + Vector2.UnitY.RotatedBy(num1045 * ((float)Math.PI * 2f) / 3f + this.ai[1]) * 10f;
							dust54.noGravity = true;
							dust54.velocity = DirectionFrom(dust54.position);
							dust54.scale = num1043;
							dust54.fadeIn = 0.5f;
							dust54.alpha = 200;
						}
					}
				}
				if (timeLeft > 2 && Collision.SolidCollision(base.position, width, height))
				{
					timeLeft = 2;
				}
				int num1046 = (int)this.ai[0];
				if (num1046 >= 0 && Main.npc[num1046].active)
				{
					if (Distance(Main.npc[num1046].Center) > num1041)
					{
						Vector2 vector175 = DirectionTo(Main.npc[num1046].Center);
						if (vector175.HasNaNs())
						{
							vector175 = Vector2.UnitY;
						}
						velocity = (velocity * (num1039 - 1f) + vector175 * num1040) / num1039;
					}
					return;
				}
				if (this.ai[0] == -1f && timeLeft > 5)
				{
					timeLeft = 5;
				}
				if (this.ai[0] == -2f && timeLeft > 180)
				{
					timeLeft = 180;
				}
				if (this.ai[0] >= 0f)
				{
					this.ai[0] = -1f;
					netUpdate = true;
				}
			}
			else if (aiStyle == 130)
			{
				AI_130_FlameBurstTower();
			}
			else if (aiStyle == 131)
			{
				AI_131_FlameBurstShot();
			}
			else if (aiStyle == 132)
			{
				if (localAI[1] == 0f)
				{
					if (localAI[0] == 0f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_DefeatScene, base.Center);
					}
					if (localAI[0] == 105f)
					{
						for (int num1047 = 0; num1047 < 20; num1047++)
						{
							float num1048 = (float)num1047 / 20f;
							Vector2 vector176 = new Vector2(Main.rand.NextFloat() * 10f, 0f).RotatedBy(num1048 * -(float)Math.PI + Main.rand.NextFloat() * 0.1f - 0.05f);
							Gore gore2 = Gore.NewGoreDirect(base.Center + vector176 * 3f, vector176, Utils.SelectRandom<int>(Main.rand, 1027, 1028, 1029, 1030));
							if (gore2.velocity.Y > 0f)
							{
								Gore gore = gore2;
								gore.velocity *= -0.5f;
							}
							if (gore2.velocity.Y < -5f)
							{
								gore2.velocity.Y *= 0.8f;
							}
							gore2.velocity.Y *= 1.1f;
							gore2.velocity.X *= 0.88f;
						}
					}
					if (!Main.dedServ)
					{
						if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
						{
							Filters.Scene.Activate("CrystalDestructionVortex", default(Vector2));
						}
						if (!Filters.Scene["CrystalDestructionColor"].IsActive())
						{
							Filters.Scene.Activate("CrystalDestructionColor", default(Vector2));
						}
						float num1049 = Math.Min(1f, localAI[0] / 120f);
						Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(num1049);
						Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(num1049 * 2f).UseProgress(0f)
							.UseTargetPosition(base.Center);
					}
					if (localAI[0] == 120f)
					{
						localAI[0] = 0f;
						localAI[1]++;
					}
				}
				else if (localAI[1] == 1f)
				{
					if (!Main.dedServ)
					{
						float num1050 = localAI[0] / 300f;
						float num1051 = Math.Min(1f, localAI[0] / 150f);
						velocity.Y = num1051 * -0.25f;
						if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
						{
							Filters.Scene.Activate("CrystalDestructionVortex", default(Vector2));
						}
						if (!Filters.Scene["CrystalDestructionColor"].IsActive())
						{
							Filters.Scene.Activate("CrystalDestructionColor", default(Vector2));
						}
						num1051 = 1f;
						Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(num1051);
						Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(num1051 * 2f).UseProgress(0f)
							.UseTargetPosition(base.Center);
					}
					if (localAI[0] == 300f)
					{
						localAI[0] = 0f;
						localAI[1]++;
					}
				}
				else if (localAI[1] == 2f)
				{
					float num1052 = localAI[0] / 300f;
					if (Main.netMode != 2)
					{
						Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(2f).UseProgress(num1052 * 30f);
					}
					velocity.Y -= 1f;
					if (localAI[0] == 60f)
					{
						localAI[0] = 0f;
						localAI[1]++;
					}
				}
				else if (localAI[1] == 3f)
				{
					if (!Main.dedServ)
					{
						Filters.Scene.Deactivate("CrystalDestructionVortex");
						Filters.Scene.Deactivate("CrystalDestructionColor");
					}
					Kill();
				}
				if (localAI[1] >= 1f)
				{
					for (int num1053 = 0; num1053 < 1 + (int)(0f - velocity.Y); num1053++)
					{
						if (Main.rand.Next(2) == 0)
						{
							float num1054 = Main.rand.NextFloat() * (0f - velocity.Y);
							Vector2 vector177 = new Vector2(Main.rand.NextFloat() * 0.1f - 0.05f, 0f);
							vector177.X += (float)Math.Sin((double)((base.position.Y + num1054) * 0.01f) + 6.2831854820251465 * ((double)Main.rand.Next(3) / 3.0)) * 0.5f;
							vector177.X = MathHelper.Lerp(Main.rand.NextFloat() - 0.5f, vector177.X, MathHelper.Clamp(0f - velocity.Y, 0f, 1f));
							vector177.Y = 0.5f - Math.Abs(vector177.X);
							vector177 *= new Vector2(100f, 50f);
							vector177.Y += num1054;
							Vector2 vector178 = base.Center + vector177;
							Dust dust55 = Dust.NewDustPerfect(vector178, 27, Vector2.Zero, 0, Color.White * 0.1f, 1.1f);
							dust55.velocity.Y = Main.rand.NextFloat() * 2f;
							dust55.fadeIn = 0.1f;
						}
					}
				}
				localAI[0]++;
			}
			else if (aiStyle == 133)
			{
				if (type == 673)
				{
					if (this.ai[0] == 70f)
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_SkeletonSummoned, base.Center);
					}
					this.ai[0]++;
					float opacity = 0f;
					if (this.ai[0] < 20f)
					{
						opacity = Utils.GetLerpValue(0f, 20f, this.ai[0], clamped: true);
					}
					else if (this.ai[0] < 60f)
					{
						opacity = 1f;
					}
					else if (this.ai[0] < 80f)
					{
						opacity = Utils.GetLerpValue(80f, 60f, this.ai[0], clamped: true);
					}
					else
					{
						Kill();
					}
					Opacity = opacity;
					_ = owner;
					_ = Main.myPlayer;
				}
				if (type != 674)
				{
					return;
				}
				if (this.ai[0] == 0f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_DarkMageHealImpact, base.Center);
				}
				this.ai[0]++;
				if (!(this.ai[0] >= 40f))
				{
					return;
				}
				for (int num1055 = 0; num1055 < 200; num1055++)
				{
					NPC nPC14 = Main.npc[num1055];
					if (nPC14.active && nPC14.damage >= 1 && nPC14.lifeMax >= 30 && !(Distance(nPC14.Center) > 1000f) && nPC14.type != 564 && nPC14.type != 565)
					{
						int num1056 = 500;
						int num1057 = nPC14.lifeMax - nPC14.life;
						if (num1056 > num1057)
						{
							num1056 = num1057;
						}
						if (num1056 > 0)
						{
							NPC nPC8 = nPC14;
							nPC8.life += num1056;
							nPC14.HealEffect(num1056);
							nPC14.netUpdate = true;
						}
					}
				}
				Kill();
			}
			else if (aiStyle == 134)
			{
				AI_134_Ballista();
			}
			else if (aiStyle == 135)
			{
				AI_135_OgreStomp();
			}
			else if (aiStyle == 136)
			{
				AI_136_BetsyBreath();
			}
			else if (aiStyle == 137)
			{
				AI_137_LightningAura();
			}
			else if (aiStyle == 138)
			{
				AI_138_ExplosiveTrap();
			}
			else if (aiStyle == 139)
			{
				AI_139_ExplosiveTrapExplosion();
			}
			else if (aiStyle == 140)
			{
				AI_140_MonkStaffT1();
			}
			else if (aiStyle == 141)
			{
				AI_141_MonkStaffT1Explosion();
			}
			else if (aiStyle == 142)
			{
				AI_142_MonkStaffT2And3();
			}
			else if (aiStyle == 143)
			{
				AI_143_MonkStaffT2Ghast();
			}
			else if (aiStyle == 144)
			{
				AI_144_DD2Pet();
			}
			else if (aiStyle == 145)
			{
				AI_145_BookStaffStorm();
			}
			else if (aiStyle == 146)
			{
				AI_146_DD2Victory();
			}
			else if (aiStyle == 147)
			{
				AI_147_Celeb2Rocket();
			}
			else if (aiStyle == 148)
			{
				AI_148_StarSpawner();
			}
			else if (aiStyle == 149)
			{
				AI_149_GolfBall();
			}
			else if (aiStyle == 150)
			{
				AI_150_GolfClubHelper();
			}
			else if (aiStyle == 151)
			{
				AI_151_SuperStar();
			}
			else if (aiStyle == 152)
			{
				AI_152_SuperStarSlash();
			}
			else if (aiStyle == 153)
			{
				AI_153_ToiletPop();
			}
			else if (aiStyle == 154)
			{
				AI_154_VoidLens();
			}
			else if (aiStyle == 155)
			{
				AI_155_MysticSnakeCoil();
			}
			else if (aiStyle == 156)
			{
				AI_156_BatOfLight();
			}
			else if (aiStyle == 157)
			{
				AI_157_SharpTears();
			}
			else if (aiStyle == 158)
			{
				AI_158_BabyBird();
			}
			else if (aiStyle == 159)
			{
				AI_159_PaperAirplanes();
			}
			else if (aiStyle == 160)
			{
				AI_160_Kites();
			}
			else if (aiStyle == 161)
			{
				AI_161_RapierStabs();
			}
			else if (aiStyle == 162)
			{
				AI_162_TigerPounce();
			}
			else if (aiStyle == 163)
			{
				AI_163_Chum();
			}
			else if (aiStyle == 164)
			{
				AI_164_StormTigerGem();
			}
			else if (aiStyle == 165)
			{
				AI_165_Whip();
			}
			else if (aiStyle == 166)
			{
				AI_166_Dove();
			}
			else if (aiStyle == 167)
			{
				AI_167_SparkleGuitar();
			}
			else if (aiStyle == 168)
			{
				AI_168_FirstFractal();
			}
			else if (aiStyle == 169)
			{
				AI_169_Smolstars();
			}
			else if (aiStyle == 170)
			{
				AI_170_FairyGlowstick();
			}
			else if (aiStyle == 171)
			{
				AI_171_HallowBossRainbowStreak();
			}
			else if (aiStyle == 172)
			{
				AI_172_HallowBossRainbowPelletStorm();
			}
			else if (aiStyle == 173)
			{
				AI_173_HallowBossRainbowTrail();
			}
			else if (aiStyle == 174)
			{
				AI_174_MultisegmentPet();
			}
			else if (aiStyle == 175)
			{
				AI_175_TitaniumStormShards();
			}
			else if (aiStyle == 176)
			{
				AI_176_EdgyLightning();
			}
			else if (aiStyle == 177)
			{
				AI_177_IceWhipSlicer();
			}
			else if (aiStyle == 178)
			{
				AI_178_FireExplosion();
			}
			else if (aiStyle == 179)
			{
				AI_179_FairyQueenLance();
			}
			else if (aiStyle == 180)
			{
				AI_180_FairyQueenSunDance();
			}
			else if (aiStyle == 181)
			{
				AI_181_FairyQueenRangedItemShot();
			}
			else if (aiStyle == 182)
			{
				AI_182_FinalFractal();
			}
			else if (aiStyle == 183)
			{
				AI_183_ZoologistStrike();
			}
			else if (aiStyle == 184)
			{
				AI_184_BadTorchLuck();
			}
			else if (aiStyle == 185)
			{
				AI_185_LifeDrain();
			}
			else if (aiStyle == 186)
			{
				AI_186_PrincessWeapon();
			}
			else if (aiStyle == 187)
			{
				AI_187_ShadowHand();
			}
		}

		public static void RandomizeInsanityShadowFor(Entity targetEntity, bool isHostile, out Vector2 spawnposition, out Vector2 spawnvelocity, out float ai0, out float ai1)
		{
			int num = Main.rand.Next(2) * 2 - 1;
			int num2 = Main.rand.Next(4);
			float num3 = (isHostile ? 200f : 100f);
			float num4 = (isHostile ? 30 : 20);
			float num5 = (isHostile ? 30 : 0);
			float num6 = Main.rand.NextFloatDirection() * (float)Math.PI * 0.125f;
			if (isHostile && targetEntity.velocity.X * (float)num > 0f)
			{
				num *= -1;
			}
			if (num2 == 0 && isHostile)
			{
				num4 += 10f;
			}
			spawnposition = targetEntity.Center + targetEntity.velocity * num5 + new Vector2((float)num * (0f - num3), 0f).RotatedBy(num6);
			spawnvelocity = new Vector2((float)num * num3 / num4, 0f).RotatedBy(num6);
			ai0 = 0f;
			ai1 = 0f;
			if (num2 == 1)
			{
				float num7 = (float)Math.PI * 2f * Main.rand.NextFloat();
				spawnposition = targetEntity.Center - num7.ToRotationVector2() * (isHostile ? num3 : (num3 * 0.5f));
				ai0 = 180f;
				ai1 = num7 - (float)Math.PI / 2f;
				spawnvelocity = num7.ToRotationVector2() * (isHostile ? 4 : 2);
			}
			if (num2 == 2)
			{
				float num8 = (float)Math.PI * 2f * Main.rand.NextFloat();
				spawnposition = targetEntity.Center - num8.ToRotationVector2() * num3;
				ai0 = 300f;
				ai1 = num8;
				spawnvelocity = num8.ToRotationVector2() * (isHostile ? 4 : 2);
			}
			if (num2 == 3)
			{
				float f = (float)Math.PI * 2f * Main.rand.NextFloat();
				float num9 = (isHostile ? 60 : 30);
				float num10 = (float)Math.PI / 2f / num9 * Main.rand.NextFloatDirection();
				spawnposition = targetEntity.Center + targetEntity.velocity * num9;
				Vector2 vector = f.ToRotationVector2() * (isHostile ? 8 : 3);
				for (int i = 0; (float)i < num9; i++)
				{
					spawnposition -= vector;
					vector = vector.RotatedBy(0f - num10);
				}
				spawnvelocity = vector;
				ai0 = 390f;
				ai1 = num10;
			}
		}

		private void AI_187_ShadowHand()
		{
			//IL_002a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0041: Unknown result type (might be due to invalid IL or missing references)
			//IL_0058: Unknown result type (might be due to invalid IL or missing references)
			//IL_005d: Unknown result type (might be due to invalid IL or missing references)
			AI_187_ShadowHand_GetVariation(out var variation, out var fakeCounter, out var counterMax);
			float fromValue = fakeCounter / counterMax;
			SlotId val;
			if (fakeCounter == 0f)
			{
				float[] array = localAI;
				val = SoundEngine.PlayTrackedSound(SoundID.DD2_GhastlyGlaiveImpactGhost, base.Center);
				array[1] = ((SlotId)(val)).ToFloat();
			}
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
			if (activeSound == null)
			{
				float[] array2 = localAI;
				val = SlotId.Invalid;
				array2[1] = ((SlotId)(val)).ToFloat();
			}
			else
			{
				activeSound.Position = base.Center;
			}
			float num = counterMax - 15f;
			if (fakeCounter > num)
			{
				alpha += 25;
				if (alpha > 255)
				{
					alpha = 255;
				}
			}
			else
			{
				alpha -= 25;
				if (alpha < 50)
				{
					alpha = 50;
				}
			}
			if (fakeCounter >= counterMax - 1f)
			{
				Kill();
				return;
			}
			if (variation == 0)
			{
				velocity *= 0.98f;
				direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
				rotation = velocity.ToRotation();
				if (spriteDirection == -1)
				{
					rotation += (float)Math.PI;
				}
			}
			if (variation == 1)
			{
				float num2 = 70f;
				direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
				if (velocity.Length() > 0.1f)
				{
					velocity *= 0.95f;
				}
				num2 *= (float)direction;
				Vector2 vector = base.Center - rotation.ToRotationVector2() * num2;
				float num3 = Utils.Remap(fromValue, 0.3f, 0.5f, 0f, 1f) * Utils.Remap(fromValue, 0.45f, 0.5f, 1f, 0f);
				float num4 = Utils.Remap(fromValue, 0.5f, 0.55f, 0f, 1f) * Utils.Remap(fromValue, 0.5f, 1f, 1f, 0f);
				float num5 = num3 * (float)Math.PI * 1f / 60f;
				num5 += num4 * -(float)Math.PI * 8f / 60f;
				rotation += num5 * (float)(-direction);
				rotation = MathHelper.WrapAngle(rotation);
				base.Center = vector + rotation.ToRotationVector2() * num2;
			}
			if (variation == 2)
			{
				float f = ai[1];
				float num6 = Utils.Remap(fromValue, 0f, 0.4f, 1f, 0f);
				float num7 = Utils.Remap(fromValue, 0.3f, 0.4f, 0f, 1f) * Utils.Remap(fromValue, 0.4f, 1f, 1f, 0f);
				float num8 = num6 * 2f + num7 * 8f + 0.01f;
				velocity = f.ToRotationVector2() * num8;
				direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
				rotation = velocity.ToRotation();
				if (spriteDirection == -1)
				{
					rotation += (float)Math.PI;
				}
			}
			if (variation == 3)
			{
				float num9 = ai[1];
				velocity = velocity.RotatedBy(num9);
				direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
				rotation = velocity.ToRotation();
				if (spriteDirection == -1)
				{
					rotation += (float)Math.PI;
				}
			}
			ai[0] += 1f;
		}

		private void AI_187_ShadowHand_GetVariation(out int variation, out float fakeCounter, out float counterMax)
		{
			fakeCounter = ai[0];
			variation = 0;
			float num = 0f;
			float num2 = (counterMax = 180f);
			if (fakeCounter >= num && fakeCounter < num2)
			{
				variation = 0;
				counterMax = num2;
				return;
			}
			num = num2;
			num2 += 120f;
			if (fakeCounter >= num && fakeCounter < num2)
			{
				variation = 1;
				fakeCounter -= num;
				counterMax = num2 - num;
				return;
			}
			num = num2;
			num2 += 90f;
			if (fakeCounter >= num && fakeCounter < num2)
			{
				variation = 2;
				fakeCounter -= num;
				counterMax = num2 - num;
			}
			num = num2;
			num2 += 90f;
			if (fakeCounter >= num && fakeCounter < num2)
			{
				variation = 3;
				fakeCounter -= num;
				counterMax = num2 - num;
			}
		}

		private void AI_185_LifeDrain()
		{
			if (Main.myPlayer != owner || localAI[0] != 0f)
			{
				return;
			}
			Player player = Main.player[owner];
			bool flag = false;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.active && !nPC.townNPC && !nPC.dontTakeDamage && !nPC.friendly && base.Hitbox.Intersects(nPC.Hitbox))
				{
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				for (int j = 0; j < 255; j++)
				{
					Player player2 = Main.player[j];
					if (player2.active && player2.whoAmI != player.whoAmI && player2.hostile && !player2.immune && !player2.dead && player2.team != player.team && base.Hitbox.Intersects(player2.Hitbox))
					{
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				player.CheckMana(player.inventory[player.selectedItem].mana, pay: true);
				localAI[0] = 1f;
			}
		}

		private void AI_186_PrincessWeapon()
		{
			float num = 60f;
			ai[0] += 1f;
			if (ai[0] >= num)
			{
				Kill();
				return;
			}
			Opacity = Utils.Remap(ai[0], 0f, num, 1f, 0f);
			float num2 = ai[0] / num;
			float num3 = 1f - (1f - num2) * (1f - num2);
			float num4 = 1f - (1f - num3) * (1f - num3);
			float num5 = Utils.Remap(ai[0], num - 15f, num, 0f, 1f);
			float num6 = num5 * num5;
			float num7 = 1f - num6;
			scale = (0.4f + 0.6f * num4) * num7;
			float num8 = Utils.Remap(ai[0], 20f, num, 0f, 1f);
			float num9 = 1f - (1f - num8) * (1f - num8);
			float num10 = 1f - (1f - num9) * (1f - num9);
			localAI[0] = (0.4f + 0.6f * num10) * num7;
			int num11 = width / 2;
			Color newColor = Main.hslToRgb(0.92f, 1f, 0.5f) * Opacity;
			float num12 = 6f;
			float num13 = 2f;
			if (num2 < 0.9f)
			{
				for (int i = 0; i < 3; i++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector = Vector2.UnitX.RotatedBy(Main.rand.NextFloat() * ((float)Math.PI * 2f));
						Vector2 vector2 = vector * ((float)num11 * scale);
						Vector2 vector3 = base.Center + vector2;
						Vector2 vector4 = vector.RotatedBy(0.78539818525314331);
						vector3 += vector4 * num12;
						int num14 = Dust.NewDust(vector3, 0, 0, 267, 0f, 0f, 0, newColor);
						Main.dust[num14].position = vector3;
						Main.dust[num14].noGravity = true;
						Main.dust[num14].scale = 0.3f;
						Main.dust[num14].fadeIn = Main.rand.NextFloat() * 1.2f * scale;
						Main.dust[num14].velocity = vector4 * scale * (0f - num13);
						Main.dust[num14].scale *= scale;
						Main.dust[num14].velocity += velocity * 0.5f;
						Main.dust[num14].position += Main.dust[num14].velocity * -5f;
						if (num14 != 6000)
						{
							Dust dust = Dust.CloneDust(num14);
							dust.scale /= 2f;
							dust.fadeIn *= 0.85f;
							dust.color = new Color(255, 255, 255, 255);
						}
					}
				}
			}
			if (num2 < 0.9f)
			{
				for (int j = 0; j < 3; j++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Vector2 vector5 = Vector2.UnitX.RotatedBy(Main.rand.NextFloat() * ((float)Math.PI * 2f));
						Vector2 vector6 = vector5 * ((float)num11 * scale);
						Vector2 vector7 = base.Center + vector6;
						Vector2 vector8 = vector5.RotatedBy(0.78539818525314331);
						vector7 += vector8 * (0f - num12);
						int num15 = Dust.NewDust(vector7, 0, 0, 267, 0f, 0f, 0, newColor);
						Main.dust[num15].position = vector7;
						Main.dust[num15].noGravity = true;
						Main.dust[num15].scale = 0.3f;
						Main.dust[num15].fadeIn = Main.rand.NextFloat() * 1.2f * scale;
						Main.dust[num15].velocity = vector8 * scale * num13;
						Main.dust[num15].scale *= scale;
						Main.dust[num15].velocity = velocity * 0.5f;
						if (num15 != 6000)
						{
							Dust dust2 = Dust.CloneDust(num15);
							dust2.scale /= 2f;
							dust2.fadeIn *= 0.85f;
							dust2.color = new Color(255, 255, 255, 255);
						}
					}
				}
			}
			ParticleOrchestraSettings settings;
			if (num2 < 0.95f)
			{
				for (float num16 = 0f; num16 < 0.8f; num16 += 1f)
				{
					if (Main.rand.Next(4) == 0)
					{
						Vector2 vector9 = Vector2.UnitX.RotatedBy(Main.rand.NextFloat() * ((float)Math.PI * 2f) + (float)Math.PI / 2f) * ((float)num11 * scale);
						Vector2 positionInWorld = base.Center + vector9;
						settings = new ParticleOrchestraSettings
						{
							PositionInWorld = positionInWorld,
							MovementVector = velocity
						};
						ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.PrincessWeapon, settings, owner);
					}
				}
			}
			if (ai[0] == num - 10f)
			{
				for (float num17 = 0f; num17 < 1f; num17 += 0.25f)
				{
					Vector2 vector10 = Vector2.UnitX.RotatedBy((float)Math.PI * 2f * num17);
					_ = vector10 * ((float)num11 * scale);
					Vector2 center = base.Center;
					float num18 = 1f;
					settings = new ParticleOrchestraSettings
					{
						PositionInWorld = center,
						MovementVector = vector10 * num18
					};
					ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.PrincessWeapon, settings, owner);
					settings = new ParticleOrchestraSettings
					{
						PositionInWorld = center,
						MovementVector = vector10 * num18 * 2f
					};
					ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.PrincessWeapon, settings, owner);
				}
			}
		}

		private void AI_184_BadTorchLuck()
		{
			owner = 255;
			if (Main.player[Main.myPlayer].unlockedBiomeTorches)
			{
				damage = 0;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlaySound(SoundID.Item8, base.Center);
			}
			if (ai[1] > 0f)
			{
				ai[1] -= velocity.Length();
			}
			else
			{
				tileCollide = true;
			}
			int num = (int)ai[0];
			float num2 = 4f;
			for (float num3 = 0f; num3 < num2; num3 += 1f)
			{
				int num4 = Dust.NewDust(position + velocity / num2 * num3, 4, 4, num, 0f, 0f, 100);
				if (Main.rand.Next(3) != 0)
				{
					Main.dust[num4].noGravity = true;
				}
				Main.dust[num4].velocity *= 0.3f;
				if (num == 66)
				{
					Main.dust[num4].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
					Main.dust[num4].noGravity = true;
				}
			}
		}

		private void AI_121_StardustDragon()
		{
			Player player = Main.player[owner];
			if ((int)Main.timeForVisualEffects % 120 == 0)
			{
				netUpdate = true;
			}
			if (!player.active)
			{
				active = false;
				return;
			}
			bool num = type == 625;
			bool flag = type == 625 || type == 626 || type == 627 || type == 628;
			int num2 = 10;
			if (flag)
			{
				if (player.dead)
				{
					player.stardustDragon = false;
				}
				if (player.stardustDragon)
				{
					timeLeft = 2;
				}
				num2 = 30;
				if (Main.rand.Next(30) == 0)
				{
					int num3 = Dust.NewDust(position, width, height, 135, 0f, 0f, 0, default(Color), 2f);
					Main.dust[num3].noGravity = true;
					Main.dust[num3].fadeIn = 2f;
					Point point = Main.dust[num3].position.ToTileCoordinates();
					if (WorldGen.InWorld(point.X, point.Y, 5) && WorldGen.SolidTile(point.X, point.Y))
					{
						Main.dust[num3].noLight = true;
					}
				}
			}
			if (num)
			{
				Vector2 center = player.Center;
				float num4 = 700f;
				float num5 = 1000f;
				int num6 = -1;
				if (Distance(center) > 2000f)
				{
					base.Center = center;
					netUpdate = true;
				}
				if (true)
				{
					NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
					if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
					{
						float num7 = Distance(ownerMinionAttackTargetNPC.Center);
						if (num7 < num4 * 2f)
						{
							num6 = ownerMinionAttackTargetNPC.whoAmI;
							if (ownerMinionAttackTargetNPC.boss)
							{
								_ = ownerMinionAttackTargetNPC.whoAmI;
							}
							else
							{
								_ = ownerMinionAttackTargetNPC.whoAmI;
							}
						}
					}
					if (num6 < 0)
					{
						for (int i = 0; i < 200; i++)
						{
							NPC nPC = Main.npc[i];
							if (nPC.CanBeChasedBy(this) && player.Distance(nPC.Center) < num5)
							{
								float num8 = Distance(nPC.Center);
								if (num8 < num4)
								{
									num6 = i;
									_ = nPC.boss;
								}
							}
						}
					}
				}
				if (num6 != -1)
				{
					NPC nPC2 = Main.npc[num6];
					Vector2 vector = nPC2.Center - base.Center;
					(vector.X > 0f).ToDirectionInt();
					(vector.Y > 0f).ToDirectionInt();
					float num9 = 0.4f;
					if (vector.Length() < 600f)
					{
						num9 = 0.6f;
					}
					if (vector.Length() < 300f)
					{
						num9 = 0.8f;
					}
					if (vector.Length() > nPC2.Size.Length() * 0.75f)
					{
						velocity += Vector2.Normalize(vector) * num9 * 1.5f;
						if (Vector2.Dot(velocity, vector) < 0.25f)
						{
							velocity *= 0.8f;
						}
					}
					float num10 = 30f;
					if (velocity.Length() > num10)
					{
						velocity = Vector2.Normalize(velocity) * num10;
					}
				}
				else
				{
					float num11 = 0.2f;
					Vector2 vector2 = center - base.Center;
					if (vector2.Length() < 200f)
					{
						num11 = 0.12f;
					}
					if (vector2.Length() < 140f)
					{
						num11 = 0.06f;
					}
					if (vector2.Length() > 100f)
					{
						if (Math.Abs(center.X - base.Center.X) > 20f)
						{
							velocity.X += num11 * (float)Math.Sign(center.X - base.Center.X);
						}
						if (Math.Abs(center.Y - base.Center.Y) > 10f)
						{
							velocity.Y += num11 * (float)Math.Sign(center.Y - base.Center.Y);
						}
					}
					else if (velocity.Length() > 2f)
					{
						velocity *= 0.96f;
					}
					if (Math.Abs(velocity.Y) < 1f)
					{
						velocity.Y -= 0.1f;
					}
					float num12 = 15f;
					if (velocity.Length() > num12)
					{
						velocity = Vector2.Normalize(velocity) * num12;
					}
				}
				rotation = velocity.ToRotation() + (float)Math.PI / 2f;
				int num13 = direction;
				direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
				if (num13 != direction)
				{
					netUpdate = true;
				}
				float num14 = MathHelper.Clamp(localAI[0], 0f, 50f);
				position = base.Center;
				scale = 1f + num14 * 0.01f;
				width = (height = (int)((float)num2 * scale));
				base.Center = position;
				if (alpha > 0)
				{
					for (int j = 0; j < 2; j++)
					{
						int num15 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num15].noGravity = true;
						Main.dust[num15].noLight = true;
					}
					alpha -= 42;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
			}
			else
			{
				bool flag2 = false;
				Vector2 vector3 = Vector2.Zero;
				_ = Vector2.Zero;
				float num16 = 0f;
				float num17 = 0f;
				float num18 = 1f;
				if (ai[1] == 1f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
				int byUUID = GetByUUID(owner, (int)ai[0]);
				if (Main.projectile.IndexInRange(byUUID))
				{
					Projectile projectile = Main.projectile[byUUID];
					if (flag && projectile.active && (projectile.type == 625 || projectile.type == 626 || projectile.type == 627))
					{
						flag2 = true;
						vector3 = projectile.Center;
						_ = projectile.velocity;
						num16 = projectile.rotation;
						num18 = MathHelper.Clamp(projectile.scale, 0f, 50f);
						num17 = 16f;
						_ = projectile.alpha;
						projectile.localAI[0] = localAI[0] + 1f;
						if (projectile.type != 625)
						{
							projectile.localAI[1] = whoAmI;
						}
						if (owner == Main.myPlayer && type == 628 && projectile.type == 625)
						{
							projectile.Kill();
							Kill();
							return;
						}
					}
				}
				if (!flag2)
				{
					for (int k = 0; k < 1000; k++)
					{
						Projectile projectile2 = Main.projectile[k];
						if (projectile2.active && projectile2.owner == owner && ProjectileID.Sets.StardustDragon[projectile2.type] && projectile2.localAI[1] == ai[0])
						{
							ai[0] = projectile2.projUUID;
							projectile2.localAI[1] = whoAmI;
							netUpdate = true;
						}
					}
					return;
				}
				if (alpha > 0)
				{
					for (int l = 0; l < 2; l++)
					{
						int num19 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num19].noGravity = true;
						Main.dust[num19].noLight = true;
					}
				}
				alpha -= 42;
				if (alpha < 0)
				{
					alpha = 0;
				}
				velocity = Vector2.Zero;
				Vector2 vector4 = vector3 - base.Center;
				if (num16 != rotation)
				{
					float num20 = MathHelper.WrapAngle(num16 - rotation);
					vector4 = vector4.RotatedBy(num20 * 0.1f);
				}
				rotation = vector4.ToRotation() + (float)Math.PI / 2f;
				position = base.Center;
				scale = num18;
				width = (height = (int)((float)num2 * scale));
				base.Center = position;
				if (vector4 != Vector2.Zero)
				{
					base.Center = vector3 - Vector2.Normalize(vector4) * num17 * num18;
				}
				spriteDirection = ((vector4.X > 0f) ? 1 : (-1));
			}
			position.X = MathHelper.Clamp(position.X, 160f, Main.maxTilesX * 16 - 160);
			position.Y = MathHelper.Clamp(position.Y, 160f, Main.maxTilesY * 16 - 160);
		}

		private Projectile FindStardustDragonHeadOfOwner()
		{
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == owner && projectile.type == 625)
				{
					return projectile;
				}
			}
			return null;
		}

		private void AI_183_ZoologistStrike()
		{
			velocity.X *= 0.2f;
			velocity.Y = 0f;
			spriteDirection = (direction = 1);
			if (velocity.X < 0f)
			{
				spriteDirection = (direction = -1);
			}
			frame++;
			if (frame >= Main.projFrames[type])
			{
				frame = Main.projFrames[type] - 1;
			}
		}

		private void AI_182_FinalFractal()
		{
			Player player = Main.player[owner];
			Vector2 mountedCenter = player.MountedCenter;
			float lerpValue = Utils.GetLerpValue(900f, 0f, velocity.Length() * 2f, clamped: true);
			float num = MathHelper.Lerp(0.7f, 2f, lerpValue);
			localAI[0] += num;
			if (localAI[0] >= 120f)
			{
				Kill();
				return;
			}
			float lerpValue2 = Utils.GetLerpValue(0f, 1f, localAI[0] / 60f, clamped: true);
			float num2 = localAI[0] / 60f;
			float num3 = ai[0];
			float num4 = velocity.ToRotation();
			float num5 = (float)Math.PI;
			float num6 = ((velocity.X > 0f) ? 1 : (-1));
			float num7 = num5 + num6 * lerpValue2 * ((float)Math.PI * 2f);
			float num8 = velocity.Length() + Utils.GetLerpValue(0.5f, 1f, lerpValue2, clamped: true) * 40f;
			float num9 = 60f;
			if (num8 < num9)
			{
				num8 = num9;
			}
			Vector2 vector = mountedCenter + velocity;
			Vector2 spinningpoint = new Vector2(1f, 0f).RotatedBy(num7) * new Vector2(num8, num3 * MathHelper.Lerp(2f, 1f, lerpValue));
			Vector2 vector2 = vector + spinningpoint.RotatedBy(num4);
			Vector2 vector3 = (1f - Utils.GetLerpValue(0f, 0.5f, lerpValue2, clamped: true)) * new Vector2((float)((velocity.X > 0f) ? 1 : (-1)) * (0f - num8) * 0.1f, (0f - ai[0]) * 0.3f);
			float num10 = num7 + num4;
			rotation = num10 + (float)Math.PI / 2f;
			base.Center = vector2 + vector3;
			spriteDirection = (direction = ((velocity.X > 0f) ? 1 : (-1)));
			if (num3 < 0f)
			{
				rotation = num5 + num6 * lerpValue2 * ((float)Math.PI * -2f) + num4;
				rotation += (float)Math.PI / 2f;
				spriteDirection = (direction = ((!(velocity.X > 0f)) ? 1 : (-1)));
			}
			if (num2 < 1f)
			{
				FinalFractalHelper.FinalFractalProfile finalFractalProfile = FinalFractalHelper.GetFinalFractalProfile((int)ai[1]);
				Vector2 vector4 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
				Vector2 center = base.Center;
				int num11 = 1 + (int)(velocity.Length() / 100f);
				num11 = (int)((float)num11 * Utils.GetLerpValue(0f, 0.5f, lerpValue2, clamped: true) * Utils.GetLerpValue(1f, 0.5f, lerpValue2, clamped: true));
				if (num11 < 1)
				{
					num11 = 1;
				}
				for (int i = 0; i < num11; i++)
				{
					finalFractalProfile.dustMethod(center + vector4 * finalFractalProfile.trailWidth * MathHelper.Lerp(0.5f, 1f, Main.rand.NextFloat()), rotation - (float)Math.PI / 2f + (float)Math.PI / 2f * (float)spriteDirection, player.velocity);
				}
				Vector3 vector5 = finalFractalProfile.trailColor.ToVector3();
				Vector3 vector6 = Vector3.Lerp(Vector3.One, vector5, 0.7f);
				Lighting.AddLight(base.Center, vector5 * 0.5f * Opacity);
				Lighting.AddLight(mountedCenter, vector6 * Opacity * 0.15f);
			}
			Opacity = Utils.GetLerpValue(0f, 5f, localAI[0], clamped: true) * Utils.GetLerpValue(120f, 115f, localAI[0], clamped: true);
		}

		private void AI_181_FairyQueenRangedItemShot()
		{
			ai[0] += 1f;
			alpha = (int)MathHelper.Lerp(255f, 0f, Utils.GetLerpValue(0f, 10f, ai[0], clamped: true));
			rotation = velocity.ToRotation();
			if (Main.rand.Next(6) == 0)
			{
				Dust dust = Dust.NewDustPerfect(base.Center, 267);
				dust.fadeIn = 1f;
				dust.noGravity = true;
				dust.alpha = 100;
				dust.color = GetFairyQueenWeaponsColor(1f, Main.rand.NextFloat() * 0.4f);
				dust.noLightEmittence = true;
				dust.scale *= 1.5f;
			}
		}

		private void AI_009_MagicMissiles()
		{
			if (type == 491)
			{
				AI_009_MagicMissiles_Old();
				return;
			}
			int num = 32;
			Player player = Main.player[owner];
			int num2 = Main.maxTilesY * 16;
			int num3 = 0;
			if (ai[0] >= 0f)
			{
				num3 = (int)(ai[1] / (float)num2);
			}
			bool flag = ai[0] == -1f || ai[0] == -2f;
			if (type == 34)
			{
				if (frameCounter++ >= 4)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (penetrate == 1 && ai[0] >= 0f && num3 == 0)
				{
					ai[1] += num2;
					num3 = 1;
					netUpdate = true;
				}
				if (penetrate == 1 && ai[0] == -1f)
				{
					ai[0] = -2f;
					netUpdate = true;
				}
				if (num3 > 0 || ai[0] == -2f)
				{
					localAI[0] += 1f;
				}
			}
			if (owner == Main.myPlayer)
			{
				if (ai[0] >= 0f)
				{
					if (player.channel)
					{
						Vector2 pointPoisition = Main.MouseWorld;
						player.LimitPointToPlayerReachableArea(ref pointPoisition);
						if (ai[0] != pointPoisition.X || ai[1] != pointPoisition.Y)
						{
							netUpdate = true;
							ai[0] = pointPoisition.X;
							ai[1] = pointPoisition.Y + (float)(num2 * num3);
						}
					}
					else
					{
						netUpdate = true;
						ai[0] = -1f;
						ai[1] = -1f;
						int num4 = FindTargetWithLineOfSight();
						if (num4 != -1)
						{
							ai[1] = num4;
						}
						else if (velocity.Length() < 2f)
						{
							velocity = DirectionFrom(player.Center) * num;
						}
						else
						{
							velocity = velocity.SafeNormalize(Vector2.Zero) * num;
						}
					}
				}
				if (flag && ai[1] == -1f)
				{
					int num5 = FindTargetWithLineOfSight();
					if (num5 != -1)
					{
						ai[1] = num5;
						netUpdate = true;
					}
				}
			}
			Vector2? vector = null;
			float amount = 1f;
			if (ai[0] > 0f && ai[1] > 0f)
			{
				vector = new Vector2(ai[0], ai[1] % (float)num2);
			}
			if (flag && ai[1] >= 0f)
			{
				int num6 = (int)ai[1];
				if (Main.npc.IndexInRange(num6))
				{
					NPC nPC = Main.npc[num6];
					if (nPC.CanBeChasedBy(this))
					{
						vector = nPC.Center;
						float t = Distance(vector.Value);
						float num7 = Utils.GetLerpValue(0f, 100f, t, clamped: true) * Utils.GetLerpValue(600f, 400f, t, clamped: true);
						amount = MathHelper.Lerp(0f, 0.2f, Utils.GetLerpValue(200f, 20f, 1f - num7, clamped: true));
					}
					else
					{
						ai[1] = -1f;
						netUpdate = true;
					}
				}
			}
			bool flag2 = false;
			if (flag)
			{
				flag2 = true;
			}
			if (vector.HasValue)
			{
				Vector2 value = vector.Value;
				if (Distance(value) >= 64f)
				{
					flag2 = true;
					Vector2 v = value - base.Center;
					Vector2 vector2 = v.SafeNormalize(Vector2.Zero);
					float num8 = Math.Min(num, v.Length());
					Vector2 value2 = vector2 * num8;
					if (velocity.Length() < 4f)
					{
						velocity += velocity.SafeNormalize(Vector2.Zero).RotatedBy(0.78539818525314331).SafeNormalize(Vector2.Zero) * 4f;
					}
					if (velocity.HasNaNs())
					{
						Kill();
					}
					velocity = Vector2.Lerp(velocity, value2, amount);
				}
				else
				{
					velocity *= 0.3f;
					velocity += (value - base.Center) * 0.3f;
					flag2 = velocity.Length() >= 2f;
				}
				if (timeLeft < 60)
				{
					timeLeft = 60;
				}
			}
			if (flag && ai[1] < 0f)
			{
				if (velocity.Length() != (float)num)
				{
					velocity = velocity.MoveTowards(velocity.SafeNormalize(Vector2.UnitY) * num, 4f);
				}
				if (timeLeft > 300)
				{
					timeLeft = 300;
				}
			}
			if (flag2 && velocity != Vector2.Zero)
			{
				rotation = rotation.AngleTowards(velocity.ToRotation(), (float)Math.PI / 4f);
			}
			else
			{
				rotation = rotation.AngleLerp(0f, 0.2f);
			}
			bool flag3 = velocity.Length() > 0.1f && Vector2.Dot(oldVelocity.SafeNormalize(Vector2.Zero), velocity.SafeNormalize(Vector2.Zero)) < 0.2f;
			if (type == 16)
			{
				if (soundDelay == 0 && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 2f)
				{
					soundDelay = 10;
					SoundEngine.PlaySound(SoundID.Item9, position);
				}
				if (Main.rand.Next(9) == 0)
				{
					int num9 = Dust.NewDust(position, width, height, 15, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num9].velocity *= 0.3f;
					Main.dust[num9].position.X = position.X + (float)(width / 2) + 4f + (float)Main.rand.Next(-4, 5);
					Main.dust[num9].position.Y = position.Y + (float)(height / 2) + (float)Main.rand.Next(-4, 5);
					Main.dust[num9].noGravity = true;
					Main.dust[num9].velocity += Main.rand.NextVector2Circular(2f, 2f);
				}
				if (flag3)
				{
					int num10 = Main.rand.Next(2, 5);
					for (int i = 0; i < num10; i++)
					{
						Dust dust = Dust.NewDustDirect(position, width, height, 15, 0f, 0f, 100, default(Color), 1.5f);
						dust.velocity *= 0.3f;
						dust.position = base.Center;
						dust.noGravity = true;
						dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
						dust.fadeIn = 2.2f;
					}
				}
			}
			if (type != 34)
			{
				return;
			}
			float lerpValue = Utils.GetLerpValue(0f, 10f, localAI[0], clamped: true);
			Color newColor = Color.Lerp(Color.Transparent, Color.Crimson, lerpValue);
			if (Main.rand.Next(6) == 0)
			{
				Dust dust2 = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, newColor, 3.5f);
				dust2.noGravity = true;
				dust2.velocity *= 1.4f;
				dust2.velocity += Main.rand.NextVector2Circular(1f, 1f);
				dust2.velocity += velocity * 0.15f;
			}
			if (Main.rand.Next(12) == 0)
			{
				Dust dust3 = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, newColor, 1.5f);
				dust3.velocity += Main.rand.NextVector2Circular(1f, 1f);
				dust3.velocity += velocity * 0.15f;
			}
			if (flag3)
			{
				int num11 = Main.rand.Next(2, 5 + (int)(lerpValue * 4f));
				for (int j = 0; j < num11; j++)
				{
					Dust dust4 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100, newColor, 1.5f);
					dust4.velocity *= 0.3f;
					dust4.position = base.Center;
					dust4.noGravity = true;
					dust4.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust4.fadeIn = 2.2f;
					dust4.position += (dust4.position - base.Center) * lerpValue * 10f;
				}
			}
		}

		private void AI_009_MagicMissiles_Old()
		{
			if (Main.myPlayer == owner && ai[0] <= 0f)
			{
				if (Main.player[owner].channel)
				{
					float num = 12f;
					if (type == 16)
					{
						num = 15f;
					}
					if (type == 491)
					{
						num = 20f;
					}
					Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					Vector2 pointPoisition = Main.MouseWorld;
					Main.player[owner].LimitPointToPlayerReachableArea(ref pointPoisition);
					float num2 = pointPoisition.X - vector.X;
					float num3 = pointPoisition.Y - vector.Y;
					float num4 = (float)Math.Sqrt(num2 * num2 + num3 * num3);
					if (ai[0] < 0f)
					{
						ai[0] += 1f;
					}
					if (type == 491 && num4 < 100f)
					{
						if (velocity.Length() < num)
						{
							velocity *= 1.1f;
							if (velocity.Length() > num)
							{
								velocity.Normalize();
								velocity *= num;
							}
						}
						if (ai[0] == 0f)
						{
							ai[0] = -10f;
						}
					}
					else if (num4 > num)
					{
						num4 = num / num4;
						num2 *= num4;
						num3 *= num4;
						int num5 = (int)(num2 * 1000f);
						int num6 = (int)(velocity.X * 1000f);
						int num7 = (int)(num3 * 1000f);
						int num8 = (int)(velocity.Y * 1000f);
						if (num5 != num6 || num7 != num8)
						{
							netUpdate = true;
						}
						if (type == 491)
						{
							Vector2 vector2 = new Vector2(num2, num3);
							velocity = (velocity * 4f + vector2) / 5f;
						}
						else
						{
							velocity.X = num2;
							velocity.Y = num3;
						}
					}
					else
					{
						int num9 = (int)(num2 * 1000f);
						int num10 = (int)(velocity.X * 1000f);
						int num11 = (int)(num3 * 1000f);
						int num12 = (int)(velocity.Y * 1000f);
						if (num9 != num10 || num11 != num12)
						{
							netUpdate = true;
						}
						velocity.X = num2;
						velocity.Y = num3;
					}
				}
				else if (ai[0] <= 0f)
				{
					netUpdate = true;
					if (type != 491)
					{
						Vector2 vector3 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num13 = (float)Main.mouseX + Main.screenPosition.X - vector3.X;
						float num14 = (float)Main.mouseY + Main.screenPosition.Y - vector3.Y;
						if (Main.player[owner].gravDir == -1f)
						{
							num14 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector3.Y;
						}
						float num15 = (float)Math.Sqrt(num13 * num13 + num14 * num14);
						if (num15 == 0f || ai[0] < 0f)
						{
							vector3 = new Vector2(Main.player[owner].position.X + (float)(Main.player[owner].width / 2), Main.player[owner].position.Y + (float)(Main.player[owner].height / 2));
							num13 = position.X + (float)width * 0.5f - vector3.X;
							num14 = position.Y + (float)height * 0.5f - vector3.Y;
							num15 = (float)Math.Sqrt(num13 * num13 + num14 * num14);
						}
						num15 = 12f / num15;
						num13 *= num15;
						num14 *= num15;
						velocity.X = num13;
						velocity.Y = num14;
						if (velocity.X == 0f && velocity.Y == 0f)
						{
							Kill();
						}
					}
					ai[0] = 1f;
				}
			}
			bool flag = false;
			if (type == 491)
			{
				localAI[0] += 1f;
				if (ai[0] > 0f && localAI[0] > 15f)
				{
					tileCollide = false;
					Vector2 vector4 = Main.player[owner].Center - base.Center;
					if (vector4.Length() < 20f)
					{
						Kill();
					}
					vector4.Normalize();
					vector4 *= 25f;
					velocity = (velocity * 5f + vector4) / 6f;
				}
				flag = true;
				if (ai[0] < 0f || (velocity.X == 0f && velocity.Y == 0f))
				{
					rotation += 0.3f;
				}
				else if (ai[0] > 0f)
				{
					rotation += 0.3f * (float)direction;
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
				if (Vector2.Distance(base.Center, Main.player[owner].Center) > 2000f)
				{
					Kill();
				}
				if (Main.rand.Next(2) == 0)
				{
					int num16;
					switch (Main.rand.Next(3))
					{
					case 0:
						num16 = 15;
						break;
					case 1:
						num16 = 57;
						break;
					default:
						num16 = 58;
						break;
					}
					int num17 = Dust.NewDust(position, width, height, num16, velocity.X * 0.25f, velocity.Y * 0.25f, 255, default(Color), 0.7f);
					Main.dust[num17].velocity *= 0.25f;
					Main.dust[num17].position = (Main.dust[num17].position + position) / 2f;
				}
			}
			if (type == 79)
			{
				if (soundDelay == 0 && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 2f)
				{
					soundDelay = 10;
					SoundEngine.PlaySound(SoundID.Item9, position);
				}
				for (int i = 0; i < 1; i++)
				{
					int num18 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 66, 0f, 0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 2.5f);
					Main.dust[num18].velocity *= 0.1f;
					Main.dust[num18].velocity += velocity * 0.2f;
					Main.dust[num18].position.X = position.X + (float)(width / 2) + 4f + (float)Main.rand.Next(-2, 3);
					Main.dust[num18].position.Y = position.Y + (float)(height / 2) + (float)Main.rand.Next(-2, 3);
					Main.dust[num18].noGravity = true;
				}
			}
			if (type == 16)
			{
				if (soundDelay == 0 && Math.Abs(velocity.X) + Math.Abs(velocity.Y) > 2f)
				{
					soundDelay = 10;
					SoundEngine.PlaySound(SoundID.Item9, position);
				}
				if (Main.rand.Next(9) == 0)
				{
					int num19 = Dust.NewDust(position, width, height, 15, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num19].velocity *= 0.3f;
					Main.dust[num19].position.X = position.X + (float)(width / 2) + 4f + (float)Main.rand.Next(-4, 5);
					Main.dust[num19].position.Y = position.Y + (float)(height / 2) + (float)Main.rand.Next(-4, 5);
					Main.dust[num19].noGravity = true;
					Main.dust[num19].velocity += Main.rand.NextVector2Circular(2f, 2f);
				}
				flag = true;
				if (velocity != Vector2.Zero)
				{
					rotation = velocity.ToRotation();
				}
			}
			if (type == 34)
			{
				if (Main.rand.Next(12) == 0)
				{
					Dust dust = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 3.5f);
					dust.noGravity = true;
					dust.velocity *= 1.4f;
					dust.velocity += Main.rand.NextVector2Circular(1f, 1f);
					dust.velocity += velocity * 0.15f;
				}
				if (Main.rand.Next(24) == 0)
				{
					Dust dust2 = Dust.NewDustDirect(base.Center, 0, 0, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 1.5f);
					dust2.velocity += Main.rand.NextVector2Circular(1f, 1f);
					dust2.velocity += velocity * 0.15f;
				}
				flag = true;
				if (velocity != Vector2.Zero)
				{
					rotation = velocity.ToRotation();
				}
			}
			if (!flag && velocity != Vector2.Zero)
			{
				rotation = velocity.ToRotation() - (float)Math.PI + (float)Math.PI / 4f;
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
		}

		private void AI_015_HandleMovementCollision(ref Vector2 wetVelocity, ref Vector2 lastVelocity)
		{
			int num = 10;
			int num2 = 0;
			Vector2 vector = velocity;
			float num3 = 0.2f;
			if (ai[0] == 1f || ai[0] == 5f)
			{
				num3 = 0.4f;
			}
			if (ai[0] == 6f)
			{
				num3 = 0f;
			}
			if (lastVelocity.X != velocity.X)
			{
				if (Math.Abs(lastVelocity.X) > 4f)
				{
					num2 = 1;
				}
				velocity.X = (0f - lastVelocity.X) * num3;
				localAI[0] += 1f;
			}
			if (lastVelocity.Y != velocity.Y)
			{
				if (Math.Abs(lastVelocity.Y) > 4f)
				{
					num2 = 1;
				}
				velocity.Y = (0f - lastVelocity.Y) * num3;
				localAI[0] += 1f;
			}
			if (ai[0] == 1f)
			{
				ai[0] = 5f;
				localNPCHitCooldown = num;
				netUpdate = true;
				Point scanAreaStart = base.TopLeft.ToTileCoordinates();
				Point scanAreaEnd = base.BottomRight.ToTileCoordinates();
				num2 = 2;
				CreateImpactExplosion(2, base.Center, ref scanAreaStart, ref scanAreaEnd, width, out var causedShockwaves);
				CreateImpactExplosion2_FlailTileCollision(base.Center, causedShockwaves, vector);
				position -= vector;
			}
			if (num2 > 0)
			{
				netUpdate = true;
				for (int i = 0; i < num2; i++)
				{
					Collision.HitTiles(position, vector, width, height);
				}
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			}
			if (ai[0] != 3f && ai[0] != 0f && ai[0] != 5f && ai[0] != 6f && localAI[0] >= 10f)
			{
				ai[0] = 4f;
				netUpdate = true;
			}
			if (wet)
			{
				wetVelocity = velocity;
			}
		}

		private void ResetLocalNPCHitImmunity()
		{
			for (int i = 0; i < 200; i++)
			{
				localNPCImmunity[i] = 0;
			}
		}

		private void AI_015_Flails()
		{
			Player player = Main.player[owner];
			if (!player.active || player.dead || player.noItems || player.CCed || Vector2.Distance(base.Center, player.Center) > 900f)
			{
				Kill();
				return;
			}
			if (Main.myPlayer == owner && Main.mapFullscreen)
			{
				Kill();
				return;
			}
			if (type == 948 && wet && !lavaWet)
			{
				type = 947;
				netUpdate = true;
			}
			Vector2 mountedCenter = player.MountedCenter;
			bool doFastThrowDust = false;
			bool flag = true;
			bool flag2 = false;
			int num = 10;
			float num2 = 24f;
			float num3 = 800f;
			float num4 = 3f;
			float num5 = 16f;
			float num6 = 6f;
			float num7 = 48f;
			float num8 = 1f;
			float num9 = 14f;
			int num10 = 60;
			int num11 = 10;
			int num12 = 20;
			int num13 = 10;
			int num14 = num + 5;
			switch (type)
			{
			case 947:
			case 948:
				num = 13;
				num2 = 12f;
				num5 = 8f;
				num7 = 13f;
				break;
			case 25:
				num = 15;
				num2 = 14f;
				num5 = 10f;
				num7 = 15f;
				break;
			case 154:
				num = 15;
				num2 = 15f;
				num5 = 11f;
				num7 = 16f;
				break;
			case 26:
				num = 15;
				num2 = 16f;
				num5 = 12f;
				num7 = 16f;
				break;
			case 35:
				num = 15;
				num2 = 17f;
				num5 = 14f;
				num7 = 18f;
				break;
			case 63:
				num = 13;
				num2 = 21f;
				num5 = 20f;
				num7 = 24f;
				num12 = 15;
				break;
			case 757:
				num = 13;
				num2 = 22f;
				num5 = 22f;
				num7 = 26f;
				num12 = 15;
				break;
			case 247:
				num = 13;
				num2 = 23f;
				num12 = 15;
				break;
			}
			float meleeSpeed = player.meleeSpeed;
			float num15 = 1f / meleeSpeed;
			num2 *= num15;
			num8 *= num15;
			num9 *= num15;
			num4 *= num15;
			num5 *= num15;
			num6 *= num15;
			num7 *= num15;
			float num16 = num2 * (float)num;
			float num17 = num16 + 160f;
			localNPCHitCooldown = num11;
			switch ((int)ai[0])
			{
			case 0:
			{
				flag2 = true;
				if (owner == Main.myPlayer)
				{
					Vector2 origin = mountedCenter;
					Vector2 mouseWorld = Main.MouseWorld;
					Vector2 vector3 = origin.DirectionTo(mouseWorld).SafeNormalize(Vector2.UnitX * player.direction);
					player.ChangeDir((vector3.X > 0f) ? 1 : (-1));
					if (!player.channel)
					{
						ai[0] = 1f;
						ai[1] = 0f;
						velocity = vector3 * num2 + player.velocity;
						base.Center = mountedCenter;
						netUpdate = true;
						ResetLocalNPCHitImmunity();
						localNPCHitCooldown = num13;
						break;
					}
				}
				localAI[1] += 1f;
				Vector2 vector4 = new Vector2(player.direction).RotatedBy((float)Math.PI * 10f * (localAI[1] / 60f) * (float)player.direction);
				vector4.Y *= 0.8f;
				if (vector4.Y * player.gravDir > 0f)
				{
					vector4.Y *= 0.5f;
				}
				base.Center = mountedCenter + vector4 * 30f;
				velocity = Vector2.Zero;
				localNPCHitCooldown = num12;
				break;
			}
			case 1:
			{
				doFastThrowDust = true;
				bool flag4 = ai[1]++ >= (float)num;
				flag4 |= Distance(mountedCenter) >= num3;
				if (player.controlUseItem)
				{
					ai[0] = 6f;
					ai[1] = 0f;
					netUpdate = true;
					velocity *= 0.2f;
					if (Main.myPlayer == owner && type == 757)
					{
						NewProjectile(GetProjectileSource_FromThis(), base.Center, velocity, 928, damage, knockBack, Main.myPlayer);
					}
					break;
				}
				if (flag4)
				{
					ai[0] = 2f;
					ai[1] = 0f;
					netUpdate = true;
					velocity *= 0.3f;
					if (Main.myPlayer == owner && type == 757)
					{
						NewProjectile(GetProjectileSource_FromThis(), base.Center, velocity, 928, damage, knockBack, Main.myPlayer);
					}
				}
				player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
				localNPCHitCooldown = num13;
				break;
			}
			case 2:
			{
				Vector2 vector2 = DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero);
				if (Distance(mountedCenter) <= num5)
				{
					Kill();
					return;
				}
				if (player.controlUseItem)
				{
					ai[0] = 6f;
					ai[1] = 0f;
					netUpdate = true;
					velocity *= 0.2f;
				}
				else
				{
					velocity *= 0.98f;
					velocity = velocity.MoveTowards(vector2 * num5, num4);
					player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
				}
				break;
			}
			case 3:
			{
				if (!player.controlUseItem)
				{
					ai[0] = 4f;
					ai[1] = 0f;
					netUpdate = true;
					break;
				}
				float num18 = Distance(mountedCenter);
				tileCollide = ai[1] == 1f;
				bool flag3 = num18 <= num16;
				if (flag3 != tileCollide)
				{
					tileCollide = flag3;
					ai[1] = (tileCollide ? 1 : 0);
					netUpdate = true;
				}
				if (num18 > (float)num10)
				{
					if (num18 >= num16)
					{
						velocity *= 0.5f;
						velocity = velocity.MoveTowards(DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero) * num9, num9);
					}
					velocity *= 0.98f;
					velocity = velocity.MoveTowards(DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero) * num9, num8);
				}
				else
				{
					if (velocity.Length() < 6f)
					{
						velocity.X *= 0.96f;
						velocity.Y += 0.2f;
					}
					if (player.velocity.X == 0f)
					{
						velocity.X *= 0.96f;
					}
				}
				player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
				break;
			}
			case 4:
			{
				tileCollide = false;
				Vector2 vector = DirectionTo(mountedCenter).SafeNormalize(Vector2.Zero);
				if (Distance(mountedCenter) <= num7)
				{
					Kill();
					return;
				}
				velocity *= 0.98f;
				velocity = velocity.MoveTowards(vector * num7, num6);
				Vector2 target = base.Center + velocity;
				Vector2 value = mountedCenter.DirectionFrom(target).SafeNormalize(Vector2.Zero);
				if (Vector2.Dot(vector, value) < 0f)
				{
					Kill();
					return;
				}
				player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
				break;
			}
			case 5:
				if (ai[1]++ >= (float)num14)
				{
					ai[0] = 6f;
					ai[1] = 0f;
					netUpdate = true;
				}
				else
				{
					localNPCHitCooldown = num13;
					velocity.Y += 0.6f;
					velocity.X *= 0.95f;
					player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
				}
				break;
			case 6:
				if (!player.controlUseItem || Distance(mountedCenter) > num17)
				{
					ai[0] = 4f;
					ai[1] = 0f;
					netUpdate = true;
				}
				else
				{
					velocity.Y += 0.8f;
					velocity.X *= 0.95f;
					player.ChangeDir((player.Center.X < base.Center.X) ? 1 : (-1));
				}
				break;
			}
			if (type == 247)
			{
				flag = false;
				float num19 = (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
				rotation += ((velocity.X > 0f) ? num19 : (0f - num19));
				if (ai[0] == 0f)
				{
					rotation += (float)Math.PI * 2f / 15f * (float)player.direction;
				}
				float num20 = 600f;
				NPC nPC = null;
				if (owner == Main.myPlayer)
				{
					localAI[0] += 1f;
					if (localAI[0] >= 20f)
					{
						localAI[0] = 17f;
						for (int i = 0; i < 200; i++)
						{
							NPC nPC2 = Main.npc[i];
							if (nPC2.CanBeChasedBy(this))
							{
								float num21 = Distance(nPC2.Center);
								if (!(num21 >= num20) && Collision.CanHit(position, width, height, nPC2.position, nPC2.width, nPC2.height))
								{
									nPC = nPC2;
									num20 = num21;
								}
							}
						}
					}
					if (nPC != null)
					{
						localAI[0] = 0f;
						float num22 = 14f;
						Vector2 center = base.Center;
						Vector2 vector5 = center.DirectionTo(nPC.Center) * num22;
						NewProjectile(GetProjectileSource_FromThis(), center, vector5, 248, (int)((double)damage / 1.5), knockBack / 2f, Main.myPlayer);
					}
				}
			}
			direction = ((velocity.X > 0f) ? 1 : (-1));
			spriteDirection = direction;
			ownerHitCheck = flag2;
			if (flag)
			{
				if (velocity.Length() > 1f)
				{
					rotation = velocity.ToRotation() + velocity.X * 0.1f;
				}
				else
				{
					rotation += velocity.X * 0.1f;
				}
			}
			timeLeft = 2;
			player.heldProj = whoAmI;
			player.SetDummyItemTime(2);
			player.itemRotation = DirectionFrom(mountedCenter).ToRotation();
			if (base.Center.X < mountedCenter.X)
			{
				player.itemRotation += (float)Math.PI;
			}
			player.itemRotation = MathHelper.WrapAngle(player.itemRotation);
			AI_015_Flails_Dust(doFastThrowDust);
		}

		private void AI_015_HandleMovementCollision_Old(ref Vector2 wetVelocity, ref Vector2 lastVelocity)
		{
			bool flag = false;
			if (lastVelocity.X != velocity.X)
			{
				if (Math.Abs(lastVelocity.X) > 4f)
				{
					flag = true;
				}
				position.X += velocity.X;
				velocity.X = (0f - lastVelocity.X) * 0.2f;
			}
			if (lastVelocity.Y != velocity.Y)
			{
				if (Math.Abs(lastVelocity.Y) > 4f)
				{
					flag = true;
				}
				position.Y += velocity.Y;
				velocity.Y = (0f - lastVelocity.Y) * 0.2f;
			}
			ai[0] = 1f;
			if (flag)
			{
				netUpdate = true;
				Collision.HitTiles(position, velocity, width, height);
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
			}
			if (wet)
			{
				wetVelocity = velocity;
			}
		}

		private void AI_015_Flails_Old()
		{
			AI_015_Flails_Dust(doFastThrowDust: false);
			bool flag = Main.player[owner].dead;
			if (!flag)
			{
				flag = (Main.player[owner].Center - base.Center).Length() > 2000f;
			}
			if (flag)
			{
				Kill();
				return;
			}
			Main.player[owner].SetDummyItemTime(10);
			if (position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
			{
				Main.player[owner].ChangeDir(1);
				direction = 1;
			}
			else
			{
				Main.player[owner].ChangeDir(-1);
				direction = -1;
			}
			Vector2 mountedCenter = Main.player[owner].MountedCenter;
			Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num = mountedCenter.X - vector.X;
			float num2 = mountedCenter.Y - vector.Y;
			float num3 = (float)Math.Sqrt(num * num + num2 * num2);
			if (ai[0] == 0f)
			{
				float num4 = 160f;
				if (type == 63)
				{
					num4 *= 1.5f;
				}
				if (type == 247)
				{
					num4 *= 1.5f;
				}
				if (type == 757)
				{
					num4 *= 1.5f;
				}
				tileCollide = true;
				if (num3 > num4)
				{
					ai[0] = 1f;
					netUpdate = true;
				}
				else if (!Main.player[owner].channel)
				{
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.9f;
					}
					velocity.Y += 1f;
					velocity.X *= 0.9f;
				}
			}
			else if (ai[0] == 1f)
			{
				float meleeSpeed = Main.player[owner].meleeSpeed;
				float num5 = 14f / meleeSpeed;
				float num6 = 0.9f / meleeSpeed;
				float num7 = 300f / meleeSpeed;
				int num8 = 60;
				if (type == 63)
				{
					num7 *= 1.5f;
					num5 *= 1.5f;
					num6 *= 1.5f;
				}
				if (type == 247)
				{
					num7 *= 1.5f;
					num5 = 15.9f;
					num6 *= 2f;
					num8 = 100;
				}
				if (type == 757)
				{
					num7 *= 1.5f;
					num5 = 15.9f;
					num6 *= 2f;
					num8 = 100;
				}
				Math.Abs(num);
				Math.Abs(num2);
				if (ai[1] == 1f)
				{
					tileCollide = false;
				}
				if (!Main.player[owner].channel || num3 > num7 || !tileCollide)
				{
					ai[1] = 1f;
					if (tileCollide)
					{
						netUpdate = true;
					}
					tileCollide = false;
					if (num3 < 20f)
					{
						Kill();
					}
				}
				if (!tileCollide)
				{
					num6 *= 2f;
				}
				if (num3 > (float)num8 || !tileCollide)
				{
					num3 = num5 / num3;
					num *= num3;
					num2 *= num3;
					new Vector2(velocity.X, velocity.Y);
					float num9 = num - velocity.X;
					float num10 = num2 - velocity.Y;
					float num11 = (float)Math.Sqrt(num9 * num9 + num10 * num10);
					num11 = num6 / num11;
					num9 *= num11;
					num10 *= num11;
					velocity.X *= 0.98f;
					velocity.Y *= 0.98f;
					velocity.X += num9;
					velocity.Y += num10;
				}
				else
				{
					if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < 6f)
					{
						velocity.X *= 0.96f;
						velocity.Y += 0.2f;
					}
					if (Main.player[owner].velocity.X == 0f)
					{
						velocity.X *= 0.96f;
					}
				}
			}
			if (type == 247)
			{
				if (velocity.X < 0f)
				{
					rotation -= (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
				}
				else
				{
					rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
				}
				float num12 = position.X;
				float num13 = position.Y;
				float num14 = 600f;
				bool flag2 = false;
				if (owner == Main.myPlayer)
				{
					localAI[1] += 1f;
					if (localAI[1] > 20f)
					{
						localAI[1] = 20f;
						for (int i = 0; i < 200; i++)
						{
							if (Main.npc[i].CanBeChasedBy(this))
							{
								float num15 = Main.npc[i].position.X + (float)(Main.npc[i].width / 2);
								float num16 = Main.npc[i].position.Y + (float)(Main.npc[i].height / 2);
								float num17 = Math.Abs(position.X + (float)(width / 2) - num15) + Math.Abs(position.Y + (float)(height / 2) - num16);
								if (num17 < num14 && Collision.CanHit(position, width, height, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height))
								{
									num14 = num17;
									num12 = num15;
									num13 = num16;
									flag2 = true;
								}
							}
						}
					}
				}
				if (flag2)
				{
					localAI[1] = 0f;
					vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					num = num12 - vector.X;
					num2 = num13 - vector.Y;
					num3 = (float)Math.Sqrt(num * num + num2 * num2);
					num3 = 14f / num3;
					num *= num3;
					num2 *= num3;
					NewProjectile(GetProjectileSource_FromThis(), vector.X, vector.Y, num, num2, 248, (int)((double)damage / 1.5), knockBack / 2f, Main.myPlayer);
				}
			}
			else
			{
				rotation = (float)Math.Atan2(num2, num) - velocity.X * 0.1f;
			}
		}

		private void AI_015_Flails_Dust(bool doFastThrowDust)
		{
			if (type == 25)
			{
				int maxValue = 15;
				if (doFastThrowDust)
				{
					maxValue = 1;
				}
				if (Main.rand.Next(maxValue) == 0)
				{
					Dust.NewDust(position, width, height, 14, 0f, 0f, 150, default(Color), 1.3f);
				}
			}
			else if (type == 757)
			{
				int num = 4;
				if (velocity.Length() < 8f)
				{
					num = 10;
				}
				if (doFastThrowDust)
				{
					num /= 2;
				}
				for (int i = 0; i < 2; i++)
				{
					if (Main.rand.Next(num) == 0)
					{
						Dust dust = Dust.NewDustDirect(position, width, height, 5, 0f, 0f, 0, default(Color), 0.8f);
						dust.velocity += velocity / 4f;
						dust.fadeIn = 1.3f;
					}
				}
				num = 40;
				if (doFastThrowDust)
				{
					num /= 2;
				}
				for (float num2 = 0f; num2 < 1f; num2 += 0.1f)
				{
					if (Main.rand.Next(num) == 0)
					{
						Dust.NewDustDirect(Vector2.Lerp(Main.player[owner].Center, base.Center, Main.rand.NextFloat()) + new Vector2(-8f), 16, 16, 5, 0f, 0f, 0, default(Color), 1.3f).velocity += velocity / 4f;
					}
				}
			}
			else if (type == 26)
			{
				int num3 = Dust.NewDust(position, width, height, 172, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 1.5f);
				Main.dust[num3].noGravity = true;
				Main.dust[num3].velocity.X /= 2f;
				Main.dust[num3].velocity.Y /= 2f;
			}
			else if (type == 948 && !wet)
			{
				int num4 = Dust.NewDust(position, width, height, 6, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 1.2f);
				Main.dust[num4].noGravity = true;
				Main.dust[num4].velocity.X *= 4f;
				Main.dust[num4].velocity.Y *= 4f;
				Main.dust[num4].velocity = (Main.dust[num4].velocity + velocity) / 2f;
			}
			else if (type == 35)
			{
				int num5 = Dust.NewDust(position, width, height, 6, velocity.X * 0.4f, velocity.Y * 0.4f, 100, default(Color), 3f);
				Main.dust[num5].noGravity = true;
				Main.dust[num5].velocity.X *= 2f;
				Main.dust[num5].velocity.Y *= 2f;
			}
			else if (type == 154)
			{
				int num6 = Dust.NewDust(position, width, height, 115, velocity.X * 0.4f, velocity.Y * 0.4f, 140, default(Color), 1.5f);
				Main.dust[num6].noGravity = true;
				Main.dust[num6].velocity *= 0.25f;
			}
		}

		private void AI_100_Medusa()
		{
			Player player = Main.player[owner];
			Vector2 zero = Vector2.Zero;
			if (type == 535)
			{
				zero.X = (float)player.direction * 6f;
				zero.Y = player.gravDir * -14f;
				bool flag = true;
				bool flag2 = ai[0] > 0f;
				if (!player.dead)
				{
					timeLeft = 3;
				}
				if (ai[0] > 0f)
				{
					ai[0] -= 1f;
				}
				if (flag2)
				{
					if (frame < 8)
					{
						frame = 8;
					}
					if (frame >= 12)
					{
						frame = 8;
					}
					frameCounter++;
					if (++frameCounter >= 5)
					{
						frameCounter = 0;
						if (++frame >= 12)
						{
							frame = 8;
						}
					}
				}
				else if (++frameCounter >= 5)
				{
					frameCounter = 0;
					if (++frame >= 8)
					{
						frame = 0;
					}
				}
				Vector2 center = player.Center;
				Vector2 vector = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - center;
				if (player.gravDir == -1f)
				{
					vector.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - center.Y;
				}
				Vector2 vector2 = new Vector2(Math.Sign((vector.X == 0f) ? ((float)player.direction) : vector.X), 0f);
				if (vector2.X != velocity.X || vector2.Y != velocity.Y)
				{
					netUpdate = true;
				}
				velocity = vector2;
				if (flag2 && soundDelay == 0)
				{
					SoundEngine.PlaySound(4, (int)base.position.X, (int)base.position.Y, 17);
				}
				soundDelay = (flag2 ? 4 : 0);
				if (Main.myPlayer == owner)
				{
					Vector2 position = player.Center + new Vector2(player.direction * 4, player.gravDir * 2f);
					if (!player.channel)
					{
						Kill();
						return;
					}
					if (!flag2 || ai[0] % 15f == 0f)
					{
						bool flag3 = false;
						for (int i = 0; i < 200; i++)
						{
							NPC nPC = Main.npc[i];
							if (nPC.active && Distance(nPC.Center) < 320f && nPC.CanBeChasedBy(this) && Collision.CanHitLine(nPC.position, nPC.width, nPC.height, position, 0, 0))
							{
								flag3 = true;
								break;
							}
						}
						if (flag3)
						{
							bool flag4 = false;
							if (!flag || player.CheckMana(player.inventory[player.selectedItem].mana, pay: true))
							{
								int num = damage;
								position = base.Center;
								int num2 = 0;
								float num3 = 0f;
								_medusaHeadTargetList.Clear();
								for (int j = 0; j < 200; j++)
								{
									NPC nPC2 = Main.npc[j];
									float num4 = Distance(nPC2.Center);
									if (nPC2.active && num4 < 320f && nPC2.CanBeChasedBy(this) && Collision.CanHitLine(nPC2.position, nPC2.width, nPC2.height, position, 0, 0))
									{
										_medusaHeadTargetList.Add(Tuple.Create(j, num4));
									}
								}
								_medusaHeadTargetList.Sort(_medusaTargetComparer);
								for (int k = 0; k < _medusaHeadTargetList.Count && k < 3; k++)
								{
									Tuple<int, float> tuple = _medusaHeadTargetList[k];
									NPC nPC3 = Main.npc[tuple.Item1];
									Vector2 v = nPC3.Center - position;
									num3 += v.ToRotation();
									num2++;
									int num5 = NewProjectile(GetProjectileSource_FromThis(), position.X, position.Y, v.X, v.Y, 536, 0, 0f, owner, whoAmI);
									Main.projectile[num5].Center = nPC3.Center;
									Main.projectile[num5].damage = num;
									Main.projectile[num5].Damage();
									Main.projectile[num5].damage = 0;
									Main.projectile[num5].Center = position;
									ai[0] = 180f;
								}
								num3 = ((num2 == 0) ? ((player.direction == 1) ? 0f : ((float)Math.PI)) : (num3 / (float)num2));
								for (int l = 0; l < 4; l++)
								{
									Vector2 zero2 = Vector2.Zero;
									zero2 = ((Main.rand.Next(4) == 0) ? (Vector2.UnitX.RotatedByRandom(6.2831854820251465) * new Vector2(200f, 50f) * (Main.rand.NextFloat() * 0.7f + 0.3f)) : (Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(num3) * new Vector2(200f, 50f) * (Main.rand.NextFloat() * 0.7f + 0.3f)));
									NewProjectile(GetProjectileSource_FromThis(), position.X, position.Y, zero2.X, zero2.Y, 536, 0, 0f, owner, whoAmI);
								}
								ai[0] = 60f;
								netUpdate = true;
							}
						}
					}
				}
				Lighting.AddLight(base.Center, 0.9f, 0.75f, 0.1f);
			}
			rotation = ((player.gravDir == 1f) ? 0f : ((float)Math.PI));
			spriteDirection = direction;
			timeLeft = 2;
			Vector2 vector3 = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
			if (player.direction != 1)
			{
				vector3.X = (float)player.bodyFrame.Width - vector3.X;
			}
			vector3 -= (player.bodyFrame.Size() - new Vector2(player.width, 42f)) / 2f;
			base.Center = (player.position + vector3 + zero - velocity).Floor();
			player.ChangeDir(direction);
			player.heldProj = whoAmI;
			player.SetDummyItemTime(2);
		}

		private void AI_120_StardustGuardian()
		{
			Player player = Main.player[owner];
			if (!player.active)
			{
				active = false;
				return;
			}
			bool flag = type == 623;
			Vector2 vector = player.Center;
			float num = 100f;
			float num2 = 500f;
			float num3 = 500f;
			float num4 = 100f;
			bool flag2 = true;
			if (flag)
			{
				if (player.dead)
				{
					player.stardustGuardian = false;
				}
				if (player.stardustGuardian)
				{
					timeLeft = 2;
				}
				num = 150f;
				vector.X -= (5 + player.width / 2) * player.direction;
				vector.Y -= 25f;
				Lighting.AddLight(base.Center, 0.9f, 0.9f, 0.7f);
				if (ai[0] != 3f && alpha == 255)
				{
					alpha = 0;
					for (int i = 0; i < 30; i++)
					{
						int num5 = Dust.NewDust(position, width, height, 135, 0f, 0f, 200, default(Color), 1.7f);
						Main.dust[num5].noGravity = true;
						Main.dust[num5].velocity *= 3f;
						Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
						num5 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100);
						Main.dust[num5].velocity *= 2f;
						Main.dust[num5].noGravity = true;
						Main.dust[num5].fadeIn = 2.5f;
						Main.dust[num5].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
					}
				}
			}
			if (ai[0] != 0f)
			{
				Main.player[owner].tankPet = whoAmI;
				Main.player[owner].tankPetReset = false;
			}
			if (ai[0] == 0f)
			{
				base.Center = Vector2.Lerp(base.Center, vector, 0.05f);
				velocity *= 0.5f;
				direction = (spriteDirection = player.direction);
				if (flag && ++frameCounter >= 9)
				{
					frameCounter = 0;
					if (++frame >= 8)
					{
						frame = 0;
					}
				}
				int targetNPCIndex = -1;
				float distanceToClosestTarget = num2;
				bool flag3 = flag2;
				if (flag && Math.Abs(base.Center.X - vector.X) > num + 20f)
				{
					flag3 = false;
				}
				if (flag3)
				{
					AI_120_StardustGuardian_FindTarget(num2, ref targetNPCIndex, ref distanceToClosestTarget);
				}
				if (targetNPCIndex != -1)
				{
					NPC nPC = Main.npc[targetNPCIndex];
					direction = (spriteDirection = (nPC.Center.X > base.Center.X).ToDirectionInt());
					float num6 = Math.Abs(vector.X - base.Center.X);
					float num7 = Math.Abs(nPC.Center.X - base.Center.X);
					float num8 = Math.Abs(vector.Y - base.Center.Y);
					float num9 = Math.Abs(nPC.Center.Y - base.Bottom.Y);
					float num10 = (nPC.Center.Y > base.Bottom.Y).ToDirectionInt();
					if ((num6 < num || (vector.X - base.Center.X) * (float)direction < 0f) && num7 > 20f && num7 < num - num6 + 100f)
					{
						velocity.X += 0.1f * (float)direction;
					}
					else
					{
						velocity.X *= 0.7f;
					}
					if ((num8 < num4 || (vector.Y - base.Bottom.Y) * num10 < 0f) && num9 > 10f && num9 < num4 - num8 + 10f)
					{
						velocity.Y += 0.1f * num10;
					}
					else
					{
						velocity.Y *= 0.7f;
					}
					if (owner == Main.myPlayer && num7 < num3)
					{
						ai[0] = 2f;
						ai[1] = targetNPCIndex;
						netUpdate = true;
					}
				}
			}
			else if (ai[0] == 1f)
			{
				if (player.HasMinionRestTarget)
				{
					vector = player.MinionRestTargetPoint;
				}
				else
				{
					ai[0] = 0f;
					netUpdate = true;
				}
				int targetNPCIndex2 = -1;
				float distanceToClosestTarget2 = num2;
				bool flag4 = true;
				if (flag && Math.Abs(base.Center.X - vector.X) > num + 20f)
				{
					flag4 = false;
				}
				if (flag4)
				{
					AI_120_StardustGuardian_FindTarget(num2, ref targetNPCIndex2, ref distanceToClosestTarget2);
				}
				if (targetNPCIndex2 != -1)
				{
					NPC nPC2 = Main.npc[targetNPCIndex2];
					direction = (spriteDirection = (nPC2.Center.X > base.Center.X).ToDirectionInt());
					float num11 = Math.Abs(vector.X - base.Center.X);
					float num12 = Math.Abs(nPC2.Center.X - base.Center.X);
					float num13 = Math.Abs(vector.Y - base.Center.Y);
					float num14 = Math.Abs(nPC2.Center.Y - base.Bottom.Y);
					float num15 = (nPC2.Center.Y > base.Bottom.Y).ToDirectionInt();
					if ((num11 < num || (vector.X - base.Center.X) * (float)direction < 0f) && num12 > 20f && num12 < num - num11 + 100f)
					{
						velocity.X += 0.1f * (float)direction;
					}
					else
					{
						velocity.X *= 0.7f;
					}
					if ((num13 < num4 || (vector.Y - base.Bottom.Y) * num15 < 0f) && num14 > 10f && num14 < num4 - num13 + 10f)
					{
						velocity.Y += 0.1f * num15;
					}
					else
					{
						velocity.Y *= 0.7f;
					}
					if (owner == Main.myPlayer && num12 < num3)
					{
						ai[0] = 2f;
						ai[1] = targetNPCIndex2;
						netUpdate = true;
					}
				}
				else
				{
					if (Math.Abs(vector.X - base.Center.X) > num + 40f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					else if (Math.Abs(vector.X - base.Center.X) > 20f)
					{
						direction = (spriteDirection = (vector.X > base.Center.X).ToDirectionInt());
						velocity.X += 0.06f * (float)direction;
					}
					else
					{
						velocity.X *= 0.8f;
						direction = (spriteDirection = (player.Center.X < base.Center.X).ToDirectionInt());
					}
					if (Math.Abs(vector.Y - base.Center.Y) > num4)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					else if (Math.Abs(vector.Y - base.Center.Y) > 10f)
					{
						velocity.Y += 0.06f * (float)Math.Sign(vector.Y - base.Center.Y);
					}
					else
					{
						velocity.Y *= 0.8f;
					}
				}
				if (flag && ++frameCounter >= 9)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type] - 4)
					{
						frame = 0;
					}
				}
			}
			else if (ai[0] == 2f)
			{
				if (flag)
				{
					int num16 = 3;
					if (frame < 12)
					{
						frame = 12;
					}
					if (frame == 12 || frame == 13)
					{
						num16 = 8;
					}
					if (++frameCounter >= num16)
					{
						frameCounter = 0;
						if (++frame >= 19)
						{
							frame = 14;
						}
					}
				}
				bool flag5 = false;
				if (flag2)
				{
					flag5 = Distance(player.Center) < num2;
				}
				NPC nPC3 = null;
				int num17 = (int)ai[1];
				if (Main.npc.IndexInRange(num17))
				{
					nPC3 = Main.npc[num17];
					if (!nPC3.CanBeChasedBy(this) || Distance(nPC3.Center) > num3)
					{
						nPC3 = null;
					}
				}
				if (!flag5 || nPC3 == null)
				{
					ai[1] = 0f;
					ai[0] = 0f;
					netUpdate = true;
					if (frame < 18)
					{
						frame = 18;
					}
				}
				else
				{
					int num18 = (((nPC3.Center - player.Center).X > 1f) ? 1 : (-1));
					Vector2 targetPosition = nPC3.Center + new Vector2((float)(-num18) * ((float)nPC3.width * 0.5f + 70f), -10f) - base.Center;
					float maxAmountAllowedToMove = 6f * Utils.Remap(targetPosition.Length(), 50f, 400f, 1f, 4f);
					int num19 = 32;
					Vector2 targetPosition2 = Vector2.Zero.MoveTowards(targetPosition, maxAmountAllowedToMove);
					velocity = velocity.MoveTowards(targetPosition2, num19);
					direction = (spriteDirection = num18);
					if (localAI[0]++ >= 3f)
					{
						localAI[0] = 0f;
						int targetNPCIndex3 = -1;
						float distanceToClosestTarget3 = -1f;
						AI_120_StardustGuardian_FindTarget(num2, ref targetNPCIndex3, ref distanceToClosestTarget3);
						if (targetNPCIndex3 != -1)
						{
							ai[1] = targetNPCIndex3;
							netUpdate = true;
						}
					}
				}
			}
			else
			{
				_ = ai[0];
				_ = 2f;
			}
			if (ai[0] != 3f)
			{
				return;
			}
			if (player.HasMinionRestTarget)
			{
				vector = player.MinionRestTargetPoint;
			}
			else
			{
				ai[0] = 0f;
				netUpdate = true;
			}
			if (alpha == 0)
			{
				alpha = 255;
				for (int j = 0; j < 30; j++)
				{
					int num20 = Dust.NewDust(position, width, height, 135, 0f, 0f, 200, default(Color), 1.7f);
					Main.dust[num20].noGravity = true;
					Main.dust[num20].velocity *= 3f;
					Main.dust[num20].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
					num20 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100);
					Main.dust[num20].velocity *= 2f;
					Main.dust[num20].noGravity = true;
					Main.dust[num20].fadeIn = 2.5f;
					Main.dust[num20].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				}
			}
			else
			{
				for (int k = 0; k < 2; k++)
				{
					int num21 = Dust.NewDust(position, width, height, 135, 0f, 0f, 200, default(Color), 1.7f);
					Main.dust[num21].noGravity = true;
					Main.dust[num21].velocity *= 3f;
					Main.dust[num21].noLight = true;
					Main.dust[num21].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
					num21 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100);
					Main.dust[num21].velocity *= 2f;
					Main.dust[num21].noGravity = true;
					Main.dust[num21].fadeIn = 2.5f;
					Main.dust[num21].noLight = true;
					Main.dust[num21].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cPet, Main.player[owner]);
				}
			}
			velocity *= 0.7f;
			base.Center = Vector2.Lerp(base.Center, vector, 0.2f);
			if (Distance(vector) < 10f)
			{
				ai[0] = 1f;
				netUpdate = true;
			}
		}

		private void AI_120_StardustGuardian_FindTarget(float lookupRange, ref int targetNPCIndex, ref float distanceToClosestTarget)
		{
			Vector2 center = Main.player[owner].Center;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this))
				{
					float num = center.Distance(nPC.Center);
					if (num < lookupRange)
					{
						targetNPCIndex = i;
						distanceToClosestTarget = num;
						lookupRange = num;
					}
				}
			}
		}

		private void AI_180_FairyQueenSunDance()
		{
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item159, base.Center);
			}
			localAI[0] += 1f;
			float num = 180f;
			_ = ai[0] / ((float)Math.PI * 2f);
			float num2 = (float)Math.PI / 9f;
			if (localAI[0] >= num)
			{
				Kill();
				return;
			}
			alpha -= 15;
			if (alpha < 0)
			{
				alpha = 0;
			}
			scale = Utils.GetLerpValue(0f, 20f, localAI[0], clamped: true) * Utils.GetLerpValue(num, num - 60f, localAI[0], clamped: true);
			float lerpValue = Utils.GetLerpValue(50f, num, localAI[0], clamped: true);
			rotation = ai[0] + lerpValue * num2;
			int num3 = (int)ai[1];
			if (Main.npc.IndexInRange(num3))
			{
				NPC nPC = Main.npc[num3];
				if (nPC.active && nPC.type == 636)
				{
					base.Center = nPC.Center;
				}
				velocity = Vector2.Zero;
				Vector2 vector = rotation.ToRotationVector2();
				Vector3 v3_ = Main.hslToRgb((ai[0] / ((float)Math.PI * 2f) + localAI[0] / num) % 1f, 1f, 0.85f).ToVector3() * scale;
				float num4 = 800f * scale;
				DelegateMethods.v3_1 = v3_;
				for (float num5 = 0f; num5 <= 1f; num5 += 0.0833333358f)
				{
					Point point = (base.Center + vector * num4 * num5).ToTileCoordinates();
					DelegateMethods.CastLightOpen(point.X, point.Y);
				}
			}
			else
			{
				Kill();
			}
		}

		private void AI_179_FairyQueenLance()
		{
			localAI[0] += 1f;
			if (localAI[0] >= 60f)
			{
				velocity = ai[0].ToRotationVector2() * 40f;
				if (Main.rand.Next(3) == 0)
				{
					Dust dust = Dust.NewDustPerfect(base.Center, 267);
					dust.fadeIn = 1f;
					dust.noGravity = true;
					dust.alpha = 100;
					dust.color = Color.Lerp(AI_171_GetColor(), Color.White, Main.rand.NextFloat() * 0.4f);
					dust.noLightEmittence = true;
					dust.scale *= 1.5f;
				}
			}
			if (localAI[0] >= 360f)
			{
				Kill();
				return;
			}
			alpha = (int)MathHelper.Lerp(255f, 0f, Utils.GetLerpValue(0f, 20f, localAI[0], clamped: true));
			rotation = ai[0];
		}

		private void AI_176_EdgyLightning()
		{
			int num = (int)ai[0] - 1;
			if (num != -1 && (!Main.npc[num].CanBeChasedBy(this) || localNPCImmunity[num] != 0))
			{
				ai[0] = 0f;
				num = -1;
			}
			if (num == -1)
			{
				NPC nPC = FindTargetWithinRange(400f);
				if (nPC != null)
				{
					num = nPC.whoAmI;
					ai[0] = num + 1;
					netUpdate = true;
				}
			}
			if (num != -1)
			{
				NPC nPC2 = Main.npc[num];
				Vector2 vector = DirectionTo(nPC2.Center);
				if (vector.HasNaNs())
				{
					Kill();
					return;
				}
				velocity = vector * 10f;
				rotation = velocity.ToRotation();
				if (++frameCounter >= 3)
				{
					frameCounter = 0;
					frame = Main.rand.Next(Main.projFrames[type]);
				}
			}
			else
			{
				Kill();
			}
		}

		public NPC FindTargetWithinRange(float maxRange, bool checkCanHit = false)
		{
			NPC result = null;
			float num = maxRange;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this) && localNPCImmunity[i] == 0 && (!checkCanHit || Collision.CanHitLine(position, width, height, nPC.position, nPC.width, nPC.height)))
				{
					float num2 = Distance(nPC.Center);
					if (!(num <= num2))
					{
						num = num2;
						result = nPC;
					}
				}
			}
			return result;
		}

		private void AI_177_IceWhipSlicer()
		{
			//IL_0085: Unknown result type (might be due to invalid IL or missing references)
			//IL_008a: Unknown result type (might be due to invalid IL or missing references)
			//IL_009c: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
			Player player = Main.player[owner];
			if (type == 917 && (!player.active || player.dead))
			{
				player.coolWhipBuff = false;
				Kill();
				return;
			}
			if (type == 917 && player.coolWhipBuff)
			{
				timeLeft = 2;
			}
			if (type == 969)
			{
				SlotId val;
				if (soundDelay == 0)
				{
					soundDelay = -1;
					float[] array = localAI;
					val = SoundEngine.PlayTrackedSound(SoundID.DD2_BookStaffTwisterLoop, base.Center);
					array[1] = ((SlotId)(val)).ToFloat();
				}
				ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
				if (activeSound != null)
				{
					activeSound.Position = base.Center;
					activeSound.Volume = 1f - Math.Max(ai[1] - 435f, 0f) / 15f;
				}
				else
				{
					float[] array2 = localAI;
					val = SlotId.Invalid;
					array2[1] = ((SlotId)(val)).ToFloat();
				}
				ai[1] += 1f;
				if (ai[1] > 440f)
				{
					alpha = (int)MathHelper.Lerp(0f, 250f, (ai[1] - 440f) / 10f);
				}
				if (ai[1] >= 450f)
				{
					Kill();
				}
				float num = 435f;
				for (int i = 0; i < 1000; i++)
				{
					if (i != whoAmI && Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].type == type && timeLeft > Main.projectile[i].timeLeft && Main.projectile[i].ai[1] < num)
					{
						Main.projectile[i].ai[1] = num;
						Main.projectile[i].netUpdate = true;
					}
				}
			}
			int num2 = (int)ai[0] - 1;
			if (num2 != -1 && (!Main.npc[num2].CanBeChasedBy(this) || localNPCImmunity[num2] > 0))
			{
				ai[0] = 0f;
				num2 = -1;
			}
			if (num2 == -1)
			{
				bool checkCanHit = false;
				if (type == 969)
				{
					checkCanHit = true;
				}
				NPC nPC = FindTargetWithinRange(400f, checkCanHit);
				if (nPC != null)
				{
					num2 = nPC.whoAmI;
					ai[0] = num2 + 1;
					netUpdate = true;
				}
			}
			float num3 = 12f;
			float amount = 0.1f;
			float num4 = 0f;
			if (type == 969)
			{
				num3 = 8f;
				amount = 0.075f;
				num4 = 25f;
			}
			if (num2 != -1)
			{
				NPC nPC2 = Main.npc[num2];
				float num5 = Distance(nPC2.Center);
				if (num3 > num5)
				{
					num3 = num5;
				}
				Vector2 vector = DirectionTo(nPC2.Center);
				if (!vector.HasNaNs() && num5 >= num4)
				{
					velocity = Vector2.Lerp(velocity, vector * num3, amount);
				}
			}
			else if (type == 969)
			{
				Vector2 vector2 = DirectionTo(base.Center + velocity);
				if (!vector2.HasNaNs())
				{
					velocity = Vector2.Lerp(velocity, vector2 * num3, amount);
				}
			}
			else
			{
				velocity *= 0.92f;
			}
			if (type == 969)
			{
				rotation = velocity.X * 0.0125f;
				if (++frameCounter > 4)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (timeLeft % 3 == 0)
				{
					int num6 = Dust.NewDust(position, width, height, 16, velocity.X, velocity.Y, 120, default(Color), 0.5f);
					Main.dust[num6].noGravity = true;
					Main.dust[num6].fadeIn = 0.9f;
					Main.dust[num6].velocity = Main.rand.NextVector2Circular(2f, 2f) + new Vector2(0f, -2f) + velocity * 0.75f;
					for (int j = 0; j < 2; j++)
					{
						Dust dust = Dust.NewDustDirect(position, width, height, 16, velocity.X, velocity.Y, 60, default(Color), 0.5f);
						dust.noGravity = true;
						dust.fadeIn = 0.7f;
						dust.velocity = Main.rand.NextVector2Circular(2f, 2f) * 0.2f + new Vector2(0f, -0.4f) + velocity * 1.5f;
						dust.position -= velocity * 3f;
					}
				}
			}
			else
			{
				rotation += 0.0209439527f + Math.Abs(velocity.X) * 0.2f;
				if (Main.rand.Next(3) == 0)
				{
					Dust dust2 = Dust.NewDustDirect(base.Center, 0, 0, 43, velocity.X, velocity.Y, 254, Color.White, 0.5f);
					Vector2 vector3 = Main.rand.NextVector2Circular(1f, 1f);
					dust2.position = base.Center + vector3 * 10f;
					dust2.velocity = vector3;
				}
			}
		}

		private void AI_178_FireExplosion()
		{
			if (localAI[0] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item14, position);
				for (int i = 0; i < 4; i++)
				{
					int num = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				}
				for (int j = 0; j < 30; j++)
				{
					int num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num2].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num2].noGravity = true;
					Main.dust[num2].velocity *= 3f;
					num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num2].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num2].velocity *= 2f;
					Main.dust[num2].noGravity = true;
					Main.dust[num2].fadeIn = 2.5f;
				}
				for (int k = 0; k < 10; k++)
				{
					int num3 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num3].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num3].noGravity = true;
					Main.dust[num3].velocity *= 3f;
				}
				for (int l = 0; l < 10; l++)
				{
					int num4 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num4].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num4].noGravity = true;
					Main.dust[num4].velocity *= 3f;
				}
				for (int m = 0; m < 2; m++)
				{
					int num5 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num5].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.gore[num5].velocity *= 0.3f;
					Main.gore[num5].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num5].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			localAI[0] += 1f;
			if (localAI[0] >= 10f)
			{
				Kill();
			}
		}

		private void AI_175_TitaniumStormShards()
		{
			Player player = Main.player[owner];
			if (!player.active || player.dead || !player.hasTitaniumStormBuff)
			{
				Kill();
				return;
			}
			if (frameCounter == 0)
			{
				frameCounter = 1;
				frame = Main.rand.Next(12);
				rotation = Main.rand.NextFloat() * ((float)Math.PI * 2f);
			}
			rotation += (float)Math.PI / 200f;
			AI_GetMyGroupIndexAndFillBlackList(null, out var index, out var totalIndexesInGroup);
			float f = ((float)index / (float)totalIndexesInGroup + player.miscCounterNormalized * 6f) * ((float)Math.PI * 2f);
			float num = 24f + (float)totalIndexesInGroup * 6f;
			Vector2 vector = player.position - player.oldPosition;
			base.Center += vector;
			Vector2 vector2 = f.ToRotationVector2();
			localAI[0] = vector2.Y;
			Vector2 value = player.Center + vector2 * new Vector2(1f, 0.05f) * num;
			base.Center = Vector2.Lerp(base.Center, value, 0.3f);
		}

		private void AI_174_MultisegmentPet()
		{
			Player player = Main.player[owner];
			if (!player.active)
			{
				active = false;
				return;
			}
			if (type == 883)
			{
				if (player.dead)
				{
					player.petFlagEaterOfWorldsPet = false;
				}
				if (player.petFlagEaterOfWorldsPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 887)
			{
				if (player.dead)
				{
					player.petFlagDestroyerPet = false;
				}
				if (player.petFlagDestroyerPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 893)
			{
				if (player.dead)
				{
					player.petFlagLunaticCultistPet = false;
				}
				if (player.petFlagLunaticCultistPet)
				{
					timeLeft = 2;
				}
			}
			Vector2 center = player.Center;
			if (Distance(center) > 2000f)
			{
				base.Center = center;
				velocity = Vector2.Zero;
				netUpdate = true;
			}
			float num = (center - base.Center).Length();
			float num2 = Math.Min(12f, Math.Max(4f, player.velocity.Length()));
			velocity.Length();
			if (velocity == Vector2.Zero)
			{
				velocity.X = 2f * (float)player.direction;
				Vector2 vector = position;
				for (int i = 0; i < oldPos.Length; i++)
				{
					vector -= velocity;
					oldPos[i] = vector;
				}
			}
			if (!(num < 120f))
			{
				float targetAngle = AngleTo(center);
				float f = velocity.ToRotation().AngleTowards(targetAngle, MathHelper.ToRadians(5f));
				velocity = f.ToRotationVector2() * num2;
			}
			if (velocity.Length() > num2)
			{
				velocity = velocity.SafeNormalize(Vector2.Zero) * num2;
			}
			if (Math.Abs(velocity.Y) < 1f)
			{
				velocity.Y -= 0.1f;
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			int num3 = direction;
			direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
			if (num3 != direction)
			{
				netUpdate = true;
			}
			position.X = MathHelper.Clamp(position.X, 160f, Main.maxTilesX * 16 - 160);
			position.Y = MathHelper.Clamp(position.Y, 160f, Main.maxTilesY * 16 - 160);
		}

		private void AI_173_HallowBossRainbowTrail()
		{
			Opacity = Utils.GetLerpValue(0f, 60f, timeLeft, clamped: true) * Utils.GetLerpValue(660f, 600f, timeLeft, clamped: true);
			float num = (float)Math.PI / 360f;
			float num2 = 30f;
			velocity = velocity.RotatedBy(ai[0]);
			if (ai[0] < num)
			{
				ai[0] += num / num2;
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		}

		public Color AI_173_GetColor()
		{
			if (NPC.ShouldEmpressBeEnraged())
			{
				float lerpValue = Utils.GetLerpValue(0f, 60f, (int)Main.time, clamped: true);
				return Color.Lerp(Color.White, Main.OurFavoriteColor, lerpValue) * Opacity;
			}
			return Main.hslToRgb((ai[1] + 0f) % 1f, 1f, 0.5f) * Opacity;
		}

		private void AI_171_HallowBossRainbowStreak()
		{
			bool flag = false;
			bool flag2 = false;
			float num = 140f;
			float num2 = 30f;
			float num3 = 0.98f;
			float value = 0.05f;
			float value2 = 0.1f;
			float num4 = 30f;
			if (type == 931)
			{
				num = 180f;
				num2 = 20f;
				num4 = 30f;
				num3 = 0.97f;
				value = 0.075f;
				value2 = 0.125f;
				if (timeLeft == 238)
				{
					int num5 = alpha;
					alpha = 0;
					Color fairyQueenWeaponsColor = GetFairyQueenWeaponsColor();
					alpha = num5;
					for (int i = 0; i < 3; i++)
					{
						Dust dust = Dust.NewDustPerfect(base.Center, 267, Main.rand.NextVector2CircularEdge(3f, 3f) * (Main.rand.NextFloat() * 0.5f + 0.5f), 0, fairyQueenWeaponsColor);
						dust.scale *= 1.2f;
						dust.noGravity = true;
					}
				}
			}
			if ((float)timeLeft > num)
			{
				flag = true;
			}
			else if ((float)timeLeft > num2)
			{
				flag2 = true;
			}
			if (flag)
			{
				float num6 = (float)Math.Cos((float)whoAmI % 6f / 6f + position.X / 320f + position.Y / 160f);
				velocity *= num3;
				velocity = velocity.RotatedBy(num6 * ((float)Math.PI * 2f) * 0.125f * 1f / 30f);
			}
			if (friendly)
			{
				int num7 = (int)ai[0];
				if (Main.npc.IndexInRange(num7) && !Main.npc[num7].CanBeChasedBy(this))
				{
					num7 = -1;
					ai[0] = -1f;
					netUpdate = true;
				}
				if (num7 == -1)
				{
					int num8 = FindTargetWithLineOfSight();
					if (num8 != -1)
					{
						num7 = num8;
						ai[0] = num8;
						netUpdate = true;
					}
				}
			}
			if (flag2)
			{
				int num9 = (int)ai[0];
				Vector2 value3 = velocity;
				if (hostile && Main.player.IndexInRange(num9))
				{
					Player player = Main.player[num9];
					value3 = DirectionTo(player.Center) * num4;
				}
				if (friendly)
				{
					if (Main.npc.IndexInRange(num9))
					{
						NPC nPC = Main.npc[num9];
						value3 = DirectionTo(nPC.Center) * num4;
					}
					else
					{
						timeLeft -= 2;
					}
				}
				float amount = MathHelper.Lerp(value, value2, Utils.GetLerpValue(num, 30f, timeLeft, clamped: true));
				velocity = Vector2.SmoothStep(velocity, value3, amount);
				if (type == 931)
				{
					velocity *= MathHelper.Lerp(0.85f, 1f, Utils.GetLerpValue(0f, 90f, timeLeft, clamped: true));
				}
			}
			Opacity = Utils.GetLerpValue(240f, 220f, timeLeft, clamped: true);
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		}

		public Color AI_171_GetColor()
		{
			if (NPC.ShouldEmpressBeEnraged())
			{
				float lerpValue = Utils.GetLerpValue(0f, 60f, (int)Main.time, clamped: true);
				return Color.Lerp(Color.White, Main.OurFavoriteColor, lerpValue) * Opacity;
			}
			return Main.hslToRgb((ai[1] + 0.5f) % 1f, 1f, 0.5f) * Opacity;
		}

		private void AI_172_HallowBossRainbowPelletStorm()
		{
			if (localAI[1] <= 90f)
			{
				localAI[1] += 1f;
				scale = 0.5f;
				Opacity = 0.5f;
				float lerpValue = Utils.GetLerpValue(0f, 90f, localAI[1]);
				scale = MathHelper.Lerp(5f, 1f, lerpValue);
				Opacity = 1f - (1f - lerpValue * lerpValue);
				return;
			}
			scale = 1f;
			Opacity = 1f;
			float num = 150f + 10f * (float)AI_172_GetPelletStormsCount();
			localAI[0] += 1f;
			if (localAI[0] >= num)
			{
				Kill();
				return;
			}
			velocity = Vector2.Zero;
			rotation = 0f;
			int num2 = AI_172_GetPelletStormsCount();
			for (int i = 0; i < num2; i++)
			{
				HallowBossPelletStormInfo hallowBossPelletStormInfo = AI_172_GetPelletStormInfo(i);
				for (int j = 0; j < hallowBossPelletStormInfo.BulletsInStorm; j++)
				{
					if (hallowBossPelletStormInfo.IsValid(j))
					{
						hallowBossPelletStormInfo.GetBulletPosition(j, base.Center);
					}
				}
			}
		}

		public int AI_172_GetPelletStormsCount()
		{
			return 6;
		}

		public HallowBossPelletStormInfo AI_172_GetPelletStormInfo(int stormIndex)
		{
			float from = 0f + (float)stormIndex * 10f;
			float to = 90f + (float)stormIndex * 10f;
			HallowBossPelletStormInfo result = default(HallowBossPelletStormInfo);
			result.StartAngle = (float)stormIndex * ((float)Math.PI / 3f) - (float)Math.PI / 2f + (float)stormIndex * ((float)Math.PI / 5f);
			result.AnglePerBullet = (float)Math.PI * 2f / 3f;
			result.BulletsInStorm = 3;
			result.BulletsProgressInStormStartNormalized = Utils.GetLerpValue(from, to, localAI[0]);
			result.BulletsProgressInStormBonusByIndexNormalized = 0f;
			result.StormTotalRange = 500f;
			result.BulletSize = new Vector2(16f, 16f);
			return result;
		}

		public int FindTargetWithLineOfSight(float maxRange = 800f)
		{
			float num = maxRange;
			int result = -1;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				bool flag = nPC.CanBeChasedBy(this);
				if (localNPCImmunity[i] != 0)
				{
					flag = false;
				}
				if (flag)
				{
					float num2 = Distance(Main.npc[i].Center);
					if (num2 < num && Collision.CanHit(position, width, height, nPC.position, nPC.width, nPC.height))
					{
						num = num2;
						result = i;
					}
				}
			}
			return result;
		}

		private void AI_170_FairyGlowstick()
		{
			Point p = base.Center.ToTileCoordinates();
			Vector2 vector = p.ToVector2();
			int num = 10;
			Vector2 zero = Vector2.Zero;
			int num2 = 0;
			float num3 = 3f;
			if (ai[1] == 1f)
			{
				SoundEngine.PlaySound(SoundID.Item28, position);
				rotation = 0f;
				velocity.X = 0f;
				ai[1] = 2f;
			}
			frameCounter++;
			if (frameCounter > 4)
			{
				frameCounter = 0;
				frame++;
				if (frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (velocity.Length() > 1f && timeLeft % 10 == 0)
			{
				for (int i = p.X - num; i < p.X + num + 1; i++)
				{
					for (int j = p.Y - num; j < p.Y + num + 1; j++)
					{
						if (WorldGen.SolidTile(i, j))
						{
							Vector2 v = vector - new Vector2(i, j);
							Vector2 vector2 = v.SafeNormalize(Vector2.Zero) * Math.Max((float)num - v.Length(), 0f);
							vector2 *= num3;
							zero += vector2;
							num2++;
						}
					}
				}
				if (num2 > 0)
				{
					zero /= (float)num2;
				}
				if (zero.Length() > 1f)
				{
					velocity = zero;
				}
			}
			velocity *= 0.95f;
			if (velocity.Length() < 1f)
			{
				velocity = Vector2.Zero;
				netUpdate = true;
			}
		}

		private void AI_169_Smolstars()
		{
			Player player = Main.player[owner];
			bool num = type == 864;
			Vector2 vector = player.Top + new Vector2(0f, -30f);
			if (num)
			{
				if (player.dead)
				{
					player.smolstar = false;
				}
				if (player.smolstar)
				{
					timeLeft = 2;
				}
				if (ai[0] == 0f)
				{
					AI_GetMyGroupIndexAndFillBlackList(null, out var index, out var totalIndexesInGroup);
					float num2 = (float)Math.PI * 2f / (float)totalIndexesInGroup;
					float num3 = (float)totalIndexesInGroup * 0.66f;
					Vector2 vector2 = new Vector2(30f, 6f) / 5f * (totalIndexesInGroup - 1);
					Vector2 vector3 = Vector2.UnitY.RotatedBy(num2 * (float)index + Main.GlobalTimeWrappedHourly % num3 / num3 * ((float)Math.PI * 2f));
					vector += vector3 * vector2;
					vector.Y += player.gfxOffY;
					vector = vector.Floor();
				}
			}
			if (ai[0] == 0f)
			{
				Vector2 vector4 = vector - base.Center;
				float num4 = 10f;
				float lerpValue = Utils.GetLerpValue(200f, 600f, vector4.Length(), clamped: true);
				num4 += lerpValue * 30f;
				if (vector4.Length() >= 3000f)
				{
					base.Center = vector;
				}
				velocity = vector4;
				if (velocity.Length() > num4)
				{
					velocity *= num4 / velocity.Length();
				}
				int startAttackRange = 800;
				int attackTarget = -1;
				Minion_FindTargetInRange(startAttackRange, ref attackTarget, skipIfCannotHitWithOwnBody: false);
				if (attackTarget != -1)
				{
					ai[0] = 60f;
					ai[1] = attackTarget;
					netUpdate = true;
				}
				float targetAngle = velocity.SafeNormalize(Vector2.UnitY).ToRotation() + (float)Math.PI / 2f;
				if (vector4.Length() < 40f)
				{
					targetAngle = Vector2.UnitY.ToRotation() + (float)Math.PI / 2f;
				}
				rotation = rotation.AngleLerp(targetAngle, 0.2f);
				return;
			}
			if (ai[0] == -1f)
			{
				if (ai[1] == 0f)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int i = 0; i < 2; i++)
					{
						Dust dust = Dust.NewDustDirect(position, width, height, 15, oldVelocity.X * 0.2f, oldVelocity.Y * 0.2f, 0, default(Color), 1.4f);
						if (Main.rand.Next(3) != 0)
						{
							dust.scale *= 1.3f;
							dust.velocity *= 1.1f;
						}
						dust.noGravity = true;
						dust.fadeIn = 0f;
					}
					velocity += Main.rand.NextVector2CircularEdge(4f, 4f);
				}
				ai[1] += 1f;
				rotation += velocity.X * 0.1f + velocity.Y * 0.05f;
				velocity *= 0.92f;
				if (ai[1] >= 9f)
				{
					ai[0] = 0f;
					ai[1] = 0f;
				}
				return;
			}
			NPC nPC = null;
			int num5 = (int)ai[1];
			if (Main.npc.IndexInRange(num5) && Main.npc[num5].CanBeChasedBy(this))
			{
				nPC = Main.npc[num5];
			}
			if (nPC == null)
			{
				ai[0] = -1f;
				ai[1] = 0f;
				netUpdate = true;
			}
			else if (player.Distance(nPC.Center) >= 900f)
			{
				ai[0] = 0f;
				ai[1] = 0f;
				netUpdate = true;
			}
			else
			{
				Vector2 vector5 = nPC.Center - base.Center;
				float num6 = 16f;
				velocity = vector5;
				if (velocity.Length() > num6)
				{
					velocity *= num6 / velocity.Length();
				}
				float targetAngle2 = velocity.SafeNormalize(Vector2.UnitY).ToRotation() + (float)Math.PI / 2f;
				rotation = rotation.AngleLerp(targetAngle2, 0.4f);
			}
			float num7 = 0.1f;
			float num8 = width * 5;
			for (int j = 0; j < 1000; j++)
			{
				if (j != whoAmI && Main.projectile[j].active && Main.projectile[j].owner == owner && Main.projectile[j].type == type && Math.Abs(position.X - Main.projectile[j].position.X) + Math.Abs(position.Y - Main.projectile[j].position.Y) < num8)
				{
					if (position.X < Main.projectile[j].position.X)
					{
						velocity.X -= num7;
					}
					else
					{
						velocity.X += num7;
					}
					if (position.Y < Main.projectile[j].position.Y)
					{
						velocity.Y -= num7;
					}
					else
					{
						velocity.Y += num7;
					}
				}
			}
		}

		private void AI_019_Spears()
		{
			Player player = Main.player[owner];
			Vector2 center = player.RotatedRelativePoint(player.MountedCenter);
			direction = player.direction;
			player.heldProj = whoAmI;
			player.itemTime = player.itemAnimation;
			base.Center = center;
			bool flag = Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3;
			int itemAnimationMax = player.itemAnimationMax;
			int itemAnimation = player.itemAnimation;
			int num = Main.player[owner].itemAnimationMax / 3;
			float num2 = MathHelper.Min(itemAnimation, num);
			float num3 = (float)itemAnimation - num2;
			float num4 = 0f;
			float num5 = 0f;
			float num6 = 0f;
			bool flag2 = false;
			switch (type)
			{
			case 46:
				num4 = 3f;
				num6 = 1.6f;
				num5 = 1.4f;
				break;
			case 105:
				num4 = 3f;
				num6 = 2.4f;
				num5 = 2.1f;
				break;
			case 367:
				spriteDirection = -direction;
				num4 = 3f;
				num6 = 1.6f;
				num5 = 1.5f;
				break;
			case 368:
				spriteDirection = -direction;
				num4 = 3f;
				num6 = 1.5f;
				num5 = 1.4f;
				break;
			case 222:
				num4 = 3f;
				num6 = 2.4f;
				num5 = 2.1f;
				break;
			case 342:
				num4 = 3f;
				num6 = 2.4f;
				num5 = 2.1f;
				break;
			case 47:
				num4 = 4f;
				num6 = 1.2f;
				num5 = 0.9f;
				break;
			case 153:
				spriteDirection = -direction;
				num4 = 4f;
				num6 = 1.5f;
				num5 = 1.3f;
				break;
			case 49:
				spriteDirection = -direction;
				num4 = 4f;
				num6 = 1.1f;
				num5 = 0.85f;
				break;
			case 730:
				spriteDirection = -direction;
				num4 = 8f;
				num6 = 1.5f;
				num5 = 1.2f;
				break;
			case 877:
			case 878:
			case 879:
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				num4 = 28f;
				num6 = 0.4f;
				num5 = 0.4f;
				flag2 = true;
				break;
			case 64:
			case 215:
				spriteDirection = -direction;
				num4 = 3f;
				num6 = 1.9f;
				num5 = 1.7f;
				break;
			case 66:
			case 97:
			case 212:
			case 218:
				spriteDirection = -direction;
				num4 = 3f;
				num6 = 2.1f;
				num5 = 1.9f;
				break;
			case 130:
				spriteDirection = -direction;
				num4 = 3f;
				num6 = 1.3f;
				num5 = 1f;
				break;
			}
			float num7 = (float)(itemAnimationMax - num) - num3;
			float num8 = (float)num - num2;
			float num9 = num4 + num5 * num7 - num6 * num8;
			position += velocity * num9;
			switch (type)
			{
			case 130:
				if ((localAI[0] == 0f || localAI[0] == 4f || localAI[0] == 8f || localAI[0] == 12f || localAI[0] == 16f || localAI[0] == 20f || localAI[0] == 24f) && owner == Main.myPlayer)
				{
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, velocity.X, velocity.Y, 131, damage / 3, 0f, owner);
				}
				localAI[0] += 1f;
				break;
			case 730:
				if (localAI[0] == 0f && Main.myPlayer == owner)
				{
					localAI[0] = 1f;
					Vector2 vector = velocity * 4f;
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector.X, vector.Y, 732, (int)((double)damage * 1.25), knockBack * 0.5f, owner);
				}
				break;
			case 342:
				if (flag && localAI[0] == 0f && Main.myPlayer == owner)
				{
					localAI[0] = 1f;
					if (Collision.CanHit(player.position, player.width, player.height, position, width, height))
					{
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, velocity.X * 2.4f, velocity.Y * 2.4f, 343, (int)((double)damage * 0.8), knockBack * 0.85f, owner);
					}
				}
				break;
			case 222:
				if (flag && localAI[0] == 0f && Main.myPlayer == owner)
				{
					localAI[0] = 1f;
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, velocity.X, velocity.Y, 228, damage, knockBack, owner);
				}
				break;
			}
			if (flag2 && player.channel && player.itemAnimation < num)
			{
				player.SetDummyItemTime(num);
			}
			if (player.itemAnimation == 0)
			{
				Kill();
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + (float)Math.PI / 2f + (float)Math.PI / 4f;
			if (spriteDirection == -1)
			{
				rotation -= (float)Math.PI / 2f;
			}
			if (type == 878 || type == 879)
			{
				float num10 = 6f;
				float num11 = 0.8f;
				float num12 = Vector2.Dot(velocity.SafeNormalize(Vector2.UnitX * player.direction), player.velocity.SafeNormalize(Vector2.UnitX * player.direction));
				float num13 = player.velocity.Length();
				if (num13 > num10 && num12 > num11)
				{
					int num14 = 8;
					if (num13 > num10 + 1f)
					{
						num14 = 5;
					}
					if (num13 > num10 + 2f)
					{
						num14 = 2;
					}
					int num15 = 14;
					int num16 = 27;
					int num17 = 4;
					if (type == 879)
					{
						num15 = 43;
						num16 = 57;
					}
					if (Main.rand.Next(num14 + 3) == 0)
					{
						Dust.NewDust(base.Center - new Vector2(num17, num17), num17 * 2, num17 * 2, num15, 0f, 0f, 150, default(Color), 1.4f);
					}
					if (Main.rand.Next(num14) == 0)
					{
						int num18 = Dust.NewDust(base.Center - new Vector2(num17, num17), num17 * 2, num17 * 2, num16, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.2f);
						Main.dust[num18].noGravity = true;
						Main.dust[num18].velocity *= 0.25f;
						num18 = Dust.NewDust(base.Center - new Vector2(num17, num17), num17 * 2, num17 * 2, num16, 0f, 0f, 150, default(Color), 1.4f);
						Main.dust[num18].velocity *= 0.25f;
					}
				}
			}
			if (type == 46)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust.NewDust(position, width, height, 14, 0f, 0f, 150, default(Color), 1.4f);
				}
				int num19 = Dust.NewDust(position, width, height, 27, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.2f);
				Main.dust[num19].noGravity = true;
				Main.dust[num19].velocity /= 2f;
				num19 = Dust.NewDust(position - velocity * 2f, width, height, 27, 0f, 0f, 150, default(Color), 1.4f);
				Main.dust[num19].velocity /= 5f;
			}
			if (type == 730)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.7f);
					dust.noGravity = true;
					dust.velocity *= 1.4f;
				}
				if (Main.rand.Next(5) == 0)
				{
					Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.5f).velocity.Y -= 0.5f;
				}
			}
			else if (type == 105)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num20 = Dust.NewDust(position, width, height, 57, velocity.X * 0.2f, velocity.Y * 0.2f, 200, default(Color), 1.2f);
					Main.dust[num20].velocity += velocity * 0.3f;
					Main.dust[num20].velocity *= 0.2f;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num21 = Dust.NewDust(position, width, height, 43, 0f, 0f, 254, default(Color), 0.3f);
					Main.dust[num21].velocity += velocity * 0.5f;
					Main.dust[num21].velocity *= 0.5f;
				}
			}
			else if (type == 153)
			{
				int num22 = Dust.NewDust(position - velocity * 3f, width, height, 115, velocity.X * 0.4f, velocity.Y * 0.4f, 140);
				Main.dust[num22].noGravity = true;
				Main.dust[num22].fadeIn = 1.25f;
				Main.dust[num22].velocity *= 0.25f;
			}
		}

		private void AI_019_Spears_Old()
		{
			Vector2 vector = Main.player[owner].RotatedRelativePoint(Main.player[owner].MountedCenter);
			direction = Main.player[owner].direction;
			Main.player[owner].heldProj = whoAmI;
			Main.player[owner].itemTime = Main.player[owner].itemAnimation;
			position.X = vector.X - (float)(width / 2);
			position.Y = vector.Y - (float)(height / 2);
			bool flag = Main.player[owner].itemAnimation < Main.player[owner].itemAnimationMax / 3;
			if (!Main.player[owner].frozen)
			{
				if (type == 46)
				{
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.6f;
					}
					else
					{
						ai[0] += 1.4f;
					}
				}
				else if (type == 105)
				{
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 2.4f;
					}
					else
					{
						ai[0] += 2.1f;
					}
				}
				else if (type == 367)
				{
					spriteDirection = -direction;
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.6f;
					}
					else
					{
						ai[0] += 1.5f;
					}
				}
				else if (type == 368)
				{
					spriteDirection = -direction;
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.5f;
					}
					else
					{
						ai[0] += 1.4f;
					}
				}
				else if (type == 222)
				{
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 2.4f;
						if (localAI[0] == 0f && Main.myPlayer == owner)
						{
							localAI[0] = 1f;
							NewProjectile(GetProjectileSource_FromThis(), base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0], velocity.X, velocity.Y, 228, damage, knockBack, owner);
						}
					}
					else
					{
						ai[0] += 2.1f;
					}
				}
				else if (type == 342)
				{
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 2.4f;
						if (localAI[0] == 0f && Main.myPlayer == owner)
						{
							localAI[0] = 1f;
							if (Collision.CanHit(Main.player[owner].position, Main.player[owner].width, Main.player[owner].height, new Vector2(base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0]), width, height))
							{
								NewProjectile(GetProjectileSource_FromThis(), base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0], velocity.X * 2.4f, velocity.Y * 2.4f, 343, (int)((double)damage * 0.8), knockBack * 0.85f, owner);
							}
						}
					}
					else
					{
						ai[0] += 2.1f;
					}
				}
				else if (type == 47)
				{
					if (ai[0] == 0f)
					{
						ai[0] = 4f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.2f;
					}
					else
					{
						ai[0] += 0.9f;
					}
				}
				else if (type == 153)
				{
					spriteDirection = -direction;
					if (ai[0] == 0f)
					{
						ai[0] = 4f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.5f;
					}
					else
					{
						ai[0] += 1.3f;
					}
				}
				else if (type == 49)
				{
					if (ai[0] == 0f)
					{
						ai[0] = 4f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.1f;
					}
					else
					{
						ai[0] += 0.85f;
					}
				}
				else if (type == 730)
				{
					spriteDirection = -direction;
					if (ai[0] == 0f)
					{
						ai[0] = 8f;
						netUpdate = true;
						if (localAI[0] == 0f && Main.myPlayer == owner)
						{
							localAI[0] = 1f;
							Vector2 vector2 = velocity * 4f;
							NewProjectile(GetProjectileSource_FromThis(), base.Center.X + velocity.X * ai[0], base.Center.Y + velocity.Y * ai[0], vector2.X, vector2.Y, 732, (int)((double)damage * 1.25), knockBack * 0.5f, owner);
						}
					}
					if (flag)
					{
						ai[0] -= 1.5f;
					}
					else
					{
						ai[0] += 1.2f;
					}
				}
				else if (type == 64 || type == 215)
				{
					spriteDirection = -direction;
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.9f;
					}
					else
					{
						ai[0] += 1.7f;
					}
				}
				else if (type == 66 || type == 97 || type == 212 || type == 218)
				{
					spriteDirection = -direction;
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 2.1f;
					}
					else
					{
						ai[0] += 1.9f;
					}
				}
				else if (type == 130)
				{
					spriteDirection = -direction;
					if (ai[0] == 0f)
					{
						ai[0] = 3f;
						netUpdate = true;
					}
					if (flag)
					{
						ai[0] -= 1.3f;
					}
					else
					{
						ai[0] += 1f;
					}
				}
			}
			position += velocity * ai[0];
			if (type == 130)
			{
				if (ai[1] == 0f || ai[1] == 4f || ai[1] == 8f || ai[1] == 12f || ai[1] == 16f || ai[1] == 20f || ai[1] == 24f)
				{
					NewProjectile(GetProjectileSource_FromThis(), position.X + (float)(width / 2), position.Y + (float)(height / 2), velocity.X, velocity.Y, 131, damage / 3, 0f, owner);
				}
				ai[1] += 1f;
			}
			if (Main.player[owner].itemAnimation == 0)
			{
				Kill();
			}
			rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 2.355f;
			if (spriteDirection == -1)
			{
				rotation -= 1.57f;
			}
			if (type == 46)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust.NewDust(position, width, height, 14, 0f, 0f, 150, default(Color), 1.4f);
				}
				int num = Dust.NewDust(position, width, height, 27, velocity.X * 0.2f + (float)(direction * 3), velocity.Y * 0.2f, 100, default(Color), 1.2f);
				Main.dust[num].noGravity = true;
				Main.dust[num].velocity.X /= 2f;
				Main.dust[num].velocity.Y /= 2f;
				num = Dust.NewDust(position - velocity * 2f, width, height, 27, 0f, 0f, 150, default(Color), 1.4f);
				Main.dust[num].velocity.X /= 5f;
				Main.dust[num].velocity.Y /= 5f;
			}
			if (type == 730)
			{
				if (Main.rand.Next(5) == 0)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.7f);
					dust.noGravity = true;
					dust.velocity *= 1.4f;
				}
				if (Main.rand.Next(5) == 0)
				{
					Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 150, default(Color), 0.5f).velocity.Y -= 0.5f;
				}
			}
			else if (type == 105)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 57, velocity.X * 0.2f, velocity.Y * 0.2f, 200, default(Color), 1.2f);
					Main.dust[num2].velocity += velocity * 0.3f;
					Main.dust[num2].velocity *= 0.2f;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num3 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 43, 0f, 0f, 254, default(Color), 0.3f);
					Main.dust[num3].velocity += velocity * 0.5f;
					Main.dust[num3].velocity *= 0.5f;
				}
			}
			else if (type == 153)
			{
				int num4 = Dust.NewDust(position - velocity * 3f, width, height, 115, velocity.X * 0.4f, velocity.Y * 0.4f, 140);
				Main.dust[num4].noGravity = true;
				Main.dust[num4].fadeIn = 1.25f;
				Main.dust[num4].velocity *= 0.25f;
			}
		}

		private void AI_168_FirstFractal()
		{
			float num = 60f;
			if ((localAI[0] += 1f) >= num - 1f)
			{
				Kill();
				return;
			}
			if (frameCounter == 0)
			{
				frameCounter = 1;
				frame = Main.rand.Next(15);
			}
			velocity = velocity.RotatedBy(ai[0]);
			Opacity = Utils.GetLerpValue(0f, 12f, localAI[0], clamped: true) * Utils.GetLerpValue(num, num - 12f, localAI[0], clamped: true);
			direction = ((velocity.X > 0f) ? 1 : (-1));
			spriteDirection = direction;
			rotation = (float)Math.PI / 4f * (float)spriteDirection + velocity.ToRotation();
			if (spriteDirection == -1)
			{
				rotation += (float)Math.PI;
			}
			if (localAI[0] > 7f)
			{
				int num2 = 5;
				_ = base.Center - new Vector2(num2);
				if (Main.rand.Next(15) == 0)
				{
					Dust dust = Dust.NewDustPerfect(base.Center, 278, null, 100, Color.Lerp(GetFirstFractalColor(), Color.White, Main.rand.NextFloat() * 0.3f));
					dust.scale = 0.7f;
					dust.noGravity = true;
					dust.velocity *= 0.5f;
					dust.velocity += velocity * 2f;
				}
			}
		}

		private void AI_167_SparkleGuitar()
		{
			float num = 90f;
			if ((localAI[0] += 1f) >= num - 1f)
			{
				Kill();
				return;
			}
			float num2 = localAI[0] / num;
			Vector2 center = Main.player[owner].Center;
			Vector2 vector = new Vector2(ai[0], ai[1]);
			Vector2 vector2 = -velocity;
			Vector2 value = center + vector2 * 2f;
			Vector2 value2 = vector + vector2 * (1f - num2 * 3f);
			base.Center = Vector2.CatmullRom(value, center, vector, value2, num2);
			if (type == 856)
			{
				Lighting.AddLight(base.Center, Color.HotPink.ToVector3() * 0.3f);
				rotation = (float)Math.PI * 2f * num2 * 1f;
			}
		}

		private void AI_164_StormTigerGem()
		{
			Player player = Main.player[owner];
			if (type == 831)
			{
				if (player.dead)
				{
					player.stormTiger = false;
				}
				if (player.stormTiger)
				{
					timeLeft = 2;
				}
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					if (++frame >= 6)
					{
						frame = 0;
					}
				}
			}
			if (type == 970)
			{
				if (player.ownedProjectileCounts[type] > 1 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.AbigailUpgrade, base.Center);
				}
				if (player.dead)
				{
					player.abigailMinion = false;
				}
				if (player.abigailMinion)
				{
					timeLeft = 2;
				}
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					if (++frame >= 6)
					{
						frame = 0;
					}
				}
			}
			List<int> ai164_blacklistedTargets = _ai164_blacklistedTargets;
			ai164_blacklistedTargets.Clear();
			AI_GetMyGroupIndexAndFillBlackList(ai164_blacklistedTargets, out var index, out var totalIndexesInGroup);
			Vector2 vector2 = (base.Center = AI_164_GetHomeLocation(player, index, totalIndexesInGroup));
		}

		public static Vector2 AI_164_GetHomeLocation(Player master, int stackedIndex, int totalIndexes)
		{
			int num = master.bodyFrame.Height;
			if (num == 0)
			{
				num = 1;
			}
			Vector2 vector = Main.OffsetsPlayerHeadgear[master.bodyFrame.Y / num];
			vector.Y -= 2f;
			float num2 = master.miscCounterNormalized * 2f;
			int num3 = stackedIndex / 4;
			int num4 = totalIndexes / 4;
			if (totalIndexes % 4 > 0)
			{
				num4++;
			}
			int num5 = (totalIndexes - num3 * 4) % 4;
			if (num5 == 0)
			{
				num5 = 4;
			}
			if (num4 - 1 != num3)
			{
				num5 = 4;
			}
			int num6 = stackedIndex % num5;
			float num7 = (float)num6 / (float)num5;
			num2 += (float)num3 / 8f;
			if (stackedIndex >= (num4 - 1) * 4 && num3 > 0)
			{
				num2 = 0f;
				switch (num5)
				{
				case 1:
					num7 = 0f;
					break;
				case 2:
					num7 = 0.25f + (float)num6 * 0.5f;
					break;
				case 3:
					num7 = (float)(num6 - 1) / 6f;
					break;
				case 4:
					num7 = ((float)num6 - 1.5f) / 6f;
					break;
				}
			}
			Vector2 vector2 = new Vector2(0f, -8 - 12 * num3).RotatedBy((num2 + num7) * ((float)Math.PI * 2f));
			vector += vector2 + new Vector2(0f, master.gravDir * -40f);
			Vector2 mountedCenter = master.MountedCenter;
			_ = master.direction;
			Vector2 vector3 = mountedCenter + new Vector2(0f, master.gravDir * -21f) + vector;
			vector3.Y += master.gfxOffY;
			vector3 = vector3.Floor();
			return vector3;
		}

		private void AI_162_TigerPounce()
		{
			if (ai[0] < 0f)
			{
				Opacity = 0f;
				ai[0] += 1f;
				return;
			}
			bool flag = false;
			flag = true;
			if (frameCounter == 0)
			{
				frameCounter = 1;
				localAI[0] = base.Center.X;
				localAI[1] = base.Center.Y;
				flag = true;
			}
			Vector2 vector = new Vector2(localAI[0], localAI[1]);
			Vector2 vector2 = vector + velocity;
			float y = Vector2.Distance(vector, vector2) * 1.5f;
			float num = 0.1f;
			Vector2 value = Vector2.Lerp(vector, vector2, 0f - num) + new Vector2(0f, y);
			Vector2 value2 = Vector2.Lerp(vector, vector2, 1f + num) + new Vector2(0f, y);
			if (Opacity < 1f)
			{
				Opacity += 0.1f;
			}
			int num2 = Math.Sign(vector2.X - vector.X);
			rotation += (float)num2 * -0.2f;
			spriteDirection = num2;
			if (ai[1] < 1f)
			{
				ai[1] = 60f;
			}
			ai[0] += 1f / ai[1];
			Vector2 vector3 = Vector2.CatmullRom(amount: Utils.Clamp(ai[0], 0f, 1f), value1: value, value2: vector, value3: vector2, value4: value2);
			if (flag)
			{
				for (float num3 = 0f; num3 < 1f; num3 += 0.5f)
				{
					if (Main.rand.Next(19) == 0)
					{
						Vector2 vector4 = base.Center + DirectionTo(vector3).SafeNormalize(Vector2.UnitY) * 100f;
						Dust dust = Dust.NewDustPerfect(base.Center + base.Size * Main.rand.NextVector2Square(0f, 1f), 278, Main.rand.NextVector2Circular(3f, 3f), 100, Color.White * 0.4f);
						dust.velocity.Y += -0.6f;
						dust.velocity += velocity * 0.1f;
						Main.rand.Next(5);
						dust.velocity = (vector4 - base.Center) * 0.05f;
						dust.fadeIn = 0f;
						dust.scale = 0.7f;
						dust.noGravity = true;
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					Dust obj = Main.dust[Dust.NewDust(position, width, height, 269)];
					obj.fadeIn = 0.7f;
					obj.scale = 0.4f;
					obj.velocity += velocity * 0.001f;
					obj.noLight = true;
				}
			}
			base.Center = vector3;
			if (ai[0] >= 1f)
			{
				Kill();
			}
		}

		private void AI_016()
		{
			if (wet && (type == 799 || type == 800 || type == 801 || type == 810 || type == 906 || type == 784 || type == 785 || type == 786 || type == 805 || type == 903 || type == 787 || type == 788 || type == 789 || type == 806 || type == 904 || type == 790 || type == 791 || type == 792 || type == 807 || type == 905))
			{
				timeLeft = 1;
			}
			if (type == 108 || type == 164)
			{
				ai[0] += 1f;
				if (ai[0] > 3f)
				{
					Kill();
				}
			}
			if (type == 102)
			{
				int num = (int)(base.Center.X / 16f);
				int num2 = (int)(base.Center.Y / 16f);
				if (WorldGen.InWorld(num, num2))
				{
					Tile tile = Main.tile[num, num2];
					if (tile != null && tile.active() && (TileID.Sets.Platforms[tile.type] || tile.type == 380))
					{
						Kill();
						return;
					}
				}
			}
			if (type == 75)
			{
				for (int i = 0; i < 255; i++)
				{
					if (Main.player[i].active && !Main.player[i].dead && !Main.player[i].ghost && (base.Center - Main.player[i].Center).Length() < 40f)
					{
						Kill();
						return;
					}
				}
			}
			bool flag = false;
			if (type == 37 || type == 397 || type == 470 || type == 519 || type == 773 || type == 911)
			{
				try
				{
					int num3 = (int)(position.X / 16f) - 1;
					int num4 = (int)((position.X + (float)width) / 16f) + 2;
					int num5 = (int)(position.Y / 16f) - 1;
					int num6 = (int)((position.Y + (float)height) / 16f) + 2;
					if (num3 < 0)
					{
						num3 = 0;
					}
					if (num4 > Main.maxTilesX)
					{
						num4 = Main.maxTilesX;
					}
					if (num5 < 0)
					{
						num5 = 0;
					}
					if (num6 > Main.maxTilesY)
					{
						num6 = Main.maxTilesY;
					}
					Vector2 vector = default(Vector2);
					for (int j = num3; j < num4; j++)
					{
						for (int k = num5; k < num6; k++)
						{
							if (Main.tile[j, k] == null || !Main.tile[j, k].nactive() || !Main.tileSolid[Main.tile[j, k].type] || Main.tileSolidTop[Main.tile[j, k].type])
							{
								continue;
							}
							vector.X = j * 16;
							vector.Y = k * 16;
							if (!(position.X + (float)width - 4f > vector.X) || !(position.X + 4f < vector.X + 16f) || !(position.Y + (float)height - 4f > vector.Y) || !(position.Y + 4f < vector.Y + 16f))
							{
								continue;
							}
							if (type == 911 && owner == Main.myPlayer && localAI[0] == 0f)
							{
								float num7 = 12f;
								Vector2 value = vector + new Vector2(8f, 8f);
								if (Vector2.Distance(base.Center, value) < num7)
								{
									base.Center += velocity.SafeNormalize(Vector2.Zero) * -4f;
								}
								localAI[0] = 1f;
								netUpdate = true;
							}
							velocity.X = 0f;
							velocity.Y = -0.2f;
							flag = true;
						}
					}
				}
				catch
				{
				}
			}
			if (flag && type == 911)
			{
				Point p = base.Center.ToTileCoordinates();
				if (WorldGen.SolidOrSlopedTile(Framing.GetTileSafely(p.X, p.Y)))
				{
					Vector2 v = p.ToWorldCoordinates() - base.Center;
					base.Center += v.SafeNormalize(Vector2.Zero) * -4f;
				}
			}
			if (flag && type == 773)
			{
				Player player = Main.player[owner];
				Vector2 v2 = DirectionTo(player.Center).SafeNormalize(Vector2.UnitX * player.direction);
				float num8 = rotation;
				float num9 = v2.ToRotation() + (float)Math.PI / 2f;
				rotation = rotation.AngleLerp(num9, 0.2f);
				rotation = rotation.AngleTowards(num9, 0.05f);
				Vector2 vector2 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
				if (Main.rand.Next(3) == 0)
				{
					Dust dust = Dust.NewDustPerfect(base.Center + vector2 * 10f, 59, vector2 * 2f + Main.rand.NextVector2Circular(0.25f, 0.25f), 0, default(Color), 2f);
					dust.noGravity = true;
					if (Main.rand.Next(3) == 0)
					{
						dust.velocity *= 1.5f;
						dust.noGravity = false;
						dust.scale /= 2f;
					}
				}
				if (Main.rand.Next(3) == 0)
				{
					Point scarabBombDigDirectionSnap = GetScarabBombDigDirectionSnap8();
					Dust.NewDustPerfect(base.Center + vector2 * -10f, 59, scarabBombDigDirectionSnap.ToVector2() * 1.5f, 0, default(Color), 2f).noGravity = true;
				}
				if (Main.rand.Next(15) == 0)
				{
					Dust dust2 = Dust.NewDustPerfect(base.Center + vector2 * 10f, 88, vector2 * 3f + Main.rand.NextVector2Circular(0.25f, 0.25f), 0, default(Color), 2f);
					dust2.noGravity = true;
					if (Main.rand.Next(3) == 0)
					{
						dust2.velocity *= 1.5f;
					}
				}
				bool flag2 = Main.rand.Next(30) == 0;
				if (num8 != rotation && Main.rand.Next(40) == 0)
				{
					flag2 = true;
				}
				if (flag2)
				{
					float num10 = (float)Math.PI * 2f * Main.rand.NextFloat();
					for (float num11 = 0f; num11 < 1f; num11 += 0.142857149f)
					{
						Vector2 spinningpoint = (num11 * ((float)Math.PI * 2f) + num10).ToRotationVector2();
						spinningpoint *= new Vector2(1f, 0.3f);
						spinningpoint = spinningpoint.RotatedBy(num9);
						Dust dust3 = Dust.NewDustPerfect(base.Center + spinningpoint + vector2 * 8f, 59, vector2 * 3f + spinningpoint);
						dust3.noGravity = true;
						dust3.fadeIn = 1.6f;
					}
				}
				if (++frameCounter >= 3)
				{
					frameCounter = 0;
					if (++frame >= 4)
					{
						frame = 0;
					}
				}
			}
			if (type == 519)
			{
				localAI[1] += 1f;
				float num12 = 180f - localAI[1];
				if (num12 < 0f)
				{
					num12 = 0f;
				}
				frameCounter++;
				if (num12 < 15f)
				{
					frameCounter++;
				}
				if ((float)frameCounter >= (num12 / 10f + 6f) / 2f)
				{
					frame++;
					frameCounter = 0;
					if (frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
			}
			if (type == 681 && localAI[1] == 0f)
			{
				localAI[1] = 1f;
			}
			int num13 = 6;
			if (type == 776 || type == 780 || type == 803 || type == 804)
			{
				num13 = 228;
			}
			else if (type == 784 || type == 805)
			{
				num13 = ((Main.rand.Next(3) == 0) ? 6 : Dust.dustWater());
			}
			else if (type == 787 || type == 806)
			{
				num13 = ((Main.rand.Next(3) == 0) ? 6 : 35);
			}
			else if (type == 790 || type == 807)
			{
				num13 = ((Main.rand.Next(3) == 0) ? 6 : 152);
			}
			if (type == 102)
			{
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item10, position);
				}
				frameCounter++;
				if (frameCounter > 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 1)
				{
					frame = 0;
				}
				if (velocity.Y == 0f)
				{
					position.X += width / 2;
					position.Y += height / 2;
					width = 128;
					height = 128;
					position.X -= width / 2;
					position.Y -= height / 2;
					damage = 40;
					knockBack = 8f;
					timeLeft = 3;
					netUpdate = true;
				}
			}
			if (type == 303 && timeLeft <= 3 && hostile)
			{
				position.X += width / 2;
				position.Y += height / 2;
				width = 128;
				height = 128;
				position.X -= width / 2;
				position.Y -= height / 2;
			}
			if (owner == Main.myPlayer && timeLeft <= 3)
			{
				tileCollide = false;
				ai[1] = 0f;
				alpha = 255;
				if (type == 28 || type == 37 || type == 516 || type == 519)
				{
					Resize(128, 128);
					damage = 100;
					knockBack = 8f;
				}
				else if (type == 773)
				{
					Resize(48, 96);
					damage = 100;
					knockBack = 8f;
				}
				else if (type == 29 || type == 470 || type == 637)
				{
					Resize(250, 250);
					damage = 250;
					knockBack = 10f;
				}
				else if (type == 30 || type == 397 || type == 517 || type == 588)
				{
					Resize(128, 128);
					knockBack = 8f;
				}
				else if (type == 681)
				{
					Resize(80, 80);
					knockBack = 8f;
				}
				else if (type == 779 || type == 783 || type == 862 || type == 863)
				{
					Resize(48, 48);
					knockBack = 8f;
				}
				else if (type == 133 || type == 134 || type == 135 || type == 136 || type == 137 || type == 138 || type == 338 || type == 339 || type == 930)
				{
					Resize(128, 128);
					knockBack = 8f;
				}
				else if (type == 794 || type == 797 || type == 795 || type == 798 || type == 793 || type == 796 || type == 808 || type == 808)
				{
					Resize(250, 250);
					knockBack = 12f;
				}
				else if (type == 776 || type == 780 || type == 777 || type == 781 || type == 778 || type == 782 || type == 803 || type == 804)
				{
					Resize(128, 128);
					knockBack = 12f;
				}
				else if (type == 784 || type == 785 || type == 786 || type == 805 || type == 903 || type == 787 || type == 788 || type == 789 || type == 806 || type == 904 || type == 790 || type == 791 || type == 792 || type == 807 || type == 905 || type == 799 || type == 800 || type == 801 || type == 810 || type == 906 || type == 910 || type == 911)
				{
					if (type == 903 || type == 904 || type == 905 || type == 906 || type == 910 || type == 911)
					{
						damage = 100;
					}
					Resize(48, 48);
					knockBack = 12f;
				}
				else if (type == 139 || type == 140 || type == 141 || type == 142 || type == 143 || type == 144 || type == 340 || type == 341)
				{
					Resize(200, 200);
					knockBack = 10f;
				}
			}
			else
			{
				if (type != 30 && type != 75 && type != 517 && type != 681 && type != 588 && type != 397 && type != 108 && type != 133 && type != 134 && type != 135 && type != 136 && type != 137 && type != 138 && type != 139 && type != 140 && type != 141 && type != 142 && type != 143 && type != 144 && type != 164 && type != 303 && type != 338 && type != 339 && type != 340 && type != 341 && (type < 776 || type > 801) && (type < 803 || type > 810) && type != 862 && type != 863 && type != 930)
				{
					damage = 0;
				}
				if (type == 338 || type == 339 || type == 340 || type == 341 || type == 803 || type == 804 || type == 808 || type == 809 || type == 810 || type == 805 || type == 806 || type == 807 || type == 930)
				{
					localAI[1] += 1f;
					if (localAI[1] > 6f)
					{
						alpha = 0;
					}
					else
					{
						alpha = (int)(255f - 42f * localAI[1]) + 100;
						if (alpha > 255)
						{
							alpha = 255;
						}
					}
					for (int l = 0; l < 2; l++)
					{
						float num14 = 0f;
						float num15 = 0f;
						if (l == 1)
						{
							num14 = velocity.X * 0.5f;
							num15 = velocity.Y * 0.5f;
						}
						if (!(localAI[1] > 9f))
						{
							continue;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num16 = Dust.NewDust(new Vector2(position.X + 3f + num14, position.Y + 3f + num15) - velocity * 0.5f, width - 8, height - 8, num13, 0f, 0f, 100);
							Main.dust[num16].scale *= 1.4f + (float)Main.rand.Next(10) * 0.1f;
							Main.dust[num16].velocity *= 0.2f;
							Main.dust[num16].noGravity = true;
							if (Main.dust[num16].type == 152)
							{
								Main.dust[num16].scale *= 0.5f;
								Main.dust[num16].velocity += velocity * 0.1f;
							}
							else if (Main.dust[num16].type == 35)
							{
								Main.dust[num16].scale *= 0.5f;
								Main.dust[num16].velocity += velocity * 0.1f;
							}
							else if (Main.dust[num16].type == Dust.dustWater())
							{
								Main.dust[num16].scale *= 0.65f;
								Main.dust[num16].velocity += velocity * 0.1f;
							}
							if (type == 808 || type == 809)
							{
								Dust dust4 = Main.dust[num16];
								if (dust4.dustIndex != 6000)
								{
									dust4 = Dust.NewDustPerfect(dust4.position, dust4.type, dust4.velocity, dust4.alpha, dust4.color, dust4.scale + 0.5f);
									dust4.velocity = Main.rand.NextVector2Circular(3f, 3f);
									dust4.noGravity = true;
								}
								if (dust4.dustIndex != 6000)
								{
									dust4 = Dust.NewDustPerfect(dust4.position, dust4.type, dust4.velocity, dust4.alpha, dust4.color, dust4.scale + 0.5f);
									dust4.velocity = ((float)Math.PI * 2f * ((float)timeLeft / 20f)).ToRotationVector2() * 3f;
									dust4.noGravity = true;
								}
							}
						}
						if (Main.rand.Next(2) == 0)
						{
							int num17 = Dust.NewDust(new Vector2(position.X + 3f + num14, position.Y + 3f + num15) - velocity * 0.5f, width - 8, height - 8, 31, 0f, 0f, 100, default(Color), 0.5f);
							Main.dust[num17].fadeIn = 0.5f + (float)Main.rand.Next(5) * 0.1f;
							Main.dust[num17].velocity *= 0.05f;
						}
					}
					float x = position.X;
					float y = position.Y;
					float num18 = 600f;
					if (type == 930)
					{
						num18 = 650f;
					}
					bool flag3 = false;
					ai[0] += 1f;
					if (ai[0] > 30f)
					{
						ai[0] = 30f;
						for (int m = 0; m < 200; m++)
						{
							if (Main.npc[m].CanBeChasedBy(this))
							{
								float num19 = Main.npc[m].position.X + (float)(Main.npc[m].width / 2);
								float num20 = Main.npc[m].position.Y + (float)(Main.npc[m].height / 2);
								float num21 = Math.Abs(position.X + (float)(width / 2) - num19) + Math.Abs(position.Y + (float)(height / 2) - num20);
								if (num21 < num18 && Collision.CanHit(position, width, height, Main.npc[m].position, Main.npc[m].width, Main.npc[m].height))
								{
									num18 = num21;
									x = num19;
									y = num20;
									flag3 = true;
								}
							}
						}
					}
					if (!flag3)
					{
						x = position.X + (float)(width / 2) + velocity.X * 100f;
						y = position.Y + (float)(height / 2) + velocity.Y * 100f;
					}
					float num22 = 16f;
					if (type == 930)
					{
						num22 = 12f;
					}
					Vector2 value2 = (new Vector2(x, y) - base.Center).SafeNormalize(-Vector2.UnitY) * num22;
					velocity = Vector2.Lerp(velocity, value2, 0.0833333358f);
				}
				else if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303 || type == 776 || type == 780 || type == 793 || type == 796 || type == 799 || type == 784 || type == 787 || type == 790)
				{
					if (Math.Abs(velocity.X) >= 8f || Math.Abs(velocity.Y) >= 8f)
					{
						for (int n = 0; n < 2; n++)
						{
							float num23 = 0f;
							float num24 = 0f;
							if (n == 1)
							{
								num23 = velocity.X * 0.5f;
								num24 = velocity.Y * 0.5f;
							}
							int num25 = Dust.NewDust(new Vector2(position.X + 3f + num23, position.Y + 3f + num24) - velocity * 0.5f, width - 8, height - 8, num13, 0f, 0f, 100);
							Main.dust[num25].scale *= 2f + (float)Main.rand.Next(10) * 0.1f;
							Main.dust[num25].velocity *= 0.2f;
							Main.dust[num25].noGravity = true;
							if (Main.dust[num25].type == 152)
							{
								Main.dust[num25].scale *= 0.5f;
								Main.dust[num25].velocity += velocity * 0.1f;
							}
							else if (Main.dust[num25].type == 35)
							{
								Main.dust[num25].scale *= 0.5f;
								Main.dust[num25].velocity += velocity * 0.1f;
							}
							else if (Main.dust[num25].type == Dust.dustWater())
							{
								Main.dust[num25].scale *= 0.65f;
								Main.dust[num25].velocity += velocity * 0.1f;
							}
							if (type == 793 || type == 796)
							{
								Dust dust5 = Main.dust[num25];
								if (dust5.dustIndex != 6000)
								{
									dust5 = Dust.NewDustPerfect(dust5.position, dust5.type, dust5.velocity, dust5.alpha, dust5.color, dust5.scale);
									dust5.velocity = Main.rand.NextVector2Circular(3f, 3f);
									dust5.noGravity = true;
								}
								if (dust5.dustIndex != 6000)
								{
									dust5 = Dust.NewDustPerfect(dust5.position, dust5.type, dust5.velocity, dust5.alpha, dust5.color, dust5.scale);
									dust5.velocity = ((float)Math.PI * 2f * ((float)timeLeft / 20f)).ToRotationVector2() * 3f;
									dust5.noGravity = true;
								}
							}
							num25 = Dust.NewDust(new Vector2(position.X + 3f + num23, position.Y + 3f + num24) - velocity * 0.5f, width - 8, height - 8, 31, 0f, 0f, 100, default(Color), 0.5f);
							Main.dust[num25].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
							Main.dust[num25].velocity *= 0.05f;
						}
					}
					if (Math.Abs(velocity.X) < 15f && Math.Abs(velocity.Y) < 15f)
					{
						velocity *= 1.1f;
					}
				}
				else if (type == 133 || type == 136 || type == 139 || type == 142 || type == 777 || type == 781 || type == 794 || type == 797 || type == 800 || type == 785 || type == 788 || type == 791)
				{
					int num26 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100);
					Main.dust[num26].scale *= 1f + (float)Main.rand.Next(10) * 0.1f;
					Main.dust[num26].velocity *= 0.2f;
					Main.dust[num26].noGravity = true;
				}
				else if (type == 135 || type == 138 || type == 141 || type == 144 || type == 778 || type == 782 || type == 795 || type == 798 || type == 801 || type == 786 || type == 789 || type == 792)
				{
					if ((double)velocity.X > -0.2 && (double)velocity.X < 0.2 && (double)velocity.Y > -0.2 && (double)velocity.Y < 0.2)
					{
						alpha += 2;
						if (alpha > 200)
						{
							alpha = 200;
						}
					}
					else
					{
						alpha = 0;
						int num27 = Dust.NewDust(new Vector2(position.X + 3f, position.Y + 3f) - velocity * 0.5f, width - 8, height - 8, 31, 0f, 0f, 100);
						Main.dust[num27].scale *= 1.6f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num27].velocity *= 0.05f;
						Main.dust[num27].noGravity = true;
					}
				}
				else if (type == 779 || type == 783 || type == 862 || type == 863)
				{
					if (Main.rand.Next(25) == 0)
					{
						Dust dust6 = Dust.NewDustDirect(position, width, height, 228, (0f - velocity.X) / 10f, (0f - velocity.Y) / 10f, 100);
						dust6.noGravity = true;
						dust6.velocity *= 0f;
						dust6.scale = 1.3f;
					}
					if (Main.rand.Next(5) == 0)
					{
						Dust dust7 = Dust.NewDustDirect(position, width, height, 31, (0f - velocity.X) / 10f, (0f - velocity.Y) / 10f, 100);
						dust7.noGravity = true;
						dust7.velocity *= 0f;
						dust7.scale = 1.3f;
					}
					if (frameCounter == 0)
					{
						frameCounter = 1;
						frame = Main.rand.Next(4);
					}
				}
				else if (type != 30 && type != 517 && type != 681 && type != 397 && type != 519 && type != 588 && type != 779 && type != 783 && type != 862 && type != 863 && Main.rand.Next(2) == 0)
				{
					int num28 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100);
					Main.dust[num28].scale = 0.1f + (float)Main.rand.Next(5) * 0.1f;
					Main.dust[num28].fadeIn = 1.5f + (float)Main.rand.Next(5) * 0.1f;
					Main.dust[num28].noGravity = true;
					Main.dust[num28].position = base.Center + new Vector2(0f, -height / 2).RotatedBy(rotation) * 1.1f;
					int num29 = 6;
					if (type == 773)
					{
						num29 = 59;
					}
					if (type == 903)
					{
						num29 = Dust.dustWater();
					}
					if (type == 904)
					{
						num29 = 35;
					}
					if (type == 905)
					{
						num29 = 152;
					}
					if (type == 910 || type == 911)
					{
						num29 = 0;
					}
					Dust dust8 = Dust.NewDustDirect(position, width, height, num29, 0f, 0f, 100);
					dust8.scale = 1f + (float)Main.rand.Next(5) * 0.1f;
					dust8.noGravity = true;
					dust8.position = base.Center + new Vector2(0f, -height / 2 - 6).RotatedBy(rotation) * 1.1f;
				}
				else if (type == 681)
				{
					Dust dust9 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100);
					dust9.scale = 1f + (float)Main.rand.Next(5) * 0.1f;
					dust9.noGravity = true;
					dust9.position = base.Center + new Vector2(6 * Math.Sign(velocity.X), -height / 2 - 6).RotatedBy(rotation) * 1.1f;
				}
			}
			ai[0] += 1f;
			if (type == 338 || type == 339 || type == 340 || type == 341 || type == 803 || type == 804 || type == 808 || type == 809 || type == 810 || type == 805 || type == 806 || type == 807 || type == 930)
			{
				if (velocity.X < 0f)
				{
					spriteDirection = -1;
					rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X) - 1.57f;
				}
				else
				{
					spriteDirection = 1;
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (type == 134 || type == 137 || type == 140 || type == 143 || type == 303 || type == 776 || type == 780 || type == 793 || type == 796 || type == 799 || type == 784 || type == 787 || type == 790)
			{
				if (velocity != Vector2.Zero)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (type == 135 || type == 138 || type == 141 || type == 144 || type == 778 || type == 782 || type == 795 || type == 798 || type == 801 || type == 786 || type == 789 || type == 792)
			{
				velocity.Y += 0.2f;
				velocity *= 0.97f;
				if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
				{
					velocity.X = 0f;
				}
				if ((double)velocity.Y > -0.1 && (double)velocity.Y < 0.1)
				{
					velocity.Y = 0f;
				}
			}
			else if (type == 133 || type == 136 || type == 139 || type == 142 || type == 777 || type == 781 || type == 794 || type == 797 || type == 800 || type == 785 || type == 788 || type == 791)
			{
				if (ai[0] > 15f)
				{
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.95f;
					}
					velocity.Y += 0.2f;
				}
			}
			else if (((type == 30 || type == 397 || type == 517 || type == 681 || type == 588 || type == 779 || type == 783 || type == 862 || type == 863) && ai[0] > 10f) || (type != 30 && type != 397 && type != 517 && type != 588 && type != 779 && type != 783 && type != 862 && type != 863 && ai[0] > 5f))
			{
				ai[0] = 10f;
				if (velocity.Y == 0f && velocity.X != 0f)
				{
					velocity.X *= 0.97f;
					if (type == 29 || type == 470 || type == 637)
					{
						velocity.X *= 0.99f;
					}
					if ((double)velocity.X > -0.01 && (double)velocity.X < 0.01)
					{
						velocity.X = 0f;
						netUpdate = true;
					}
				}
				velocity.Y += 0.2f;
				if (type == 911)
				{
					velocity.X = MathHelper.Clamp(velocity.X, -8f, 8f);
					velocity.Y = MathHelper.Clamp(velocity.Y, -8f, 8f);
				}
			}
			if (type == 519)
			{
				rotation += velocity.X * 0.06f;
			}
			else if (type != 134 && type != 137 && type != 140 && type != 143 && type != 303 && (type < 338 || type > 341) && type != 776 && type != 780 && type != 793 && type != 796 && type != 799 && type != 784 && type != 787 && type != 790 && type != 803 && type != 804 && type != 808 && type != 809 && type != 810 && type != 805 && type != 806 && type != 807 && type != 930)
			{
				rotation += velocity.X * 0.1f;
			}
		}

		private void AI_166_Dove()
		{
			bool num = type == 855;
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				frame = Main.rand.Next(4);
			}
			int num2 = 4;
			if (num)
			{
				num2 = 6;
			}
			if (++frameCounter > num2)
			{
				frameCounter = 0;
				if (++frame > 3)
				{
					frame = 0;
				}
			}
			spriteDirection = -1;
			if (velocity.X > 0f)
			{
				spriteDirection = 1;
			}
			if (num)
			{
				float num3 = 1f - (float)alpha / 255f;
				Vector3 rgb = new Vector3(1f, 0.6f, 0.1f) * num3;
				Lighting.AddLight(base.Center, rgb);
				rotation = velocity.X * 0.2f;
				if (velocity.Y < -1f)
				{
					velocity.Y *= 0.99f;
				}
				else
				{
					velocity.Y += (float)Math.Sin((float)(timeLeft % 200) / 200f * ((float)Math.PI * 2f)) * 0.25f;
					if (velocity.Y > 0.5f)
					{
						velocity.Y *= 0.8f;
					}
					velocity.Y = MathHelper.Clamp(velocity.Y, -1.5f, 1.5f);
				}
				float num4 = Main.WindForVisuals;
				if (num4 == 0f)
				{
					num4 = 0.1f;
				}
				velocity.X += 0.0525f * num4;
				velocity.X = MathHelper.Clamp(velocity.X, -2f, 2f);
			}
			else
			{
				rotation = velocity.X * 0.15f;
				velocity.Y -= 0.025f;
				if (velocity.Y < -3f)
				{
					velocity.Y = -3f;
				}
				velocity.X = MathHelper.Clamp(velocity.X, -5f, 5f);
			}
			if (timeLeft < 90)
			{
				alpha += 3;
			}
			if (alpha >= 255)
			{
				Kill();
			}
		}

		private void AI_161_RapierStabs()
		{
			Player player = Main.player[owner];
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			ai[0] += 1f;
			float num2 = (Opacity = Utils.GetLerpValue(0f, 7f, ai[0], clamped: true) * Utils.GetLerpValue(16f, 12f, ai[0], clamped: true));
			base.Center = player.RotatedRelativePoint(player.MountedCenter, reverseRotation: false, addGfxOffY: false) + velocity * (ai[0] - 1f);
			spriteDirection = ((!(Vector2.Dot(velocity, Vector2.UnitX) < 0f)) ? 1 : (-1));
			if (ai[0] >= 16f)
			{
				Kill();
			}
			else
			{
				player.heldProj = whoAmI;
			}
		}

		private void AI_165_Whip()
		{
			Player player = Main.player[owner];
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			ai[0] += 1f;
			GetWhipSettings(this, out var timeToFlyOut, out var _, out var _);
			base.Center = Main.GetPlayerArmPosition(this) + velocity * (ai[0] - 1f);
			spriteDirection = ((!(Vector2.Dot(velocity, Vector2.UnitX) < 0f)) ? 1 : (-1));
			if (ai[0] >= timeToFlyOut || player.itemAnimation == 0)
			{
				Kill();
				return;
			}
			player.heldProj = whoAmI;
			player.itemAnimation = player.itemAnimationMax - (int)(ai[0] / (float)MaxUpdates);
			player.itemTime = player.itemAnimation;
			if (ai[0] == (float)(int)(timeToFlyOut / 2f))
			{
				WhipPointsForCollision.Clear();
				FillWhipControlPoints(this, WhipPointsForCollision);
				Vector2 vector = WhipPointsForCollision[WhipPointsForCollision.Count - 1];
				SoundEngine.PlaySound(SoundID.Item153, vector);
			}
			switch (type)
			{
			case 848:
			{
				float t3 = ai[0] / timeToFlyOut;
				float num5 = Utils.GetLerpValue(0.1f, 0.7f, t3, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t3, clamped: true);
				if (num5 > 0.1f && Main.rand.NextFloat() < num5 / 2f)
				{
					WhipPointsForCollision.Clear();
					FillWhipControlPoints(this, WhipPointsForCollision);
					Rectangle r4 = Utils.CenteredRectangle(WhipPointsForCollision[WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
					int num6 = Dust.NewDust(r4.TopLeft(), r4.Width, r4.Height, 172, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num6].noGravity = true;
					Main.dust[num6].velocity.X /= 2f;
					Main.dust[num6].velocity.Y /= 2f;
				}
				break;
			}
			case 847:
			{
				float t2 = ai[0] / timeToFlyOut;
				if (Utils.GetLerpValue(0.1f, 0.7f, t2, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t2, clamped: true) > 0.5f && Main.rand.Next(3) != 0)
				{
					WhipPointsForCollision.Clear();
					FillWhipControlPoints(this, WhipPointsForCollision);
					int num2 = Main.rand.Next(WhipPointsForCollision.Count - 10, WhipPointsForCollision.Count);
					Rectangle r2 = Utils.CenteredRectangle(WhipPointsForCollision[num2], new Vector2(30f, 30f));
					int num3 = 57;
					if (Main.rand.Next(3) == 0)
					{
						num3 = 43;
					}
					Dust dust3 = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, num3, 0f, 0f, 100, Color.White);
					dust3.position = WhipPointsForCollision[num2];
					dust3.fadeIn = 0.3f;
					Vector2 spinningpoint = WhipPointsForCollision[num2] - WhipPointsForCollision[num2 - 1];
					dust3.noGravity = true;
					dust3.velocity *= 0.5f;
					dust3.velocity += spinningpoint.RotatedBy((float)player.direction * ((float)Math.PI / 2f));
					dust3.velocity *= 0.5f;
				}
				break;
			}
			case 849:
			{
				float num4 = ai[0] / timeToFlyOut;
				Utils.GetLerpValue(0.1f, 0.7f, num4, clamped: true);
				Utils.GetLerpValue(0.9f, 0.7f, num4, clamped: true);
				if (num4 > 0.4f && Main.rand.Next(9) != 0)
				{
					WhipPointsForCollision.Clear();
					FillWhipControlPoints(this, WhipPointsForCollision);
					Rectangle r3 = Utils.CenteredRectangle(WhipPointsForCollision[WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
					Vector2 vector3 = WhipPointsForCollision[WhipPointsForCollision.Count - 2].DirectionTo(WhipPointsForCollision[WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
					Dust dust4 = Dust.NewDustDirect(r3.TopLeft(), r3.Width, r3.Height, 191, 0f, 0f, 0, default(Color), 1.3f);
					dust4.noGravity = true;
					dust4.velocity += vector3 * 2f;
					if (Main.rand.Next(2) == 0)
					{
						ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.BlackLightningSmall, new ParticleOrchestraSettings
						{
							MovementVector = vector3,
							PositionInWorld = r3.Center.ToVector2()
						}, owner);
					}
					Lighting.AddLight(r3.Center.ToVector2(), new Vector3(0.2f, 0f, 0.4f));
				}
				break;
			}
			case 915:
			{
				float t5 = ai[0] / timeToFlyOut;
				if (Utils.GetLerpValue(0.1f, 0.7f, t5, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t5, clamped: true) > 0.1f)
				{
					WhipPointsForCollision.Clear();
					FillWhipControlPoints(this, WhipPointsForCollision);
					Rectangle r6 = Utils.CenteredRectangle(WhipPointsForCollision[WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
					Vector2 vector5 = WhipPointsForCollision[WhipPointsForCollision.Count - 2].DirectionTo(WhipPointsForCollision[WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
					Dust dust7 = Dust.NewDustDirect(r6.TopLeft(), r6.Width, r6.Height, 267, 0f, 0f, 0, Main.hslToRgb(player.miscCounterNormalized * 9f % 1f, 1f, 0.5f), 1.3f);
					dust7.velocity *= Main.rand.NextFloat() * 0.8f;
					dust7.noGravity = true;
					dust7.scale = 0.9f + Main.rand.NextFloat() * 0.9f;
					dust7.fadeIn = Main.rand.NextFloat() * 0.9f;
					dust7.velocity += vector5 * 2f;
					if (dust7.dustIndex != 6000)
					{
						Dust dust8 = Dust.CloneDust(dust7);
						dust8.scale /= 2f;
						dust8.fadeIn *= 0.85f;
						dust8.color = new Color(255, 255, 255, 255);
					}
				}
				break;
			}
			case 914:
			{
				float t6 = ai[0] / timeToFlyOut;
				float num8 = Utils.GetLerpValue(0.1f, 0.7f, t6, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t6, clamped: true);
				if (num8 > 0.1f && Main.rand.NextFloat() < num8 / 2f)
				{
					WhipPointsForCollision.Clear();
					FillWhipControlPoints(this, WhipPointsForCollision);
					Rectangle r7 = Utils.CenteredRectangle(WhipPointsForCollision[WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
					Vector2 vector6 = WhipPointsForCollision[WhipPointsForCollision.Count - 2].DirectionTo(WhipPointsForCollision[WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
					Dust dust9 = Dust.NewDustDirect(r7.TopLeft(), r7.Width, r7.Height, 39, 0f, 0f, 0, default(Color), 1.2f);
					dust9.noGravity = Main.rand.Next(3) == 0;
					dust9.velocity += vector6 * 2f;
				}
				break;
			}
			case 952:
			{
				float t7 = ai[0] / timeToFlyOut;
				float num9 = Utils.GetLerpValue(0.1f, 0.7f, t7, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t7, clamped: true);
				if (num9 > 0.15f && Main.rand.NextFloat() < num9)
				{
					WhipPointsForCollision.Clear();
					FillWhipControlPoints(this, WhipPointsForCollision);
					Rectangle r8 = Utils.CenteredRectangle(WhipPointsForCollision[WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
					Vector2 vector7 = WhipPointsForCollision[WhipPointsForCollision.Count - 2].DirectionTo(WhipPointsForCollision[WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
					Dust dust10 = Dust.NewDustDirect(r8.TopLeft(), r8.Width, r8.Height, 26, 0f, 0f, 0, default(Color), 0.7f);
					dust10.noGravity = Main.rand.Next(3) == 0;
					if (dust10.noGravity)
					{
						dust10.scale += 0.4f;
					}
					dust10.velocity += vector7 * 2f;
				}
				break;
			}
			case 912:
			{
				float t4 = ai[0] / timeToFlyOut;
				float num7 = Utils.GetLerpValue(0.1f, 0.7f, t4, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t4, clamped: true);
				if (!(num7 > 0.1f) || !(Main.rand.NextFloat() < num7 / 2f))
				{
					break;
				}
				WhipPointsForCollision.Clear();
				FillWhipControlPoints(this, WhipPointsForCollision);
				Rectangle r5 = Utils.CenteredRectangle(WhipPointsForCollision[WhipPointsForCollision.Count - 1], new Vector2(30f, 30f));
				Vector2 vector4 = WhipPointsForCollision[WhipPointsForCollision.Count - 2].DirectionTo(WhipPointsForCollision[WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
				for (int j = 0; j < 3; j++)
				{
					Dust dust5 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 16, 0f, 0f, 0, default(Color), 1.2f);
					dust5.noGravity = true;
					dust5.velocity += vector4 * 2f;
				}
				for (int k = 0; k < 1; k++)
				{
					Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 13, 0f, 0f, 0, default(Color), 0.8f).velocity += vector4 * 2f;
				}
				for (int l = 0; l < 3; l++)
				{
					if (Main.rand.Next(2) != 0)
					{
						Dust dust6 = Dust.NewDustDirect(r5.TopLeft(), r5.Width, r5.Height, 261, 0f, 0f, 0, Color.Transparent, 0.8f);
						dust6.velocity += vector4 * 2f;
						dust6.velocity *= 0.3f;
						dust6.noGravity = true;
					}
				}
				Lighting.AddLight(r5.Center.ToVector2(), new Vector3(0.1f, 0.1f, 0.2f));
				break;
			}
			case 913:
			{
				float t = ai[0] / timeToFlyOut;
				float num = Utils.GetLerpValue(0.1f, 0.7f, t, clamped: true) * Utils.GetLerpValue(0.9f, 0.7f, t, clamped: true);
				if (!(num > 0.1f) || !(Main.rand.NextFloat() < num))
				{
					break;
				}
				WhipPointsForCollision.Clear();
				FillWhipControlPoints(this, WhipPointsForCollision);
				Rectangle r = Utils.CenteredRectangle(WhipPointsForCollision[WhipPointsForCollision.Count - 1], new Vector2(20f, 20f));
				Vector2 vector2 = WhipPointsForCollision[WhipPointsForCollision.Count - 2].DirectionTo(WhipPointsForCollision[WhipPointsForCollision.Count - 1]).SafeNormalize(Vector2.Zero);
				for (int i = 0; i < 3; i++)
				{
					if (Main.rand.Next(3) != 0)
					{
						continue;
					}
					if (Main.rand.Next(7) == 0)
					{
						Dust dust = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 31);
						dust.velocity.X /= 2f;
						dust.velocity.Y /= 2f;
						dust.velocity += vector2 * 2f;
						dust.fadeIn = 1f + Main.rand.NextFloat() * 0.6f;
						dust.noGravity = true;
						continue;
					}
					Dust dust2 = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 6, 0f, 0f, 0, default(Color), 1.2f);
					dust2.velocity += vector2 * 2f;
					if (Main.rand.Next(3) != 0)
					{
						dust2.fadeIn = 0.7f + Main.rand.NextFloat() * 0.9f;
						dust2.scale = 0.6f;
						dust2.noGravity = true;
					}
				}
				break;
			}
			}
		}

		public static void FillWhipControlPoints(Projectile proj, List<Vector2> controlPoints)
		{
			GetWhipSettings(proj, out var timeToFlyOut, out var segments, out var rangeMultiplier);
			float num = proj.ai[0] / timeToFlyOut;
			float num2 = 0.5f;
			float num3 = 1f + num2;
			float num4 = (float)Math.PI * 10f * (1f - num * num3) * (float)(-proj.spriteDirection) / (float)segments;
			float num5 = num * num3;
			float num6 = 0f;
			if (num5 > 1f)
			{
				num6 = (num5 - 1f) / num2;
				num5 = MathHelper.Lerp(1f, 0f, num6);
			}
			float num7 = proj.ai[0] - 1f;
			Player player = Main.player[proj.owner];
			Item heldItem = Main.player[proj.owner].HeldItem;
			num7 = (float)(ContentSamples.ItemsByType[heldItem.type].useAnimation * 2) * num * player.whipRangeMultiplier;
			float num8 = proj.velocity.Length() * num7 * num5 * rangeMultiplier / (float)segments;
			float num9 = 1f;
			Vector2 playerArmPosition = Main.GetPlayerArmPosition(proj);
			Vector2 vector = playerArmPosition;
			float num10 = 0f - (float)Math.PI / 2f;
			Vector2 vector2 = vector;
			float num11 = 0f + (float)Math.PI / 2f + (float)Math.PI / 2f * (float)proj.spriteDirection;
			Vector2 vector3 = vector;
			float num12 = 0f + (float)Math.PI / 2f;
			controlPoints.Add(playerArmPosition);
			for (int i = 0; i < segments; i++)
			{
				float num13 = (float)i / (float)segments;
				float num14 = num4 * num13 * num9;
				Vector2 vector4 = vector + num10.ToRotationVector2() * num8;
				Vector2 vector5 = vector3 + num12.ToRotationVector2() * (num8 * 2f);
				Vector2 vector6 = vector2 + num11.ToRotationVector2() * (num8 * 2f);
				float num15 = 1f - num5;
				float num16 = 1f - num15 * num15;
				Vector2 value = Vector2.Lerp(vector5, vector4, num16 * 0.9f + 0.1f);
				Vector2 vector7 = Vector2.Lerp(vector6, value, num16 * 0.7f + 0.3f);
				Vector2 spinningpoint = playerArmPosition + (vector7 - playerArmPosition) * new Vector2(1f, num3);
				float num17 = num6;
				num17 *= num17;
				Vector2 item = spinningpoint.RotatedBy(proj.rotation + 4.712389f * num17 * (float)proj.spriteDirection, playerArmPosition);
				controlPoints.Add(item);
				num10 += num14;
				num12 += num14;
				num11 += num14;
				vector = vector4;
				vector3 = vector5;
				vector2 = vector6;
			}
		}

		public static void GetWhipSettings(Projectile proj, out float timeToFlyOut, out int segments, out float rangeMultiplier)
		{
			timeToFlyOut = Main.player[proj.owner].itemAnimationMax * proj.MaxUpdates;
			segments = 20;
			rangeMultiplier = 1f;
			switch (proj.type)
			{
			case 913:
				rangeMultiplier *= 1.4f;
				break;
			case 912:
				rangeMultiplier *= 1.5f;
				break;
			case 841:
				rangeMultiplier *= 0.75f;
				break;
			case 914:
				rangeMultiplier *= 1f;
				break;
			case 847:
				segments = 20;
				rangeMultiplier *= 1.6f;
				break;
			case 849:
				segments = 30;
				rangeMultiplier = 1.8f;
				break;
			case 915:
				segments = 40;
				rangeMultiplier = 2.2f;
				break;
			case 848:
				rangeMultiplier = 1.2f;
				break;
			case 952:
				rangeMultiplier *= 0.95f;
				break;
			}
		}

		private void AI_160_Kites()
		{
			Player player = Main.player[owner];
			Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
			timeLeft = 60;
			bool flag = false;
			if (player.CCed || player.noItems)
			{
				flag = true;
			}
			else if (player.inventory[player.selectedItem].shoot != type)
			{
				flag = true;
			}
			else if (player.pulley)
			{
				flag = true;
			}
			else if (player.dead)
			{
				flag = true;
			}
			if (!flag)
			{
				flag = (player.Center - base.Center).Length() > 2000f;
			}
			if (flag)
			{
				Kill();
				return;
			}
			float num = 4f;
			float num2 = 500f;
			float num3 = num2 / 2f;
			if (owner == Main.myPlayer && extraUpdates == 0)
			{
				float num4 = ai[0];
				if (ai[0] == 0f)
				{
					ai[0] = num3;
				}
				float num5 = ai[0];
				if (Main.mouseRight)
				{
					num5 -= 5f;
				}
				if (Main.mouseLeft)
				{
					num5 += 5f;
				}
				ai[0] = MathHelper.Clamp(num5, num, num2);
				if (num4 != num5)
				{
					netUpdate = true;
				}
			}
			if (numUpdates == 1)
			{
				extraUpdates = 0;
			}
			int num6 = 0;
			float cloudAlpha = Main.cloudAlpha;
			float num7 = 0f;
			if (WorldGen.InAPlaceWithWind(position, width, height))
			{
				num7 = Main.WindForVisuals;
			}
			float num8 = Utils.GetLerpValue(0.2f, 0.5f, Math.Abs(num7), clamped: true) * 0.5f;
			switch (num6)
			{
			case 0:
			{
				Vector2 mouseWorld = Main.MouseWorld;
				mouseWorld = base.Center;
				mouseWorld += new Vector2(num7, (float)Math.Sin(Main.GlobalTimeWrappedHourly) + cloudAlpha * 5f) * 25f;
				Vector2 v = mouseWorld - base.Center;
				v = v.SafeNormalize(Vector2.Zero) * (3f + cloudAlpha * 7f);
				if (num8 == 0f)
				{
					v = velocity;
				}
				float num9 = Distance(mouseWorld);
				float lerpValue = Utils.GetLerpValue(5f, 10f, num9, clamped: true);
				float y = velocity.Y;
				if (num9 > 10f)
				{
					velocity = Vector2.Lerp(velocity, v, 0.075f * lerpValue);
				}
				velocity.Y = y;
				velocity.Y -= num8;
				velocity.Y += 0.02f + num8 * 0.25f;
				velocity.Y = MathHelper.Clamp(velocity.Y, -2f, 2f);
				if (base.Center.Y + velocity.Y < mouseWorld.Y)
				{
					velocity.Y = MathHelper.Lerp(velocity.Y, velocity.Y + num8 + 0.01f, 0.75f);
				}
				velocity.X *= 0.98f;
				float num10 = Distance(vector);
				float num11 = ai[0];
				if (num10 > num11)
				{
					Vector2 vector3 = DirectionTo(vector);
					float num12 = num10 - num11;
					base.Center += vector3 * num12;
					bool num13 = Vector2.Dot(vector3, Vector2.UnitY) < 0.8f || num8 > 0f;
					velocity.Y += vector3.Y * 0.05f;
					if (num13)
					{
						velocity.Y -= 0.15f;
					}
					velocity.X += vector3.X * 0.2f;
					if (num11 == num && owner == Main.myPlayer)
					{
						Kill();
						return;
					}
				}
				break;
			}
			case 1:
			{
				Vector2 vector2 = DirectionTo(vector);
				velocity = Vector2.Lerp(velocity, vector2 * 16f, 1f);
				if (Distance(vector) < 10f && owner == Main.myPlayer)
				{
					Kill();
					return;
				}
				break;
			}
			}
			timeLeft = 2;
			Vector2 vector4 = base.Center - vector;
			int dir = ((vector4.X > 0f) ? 1 : (-1));
			if (Math.Abs(vector4.X) > Math.Abs(vector4.Y) / 2f)
			{
				player.ChangeDir(dir);
			}
			Vector2 vector5 = DirectionTo(vector).SafeNormalize(Vector2.Zero);
			if (num8 == 0f && velocity.Y > -0.02f)
			{
				rotation *= 0.95f;
			}
			else
			{
				float num14 = (-vector5).ToRotation() + (float)Math.PI / 4f;
				if (spriteDirection == -1)
				{
					num14 -= (float)Math.PI / 2f * (float)player.direction;
				}
				rotation = num14 + velocity.X * 0.05f;
			}
			float num15 = velocity.Length();
			switch (type)
			{
			case 771:
			case 822:
			case 823:
			case 827:
			case 830:
			case 838:
			case 843:
			case 844:
			case 845:
			case 846:
			case 850:
			case 852:
				frame = 0;
				break;
			case 828:
			case 829:
				if (num15 < 6f)
				{
					frame = 1;
				}
				else
				{
					frame = 0;
				}
				break;
			case 826:
				frame = (int)ai[1];
				break;
			case 824:
			case 839:
			case 840:
			case 853:
				if (num8 < 0.15f)
				{
					frame = 0;
					break;
				}
				frameCounter++;
				if ((float)frameCounter > (1f - num8) * 10f)
				{
					frameCounter = 0;
					frame = Main.rand.Next(4);
				}
				break;
			default:
				if (num15 < 3f)
				{
					frame = 0;
				}
				else if (num15 < 5f)
				{
					frame = 1;
				}
				else if (num15 < 7f)
				{
					frame = 2;
				}
				else
				{
					frame = 3;
				}
				break;
			}
			spriteDirection = player.direction;
		}

		private void AI_159_PaperAirplanes()
		{
			if (ai[1] == 0f)
			{
				direction = ((velocity.X > 0f) ? 1 : (-1));
				rotation = velocity.ToRotation();
				ai[1] = 1f;
				ai[0] = -Main.rand.Next(30, 80);
				netUpdate = true;
			}
			if (wet && owner == Main.myPlayer)
			{
				Kill();
			}
			ai[0] += 1f;
			Vector2 vector = rotation.ToRotationVector2() * 8f;
			float y = (float)Math.Sin((float)Math.PI * 2f * (float)(Main.timeForVisualEffects % 90.0 / 90.0)) * (float)direction * Main.WindForVisuals;
			Vector2 v = vector + new Vector2(Main.WindForVisuals, y);
			_ = Vector2.UnitX * direction;
			bool flag = direction == Math.Sign(Main.WindForVisuals) && velocity.Length() > 3f;
			bool num = ai[0] >= 20f && ai[0] <= 69f;
			if (ai[0] == 70f)
			{
				ai[0] = -Main.rand.Next(120, 600);
			}
			bool num2 = num && flag;
			if (num2)
			{
				float lerpValue = Utils.GetLerpValue(0f, 30f, ai[0], clamped: true);
				v = vector.RotatedBy((float)(-direction) * ((float)Math.PI * 2f) * 0.02f * lerpValue);
			}
			velocity = v.SafeNormalize(Vector2.UnitY) * velocity.Length();
			if (!num2)
			{
				float num3 = MathHelper.Lerp(0.15f, 0.05f, Math.Abs(Main.WindForVisuals));
				if (timeLeft % 40 < 20)
				{
					velocity.Y -= num3;
				}
				else
				{
					velocity.Y += num3;
				}
				if (velocity.Y < -2f)
				{
					velocity.Y = -2f;
				}
				if (velocity.Y > 2f)
				{
					velocity.Y = 2f;
				}
				velocity.X = MathHelper.Clamp(velocity.X + Main.WindForVisuals * 0.006f, -6f, 6f);
				if (velocity.X * oldVelocity.X < 0f)
				{
					direction *= -1;
					ai[0] = -Main.rand.Next(120, 300);
					netUpdate = true;
				}
			}
			rotation = velocity.ToRotation();
			spriteDirection = direction;
		}

		private void AI_158_BabyBird()
		{
			Player player = Main.player[owner];
			if (type == 759)
			{
				if (player.dead)
				{
					player.babyBird = false;
				}
				if (player.babyBird)
				{
					timeLeft = 2;
				}
				if (++frameCounter >= 6)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type] - 1)
					{
						frame = 0;
					}
				}
			}
			float num = 6f;
			float num2 = 8f;
			int num3 = 800;
			float num4 = 150f;
			int attackTarget = -1;
			Minion_FindTargetInRange(num3, ref attackTarget, skipIfCannotHitWithOwnBody: false);
			if (attackTarget != -1)
			{
				NPC nPC = Main.npc[attackTarget];
				if (player.Distance(nPC.Center) > (float)num3)
				{
					attackTarget = -1;
				}
			}
			if (attackTarget != -1)
			{
				if (!Collision.SolidCollision(position, width, height))
				{
					tileCollide = true;
				}
				NPC nPC2 = Main.npc[attackTarget];
				float num5 = Distance(nPC2.Center);
				Rectangle rectangle = new Rectangle((int)position.X, (int)position.Y, width, height);
				Rectangle value = new Rectangle((int)nPC2.position.X, (int)nPC2.position.Y, nPC2.width, nPC2.height);
				if (rectangle.Intersects(value))
				{
					tileCollide = false;
					if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num2)
					{
						velocity *= 1.1f;
					}
					if (velocity.Length() > num2)
					{
						velocity *= num2 / velocity.Length();
					}
				}
				else if (num5 > num4)
				{
					Vector2 vector = DirectionTo(nPC2.Center);
					velocity = Vector2.Lerp(velocity, vector * num, 0.15f);
				}
				else
				{
					tileCollide = false;
					Vector2 vector2 = DirectionTo(nPC2.Center);
					velocity += new Vector2(Math.Sign(vector2.X), Math.Sign(vector2.Y)) * 0.35f;
					if (velocity.Length() > num2)
					{
						velocity *= num2 / velocity.Length();
					}
				}
				float num6 = 0.025f;
				float num7 = width * 3;
				for (int i = 0; i < 1000; i++)
				{
					if (i != whoAmI && Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].type == type && Math.Abs(position.X - Main.projectile[i].position.X) + Math.Abs(position.Y - Main.projectile[i].position.Y) < num7)
					{
						if (position.X < Main.projectile[i].position.X)
						{
							velocity.X -= num6;
						}
						else
						{
							velocity.X += num6;
						}
						if (position.Y < Main.projectile[i].position.Y)
						{
							velocity.Y -= num6;
						}
						else
						{
							velocity.Y += num6;
						}
					}
				}
				rotation = velocity.X * 0.1f;
				direction = ((velocity.X > 0f) ? 1 : (-1));
				spriteDirection = ((velocity.X > 0f) ? 1 : (-1));
				return;
			}
			tileCollide = false;
			List<int> ai158_blacklistedTargets = _ai158_blacklistedTargets;
			ai158_blacklistedTargets.Clear();
			AI_GetMyGroupIndexAndFillBlackList(ai158_blacklistedTargets, out var index, out var _);
			localAI[0] = index;
			Vector2 vector3 = AI_158_GetHomeLocation(player, index);
			float num8 = Distance(vector3);
			bool flag = player.gravDir > 0f && player.fullRotation == 0f && player.headRotation == 0f;
			if (num8 > 2000f)
			{
				base.Center = vector3;
				frame = Main.projFrames[type] - 1;
				frameCounter = 0;
				velocity = Vector2.Zero;
				direction = (spriteDirection = player.direction);
				rotation = 0f;
			}
			else if (num8 > 40f)
			{
				float num9 = num + num8 * 0.006f;
				Vector2 vector4 = DirectionTo(vector3);
				vector4 *= MathHelper.Lerp(1f, 5f, Utils.GetLerpValue(40f, 800f, num8, clamped: true));
				velocity = Vector2.Lerp(velocity, vector4 * num9, 0.025f);
				if (velocity.Length() > num9)
				{
					velocity *= num9 / velocity.Length();
				}
				float num10 = 0.05f;
				float num11 = width;
				for (int j = 0; j < 1000; j++)
				{
					if (j != whoAmI && Main.projectile[j].active && Main.projectile[j].owner == owner && Main.projectile[j].type == type && Math.Abs(position.X - Main.projectile[j].position.X) + Math.Abs(position.Y - Main.projectile[j].position.Y) < num11)
					{
						if (position.X < Main.projectile[j].position.X)
						{
							velocity.X -= num10;
						}
						else
						{
							velocity.X += num10;
						}
						if (position.Y < Main.projectile[j].position.Y)
						{
							velocity.Y -= num10;
						}
						else
						{
							velocity.Y += num10;
						}
					}
				}
				rotation = velocity.X * 0.04f;
				direction = ((velocity.X > 0f) ? 1 : (-1));
				spriteDirection = ((velocity.X > 0f) ? 1 : (-1));
			}
			else if (num8 > 8f + player.velocity.Length())
			{
				Vector2 vector5 = DirectionTo(vector3);
				velocity += new Vector2(Math.Sign(vector5.X), Math.Sign(vector5.Y)) * 0.05f;
				if (velocity.Length() > num)
				{
					velocity *= num / velocity.Length();
				}
				rotation = velocity.X * 0.1f;
				direction = ((velocity.X > 0f) ? 1 : (-1));
				spriteDirection = ((velocity.X > 0f) ? 1 : (-1));
			}
			else if (flag)
			{
				base.Center = vector3;
				frame = Main.projFrames[type] - 1;
				frameCounter = 0;
				velocity = Vector2.Zero;
				direction = (spriteDirection = player.direction);
				rotation = 0f;
			}
		}

		public static Vector2 AI_158_GetHomeLocation(Player master, int stackedIndex)
		{
			int num = master.bodyFrame.Height;
			if (num == 0)
			{
				num = 1;
			}
			Vector2 vector = Main.OffsetsPlayerHeadgear[master.bodyFrame.Y / num];
			vector.Y -= 2f;
			switch (stackedIndex % 6)
			{
			case 1:
				vector += new Vector2(master.direction * 8, master.gravDir * -2f);
				break;
			case 2:
				vector += new Vector2(master.direction * -10, master.gravDir * -2f);
				break;
			case 4:
				vector += new Vector2(master.direction * 10, master.gravDir * -10f);
				break;
			case 5:
				vector += new Vector2(master.direction * -12, master.gravDir * -10f);
				break;
			case 3:
			{
				Vector2 vector2 = vector;
				_ = master.direction;
				vector = vector2 + new Vector2(0f, master.gravDir * -10f);
				break;
			}
			}
			vector += new Vector2(0f, master.gravDir * -16f) * (stackedIndex / 6);
			Vector2 vector3 = master.RotatedRelativePoint(master.MountedCenter);
			_ = master.direction;
			return (vector3 + new Vector2(0f, master.gravDir * -21f) + vector).Floor();
		}

		public void Minion_FindTargetInRange(int startAttackRange, ref int attackTarget, bool skipIfCannotHitWithOwnBody, Func<Entity, int, bool> customEliminationCheck = null)
		{
			float num = startAttackRange;
			float num2 = num;
			float num3 = num;
			NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this) && IsInRangeOfMeOrMyOwner(ownerMinionAttackTargetNPC, num, out var _, out var _, out var _))
			{
				attackTarget = ownerMinionAttackTargetNPC.whoAmI;
			}
			else
			{
				if (attackTarget >= 0)
				{
					return;
				}
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (nPC.CanBeChasedBy(this) && IsInRangeOfMeOrMyOwner(nPC, num, out var myDistance2, out var playerDistance2, out var closerIsMe2) && (!skipIfCannotHitWithOwnBody || CanHitWithOwnBody(nPC)) && (customEliminationCheck == null || customEliminationCheck(nPC, attackTarget)))
					{
						attackTarget = i;
						num = (closerIsMe2 ? myDistance2 : playerDistance2);
						if (num2 > myDistance2)
						{
							num2 = myDistance2;
						}
						if (num3 > playerDistance2)
						{
							num3 = playerDistance2;
						}
						num = Math.Max(num2, num3);
					}
				}
			}
		}

		private bool AI_067_CustomEliminationCheck_Pirates(Entity otherEntity, int currentTarget)
		{
			return true;
		}

		private bool AI_067_TigerSpecialAttack()
		{
			List<NPC> list = new List<NPC>();
			Vector2 center = Main.player[owner].Center;
			Rectangle value = Utils.CenteredRectangle(center, new Vector2(1600f, 800f));
			int num = Main.player[owner].ownedProjectileCounts[831] + 1;
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this) && nPC.Hitbox.Intersects(value))
				{
					list.Add(nPC);
				}
			}
			if (list.Count == 0)
			{
				return false;
			}
			NPC nPC2 = list[0];
			for (int j = 1; j < list.Count; j++)
			{
				if (Vector2.Distance(nPC2.Center, center) > Vector2.Distance(list[j].Center, center))
				{
					nPC2 = list[j];
				}
			}
			list.Remove(nPC2);
			NPC nPC3 = null;
			if (list.Count > 0)
			{
				nPC3 = list[0];
				for (int k = 1; k < list.Count; k++)
				{
					if (Distance(nPC3.Center) > Distance(list[k].Center))
					{
						nPC3 = list[k];
					}
				}
				list.Remove(nPC3);
			}
			List<Vector2> list2 = new List<Vector2>();
			if (nPC3 != null)
			{
				list2.Add(nPC3.Center);
			}
			int num2 = 0;
			while (list.Count > 0 && list2.Count < num - 1)
			{
				int index = Main.rand.Next(list.Count);
				Vector2 vector = list[index].velocity * 4f * (num2 + 1);
				list2.Add(list[index].Center + vector);
				list.RemoveAt(index);
				num2++;
			}
			if (nPC2 != null)
			{
				list2.Add(nPC2.Center);
			}
			if (list2.Count > 0 && Collision.SolidCollision(list2[list2.Count - 1] - base.Size / 2f, width, height))
			{
				list2.Add(center);
			}
			Vector2 vector2 = base.Center;
			float num3 = Math.Min(20, 30 / list2.Count);
			float num4 = 0f;
			for (int l = 0; l < list2.Count; l++)
			{
				float num5 = 20f;
				Vector2 vector3 = list2[l];
				vector3.X += ((vector2.X < vector3.X) ? num5 : (0f - num5));
				Vector2 vector4 = vector3 - vector2;
				int num6 = (int)Math.Min(num3, 4.0 + Math.Ceiling(vector4.Length() / 50f));
				if (num6 < 5)
				{
					num6 = 5;
				}
				NewProjectile(GetProjectileSource_FromThis(), vector2, vector4, 818, damage, 0f, owner, (0f - num4) * 4f, num6 * 4);
				vector2 = vector3;
				num4 += (float)num6;
			}
			base.Center = vector2;
			ai[0] = 4f;
			ai[1] = num4;
			netUpdate = true;
			return true;
		}

		private void AI_067_FreakingPirates()
		{
			Player player = Main.player[owner];
			if (!player.active)
			{
				active = false;
				return;
			}
			bool flag = type == 393 || type == 394 || type == 395;
			bool flag2 = type == 758;
			bool flag3 = type == 833 || type == 834 || type == 835;
			bool flag4 = type == 834 || type == 835;
			bool flag5 = type == 951;
			int num = 450;
			float num2 = 500f;
			float num3 = 300f;
			int num4 = 15;
			if (flag5)
			{
				if (player.dead)
				{
					player.flinxMinion = false;
				}
				if (player.flinxMinion)
				{
					timeLeft = 2;
				}
				num = 800;
			}
			if (flag)
			{
				if (player.dead)
				{
					player.pirateMinion = false;
				}
				if (player.pirateMinion)
				{
					timeLeft = 2;
				}
				num = 800;
			}
			if (flag3)
			{
				if (player.dead)
				{
					player.stormTiger = false;
				}
				if (player.stormTiger)
				{
					timeLeft = 2;
				}
				num = 800;
				if (ai[0] != 4f)
				{
					if (velocity != Vector2.Zero && Main.rand.Next(18) == 0)
					{
						Dust obj = Main.dust[Dust.NewDust(position, width, height, 269)];
						obj.fadeIn = 0.5f;
						obj.scale = 0.3f;
						obj.noLight = true;
						obj.velocity += velocity * 0.005f;
					}
					if (type == 833)
					{
						Lighting.AddLight(base.Center, Vector3.One * 0.5f);
					}
					if (type == 834)
					{
						Lighting.AddLight(base.Center, Vector3.One * 0.8f);
					}
					if (type == 835)
					{
						Lighting.AddLight(base.Center, Color.Lerp(Main.OurFavoriteColor, Color.White, 0.8f).ToVector3() * 1f);
					}
				}
				if (owner == Main.myPlayer)
				{
					if (localAI[0] <= 0f)
					{
						int num5;
						switch (type)
						{
						default:
							num5 = 360;
							break;
						case 834:
							num5 = 300;
							break;
						case 835:
							num5 = 240;
							break;
						}
						if (damage != 0)
						{
							bool flag6 = AI_067_TigerSpecialAttack();
							localAI[0] = (flag6 ? num5 : 10);
						}
					}
					else
					{
						localAI[0] -= 1f;
					}
				}
			}
			if (flag2)
			{
				if (player.dead)
				{
					player.vampireFrog = false;
				}
				if (player.vampireFrog)
				{
					timeLeft = 2;
				}
				num = 800;
			}
			if (type == 500)
			{
				num2 = 200f;
				if (player.dead)
				{
					player.crimsonHeart = false;
				}
				if (player.crimsonHeart)
				{
					timeLeft = 2;
				}
			}
			if (type == 653)
			{
				num2 = 300f;
				if (player.dead)
				{
					player.companionCube = false;
				}
				if (player.companionCube)
				{
					timeLeft = 2;
				}
			}
			if (flag3 && ai[0] == 4f)
			{
				velocity = Vector2.Zero;
				frame = 9;
				if (flag4)
				{
					frame = 11;
				}
				ai[1] -= 1f;
				if (!(ai[1] <= 0f))
				{
					return;
				}
				ai[0] = 0f;
				ai[1] = 0f;
				netUpdate = true;
			}
			Vector2 vector = player.Center;
			if (flag5)
			{
				vector.X -= (45 + player.width / 2) * player.direction;
				vector.X -= minionPos * 30 * player.direction;
			}
			else if (flag)
			{
				vector.X -= (15 + player.width / 2) * player.direction;
				vector.X -= minionPos * 20 * player.direction;
			}
			else if (flag3)
			{
				vector.X -= (15 + player.width / 2) * player.direction;
				vector.X -= minionPos * 40 * player.direction;
			}
			else if (flag2)
			{
				vector.X -= (35 + player.width / 2) * player.direction;
				vector.X -= minionPos * 40 * player.direction;
			}
			else if (type == 500)
			{
				vector.X -= (15 + player.width / 2) * player.direction;
				vector.X -= 40 * player.direction;
			}
			else if (type == 653)
			{
				vector.X = player.Center.X;
			}
			if (type == 500)
			{
				Lighting.AddLight(base.Center, 0.9f, 0.1f, 0.3f);
				int num6 = 6;
				if (frame == 0 || frame == 2)
				{
					num6 = 12;
				}
				if (++frameCounter >= num6)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				rotation += velocity.X / 20f;
				Vector2 vector2 = (-Vector2.UnitY).RotatedBy(rotation).RotatedBy((float)direction * 0.2f);
				int num7 = Dust.NewDust(base.Center + vector2 * 10f - new Vector2(4f), 0, 0, 5, vector2.X, vector2.Y, 0, Color.Transparent);
				Main.dust[num7].scale = 1f;
				Main.dust[num7].velocity = vector2.RotatedByRandom(0.78539818525314331) * 3.5f;
				Main.dust[num7].noGravity = true;
				Main.dust[num7].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
			}
			if (type == 653)
			{
				rotation += velocity.X / 20f;
				if (owner >= 0 && owner < 255)
				{
					_CompanionCubeScreamCooldown[owner] -= 1f;
					if (_CompanionCubeScreamCooldown[owner] < 0f)
					{
						_CompanionCubeScreamCooldown[owner] = 0f;
					}
				}
				Tile tileSafely = Framing.GetTileSafely(base.Center);
				if (tileSafely.liquid > 0 && tileSafely.lava())
				{
					localAI[0] += 1f;
				}
				else
				{
					localAI[0] -= 1f;
				}
				localAI[0] = MathHelper.Clamp(localAI[0], 0f, 20f);
				if (localAI[0] >= 20f)
				{
					if (_CompanionCubeScreamCooldown[owner] == 0f)
					{
						_CompanionCubeScreamCooldown[owner] = 3600f;
						SoundEngine.PlaySound((Main.rand.Next(10) == 0) ? SoundID.NPCDeath61 : SoundID.NPCDeath59, position);
					}
					Kill();
				}
				Vector3 vector3 = Lighting.GetColor((int)base.Center.X / 16, (int)base.Center.Y / 16).ToVector3();
				Vector3 vector4 = Lighting.GetColor((int)player.Center.X / 16, (int)player.Center.Y / 16).ToVector3();
				if (vector3.Length() < 0.15f && vector4.Length() < 0.15f)
				{
					localAI[1] += 1f;
				}
				else if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
				localAI[1] = MathHelper.Clamp(localAI[1], -3600f, 120f);
				if (localAI[1] > (float)Main.rand.Next(30, 120) && !player.immune && player.velocity == Vector2.Zero)
				{
					if (Main.rand.Next(5) == 0)
					{
						SoundEngine.PlaySound(SoundID.Item16, base.Center);
						localAI[1] = -600f;
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item1, base.Center);
						player.Hurt(PlayerDeathReason.ByOther(6), 3, 0);
						player.immune = false;
						player.immuneTime = 0;
						localAI[1] = -300 + Main.rand.Next(30) * -10;
					}
				}
			}
			bool flag7 = true;
			if (type == 500 || type == 653)
			{
				flag7 = false;
			}
			shouldFallThrough = player.position.Y + (float)player.height - 12f > position.Y + (float)height;
			friendly = false;
			int num8 = 0;
			int num9 = 15;
			int attackTarget = -1;
			bool flag8 = true;
			bool flag9 = ai[0] == 5f;
			if (flag5)
			{
				flag8 = false;
				friendly = true;
			}
			if (flag2)
			{
				friendly = true;
				num9 = 20;
				num8 = 60;
			}
			if (flag3)
			{
				flag8 = false;
				friendly = true;
				originalDamage = player.highestStormTigerGemOriginalDamage;
			}
			bool flag10 = ai[0] == 0f;
			if (flag3 && flag9)
			{
				flag10 = true;
			}
			if (flag10 && flag7)
			{
				Minion_FindTargetInRange(num, ref attackTarget, skipIfCannotHitWithOwnBody: true, AI_067_CustomEliminationCheck_Pirates);
			}
			if (flag3 && flag9)
			{
				if (attackTarget >= 0)
				{
					float maxDistance = num;
					NPC nPC = Main.npc[attackTarget];
					vector = nPC.Center;
					if (!IsInRangeOfMeOrMyOwner(nPC, maxDistance, out var _, out var _, out var _))
					{
						ai[0] = 0f;
						ai[1] = 0f;
						return;
					}
					Point point = nPC.Top.ToTileCoordinates();
					int num10 = 0;
					int num11 = point.Y;
					while (num10 < num4)
					{
						Tile tile = Main.tile[point.X, num11];
						if (tile == null || tile.active())
						{
							break;
						}
						num10++;
						num11++;
					}
					int num12 = num4 / 2;
					if (num10 < num12)
					{
						ai[0] = 0f;
						ai[1] = 0f;
						return;
					}
					if (base.Hitbox.Intersects(nPC.Hitbox) && velocity.Y >= 0f)
					{
						velocity.Y = -8f;
						velocity.X = direction * 10;
					}
					float num13 = 20f;
					float maxAmountAllowedToMove = 4f;
					float num14 = 40f;
					float num15 = 40f;
					Vector2 top = nPC.Top;
					float num16 = (float)Math.Cos(Main.time / (double)num14 * 6.2831854820251465);
					if (num16 > 0f)
					{
						num16 *= -1f;
					}
					num16 *= num15;
					top.Y += num16;
					Vector2 vector5 = top - base.Center;
					if (vector5.Length() > num13)
					{
						vector5 = vector5.SafeNormalize(Vector2.Zero) * num13;
					}
					velocity = velocity.MoveTowards(vector5, maxAmountAllowedToMove);
					frame = 8;
					if (flag4)
					{
						frame = 10;
					}
					rotation += 0.6f * (float)spriteDirection;
				}
				else
				{
					ai[0] = 0f;
					ai[1] = 0f;
				}
				return;
			}
			if (ai[0] == 1f)
			{
				tileCollide = false;
				float num17 = 0.2f;
				float num18 = 10f;
				int num19 = 200;
				if (num18 < Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y))
				{
					num18 = Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y);
				}
				Vector2 vector6 = player.Center - base.Center;
				float num20 = vector6.Length();
				if (num20 > 2000f)
				{
					position = player.Center - new Vector2(width, height) / 2f;
				}
				if (num20 < (float)num19 && player.velocity.Y == 0f && position.Y + (float)height <= player.position.Y + (float)player.height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					netUpdate = true;
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
				}
				if (!(num20 < 60f))
				{
					vector6.Normalize();
					vector6 *= num18;
					if (velocity.X < vector6.X)
					{
						velocity.X += num17;
						if (velocity.X < 0f)
						{
							velocity.X += num17 * 1.5f;
						}
					}
					if (velocity.X > vector6.X)
					{
						velocity.X -= num17;
						if (velocity.X > 0f)
						{
							velocity.X -= num17 * 1.5f;
						}
					}
					if (velocity.Y < vector6.Y)
					{
						velocity.Y += num17;
						if (velocity.Y < 0f)
						{
							velocity.Y += num17 * 1.5f;
						}
					}
					if (velocity.Y > vector6.Y)
					{
						velocity.Y -= num17;
						if (velocity.Y > 0f)
						{
							velocity.Y -= num17 * 1.5f;
						}
					}
				}
				if (velocity.X != 0f)
				{
					spriteDirection = Math.Sign(velocity.X);
				}
				if (flag5)
				{
					frameCounter++;
					if (frameCounter > 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 2 || frame >= Main.projFrames[type])
					{
						frame = 2;
					}
					rotation = rotation.AngleTowards(rotation + 0.25f * (float)spriteDirection, 0.25f);
				}
				if (flag)
				{
					frameCounter++;
					if (frameCounter > 3)
					{
						frame++;
						frameCounter = 0;
					}
					if ((frame < 10) | (frame > 13))
					{
						frame = 10;
					}
					rotation = velocity.X * 0.1f;
				}
				if (flag2)
				{
					int num21 = 3;
					if (++frameCounter >= num21 * 4)
					{
						frameCounter = 0;
					}
					frame = 14 + frameCounter / num21;
					rotation = velocity.X * 0.15f;
				}
				if (flag3)
				{
					frame = 8;
					if (flag4)
					{
						frame = 10;
					}
					rotation += 0.6f * (float)spriteDirection;
				}
			}
			if (ai[0] == 2f && ai[1] < 0f)
			{
				friendly = false;
				ai[1] += 1f;
				if (num9 >= 0)
				{
					ai[1] = 0f;
					ai[0] = 0f;
					netUpdate = true;
					return;
				}
			}
			else if (ai[0] == 2f)
			{
				spriteDirection = direction;
				rotation = 0f;
				if (flag)
				{
					friendly = true;
					frame = 4 + (int)((float)num9 - ai[1]) / (num9 / 3);
					if (velocity.Y != 0f)
					{
						frame += 3;
					}
				}
				if (flag2)
				{
					float num22 = ((float)num9 - ai[1]) / (float)num9;
					if ((double)num22 > 0.25 && (double)num22 < 0.75)
					{
						friendly = true;
					}
					int num23 = (int)(num22 * 5f);
					if (num23 > 2)
					{
						num23 = 4 - num23;
					}
					if (velocity.Y != 0f)
					{
						frame = 21 + num23;
					}
					else
					{
						frame = 18 + num23;
					}
					if (velocity.Y == 0f)
					{
						velocity.X *= 0.8f;
					}
				}
				velocity.Y += 0.4f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
				ai[1] -= 1f;
				if (ai[1] <= 0f)
				{
					if (num8 <= 0)
					{
						ai[1] = 0f;
						ai[0] = 0f;
						netUpdate = true;
						return;
					}
					ai[1] = -num8;
				}
			}
			if (attackTarget >= 0)
			{
				float maxDistance2 = num;
				float num24 = 20f;
				if (flag2)
				{
					num24 = 50f;
				}
				NPC nPC2 = Main.npc[attackTarget];
				Vector2 center = nPC2.Center;
				vector = center;
				if (IsInRangeOfMeOrMyOwner(nPC2, maxDistance2, out var _, out var _, out var _))
				{
					shouldFallThrough = nPC2.Center.Y > base.Bottom.Y;
					bool flag11 = velocity.Y == 0f;
					if (wet && velocity.Y > 0f && !shouldFallThrough)
					{
						flag11 = true;
					}
					if (center.Y < base.Center.Y - 30f && flag11)
					{
						float num25 = (center.Y - base.Center.Y) * -1f;
						float num26 = 0.4f;
						float num27 = (float)Math.Sqrt(num25 * 2f * num26);
						if (num27 > 26f)
						{
							num27 = 26f;
						}
						velocity.Y = 0f - num27;
					}
					if (flag8 && Vector2.Distance(base.Center, vector) < num24)
					{
						if (velocity.Length() > 10f)
						{
							velocity /= velocity.Length() / 10f;
						}
						ai[0] = 2f;
						ai[1] = num9;
						netUpdate = true;
						direction = ((center.X - base.Center.X > 0f) ? 1 : (-1));
					}
					if (flag3)
					{
						Point point2 = nPC2.Top.ToTileCoordinates();
						int num28 = 0;
						int num29 = point2.Y;
						while (num28 < num4)
						{
							Tile tile2 = Main.tile[point2.X, num29];
							if (tile2 == null || tile2.active())
							{
								break;
							}
							num28++;
							num29++;
						}
						if (num28 >= num4)
						{
							ai[0] = 5f;
							ai[1] = 0f;
							netUpdate = true;
							return;
						}
						if (base.Hitbox.Intersects(nPC2.Hitbox) && velocity.Y >= 0f)
						{
							velocity.Y = -4f;
							velocity.X = direction * 10;
						}
					}
				}
				if (flag2)
				{
					int num30 = 1;
					if (center.X - base.Center.X < 0f)
					{
						num30 = -1;
					}
					vector.X += 20 * -num30;
				}
			}
			if (ai[0] == 0f && attackTarget < 0)
			{
				if (Main.player[owner].rocketDelay2 > 0)
				{
					ai[0] = 1f;
					netUpdate = true;
				}
				Vector2 vector7 = player.Center - base.Center;
				if (vector7.Length() > 2000f)
				{
					position = player.Center - new Vector2(width, height) / 2f;
				}
				else if (vector7.Length() > num2 || Math.Abs(vector7.Y) > num3)
				{
					ai[0] = 1f;
					netUpdate = true;
					if (velocity.Y > 0f && vector7.Y < 0f)
					{
						velocity.Y = 0f;
					}
					if (velocity.Y < 0f && vector7.Y > 0f)
					{
						velocity.Y = 0f;
					}
				}
			}
			if (ai[0] == 0f)
			{
				if (attackTarget < 0)
				{
					if (Distance(player.Center) > 60f && Distance(vector) > 60f && Math.Sign(vector.X - player.Center.X) != Math.Sign(base.Center.X - player.Center.X))
					{
						vector = player.Center;
					}
					Rectangle r = Utils.CenteredRectangle(vector, base.Size);
					for (int i = 0; i < 20; i++)
					{
						if (Collision.SolidCollision(r.TopLeft(), r.Width, r.Height))
						{
							break;
						}
						r.Y += 16;
						vector.Y += 16f;
					}
					Vector2 vector8 = Collision.TileCollision(player.Center - base.Size / 2f, vector - player.Center, width, height);
					vector = player.Center - base.Size / 2f + vector8;
					if (Distance(vector) < 32f)
					{
						float num31 = player.Center.Distance(vector);
						if (player.Center.Distance(base.Center) < num31)
						{
							vector = base.Center;
						}
					}
					Vector2 vector9 = player.Center - vector;
					if (vector9.Length() > num2 || Math.Abs(vector9.Y) > num3)
					{
						Rectangle r2 = Utils.CenteredRectangle(player.Center, base.Size);
						Vector2 vector10 = vector - player.Center;
						Vector2 vector11 = r2.TopLeft();
						for (float num32 = 0f; num32 < 1f; num32 += 0.05f)
						{
							Vector2 vector12 = r2.TopLeft() + vector10 * num32;
							if (Collision.SolidCollision(r2.TopLeft() + vector10 * num32, r.Width, r.Height))
							{
								break;
							}
							vector11 = vector12;
						}
						vector = vector11 + base.Size / 2f;
					}
				}
				tileCollide = true;
				float num33 = 0.5f;
				float num34 = 4f;
				float num35 = 4f;
				float num36 = 0.1f;
				if (flag5 && attackTarget != -1)
				{
					num33 = 0.65f;
					num34 = 5.5f;
					num35 = 5.5f;
				}
				if (flag && attackTarget != -1)
				{
					num33 = 1f;
					num34 = 8f;
					num35 = 8f;
				}
				if (flag2 && attackTarget != -1)
				{
					num33 = 0.7f;
					num34 = 6f;
					num35 = 6f;
				}
				if (flag3 && attackTarget != -1)
				{
					num33 = 0.7f;
					num34 = 6f;
					num35 = 6f;
				}
				if (num35 < Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y))
				{
					num35 = Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y);
					num33 = 0.7f;
				}
				int num37 = 0;
				bool flag12 = false;
				float num38 = vector.X - base.Center.X;
				Vector2 vector13 = vector - base.Center;
				if (type == 653 && Math.Abs(num38) < 150f)
				{
					rotation = rotation.AngleTowards(0f, 0.2f);
					velocity.X *= 0.9f;
					if ((double)Math.Abs(velocity.X) < 0.1)
					{
						velocity.X = 0f;
					}
				}
				else if (Math.Abs(num38) > 5f)
				{
					if (num38 < 0f)
					{
						num37 = -1;
						if (velocity.X > 0f - num34)
						{
							velocity.X -= num33;
						}
						else
						{
							velocity.X -= num36;
						}
					}
					else
					{
						num37 = 1;
						if (velocity.X < num34)
						{
							velocity.X += num33;
						}
						else
						{
							velocity.X += num36;
						}
					}
					bool flag13 = true;
					if (flag)
					{
						flag13 = false;
					}
					if (type == 653)
					{
						flag13 = false;
					}
					if (flag2 && attackTarget == -1)
					{
						flag13 = false;
					}
					if (flag3)
					{
						flag13 = vector13.Y < -80f;
					}
					if (flag5)
					{
						flag13 = attackTarget > -1 && Main.npc[attackTarget].Hitbox.Intersects(base.Hitbox);
					}
					if (flag13)
					{
						flag12 = true;
					}
				}
				else
				{
					velocity.X *= 0.9f;
					if (Math.Abs(velocity.X) < num33 * 2f)
					{
						velocity.X = 0f;
					}
				}
				bool flag14 = Math.Abs(vector13.X) >= 64f || (vector13.Y <= -48f && Math.Abs(vector13.X) >= 8f);
				if (num37 != 0 && flag14)
				{
					int num39 = (int)(position.X + (float)(width / 2)) / 16;
					int num40 = (int)position.Y / 16;
					num39 += num37;
					num39 += (int)velocity.X;
					for (int j = num40; j < num40 + height / 16 + 1; j++)
					{
						if (WorldGen.SolidTile(num39, j))
						{
							flag12 = true;
						}
					}
				}
				if (type == 500 && velocity.X != 0f)
				{
					flag12 = true;
				}
				if (type == 653 && Math.Abs(velocity.X) > 3f)
				{
					flag12 = true;
				}
				Collision.StepUp(ref position, ref velocity, width, height, ref stepSpeed, ref gfxOffY);
				float num41 = Utils.GetLerpValue(0f, 100f, vector13.Y, clamped: true) * Utils.GetLerpValue(-2f, -6f, velocity.Y, clamped: true);
				if (velocity.Y == 0f && flag12)
				{
					for (int k = 0; k < 3; k++)
					{
						int num42 = (int)(position.X + (float)(width / 2)) / 16;
						if (k == 0)
						{
							num42 = (int)position.X / 16;
						}
						if (k == 2)
						{
							num42 = (int)(position.X + (float)width) / 16;
						}
						int num43 = (int)(position.Y + (float)height) / 16;
						if (!WorldGen.SolidTile(num42, num43) && !Main.tile[num42, num43].halfBrick() && Main.tile[num42, num43].slope() <= 0 && (!TileID.Sets.Platforms[Main.tile[num42, num43].type] || !Main.tile[num42, num43].active() || Main.tile[num42, num43].inActive()))
						{
							continue;
						}
						try
						{
							num42 = (int)(position.X + (float)(width / 2)) / 16;
							num43 = (int)(position.Y + (float)(height / 2)) / 16;
							num42 += num37;
							num42 += (int)velocity.X;
							if (!WorldGen.SolidTile(num42, num43 - 1) && !WorldGen.SolidTile(num42, num43 - 2))
							{
								velocity.Y = -5.1f;
							}
							else if (!WorldGen.SolidTile(num42, num43 - 2))
							{
								velocity.Y = -7.1f;
							}
							else if (WorldGen.SolidTile(num42, num43 - 5))
							{
								velocity.Y = -11.1f;
							}
							else if (WorldGen.SolidTile(num42, num43 - 4))
							{
								velocity.Y = -10.1f;
							}
							else
							{
								velocity.Y = -9.1f;
							}
						}
						catch
						{
							velocity.Y = -9.1f;
						}
					}
					if (vector.Y - base.Center.Y < -48f)
					{
						float num44 = vector.Y - base.Center.Y;
						num44 *= -1f;
						if (num44 < 60f)
						{
							velocity.Y = -6f;
						}
						else if (num44 < 80f)
						{
							velocity.Y = -7f;
						}
						else if (num44 < 100f)
						{
							velocity.Y = -8f;
						}
						else if (num44 < 120f)
						{
							velocity.Y = -9f;
						}
						else if (num44 < 140f)
						{
							velocity.Y = -10f;
						}
						else if (num44 < 160f)
						{
							velocity.Y = -11f;
						}
						else if (num44 < 190f)
						{
							velocity.Y = -12f;
						}
						else if (num44 < 210f)
						{
							velocity.Y = -13f;
						}
						else if (num44 < 270f)
						{
							velocity.Y = -14f;
						}
						else if (num44 < 310f)
						{
							velocity.Y = -15f;
						}
						else
						{
							velocity.Y = -16f;
						}
					}
					if (wet && num41 == 0f)
					{
						velocity.Y *= 2f;
					}
				}
				if (velocity.X > num35)
				{
					velocity.X = num35;
				}
				if (velocity.X < 0f - num35)
				{
					velocity.X = 0f - num35;
				}
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				if (velocity.X == 0f)
				{
					direction = ((player.Center.X > base.Center.X) ? 1 : (-1));
				}
				if (velocity.X > num33 && num37 == 1)
				{
					direction = 1;
				}
				if (velocity.X < 0f - num33 && num37 == -1)
				{
					direction = -1;
				}
				spriteDirection = direction;
				if (flag5)
				{
					if (velocity.Y == 0f)
					{
						rotation = rotation.AngleTowards(0f, 0.3f);
						if (velocity.X == 0f)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if (Math.Abs(velocity.X) >= 0.5f)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 10)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame < 2 || frame >= Main.projFrames[type])
							{
								frame = 2;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (velocity.Y != 0f)
					{
						rotation = Math.Min(4f, velocity.Y) * -0.1f;
						if (spriteDirection == -1)
						{
							rotation -= (float)Math.PI * 2f;
						}
						frameCounter = 0;
						frame = 1;
					}
				}
				if (flag)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						if (velocity.X == 0f)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if (Math.Abs(velocity.X) >= 0.5f)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 10)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 4)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (velocity.Y != 0f)
					{
						frameCounter = 0;
						frame = 14;
					}
				}
				if (flag2)
				{
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						if (velocity.X == 0f)
						{
							int num45 = 4;
							if (++frameCounter >= 7 * num45 && Main.rand.Next(50) == 0)
							{
								frameCounter = 0;
							}
							int num46 = frameCounter / num45;
							if (num46 >= 4)
							{
								num46 = 6 - num46;
							}
							if (num46 < 0)
							{
								num46 = 0;
							}
							frame = 1 + num46;
						}
						else if (Math.Abs(velocity.X) >= 0.5f)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							int num47 = 15;
							int num48 = 8;
							if (frameCounter >= num48 * num47)
							{
								frameCounter = 0;
							}
							int num49 = frameCounter / num47;
							frame = num49 + 5;
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (velocity.Y != 0f)
					{
						if (velocity.Y < 0f)
						{
							if (frame > 9 || frame < 5)
							{
								frame = 5;
								frameCounter = 0;
							}
							if (++frameCounter >= 1 && frame < 9)
							{
								frame++;
								frameCounter = 0;
							}
						}
						else
						{
							if (frame > 13 || frame < 9)
							{
								frame = 9;
								frameCounter = 0;
							}
							if (++frameCounter >= 2 && frame < 11)
							{
								frame++;
								frameCounter = 0;
							}
						}
					}
				}
				if (flag3)
				{
					int num50 = 8;
					if (flag4)
					{
						num50 = 10;
					}
					rotation = 0f;
					if (velocity.Y == 0f)
					{
						if (velocity.X == 0f)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if (Math.Abs(velocity.X) >= 0.5f)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 10)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= num50 || frame < 2)
							{
								frame = 2;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (velocity.Y != 0f)
					{
						frameCounter = 0;
						frame = 1;
						if (flag4)
						{
							frame = 9;
						}
					}
				}
				velocity.Y += 0.4f + num41 * 1f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			if (!flag)
			{
				return;
			}
			localAI[0] += 1f;
			if (velocity.X == 0f)
			{
				localAI[0] += 1f;
			}
			if (localAI[0] >= (float)Main.rand.Next(900, 1200))
			{
				localAI[0] = 0f;
				for (int l = 0; l < 6; l++)
				{
					int num51 = Dust.NewDust(base.Center + Vector2.UnitX * -direction * 8f - Vector2.One * 5f + Vector2.UnitY * 8f, 3, 6, 216, -direction, 1f);
					Main.dust[num51].velocity /= 2f;
					Main.dust[num51].scale = 0.8f;
				}
				int num52 = Gore.NewGore(base.Center + Vector2.UnitX * -direction * 8f, Vector2.Zero, Main.rand.Next(580, 583));
				Main.gore[num52].velocity /= 2f;
				Main.gore[num52].velocity.Y = Math.Abs(Main.gore[num52].velocity.Y);
				Main.gore[num52].velocity.X = (0f - Math.Abs(Main.gore[num52].velocity.X)) * (float)direction;
			}
		}

		private void AI_157_SharpTears()
		{
			int num = 5;
			float num2 = 1f;
			int num3 = 30;
			int num4 = 30;
			int num5 = 2;
			int num6 = 2;
			int num7 = 20;
			int num8 = 20;
			int num9 = 30;
			int maxValue = 6;
			if (type == 961)
			{
				num = 16;
				num2 = 0.75f;
				num3 = 5;
				num4 = 5;
				num5 = 0;
				num6 = 0;
				num7 = 10;
				num8 = 10;
				num9 = 20;
				maxValue = 5;
			}
			bool flag = ai[0] < (float)num7;
			bool flag2 = ai[0] >= (float)num8;
			bool flag3 = ai[0] >= (float)num9;
			ai[0] += 1f;
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				rotation = velocity.ToRotation();
				frame = Main.rand.Next(maxValue);
				for (int i = 0; i < num3; i++)
				{
					Dust dust = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), num, velocity * num2 * MathHelper.Lerp(0.2f, 0.7f, Main.rand.NextFloat()));
					dust.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
				}
				for (int j = 0; j < num4; j++)
				{
					Dust dust2 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), num, Main.rand.NextVector2Circular(2f, 2f) + velocity * num2 * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat()));
					dust2.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust2.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
					dust2.fadeIn = 1f;
				}
				if (type == 961)
				{
					SoundEngine.PlaySound(SoundID.DeerclopsIceAttack, base.Center);
				}
				else
				{
					SoundEngine.PlaySound(SoundID.Item60, base.Center);
				}
			}
			if (flag)
			{
				Opacity += 0.1f;
				scale = Opacity * ai[1];
				for (int k = 0; k < num5; k++)
				{
					Dust dust3 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f), num, velocity * num2 * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat()));
					dust3.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust3.velocity *= 0.5f;
					dust3.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
				}
			}
			if (flag2)
			{
				Opacity -= 0.2f;
				for (int l = 0; l < num6; l++)
				{
					Dust dust4 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f), num, velocity * num2 * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat()));
					dust4.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
					dust4.velocity *= 0.5f;
					dust4.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
				}
			}
			if (flag3)
			{
				Kill();
			}
			if (type == 756)
			{
				Lighting.AddLight(base.Center, new Vector3(0.5f, 0.1f, 0.1f) * scale);
			}
		}

		public bool IsInRangeOfMeOrMyOwner(Entity entity, float maxDistance, out float myDistance, out float playerDistance, out bool closerIsMe)
		{
			myDistance = Vector2.Distance(entity.Center, base.Center);
			if (myDistance < maxDistance && !CanHitWithOwnBody(entity))
			{
				myDistance = float.PositiveInfinity;
			}
			playerDistance = Vector2.Distance(entity.Center, Main.player[owner].Center);
			if (playerDistance < maxDistance && !CanHitWithMeleeWeapon(entity))
			{
				playerDistance = float.PositiveInfinity;
			}
			closerIsMe = myDistance < playerDistance;
			if (closerIsMe)
			{
				return myDistance <= maxDistance;
			}
			return playerDistance <= maxDistance;
		}

		private void AI_156_BatOfLight()
		{
			List<int> ai156_blacklistedTargets = _ai156_blacklistedTargets;
			Player player = Main.player[owner];
			bool num = type == 755;
			bool flag = type == 946;
			if (num)
			{
				if (player.dead)
				{
					player.batsOfLight = false;
				}
				if (player.batsOfLight)
				{
					timeLeft = 2;
				}
				DelegateMethods.v3_1 = AI_156_GetColor().ToVector3();
				Point point = base.Center.ToTileCoordinates();
				DelegateMethods.CastLightOpen(point.X, point.Y);
				if (++frameCounter >= 6)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type] - 1)
					{
						frame = 0;
					}
				}
				int num2 = player.direction;
				if (velocity.X != 0f)
				{
					num2 = Math.Sign(velocity.X);
				}
				spriteDirection = num2;
			}
			if (flag)
			{
				if (player.dead)
				{
					player.empressBlade = false;
				}
				if (player.empressBlade)
				{
					timeLeft = 2;
				}
				DelegateMethods.v3_1 = AI_156_GetColor().ToVector3();
				Point point2 = base.Center.ToTileCoordinates();
				DelegateMethods.CastLightOpen(point2.X, point2.Y);
			}
			ai156_blacklistedTargets.Clear();
			AI_156_Think(ai156_blacklistedTargets);
		}

		public Color AI_156_GetColor()
		{
			if (aiStyle != 156)
			{
				return Color.Transparent;
			}
			bool num = type == 755;
			_ = type;
			if (num)
			{
				return Color.Crimson;
			}
			return Color.Transparent;
		}

		private void AI_156_Think(List<int> blacklist)
		{
			bool flag = type == 755;
			bool flag2 = type == 946;
			int num = 60;
			int num2 = num - 1;
			int num3 = num + 60;
			int num4 = num3 - 1;
			int num5 = num + 1;
			if (flag)
			{
				num = 66;
			}
			if (flag2)
			{
				num = 40;
				num2 = num - 1;
				num3 = num + 40;
				num4 = num3 - 1;
				num5 = num + 1;
			}
			Player player = Main.player[owner];
			if (player.active && Vector2.Distance(player.Center, base.Center) > 2000f)
			{
				ai[0] = 0f;
				ai[1] = 0f;
				netUpdate = true;
			}
			if (ai[0] == -1f)
			{
				AI_GetMyGroupIndexAndFillBlackList(blacklist, out var index, out var totalIndexesInGroup);
				AI_156_GetIdlePosition(index, totalIndexesInGroup, out var idleSpot, out var idleRotation);
				velocity = Vector2.Zero;
				base.Center = base.Center.MoveTowards(idleSpot, 32f);
				rotation = rotation.AngleLerp(idleRotation, 0.2f);
				if (Distance(idleSpot) < 2f)
				{
					ai[0] = 0f;
					netUpdate = true;
				}
				return;
			}
			if (ai[0] == 0f)
			{
				if (flag)
				{
					AI_GetMyGroupIndexAndFillBlackList(blacklist, out var index2, out var totalIndexesInGroup2);
					AI_156_GetIdlePosition(index2, totalIndexesInGroup2, out var idleSpot2, out var _);
					velocity = Vector2.Zero;
					base.Center = Vector2.SmoothStep(base.Center, idleSpot2, 0.45f);
					if (Main.rand.Next(20) == 0)
					{
						int num6 = AI_156_TryAttackingNPCs(blacklist);
						if (num6 != -1)
						{
							ai[0] = num;
							ai[1] = num6;
							netUpdate = true;
							return;
						}
					}
				}
				if (!flag2)
				{
					return;
				}
				AI_GetMyGroupIndexAndFillBlackList(blacklist, out var index3, out var totalIndexesInGroup3);
				AI_156_GetIdlePosition(index3, totalIndexesInGroup3, out var idleSpot3, out var idleRotation3);
				velocity = Vector2.Zero;
				base.Center = Vector2.SmoothStep(base.Center, idleSpot3, 0.45f);
				rotation = rotation.AngleLerp(idleRotation3, 0.45f);
				if (Main.rand.Next(20) == 0)
				{
					int num7 = AI_156_TryAttackingNPCs(blacklist);
					if (num7 != -1)
					{
						ai[0] = Main.rand.NextFromList<int>(num, num3);
						ai[0] = num3;
						ai[1] = num7;
						netUpdate = true;
					}
				}
				return;
			}
			if (flag)
			{
				int num8 = (int)ai[1];
				if (!Main.npc.IndexInRange(num8))
				{
					ai[0] = 0f;
					netUpdate = true;
					return;
				}
				NPC nPC = Main.npc[num8];
				if (!nPC.CanBeChasedBy(this))
				{
					ai[0] = 0f;
					netUpdate = true;
					return;
				}
				ai[0] -= 1f;
				if (ai[0] >= (float)num2)
				{
					velocity *= 0.8f;
					if (ai[0] == (float)num2)
					{
						localAI[0] = base.Center.X;
						localAI[1] = base.Center.Y;
					}
					return;
				}
				float lerpValue = Utils.GetLerpValue(num2, 0f, ai[0], clamped: true);
				Vector2 vector = new Vector2(localAI[0], localAI[1]);
				if (lerpValue >= 0.5f)
				{
					vector = Main.player[owner].Center;
				}
				Vector2 center = nPC.Center;
				float num9 = (center - vector).ToRotation();
				float num10 = ((center.X > vector.X) ? (-(float)Math.PI) : ((float)Math.PI));
				float num11 = num10 + (0f - num10) * lerpValue * 2f;
				Vector2 vector2 = num11.ToRotationVector2();
				vector2.Y *= (float)Math.Sin((float)identity * 2.3f) * 0.5f;
				vector2 = vector2.RotatedBy(num9);
				float num12 = (center - vector).Length() / 2f;
				Vector2 vector4 = (base.Center = Vector2.Lerp(vector, center, 0.5f) + vector2 * num12);
				Vector2 vector5 = (velocity = MathHelper.WrapAngle(num9 + num11 + 0f).ToRotationVector2() * 10f);
				position -= velocity;
				if (ai[0] == 0f)
				{
					int num13 = AI_156_TryAttackingNPCs(blacklist);
					if (num13 != -1)
					{
						ai[0] = num;
						ai[1] = num13;
						netUpdate = true;
						return;
					}
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			if (!flag2)
			{
				return;
			}
			bool skipBodyCheck = true;
			int num14 = 0;
			int num15 = num2;
			int num16 = 0;
			if (ai[0] >= (float)num5)
			{
				num14 = 1;
				num15 = num4;
				num16 = num5;
			}
			int num17 = (int)ai[1];
			if (!Main.npc.IndexInRange(num17))
			{
				int num18 = AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
				if (num18 != -1)
				{
					ai[0] = Main.rand.NextFromList<int>(num, num3);
					ai[1] = num18;
					netUpdate = true;
				}
				else
				{
					ai[0] = -1f;
					ai[1] = 0f;
					netUpdate = true;
				}
				return;
			}
			NPC nPC2 = Main.npc[num17];
			if (!nPC2.CanBeChasedBy(this))
			{
				int num19 = AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
				if (num19 != -1)
				{
					ai[0] = Main.rand.NextFromList<int>(num, num3);
					ai[1] = num19;
					netUpdate = true;
				}
				else
				{
					ai[0] = -1f;
					ai[1] = 0f;
					netUpdate = true;
				}
				return;
			}
			ai[0] -= 1f;
			if (ai[0] >= (float)num15)
			{
				direction = ((base.Center.X < nPC2.Center.X) ? 1 : (-1));
				if (ai[0] == (float)num15)
				{
					localAI[0] = base.Center.X;
					localAI[1] = base.Center.Y;
				}
			}
			float lerpValue2 = Utils.GetLerpValue(num15, num16, ai[0], clamped: true);
			if (num14 == 0)
			{
				Vector2 vector6 = new Vector2(localAI[0], localAI[1]);
				if (lerpValue2 >= 0.5f)
				{
					vector6 = Vector2.Lerp(nPC2.Center, Main.player[owner].Center, 0.5f);
				}
				Vector2 center2 = nPC2.Center;
				float num20 = (center2 - vector6).ToRotation();
				float num21 = ((direction == 1) ? (-(float)Math.PI) : ((float)Math.PI));
				float num22 = num21 + (0f - num21) * lerpValue2 * 2f;
				Vector2 vector7 = num22.ToRotationVector2();
				vector7.Y *= 0.5f;
				vector7.Y *= 0.8f + (float)Math.Sin((float)identity * 2.3f) * 0.2f;
				vector7 = vector7.RotatedBy(num20);
				float num23 = (center2 - vector6).Length() / 2f;
				Vector2 vector9 = (base.Center = Vector2.Lerp(vector6, center2, 0.5f) + vector7 * num23);
				float num24 = MathHelper.WrapAngle(num20 + num22 + 0f);
				rotation = num24 + (float)Math.PI / 2f;
				Vector2 vector10 = (velocity = num24.ToRotationVector2() * 10f);
				position -= velocity;
			}
			if (num14 == 1)
			{
				Vector2 vector11 = new Vector2(localAI[0], localAI[1]);
				vector11 += new Vector2(0f, Utils.GetLerpValue(0f, 0.4f, lerpValue2, clamped: true) * -100f);
				Vector2 v = nPC2.Center - vector11;
				Vector2 vector12 = v.SafeNormalize(Vector2.Zero) * MathHelper.Clamp(v.Length(), 60f, 150f);
				Vector2 value = nPC2.Center + vector12;
				float lerpValue3 = Utils.GetLerpValue(0.4f, 0.6f, lerpValue2, clamped: true);
				float lerpValue4 = Utils.GetLerpValue(0.6f, 1f, lerpValue2, clamped: true);
				float targetAngle = v.SafeNormalize(Vector2.Zero).ToRotation() + (float)Math.PI / 2f;
				rotation = rotation.AngleTowards(targetAngle, (float)Math.PI / 5f);
				base.Center = Vector2.Lerp(vector11, nPC2.Center, lerpValue3);
				if (lerpValue4 > 0f)
				{
					base.Center = Vector2.Lerp(nPC2.Center, value, lerpValue4);
				}
			}
			if (ai[0] == (float)num16)
			{
				int num25 = AI_156_TryAttackingNPCs(blacklist, skipBodyCheck);
				if (num25 != -1)
				{
					ai[0] = Main.rand.NextFromList<int>(num, num3);
					ai[1] = num25;
					netUpdate = true;
				}
				else
				{
					ai[0] = -1f;
					ai[1] = 0f;
					netUpdate = true;
				}
			}
		}

		private int AI_156_TryAttackingNPCs(List<int> blackListedTargets, bool skipBodyCheck = false)
		{
			Vector2 center = Main.player[owner].Center;
			int result = -1;
			float num = -1f;
			NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
			{
				bool flag = true;
				if (!ownerMinionAttackTargetNPC.boss && blackListedTargets.Contains(ownerMinionAttackTargetNPC.whoAmI))
				{
					flag = false;
				}
				if (ownerMinionAttackTargetNPC.Distance(center) > 1000f)
				{
					flag = false;
				}
				if (!skipBodyCheck && !CanHitWithOwnBody(ownerMinionAttackTargetNPC))
				{
					flag = false;
				}
				if (flag)
				{
					return ownerMinionAttackTargetNPC.whoAmI;
				}
			}
			for (int i = 0; i < 200; i++)
			{
				NPC nPC = Main.npc[i];
				if (nPC.CanBeChasedBy(this) && (nPC.boss || !blackListedTargets.Contains(i)))
				{
					float num2 = nPC.Distance(center);
					if (!(num2 > 1000f) && (!(num2 > num) || num == -1f) && (skipBodyCheck || CanHitWithOwnBody(nPC)))
					{
						num = num2;
						result = i;
					}
				}
			}
			return result;
		}

		private void AI_GetMyGroupIndexAndFillBlackList(List<int> blackListedTargets, out int index, out int totalIndexesInGroup)
		{
			index = 0;
			totalIndexesInGroup = 0;
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == owner && projectile.type == type && (projectile.type != 759 || projectile.frame == Main.projFrames[projectile.type] - 1))
				{
					if (whoAmI > i)
					{
						index++;
					}
					totalIndexesInGroup++;
				}
			}
		}

		private void AI_156_GetIdlePosition(int stackedIndex, int totalIndexes, out Vector2 idleSpot, out float idleRotation)
		{
			Player player = Main.player[owner];
			bool num = type == 755;
			bool flag = type == 946;
			idleRotation = 0f;
			idleSpot = Vector2.Zero;
			if (num)
			{
				float num2 = ((float)totalIndexes - 1f) / 2f;
				idleSpot = player.Center + -Vector2.UnitY.RotatedBy(4.3982296f / (float)totalIndexes * ((float)stackedIndex - num2)) * 40f;
				idleRotation = 0f;
			}
			if (flag)
			{
				int num3 = stackedIndex + 1;
				idleRotation = (float)num3 * ((float)Math.PI * 2f) * 0.0166666675f * (float)player.direction + (float)Math.PI / 2f;
				idleRotation = MathHelper.WrapAngle(idleRotation);
				int num4 = num3 % totalIndexes;
				Vector2 vector = new Vector2(0f, 0.5f).RotatedBy((player.miscCounterNormalized * (2f + (float)num4) + (float)num4 * 0.5f + (float)player.direction * 1.3f) * ((float)Math.PI * 2f)) * 4f;
				idleSpot = idleRotation.ToRotationVector2() * 10f + player.MountedCenter + new Vector2(player.direction * (num3 * -6 - 16), player.gravDir * -15f);
				idleSpot += vector;
				idleRotation += (float)Math.PI / 2f;
			}
		}

		private void AI_155_MysticSnakeCoil()
		{
			if (Main.netMode != 1 && !Main.player[owner].active)
			{
				float num = ai[0];
				float y = position.Y;
				Point point = base.Center.ToTileCoordinates();
				Point end = new Point(point.X, (int)y / 16);
				Point start = new Point(point.X, (int)num / 16);
				AI_155_RemoveRope(start, end);
				Kill();
				return;
			}
			int num2 = 80;
			int num3 = 1800;
			if (ai[1] == 0f)
			{
				spriteDirection = ((!(Main.player[owner].Center.X > base.Center.X)) ? 1 : (-1));
				ai[1] = 1f;
				velocity.Y = -5f;
			}
			if (ai[1] == 1f)
			{
				if (Main.rand.Next(6) == 0)
				{
					Dust dust = Dust.NewDustDirect(base.TopLeft + new Vector2(-6f, 0f), 24, 16, 27, 0f, 0f, 150, Color.Transparent, 0.6f);
					dust.velocity *= 1f;
					dust.velocity.X *= 0.5f;
					dust.velocity.Y = -3f;
					dust.fadeIn = 1.2f;
					dust.noGravity = true;
				}
				alpha = Utils.Clamp(alpha - 5, 0, 255);
				if (++frameCounter >= 12)
				{
					frameCounter = 0;
					if (++frame >= 4)
					{
						frame = 0;
					}
				}
				if (Main.myPlayer == owner)
				{
					float num4 = ai[0];
					float y2 = position.Y;
					Point point2 = base.Center.ToTileCoordinates();
					Point point3 = new Point(point2.X, (int)y2 / 16);
					Point point4 = new Point(point2.X, (int)num4 / 16);
					bool flag = point4.Y - point3.Y >= num2;
					int x = point4.X;
					if (!WorldGen.InWorld(x, point3.Y, 40) || !WorldGen.InWorld(x, point4.Y, 40))
					{
						flag = true;
					}
					if (!flag)
					{
						for (int num5 = point4.Y; num5 >= point3.Y; num5--)
						{
							if (Main.tile[x, num5].active() && !Main.tileCut[Main.tile[x, num5].type] && Main.tile[x, num5].type != 504)
							{
								flag = true;
								break;
							}
						}
					}
					if (flag)
					{
						int num6 = 0;
						for (int num7 = point4.Y; num7 > point3.Y; num7--)
						{
							if ((WorldGen.TileEmpty(x, num7) || Main.tileCut[Main.tile[x, num7].type]) && WorldGen.PlaceTile(x, num7, 504, mute: false, forced: false, owner))
							{
								num6++;
								if (Main.netMode == 1)
								{
									NetMessage.SendData(17, -1, -1, null, 1, x, num7, 504f);
								}
							}
						}
						timeLeft = num3;
						ai[1] = 2f;
						netUpdate = true;
						base.Top = new Vector2(x * 16 + 8, point3.Y * 16 + 16);
						velocity = Vector2.Zero;
					}
				}
			}
			if (ai[1] != 2f)
			{
				return;
			}
			alpha = 0;
			_ = timeLeft;
			float num8 = ai[0];
			float y3 = position.Y;
			Point point5 = base.Center.ToTileCoordinates();
			Point end2 = new Point(point5.X, (int)y3 / 16);
			Point start2 = new Point(point5.X, (int)num8 / 16);
			int x2 = start2.X;
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				for (int num9 = start2.Y; num9 >= end2.Y; num9--)
				{
					Tile tile = Main.tile[x2, num9];
					if (tile.active() && tile.type == 504)
					{
						AI_155_SpawnRopeIn(x2, num9);
					}
				}
			}
			else
			{
				for (int num10 = start2.Y; num10 >= end2.Y; num10--)
				{
					Tile tile2 = Main.tile[x2, num10];
					if (tile2.active() && tile2.type == 504 && Main.rand.Next(80) == 0)
					{
						Dust dust2 = Dust.NewDustDirect(new Vector2(x2 * 16 - 6, num10 * 16), 28, 16, 27, 0f, 0f, 150, Color.Transparent, 0.6f);
						dust2.velocity *= 1f;
						dust2.velocity.X = 0f;
						dust2.fadeIn = 1.2f;
						dust2.noGravity = true;
					}
				}
			}
			if (timeLeft == 4)
			{
				for (int num11 = start2.Y; num11 >= end2.Y; num11--)
				{
					Tile tile3 = Main.tile[x2, num11];
					if (tile3.active() && tile3.type == 504)
					{
						AI_155_SpawnRopeIn(x2, num11);
					}
				}
			}
			if (timeLeft > 4)
			{
				return;
			}
			if (!WorldGen.InWorld(x2, end2.Y, 20) || !WorldGen.InWorld(x2, start2.Y, 20))
			{
				Kill();
				return;
			}
			if (Main.myPlayer == owner)
			{
				AI_155_RemoveRope(start2, end2);
			}
			Kill();
		}

		private void AI_155_RemoveRope(Point start, Point end)
		{
			int x = start.X;
			for (int num = start.Y; num >= end.Y; num--)
			{
				Tile tile = Main.tile[x, num];
				if (tile.active() && tile.type == 504)
				{
					WorldGen.KillTile(x, num);
					if (Main.netMode != 0)
					{
						NetMessage.SendData(17, -1, -1, null, 0, x, num);
					}
				}
			}
		}

		private void AI_155_SpawnRopeIn(int x, int y)
		{
			Vector2 vector = new Vector2(x * 16 + 8, y * 16 + 8);
			if (Main.rand.Next(4) != 0)
			{
				Gore gore = Gore.NewGoreDirect(vector, Vector2.Zero, Main.rand.Next(61, 64));
				gore.velocity = Main.rand.NextVector2Circular(1.5f, 0.8f);
				gore.velocity.X += 0.1f * (float)((gore.velocity.X > 0f) ? 1 : (-1));
				gore.position = vector - new Vector2(16f, 16f);
				gore.alpha = 170;
			}
			for (int i = 0; i < 5; i++)
			{
				if (Main.rand.Next(8) == 0)
				{
					Dust.NewDustDirect(vector + new Vector2(-8f), 16, 16, 31, 0f, 0f, 100, Color.Transparent).velocity *= 0.4f;
				}
				Dust dust = Dust.NewDustDirect(vector + new Vector2(-8f), 16, 16, 27, 0f, 0f, 100, Color.Transparent, 1.7f);
				dust.velocity *= 2f;
				dust.noGravity = true;
			}
		}

		private void AI_154_VoidLens()
		{
			Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = true;
			if (owner == Main.myPlayer)
			{
				for (int i = 0; i < 1000; i++)
				{
					if (i == whoAmI)
					{
						continue;
					}
					Projectile projectile = Main.projectile[i];
					if (projectile.active && projectile.owner == owner && projectile.type == type)
					{
						if (timeLeft < Main.projectile[i].timeLeft)
						{
							Kill();
							return;
						}
						Main.projectile[i].Kill();
					}
				}
			}
			velocity *= 0.94f;
			direction = 1;
			if (++frameCounter >= 5)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (Opacity < 1f)
			{
				Opacity += 0.03f;
				if (Opacity > 1f)
				{
					Opacity = 1f;
				}
			}
			new VoidLensHelper(this).Update();
		}

		private void AI_153_ToiletPop()
		{
			Vector2 center = base.Center;
			float speedY = -2f;
			int num = 0;
			int num2 = 0;
			if (ai[0] == 0f)
			{
				num = 6;
				num2 = 1;
			}
			else
			{
				if (!(ai[0] <= 10f))
				{
					Kill();
					return;
				}
				if (Main.rand.Next(5) == 0)
				{
					num2 = 1;
				}
				num = 2;
			}
			ai[0] += 1f;
			for (int i = 0; i < num; i++)
			{
				Dust dust = Dust.NewDustDirect(center, 3, 6, 216, 0f, speedY);
				dust.velocity.X *= 0.5f;
				dust.velocity.Y = 0f - Math.Abs(dust.velocity.Y);
				dust.position -= dust.velocity;
				dust.scale = 0.8f;
			}
			for (int j = 0; j < num2; j++)
			{
				Gore gore = Gore.NewGoreDirect(center, Vector2.UnitY * -3f + Main.rand.NextVector2Circular(1f, 1f), Main.rand.Next(580, 583));
				gore.velocity.Y = 0f - Math.Abs(gore.velocity.Y);
			}
		}

		private void AI_150_GolfClubHelper()
		{
			Player player = Main.player[owner];
			if (!player.active)
			{
				Kill();
				return;
			}
			if (player.gravDir == -1f)
			{
				player.SetDummyItemTime(0);
				Kill();
				return;
			}
			bool flag = false;
			Rectangle rectangle = Utils.CenteredRectangle(player.Center, new Vector2(500f, 500f));
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == Main.myPlayer && ProjectileID.Sets.IsAGolfBall[projectile.type] && rectangle.Contains(projectile.Center.ToPoint()))
				{
					flag = true;
					break;
				}
			}
			if (!flag && owner == Main.myPlayer && ai[0] == 0f)
			{
				player.TryPlacingAGolfBallNearANearbyTee(Main.player[owner].Center);
			}
			if (!player.channel && ai[0] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item1, player.Center);
				for (int j = 0; j < 1000; j++)
				{
					Projectile projectile2 = Main.projectile[j];
					Vector2 shotVector = Main.MouseWorld - projectile2.Center;
					if (!projectile2.active || !ProjectileID.Sets.IsAGolfBall[projectile2.type] || projectile2.owner != owner || !GolfHelper.ValidateShot(projectile2, player, ref shotVector))
					{
						continue;
					}
					float num = Main.rand.NextFloatDirection();
					for (float num2 = 0f; num2 < 1f; num2 += 0.1f)
					{
						Dust dust = Dust.NewDustPerfect(projectile2.Center, 31, ((float)Math.PI * 2f * num2 + num).ToRotationVector2() * 0.8f, 127);
						dust.fadeIn = 0f;
						if (num2 % 0.2f == 0f)
						{
							dust.velocity *= 0.4f;
						}
					}
					SoundEngine.PlaySound(SoundID.Item126, projectile2.Center);
					if (owner == Main.myPlayer)
					{
						GolfHelper.ShotStrength shotStrength = GolfHelper.CalculateShotStrength(this, projectile2);
						Vector2 vector = Vector2.Normalize(shotVector) * shotStrength.AbsoluteStrength;
						GolfHelper.HitGolfBall(projectile2, vector, shotStrength.RoughLandResistance);
						NetMessage.SendData(27, -1, -1, null, j);
					}
				}
				ai[0] = 1f;
				ai[1] = 0f;
				netUpdate = true;
			}
			if (ai[0] == 1f)
			{
				ai[1] += 1f;
				float num3 = player.HeldItem.useAnimation + 30;
				if (ai[1] >= num3)
				{
					Kill();
					return;
				}
				velocity = Vector2.Zero;
				player.ChangeDir(direction);
				player.heldProj = whoAmI;
				int num4 = player.HeldItem.useAnimation - (int)ai[1];
				if (num4 < 2)
				{
					num4 = 2;
				}
				player.SetDummyItemTime(num4);
			}
			if (ai[0] != 0f)
			{
				return;
			}
			if (owner == Main.myPlayer)
			{
				Vector2 mouseWorld = Main.MouseWorld;
				if (mouseWorld != base.Center)
				{
					netUpdate = true;
					base.Center = mouseWorld;
				}
				if (Main.mouseRight && Main.mouseRightRelease)
				{
					Kill();
					player.mouseInterface = true;
					Main.blockMouse = true;
					player.SetItemTime(0);
					player.itemAnimation = 0;
					player.itemAnimationMax = 0;
					player.reuseDelay = 0;
					return;
				}
			}
			if (position != oldPosition)
			{
				if (base.Center.X - player.Center.X > 0f)
				{
					direction = 1;
				}
				else
				{
					direction = -1;
				}
			}
			velocity = Vector2.Zero;
			player.ChangeDir(direction);
			player.heldProj = whoAmI;
			ai[1] += 1f;
			int num5 = player.HeldItem.useAnimation * 4;
			if (ai[1] > (float)(num5 * 3))
			{
				ai[1] = num5;
			}
			int num6 = player.HeldItem.useAnimation + Math.Min(num5, (int)ai[1]);
			if (num6 < 2)
			{
				num6 = 2;
			}
			player.SetDummyItemTime(num6);
		}

		public Color GetCeleb2Color()
		{
			switch ((int)ai[0])
			{
			case 0:
				return Color.Red;
			case 1:
				return Color.DarkOrange;
			case 2:
				return Color.Gold;
			case 3:
				return Color.LimeGreen;
			case 4:
				return Color.RoyalBlue;
			case 5:
				return new Color(80, 20, 180);
			case 6:
				return Color.HotPink;
			default:
				return Color.Transparent;
			}
		}

		private void AI_007_GrapplingHooks()
		{
			if (Main.player[owner].dead || Main.player[owner].stoned || Main.player[owner].webbed || Main.player[owner].frozen)
			{
				Kill();
				return;
			}
			Vector2 mountedCenter = Main.player[owner].MountedCenter;
			Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num = mountedCenter.X - vector.X;
			float num2 = mountedCenter.Y - vector.Y;
			float num3 = (float)Math.Sqrt(num * num + num2 * num2);
			rotation = (float)Math.Atan2(num2, num) - 1.57f;
			if (ai[0] == 2f && type == 865)
			{
				float num4 = (float)Math.PI / 2f;
				int num5 = (int)Math.Round(rotation / num4);
				rotation = (float)num5 * num4;
			}
			if (Main.myPlayer == owner)
			{
				int num6 = (int)(base.Center.X / 16f);
				int num7 = (int)(base.Center.Y / 16f);
				if (num6 > 0 && num7 > 0 && num6 < Main.maxTilesX && num7 < Main.maxTilesY && Main.tile[num6, num7].nactive() && TileID.Sets.CrackedBricks[Main.tile[num6, num7].type] && Main.rand.Next(16) == 0)
				{
					WorldGen.KillTile(num6, num7);
					if (Main.netMode != 0)
					{
						NetMessage.SendData(17, -1, -1, null, 20, num6, num7);
					}
				}
			}
			if (num3 > 2500f)
			{
				Kill();
			}
			if (type == 256)
			{
				rotation = (float)Math.Atan2(num2, num) + 3.92500019f;
			}
			if (type == 446)
			{
				Lighting.AddLight(mountedCenter, 0f, 0.4f, 0.3f);
				localAI[0] += 1f;
				if (localAI[0] >= 28f)
				{
					localAI[0] = 0f;
				}
				DelegateMethods.v3_1 = new Vector3(0f, 0.4f, 0.3f);
				Utils.PlotTileLine(base.Center, mountedCenter, 8f, DelegateMethods.CastLightOpen);
			}
			if (type == 652 && ++frameCounter >= 7)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (type >= 646 && type <= 649)
			{
				Vector3 vector2 = Vector3.Zero;
				switch (type)
				{
				case 646:
					vector2 = new Vector3(0.7f, 0.5f, 0.1f);
					break;
				case 647:
					vector2 = new Vector3(0f, 0.6f, 0.7f);
					break;
				case 648:
					vector2 = new Vector3(0.6f, 0.2f, 0.6f);
					break;
				case 649:
					vector2 = new Vector3(0.6f, 0.6f, 0.9f);
					break;
				}
				Lighting.AddLight(mountedCenter, vector2);
				Lighting.AddLight(base.Center, vector2);
				DelegateMethods.v3_1 = vector2;
				Utils.PlotTileLine(base.Center, mountedCenter, 8f, DelegateMethods.CastLightOpen);
			}
			if (ai[0] == 0f)
			{
				if ((num3 > 300f && type == 13) || (num3 > 400f && type == 32) || (num3 > 440f && type == 73) || (num3 > 440f && type == 74) || (num3 > 300f && type == 165) || (num3 > 350f && type == 256) || (num3 > 500f && type == 315) || (num3 > 550f && type == 322) || (num3 > 400f && type == 331) || (num3 > 550f && type == 332) || (num3 > 400f && type == 372) || (num3 > 300f && type == 396) || (num3 > 550f && type >= 646 && type <= 649) || (num3 > 600f && type == 652) || (num3 > 300f && type == 865) || (num3 > 500f && type == 935) || (num3 > 480f && type >= 486 && type <= 489) || (num3 > 500f && type == 446))
				{
					ai[0] = 1f;
				}
				else if (type >= 230 && type <= 235)
				{
					int num8 = 300 + (type - 230) * 30;
					if (num3 > (float)num8)
					{
						ai[0] = 1f;
					}
				}
				else if (type == 753)
				{
					int num9 = 420;
					if (num3 > (float)num9)
					{
						ai[0] = 1f;
					}
				}
				Vector2 vector3 = base.Center - new Vector2(5f);
				Vector2 vector4 = base.Center + new Vector2(5f);
				Point point = (vector3 - new Vector2(16f)).ToTileCoordinates();
				Point point2 = (vector4 + new Vector2(32f)).ToTileCoordinates();
				int num10 = point.X;
				int num11 = point2.X;
				int num12 = point.Y;
				int num13 = point2.Y;
				if (num10 < 0)
				{
					num10 = 0;
				}
				if (num11 > Main.maxTilesX)
				{
					num11 = Main.maxTilesX;
				}
				if (num12 < 0)
				{
					num12 = 0;
				}
				if (num13 > Main.maxTilesY)
				{
					num13 = Main.maxTilesY;
				}
				Player player = Main.player[owner];
				List<Point> list = new List<Point>();
				for (int i = 0; i < player.grapCount; i++)
				{
					Projectile projectile = Main.projectile[player.grappling[i]];
					if (projectile.aiStyle != 7 || projectile.ai[0] != 2f)
					{
						continue;
					}
					Point pt = projectile.Center.ToTileCoordinates();
					Tile tileSafely = Framing.GetTileSafely(pt);
					if (tileSafely.type != 314 && !TileID.Sets.Platforms[tileSafely.type])
					{
						continue;
					}
					for (int j = -2; j <= 2; j++)
					{
						for (int k = -2; k <= 2; k++)
						{
							Point point3 = new Point(pt.X + j, pt.Y + k);
							Tile tileSafely2 = Framing.GetTileSafely(point3);
							if (tileSafely2.type == 314 || TileID.Sets.Platforms[tileSafely2.type])
							{
								list.Add(point3);
							}
						}
					}
				}
				Vector2 vector5 = default(Vector2);
				for (int l = num10; l < num11; l++)
				{
					for (int m = num12; m < num13; m++)
					{
						if (Main.tile[l, m] == null)
						{
							Main.tile[l, m] = new Tile();
						}
						vector5.X = l * 16;
						vector5.Y = m * 16;
						if (!(vector3.X + 10f > vector5.X) || !(vector3.X < vector5.X + 16f) || !(vector3.Y + 10f > vector5.Y) || !(vector3.Y < vector5.Y + 16f))
						{
							continue;
						}
						Tile tile = Main.tile[l, m];
						if (!tile.nactive() || !AI_007_GrapplingHooks_CanTileBeLatchedOnTo(tile) || list.Contains(new Point(l, m)) || (type == 403 && tile.type != 314) || Main.player[owner].IsBlacklistedForGrappling(new Point(l, m)))
						{
							continue;
						}
						if (Main.player[owner].grapCount < 10)
						{
							Main.player[owner].grappling[Main.player[owner].grapCount] = whoAmI;
							Main.player[owner].grapCount++;
						}
						if (Main.myPlayer != owner)
						{
							continue;
						}
						int num14 = 0;
						int num15 = -1;
						int num16 = 100000;
						if (type == 73 || type == 74)
						{
							for (int n = 0; n < 1000; n++)
							{
								if (n != whoAmI && Main.projectile[n].active && Main.projectile[n].owner == owner && Main.projectile[n].aiStyle == 7 && Main.projectile[n].ai[0] == 2f)
								{
									Main.projectile[n].Kill();
								}
							}
						}
						else
						{
							int num17 = 3;
							if (type == 165)
							{
								num17 = 8;
							}
							if (type == 256)
							{
								num17 = 2;
							}
							if (type == 372)
							{
								num17 = 2;
							}
							if (type == 652)
							{
								num17 = 1;
							}
							if (type >= 646 && type <= 649)
							{
								num17 = 4;
							}
							for (int num18 = 0; num18 < 1000; num18++)
							{
								if (Main.projectile[num18].active && Main.projectile[num18].owner == owner && Main.projectile[num18].aiStyle == 7)
								{
									if (Main.projectile[num18].timeLeft < num16)
									{
										num15 = num18;
										num16 = Main.projectile[num18].timeLeft;
									}
									num14++;
								}
							}
							if (num14 > num17)
							{
								Main.projectile[num15].Kill();
							}
						}
						WorldGen.KillTile(l, m, fail: true, effectOnly: true);
						SoundEngine.PlaySound(0, l * 16, m * 16);
						velocity.X = 0f;
						velocity.Y = 0f;
						ai[0] = 2f;
						position.X = l * 16 + 8 - width / 2;
						position.Y = m * 16 + 8 - height / 2;
						Rectangle? tileVisualHitbox = WorldGen.GetTileVisualHitbox(l, m);
						if (tileVisualHitbox.HasValue)
						{
							base.Center = tileVisualHitbox.Value.Center.ToVector2();
						}
						damage = 0;
						netUpdate = true;
						if (Main.myPlayer == owner)
						{
							if (type == 935)
							{
								Main.player[owner].DoQueenSlimeHookTeleport(base.Center);
							}
							NetMessage.SendData(13, -1, -1, null, owner);
						}
						break;
					}
					if (ai[0] == 2f)
					{
						break;
					}
				}
			}
			else if (ai[0] == 1f)
			{
				float num19 = 11f;
				if (type == 32)
				{
					num19 = 15f;
				}
				if (type == 73 || type == 74)
				{
					num19 = 17f;
				}
				if (type == 315)
				{
					num19 = 20f;
				}
				if (type == 322)
				{
					num19 = 22f;
				}
				if (type >= 230 && type <= 235)
				{
					num19 = 11f + (float)(type - 230) * 0.75f;
				}
				if (type == 753)
				{
					num19 = 15f;
				}
				if (type == 446)
				{
					num19 = 20f;
				}
				if (type >= 486 && type <= 489)
				{
					num19 = 18f;
				}
				if (type >= 646 && type <= 649)
				{
					num19 = 24f;
				}
				if (type == 652)
				{
					num19 = 24f;
				}
				if (type == 332)
				{
					num19 = 17f;
				}
				if (num3 < 24f)
				{
					Kill();
				}
				num3 = num19 / num3;
				num *= num3;
				num2 *= num3;
				velocity.X = num;
				velocity.Y = num2;
			}
			else if (ai[0] == 2f)
			{
				Point point4 = base.Center.ToTileCoordinates();
				if (Main.tile[point4.X, point4.Y] == null)
				{
					Main.tile[point4.X, point4.Y] = new Tile();
				}
				bool flag = true;
				if (Main.tile[point4.X, point4.Y].nactive() && AI_007_GrapplingHooks_CanTileBeLatchedOnTo(Main.tile[point4.X, point4.Y]))
				{
					flag = false;
				}
				if (flag)
				{
					ai[0] = 1f;
				}
				else if (Main.player[owner].grapCount < 10)
				{
					Main.player[owner].grappling[Main.player[owner].grapCount] = whoAmI;
					Main.player[owner].grapCount++;
				}
			}
		}

		private bool AI_007_GrapplingHooks_CanTileBeLatchedOnTo(Tile theTile)
		{
			return Main.tileSolid[theTile.type] | (theTile.type == 314) | (type == 865 && TileID.Sets.IsATreeTrunk[theTile.type]) | (type == 865 && theTile.type == 323);
		}

		private void AI_147_Celeb2Rocket()
		{
			int num = 0;
			int num2 = 1;
			int num3 = 1;
			localAI[num] += 1f;
			alpha = 0;
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
			int num4 = (int)ai[0];
			Lighting.AddLight(base.Center, GetCeleb2Color().ToVector3() * 0.5f);
			switch (num4)
			{
			case 0:
				if (localAI[num] >= 20f)
				{
					velocity.Y += 0.12f;
					penetrate = -1;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				if (localAI[num] > 20f && localAI[num] % 20f == 0f)
				{
					AI_147_Explosion();
				}
				break;
			case 1:
			{
				if (localAI[num] == 10f)
				{
					velocity.Y -= 10f;
				}
				if (localAI[num] >= 10f)
				{
					velocity.Y += 0.25f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				if (!(localAI[num] >= 10f))
				{
					break;
				}
				scale += 0.015f;
				if (scale > 2.5f)
				{
					scale = 2.5f;
				}
				if (localAI[num] % 10f != 0f)
				{
					break;
				}
				_ = velocity.Y;
				_ = 0f;
				for (float num5 = 0f; num5 < 1f; num5 += 0.12f)
				{
					Vector2 spinningpoint = Vector2.UnitX * -8f;
					spinningpoint += -Vector2.UnitY.RotatedBy(num5 * ((float)Math.PI * 2f)) * new Vector2(2f, 4f);
					spinningpoint = spinningpoint.RotatedBy(rotation - (float)Math.PI / 2f);
					int num6 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, Color.Lerp(GetCeleb2Color(), Color.White, Main.rand.NextFloat() * 0.3f));
					Main.dust[num6].scale = 0.9f;
					Main.dust[num6].fadeIn = 1.1f;
					Main.dust[num6].noGravity = true;
					Main.dust[num6].position = base.Center + spinningpoint;
					Main.dust[num6].velocity = -velocity * 0.35f + spinningpoint * 0.35f;
					Main.dust[num6].velocity *= scale;
					if (localAI[num] == 10f)
					{
						Main.dust[num6].velocity = spinningpoint.RotatedBy(velocity.ToRotation()) * 0.3f;
					}
				}
				break;
			}
			case 2:
				if (localAI[num] >= 60f)
				{
					velocity.Y += 0.15f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				break;
			case 3:
			{
				float num7 = localAI[num2];
				if (num7 == 0f)
				{
					float num8 = velocity.Length();
					localAI[num2] = num8;
					num7 = num8;
				}
				if (localAI[num] >= 25f && ai[num3] == 0f)
				{
					if (localAI[num] >= 20f)
					{
						velocity.Y += 0.15f;
					}
					if (velocity.Y > 16f)
					{
						velocity.Y = 16f;
					}
				}
				if (!(localAI[num] >= 20f))
				{
					break;
				}
				float num9 = position.X;
				float num10 = position.Y;
				float num11 = 800f;
				bool flag = false;
				int num12 = 0;
				if (ai[num3] == 0f)
				{
					for (int i = 0; i < 200; i++)
					{
						if (Main.npc[i].CanBeChasedBy(this) && (ai[num3] == 0f || ai[num3] == (float)(i + 1)))
						{
							float num13 = Main.npc[i].position.X + (float)(Main.npc[i].width / 2);
							float num14 = Main.npc[i].position.Y + (float)(Main.npc[i].height / 2);
							float num15 = Math.Abs(position.X + (float)(width / 2) - num13) + Math.Abs(position.Y + (float)(height / 2) - num14);
							if (num15 < num11 && Collision.CanHit(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), 1, 1, Main.npc[i].position, Main.npc[i].width, Main.npc[i].height))
							{
								num11 = num15;
								num9 = num13;
								num10 = num14;
								flag = true;
								num12 = i;
							}
						}
					}
					if (flag)
					{
						ai[1] = num12 + 1;
					}
					flag = false;
				}
				if (ai[num3] != 0f)
				{
					int num16 = (int)(ai[num3] - 1f);
					if (Main.npc[num16].active && Main.npc[num16].CanBeChasedBy(this, ignoreDontTakeDamage: true))
					{
						float num17 = Main.npc[num16].position.X + (float)(Main.npc[num16].width / 2);
						float num18 = Main.npc[num16].position.Y + (float)(Main.npc[num16].height / 2);
						if (Math.Abs(position.X + (float)(width / 2) - num17) + Math.Abs(position.Y + (float)(height / 2) - num18) < 1000f)
						{
							flag = true;
							num9 = Main.npc[num16].position.X + (float)(Main.npc[num16].width / 2);
							num10 = Main.npc[num16].position.Y + (float)(Main.npc[num16].height / 2);
						}
					}
				}
				if (!friendly)
				{
					flag = false;
				}
				if (flag)
				{
					float num19 = num7;
					Vector2 vector2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num20 = num9 - vector2.X;
					float num21 = num10 - vector2.Y;
					float num22 = (float)Math.Sqrt(num20 * num20 + num21 * num21);
					num22 = num19 / num22;
					num20 *= num22;
					num21 *= num22;
					int num23 = 8;
					velocity.X = (velocity.X * (float)(num23 - 1) + num20) / (float)num23;
					velocity.Y = (velocity.Y * (float)(num23 - 1) + num21) / (float)num23;
				}
				break;
			}
			case 4:
			{
				if (localAI[num] == 1f && ai[1] == 1f)
				{
					localAI[num] += 45f;
				}
				float x = velocity.SafeNormalize(Vector2.Zero).RotatedBy(localAI[num] * ((float)Math.PI / 45f)).X;
				Vector2 vector = velocity.SafeNormalize(Vector2.Zero).RotatedBy(1.5707963705062866);
				position += vector * x * 3f;
				scale = 2f;
				if (localAI[num] >= 10f)
				{
					velocity.Y += 0.04f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				break;
			}
			case 5:
				if (localAI[num] >= 40f)
				{
					velocity.Y += 0.08f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				break;
			case 6:
				if (localAI[num] >= 30f)
				{
					velocity.Y += 0.1f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
				break;
			}
		}

		private void AI_148_StarSpawner()
		{
			if (Main.dayTime)
			{
				Kill();
				return;
			}
			ai[0] += Main.dayRate;
			if (localAI[0] == 0f && Main.netMode != 2)
			{
				localAI[0] = 1f;
				if ((double)Main.LocalPlayer.position.Y < Main.worldSurface * 16.0)
				{
					Star.StarFall(position.X);
				}
			}
			if (owner != Main.myPlayer || !(ai[0] >= 180f))
			{
				return;
			}
			if (ai[1] > -1f)
			{
				velocity.X *= 0.35f;
				if (base.Center.X < Main.player[(int)ai[1]].Center.X)
				{
					velocity.X = Math.Abs(velocity.X);
				}
				else
				{
					velocity.X = 0f - Math.Abs(velocity.X);
				}
			}
			NewProjectile(GetProjectileSource_FromThis(), position.X, position.Y, velocity.X, velocity.Y, 12, 1000, 10f, Main.myPlayer);
			Kill();
		}

		private void AI_147_Explosion()
		{
			switch ((int)ai[0])
			{
			case 0:
			{
				for (int k = 0; k < 4; k++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int l = 0; l < 20; l++)
				{
					int num5 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 130, 0f, 0f, 200, default(Color), 1.2f);
					Main.dust[num5].noGravity = true;
					Main.dust[num5].velocity *= 3f;
					num5 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 130, 0f, 0f, 200, default(Color), 0.5f);
					Main.dust[num5].velocity *= 1.2f;
					Main.dust[num5].noGravity = true;
				}
				for (int m = 0; m < 1; m++)
				{
					int num6 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num6].velocity *= 0.3f;
					Main.gore[num6].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num6].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				break;
			}
			case 1:
			{
				Color celeb2Color2 = GetCeleb2Color();
				Vector2 center2 = base.Center;
				Main.rand.NextFloat();
				for (float num7 = 0f; num7 < 1f; num7 += 0.0125f)
				{
					Dust dust4 = Dust.NewDustPerfect(center2, 278, null, 200, Color.Lerp(celeb2Color2, Color.White, Main.rand.NextFloat() * 0.6f));
					dust4.scale = 1.1f;
					dust4.fadeIn = 1.3f;
					dust4.velocity *= Main.rand.NextFloat() * 2f + 2f;
					if (dust4.velocity.Y > 0f)
					{
						dust4.velocity *= 0.3f;
					}
					dust4.velocity *= 2f;
				}
				for (int n = 0; n < 3; n++)
				{
					int num8 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num8].velocity *= 0.3f;
					Main.gore[num8].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num8].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				int fluff = 20;
				int distFluff = 100;
				int layerStart = 2;
				int layerEnd = 10;
				int layerJump = 2;
				CreateGroundExplosion(40f, fluff, distFluff, layerStart, layerEnd, layerJump);
				break;
			}
			case 2:
			{
				Vector2 center3 = base.Center;
				Color celeb2Color3 = GetCeleb2Color();
				float num9 = 0.05f;
				float num10 = 0.13f;
				bool flag = Main.rand.Next(4) == 0;
				if (flag)
				{
					num9 = 0.1f;
					num10 = 0.1f;
				}
				float num11 = Main.rand.NextFloatDirection();
				for (float num12 = 0f; num12 < 5f; num12 += 1f)
				{
					Vector2 spinningpoint = new Vector2(0f, -100f);
					Vector2 vector4 = center3 + spinningpoint.RotatedBy(num11 + num12 * ((float)Math.PI * 2f / 5f));
					Vector2 vector5 = center3 + spinningpoint.RotatedBy(num11 + (num12 + 1f) * ((float)Math.PI * 2f / 5f));
					Vector2 vector6 = center3 + spinningpoint.RotatedBy(num11 + (num12 + 0.5f) * ((float)Math.PI * 2f / 5f)) * 0.4f;
					for (int num13 = 0; num13 < 2; num13++)
					{
						Vector2 value = vector4;
						Vector2 value2 = vector6;
						if (num13 == 1)
						{
							value = vector6;
							value2 = vector5;
						}
						for (float num14 = 0f; num14 < 1f; num14 += num10)
						{
							Vector2 vector7 = Vector2.Lerp(value, value2, num14);
							Vector2 vector8 = Vector2.Lerp(vector7, center3, 0.9f);
							Vector2 vector9 = (vector7 - vector8).SafeNormalize(Vector2.Zero);
							Dust dust5 = Dust.NewDustPerfect(vector8, 267, Vector2.Zero, 0, celeb2Color3, 0.5f);
							dust5.fadeIn = 1.2f;
							dust5.noGravity = true;
							dust5.velocity = vector9 * Vector2.Distance(vector7, vector8) * num9;
						}
					}
				}
				if (flag)
				{
					for (int num15 = 0; num15 < 4; num15++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					}
					for (int num16 = 0; num16 < 60; num16++)
					{
						int num17 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 2.5f);
						Main.dust[num17].noGravity = true;
						Main.dust[num17].velocity *= 8f;
						num17 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 1.5f);
						Main.dust[num17].velocity *= 4.2f;
						Main.dust[num17].noGravity = true;
					}
					for (int num18 = 0; num18 < 1; num18++)
					{
						int num19 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num19].velocity *= 0.3f;
						Main.gore[num19].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
						Main.gore[num19].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
					}
				}
				else
				{
					for (int num20 = 0; num20 < 4; num20++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					}
					for (int num21 = 0; num21 < 40; num21++)
					{
						int num22 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 2.5f);
						Main.dust[num22].noGravity = true;
						Main.dust[num22].velocity *= 4f;
						num22 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 200, default(Color), 1.5f);
						Main.dust[num22].velocity *= 2.2f;
						Main.dust[num22].noGravity = true;
					}
					for (int num23 = 0; num23 < 1; num23++)
					{
						int num24 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num24].velocity *= 0.3f;
						Main.gore[num24].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
						Main.gore[num24].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
					}
				}
				break;
			}
			case 3:
			{
				Color celeb2Color5 = GetCeleb2Color();
				Vector2 center4 = base.Center;
				for (int num27 = 0; num27 < 4; num27++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				float num28 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
				for (int num29 = 0; num29 < 40; num29++)
				{
					Dust dust6 = Dust.NewDustPerfect(center4, 278, null, 100, Color.Lerp(celeb2Color5, Color.White, Main.rand.NextFloat() * 0.3f));
					dust6.scale = 1.3f * (dust6.velocity.Length() / 2f);
					dust6.fadeIn = 1.5f * (dust6.velocity.Length() / 2f);
					dust6.noGravity = true;
					dust6.velocity *= 6f;
					if (Math.Abs(dust6.velocity.X) > Math.Abs(dust6.velocity.Y))
					{
						dust6.velocity.Y *= 0.1f;
					}
					else
					{
						dust6.velocity.X *= 0.1f;
					}
					dust6.velocity = dust6.velocity.RotatedBy(num28);
				}
				for (int num30 = 0; num30 < 1; num30++)
				{
					int num31 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num31].velocity *= 0.3f;
					Main.gore[num31].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num31].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				break;
			}
			case 4:
			{
				GetCeleb2Color();
				Vector2 center5 = base.Center;
				Main.rand.NextFloat();
				for (float num32 = 0f; num32 < 1f; num32 += 0.025f)
				{
					Dust dust7 = Dust.NewDustPerfect(center5, 132, null, 200);
					dust7.scale = 1.1f;
					dust7.fadeIn = 1.5f;
					dust7.velocity *= Main.rand.NextFloat() * 2f + 2f;
					if (dust7.velocity.Y > 0f)
					{
						dust7.velocity *= 0.3f;
					}
					dust7.velocity *= 2f;
				}
				for (int num33 = 0; num33 < 3; num33++)
				{
					int num34 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num34].velocity *= 0.3f;
					Main.gore[num34].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num34].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				break;
			}
			case 5:
			{
				Color celeb2Color4 = GetCeleb2Color();
				_ = base.Center;
				for (int num25 = 0; num25 < 20; num25++)
				{
					int num26 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 278, 0f, 0f, 200, Color.Lerp(celeb2Color4, Color.White, Main.rand.NextFloat() * 0.4f), 2.5f);
					Main.dust[num26].fadeIn = 1.3f;
					Main.dust[num26].scale = 1.1f;
					Main.dust[num26].velocity *= 2f;
					num26 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 200, celeb2Color4, 2.5f);
					Main.dust[num26].velocity *= 1.2f;
					Main.dust[num26].noGravity = true;
				}
				break;
			}
			case 6:
			{
				Color celeb2Color = GetCeleb2Color();
				Vector2 center = base.Center;
				for (int i = 0; i < 4; i++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (float num = 0f; num < 1f; num += 0.015f)
				{
					Vector2 vector = Vector2.UnitY.RotatedBy(num * ((float)Math.PI * 2f)) * (1f + Main.rand.NextFloatDirection() * 0.1f);
					Dust dust = Dust.NewDustPerfect(center + vector, 134, Vector2.Zero, 0, celeb2Color);
					dust.scale = 1.4f;
					dust.velocity = vector * 5f;
					dust.velocity.Y += -3f;
					dust.velocity *= 2f;
				}
				for (float num2 = 0f; num2 < 1f; num2 += 0.025f)
				{
					Vector2 vector2 = Vector2.UnitY.RotatedBy(num2 * ((float)Math.PI * 2f)) * (1f + Main.rand.NextFloatDirection() * 0.2f);
					Dust dust2 = Dust.NewDustPerfect(center + vector2, 267, Vector2.Zero, 0, celeb2Color);
					dust2.noGravity = true;
					dust2.scale = 0.4f;
					dust2.fadeIn = 1.2f;
					dust2.velocity = vector2 * 4f;
					dust2.velocity.Y += -3f;
					dust2.velocity *= 2f;
				}
				for (float num3 = 0f; num3 < 1f; num3 += 0.07f)
				{
					Vector2 vector3 = Vector2.UnitY.RotatedBy(num3 * ((float)Math.PI * 2f)) * (1f + Main.rand.NextFloatDirection() * 0.3f);
					Dust dust3 = Dust.NewDustPerfect(center + vector3, 267, Vector2.Zero, 0, celeb2Color);
					dust3.noGravity = true;
					dust3.scale = 0.4f;
					dust3.fadeIn = 1.3f;
					dust3.velocity = vector3 * 7f;
					dust3.velocity.Y += -3f;
					dust3.velocity *= 2f;
				}
				for (int j = 0; j < 1; j++)
				{
					int num4 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num4].velocity *= 0.3f;
					Main.gore[num4].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num4].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				break;
			}
			}
		}

		private void CreateGroundExplosion(float MAX_SPREAD, int fluff, int distFluff, int layerStart, int layerEnd, int layerJump)
		{
			Point point = base.TopLeft.ToTileCoordinates();
			Point point2 = base.BottomRight.ToTileCoordinates();
			point.X -= fluff;
			point.Y -= fluff;
			point2.X += fluff;
			point2.Y += fluff;
			int num = point.X / 2 + point2.X / 2;
			int num2 = width / 2 + distFluff;
			for (int i = layerStart; i < layerEnd; i += layerJump)
			{
				int num3 = i;
				for (int j = point.X; j <= point2.X; j++)
				{
					for (int k = point.Y; k <= point2.Y; k++)
					{
						if (!WorldGen.InWorld(j, k, 10))
						{
							return;
						}
						if (Vector2.Distance(base.Center, new Vector2(j * 16, k * 16)) > (float)num2)
						{
							continue;
						}
						Tile tileSafely = Framing.GetTileSafely(j, k);
						if (!tileSafely.active() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type] || Main.tileFrameImportant[tileSafely.type])
						{
							continue;
						}
						Tile tileSafely2 = Framing.GetTileSafely(j, k - 1);
						if (tileSafely2.active() && Main.tileSolid[tileSafely2.type] && !Main.tileSolidTop[tileSafely2.type])
						{
							continue;
						}
						int num4 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely);
						for (int l = 0; l < num4; l++)
						{
							Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(j, k, tileSafely)];
							obj.velocity.Y -= 3f + (float)num3 * 1.5f;
							obj.velocity.Y *= Main.rand.NextFloat();
							obj.scale += (float)num3 * 0.03f;
						}
						if (num3 >= 2)
						{
							for (int m = 0; m < num4 - 1; m++)
							{
								Dust obj2 = Main.dust[WorldGen.KillTile_MakeTileDust(j, k, tileSafely)];
								obj2.velocity.Y -= 1f + (float)num3;
								obj2.velocity.Y *= Main.rand.NextFloat();
							}
						}
						if (num4 > 0 && Main.rand.Next(3) != 0)
						{
							float num5 = (float)Math.Abs(num - j) / (MAX_SPREAD / 2f);
							Gore gore = Gore.NewGoreDirect(position, Vector2.Zero, 61 + Main.rand.Next(3), 1f - (float)num3 * 0.15f + num5 * 0.5f);
							gore.velocity.Y -= 0.1f + (float)num3 * 0.5f + num5 * (float)num3 * 1f;
							gore.velocity.Y *= Main.rand.NextFloat();
							gore.position = new Vector2(j * 16 + 20, k * 16 + 20);
						}
					}
				}
			}
		}

		public void CheckUsability(Player player, ref bool currentlyUsable)
		{
			if (aiStyle == 160)
			{
				currentlyUsable = false;
			}
		}

		private void AI_163_Chum()
		{
			float num = 0.05f;
			float num2 = width / 2;
			for (int i = 0; i < 1000; i++)
			{
				if (i != whoAmI && Main.projectile[i].active && Main.projectile[i].type == type && Math.Abs(position.X - Main.projectile[i].position.X) + Math.Abs(position.Y - Main.projectile[i].position.Y) < num2)
				{
					if (position.X < Main.projectile[i].position.X)
					{
						velocity.X -= num;
					}
					else
					{
						velocity.X += num;
					}
					if (position.Y < Main.projectile[i].position.Y)
					{
						velocity.Y -= num;
					}
					else
					{
						velocity.Y += num;
					}
				}
			}
			if (wet)
			{
				velocity.X *= 0.9f;
				int num3 = (int)(base.Center.X + (float)((width / 2 + 8) * direction)) / 16;
				int num4 = (int)(base.Center.Y / 16f);
				_ = position.Y / 16f;
				int num5 = (int)((position.Y + (float)height) / 16f);
				if (Main.tile[num3, num4] == null)
				{
					Main.tile[num3, num4] = new Tile();
				}
				if (Main.tile[num3, num5] == null)
				{
					Main.tile[num3, num5] = new Tile();
				}
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.5f;
				}
				num3 = (int)(base.Center.X / 16f);
				num4 = (int)(base.Center.Y / 16f);
				float num6 = AI_061_FishingBobber_GetWaterLine(num3, num4);
				if (base.Center.Y > num6)
				{
					velocity.Y -= 0.1f;
					if (velocity.Y < -8f)
					{
						velocity.Y = -8f;
					}
					if (base.Center.Y + velocity.Y < num6)
					{
						velocity.Y = num6 - base.Center.Y;
					}
				}
				else
				{
					velocity.Y = num6 - base.Center.Y;
				}
			}
			else
			{
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.95f;
				}
				velocity.X *= 0.98f;
				velocity.Y += 0.3f;
				if (velocity.Y > 15.9f)
				{
					velocity.Y = 15.9f;
				}
			}
			if (frameCounter == 0)
			{
				frameCounter = 1;
				frame = Main.rand.Next(4);
			}
			if (frameCounter < 10 && wet)
			{
				frameCounter++;
				for (float num7 = 0f; num7 < 1f; num7 += 0.5f)
				{
					Gore gore = Gore.NewGoreDirect(position + Vector2.UnitY * 6f, Vector2.Zero, 1201, scale * 0.7f);
					gore.velocity = Main.rand.NextVector2CircularEdge(10f, 10f);
					if (gore.velocity.Y > 0f)
					{
						gore.velocity.Y *= -1f;
					}
				}
				for (float num8 = 0f; num8 < 2f; num8 += 1f)
				{
					Gore gore2 = Gore.NewGoreDirect(position + Vector2.UnitY * 6f, Vector2.Zero, 1208, scale * 0.7f + Main.rand.NextFloat() * 0.15f);
					gore2.velocity = Main.rand.NextVector2CircularEdge(4f, 4f);
					if (gore2.velocity.Y > 0f)
					{
						gore2.velocity.Y *= -1f;
					}
				}
			}
			scale = Utils.GetLerpValue(0f, 60f, timeLeft, clamped: true);
			rotation += velocity.X * 0.14f;
			bool flag = !wet && velocity.Length() < 0.8f;
			int maxValue = (wet ? 90 : 5);
			if (Main.rand.Next(maxValue) == 0 && !flag)
			{
				Gore gore3 = Gore.NewGoreDirect(position + Vector2.UnitY * 6f, Vector2.Zero, 1201, scale * 0.7f);
				if (wet)
				{
					gore3.velocity = Vector2.UnitX * Main.rand.NextFloatDirection() * 0.75f + Vector2.UnitY * Main.rand.NextFloat();
				}
				else if (gore3.velocity.Y < 0f)
				{
					gore3.velocity.Y = 0f - gore3.velocity.Y;
				}
			}
			Vector2 spot = base.Center + Vector2.UnitY * 16f;
			if (ai[0] >= 10f && timeLeft > 60)
			{
				timeLeft = 60;
				netUpdate = true;
			}
			if (ai[0] < 10f && timeLeft > 60)
			{
				Main.instance.ChumBucketProjectileHelper.AddChumLocation(spot);
			}
		}

		private void ReduceRemainingChumsInPool()
		{
			int x = (int)base.Center.X / 16;
			int num = (int)base.Center.Y / 16;
			List<Tuple<int, Point>> list = new List<Tuple<int, Point>>();
			List<int> list2 = new List<int>();
			for (int i = 0; i < 1000; i++)
			{
				Projectile projectile = Main.projectile[i];
				if (projectile.active && projectile.owner == Main.myPlayer && projectile.timeLeft > 60 && projectile.type == 820)
				{
					list.Add(new Tuple<int, Point>(i, (projectile.Center + Vector2.UnitY * 16f).ToTileCoordinates()));
				}
			}
			if (list.Count == 0)
			{
				return;
			}
			GetFishingPondWidth(x, num, out var minX, out var maxX);
			Point point = default(Point);
			for (int j = minX; j <= maxX; j++)
			{
				point.X = j;
				int num2 = num;
				while (Main.tile[j, num2].liquid > 0 && !WorldGen.SolidTile(j, num2) && num2 < Main.maxTilesY - 10)
				{
					num2 = (point.Y = num2 + 1);
					for (int num3 = list.Count - 1; num3 >= 0; num3--)
					{
						if (list[num3].Item2 == point)
						{
							list2.Add(list[num3].Item1);
							list.RemoveAt(num3);
						}
					}
					if (list.Count == 0)
					{
						break;
					}
				}
				if (list.Count == 0)
				{
					break;
				}
			}
			for (int k = 0; k < list2.Count; k++)
			{
				Projectile obj = Main.projectile[list2[k]];
				obj.ai[0] += 1f;
				obj.netUpdate = true;
			}
		}

		private void AI_061_FishingBobber()
		{
			Player player = Main.player[owner];
			timeLeft = 60;
			bool flag = false;
			if (player.inventory[player.selectedItem].fishingPole == 0 || player.CCed || player.noItems)
			{
				flag = true;
			}
			else if (player.inventory[player.selectedItem].shoot != type)
			{
				flag = true;
			}
			else if (player.pulley)
			{
				flag = true;
			}
			else if (player.dead)
			{
				flag = true;
			}
			if (flag)
			{
				Kill();
				return;
			}
			if (ai[1] > 0f && localAI[1] != 0f)
			{
				localAI[1] = 0f;
				if (!lavaWet && !honeyWet)
				{
					AI_061_FishingBobber_DoASplash();
				}
			}
			if (ai[0] >= 1f)
			{
				if (ai[0] == 2f)
				{
					ai[0] += 1f;
					SoundEngine.PlaySound(SoundID.Item17, position);
					if (!lavaWet && !honeyWet)
					{
						AI_061_FishingBobber_DoASplash();
					}
				}
				if (localAI[0] < 100f)
				{
					localAI[0] += 1f;
				}
				if (frameCounter == 0)
				{
					frameCounter = 1;
					ReduceRemainingChumsInPool();
				}
				tileCollide = false;
				int num = 10;
				Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num2 = player.position.X + (float)(player.width / 2) - vector.X;
				float num3 = player.position.Y + (float)(player.height / 2) - vector.Y;
				float num4 = (float)Math.Sqrt(num2 * num2 + num3 * num3);
				if (num4 > 3000f)
				{
					Kill();
				}
				num4 = 15.9f / num4;
				num2 *= num4;
				num3 *= num4;
				velocity.X = (velocity.X * (float)(num - 1) + num2) / (float)num;
				velocity.Y = (velocity.Y * (float)(num - 1) + num3) / (float)num;
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				if (Main.myPlayer == owner && base.Hitbox.Intersects(player.Hitbox))
				{
					Kill();
				}
				return;
			}
			bool flag2 = false;
			Vector2 vector2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
			float num5 = player.position.X + (float)(player.width / 2) - vector2.X;
			float num6 = player.position.Y + (float)(player.height / 2) - vector2.Y;
			rotation = (float)Math.Atan2(num6, num5) + 1.57f;
			if ((float)Math.Sqrt(num5 * num5 + num6 * num6) > 900f)
			{
				ai[0] = 1f;
			}
			if (wet)
			{
				rotation = 0f;
				velocity.X *= 0.9f;
				int num7 = (int)(base.Center.X + (float)((width / 2 + 8) * direction)) / 16;
				int num8 = (int)(base.Center.Y / 16f);
				_ = position.Y / 16f;
				int num9 = (int)((position.Y + (float)height) / 16f);
				if (Main.tile[num7, num8] == null)
				{
					Main.tile[num7, num8] = new Tile();
				}
				if (Main.tile[num7, num9] == null)
				{
					Main.tile[num7, num9] = new Tile();
				}
				if (velocity.Y > 0f)
				{
					velocity.Y *= 0.5f;
				}
				num7 = (int)(base.Center.X / 16f);
				num8 = (int)(base.Center.Y / 16f);
				float num10 = AI_061_FishingBobber_GetWaterLine(num7, num8);
				if (base.Center.Y > num10)
				{
					velocity.Y -= 0.1f;
					if (velocity.Y < -8f)
					{
						velocity.Y = -8f;
					}
					if (base.Center.Y + velocity.Y < num10)
					{
						velocity.Y = num10 - base.Center.Y;
					}
				}
				else
				{
					velocity.Y = num10 - base.Center.Y;
				}
				if ((double)velocity.Y >= -0.01 && (double)velocity.Y <= 0.01)
				{
					flag2 = true;
				}
			}
			else
			{
				if (velocity.Y == 0f)
				{
					velocity.X *= 0.95f;
				}
				velocity.X *= 0.98f;
				velocity.Y += 0.2f;
				if (velocity.Y > 15.9f)
				{
					velocity.Y = 15.9f;
				}
			}
			if (Main.myPlayer == owner && player.GetFishingConditions().BaitItemType == 2673)
			{
				player.displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
			}
			if (ai[1] != 0f)
			{
				flag2 = true;
			}
			if (!flag2)
			{
				return;
			}
			if (ai[1] == 0f && Main.myPlayer == owner)
			{
				int finalFishingLevel = player.GetFishingConditions().FinalFishingLevel;
				if (Main.rand.Next(300) < finalFishingLevel)
				{
					localAI[1] += Main.rand.Next(1, 3);
				}
				localAI[1] += finalFishingLevel / 30;
				localAI[1] += Main.rand.Next(1, 3);
				if (Main.rand.Next(60) == 0)
				{
					localAI[1] += 60f;
				}
				if (localAI[1] > 660f)
				{
					localAI[1] = 0f;
					FishingCheck();
				}
			}
			else if (ai[1] < 0f)
			{
				if (velocity.Y == 0f || (honeyWet && Math.Abs(velocity.Y) <= 0.01f))
				{
					velocity.Y = (float)Main.rand.Next(100, 500) * 0.015f;
					velocity.X = (float)Main.rand.Next(-100, 101) * 0.015f;
					wet = false;
					lavaWet = false;
					honeyWet = false;
				}
				ai[1] += Main.rand.Next(1, 5);
				if (ai[1] >= 0f)
				{
					ai[1] = 0f;
					localAI[1] = 0f;
					netUpdate = true;
				}
			}
		}

		private float AI_061_FishingBobber_GetWaterLine(int X, int Y)
		{
			float result = position.Y + (float)height;
			if (Main.tile[X, Y - 1] == null)
			{
				Main.tile[X, Y - 1] = new Tile();
			}
			if (Main.tile[X, Y] == null)
			{
				Main.tile[X, Y] = new Tile();
			}
			if (Main.tile[X, Y + 1] == null)
			{
				Main.tile[X, Y + 1] = new Tile();
			}
			if (Main.tile[X, Y - 1].liquid > 0)
			{
				result = Y * 16;
				result -= (float)((int)Main.tile[X, Y - 1].liquid / 16);
			}
			else if (Main.tile[X, Y].liquid > 0)
			{
				result = (Y + 1) * 16;
				result -= (float)((int)Main.tile[X, Y].liquid / 16);
			}
			else if (Main.tile[X, Y + 1].liquid > 0)
			{
				result = (Y + 2) * 16;
				result -= (float)((int)Main.tile[X, Y + 1].liquid / 16);
			}
			return result;
		}

		private void AI_061_FishingBobber_DoASplash()
		{
			for (int i = 0; i < 100; i++)
			{
				int num = Dust.NewDust(new Vector2(position.X - 6f, position.Y - 10f), width + 12, 24, Dust.dustWater());
				Main.dust[num].velocity.Y -= 4f;
				Main.dust[num].velocity.X *= 2.5f;
				Main.dust[num].scale = 0.8f;
				Main.dust[num].alpha = 100;
				Main.dust[num].noGravity = true;
			}
			SoundEngine.PlaySound(19, (int)position.X, (int)position.Y, 0);
		}

		private void AI_061_FishingBobber_GiveItemToPlayer(Player thePlayer, int itemType)
		{
			Item item = new Item();
			item.SetDefaults(itemType);
			if (itemType == 3196)
			{
				int finalFishingLevel = thePlayer.GetFishingConditions().FinalFishingLevel;
				int minValue = (finalFishingLevel / 20 + 3) / 2;
				int num = (finalFishingLevel / 10 + 6) / 2;
				if (Main.rand.Next(50) < finalFishingLevel)
				{
					num++;
				}
				if (Main.rand.Next(100) < finalFishingLevel)
				{
					num++;
				}
				if (Main.rand.Next(150) < finalFishingLevel)
				{
					num++;
				}
				if (Main.rand.Next(200) < finalFishingLevel)
				{
					num++;
				}
				int num2 = (item.stack = Main.rand.Next(minValue, num + 1));
			}
			if (itemType == 3197)
			{
				int finalFishingLevel2 = thePlayer.GetFishingConditions().FinalFishingLevel;
				int minValue2 = (finalFishingLevel2 / 4 + 15) / 2;
				int num3 = (finalFishingLevel2 / 2 + 30) / 2;
				if (Main.rand.Next(50) < finalFishingLevel2)
				{
					num3 += 4;
				}
				if (Main.rand.Next(100) < finalFishingLevel2)
				{
					num3 += 4;
				}
				if (Main.rand.Next(150) < finalFishingLevel2)
				{
					num3 += 4;
				}
				if (Main.rand.Next(200) < finalFishingLevel2)
				{
					num3 += 4;
				}
				int num4 = (item.stack = Main.rand.Next(minValue2, num3 + 1));
			}
			item.newAndShiny = true;
			Item item2 = thePlayer.GetItem(owner, item, default(GetItemSettings));
			if (item2.stack > 0)
			{
				int number = Item.NewItem((int)position.X, (int)position.Y, width, height, itemType, item2.stack, noBroadcast: false, 0, noGrabDelay: true);
				if (Main.netMode == 1)
				{
					NetMessage.SendData(21, -1, -1, null, number, 1f);
				}
			}
			else
			{
				item.position.X = base.Center.X - (float)(item.width / 2);
				item.position.Y = base.Center.Y - (float)(item.height / 2);
				item.active = true;
				PopupText.NewText(PopupTextContext.RegularItemPickup, item, 0);
			}
		}

		private void AI_146_DD2Victory()
		{
		}

		private void BetsySharpnel(int npcIndex)
		{
			if (ai[1] != -1f && owner == Main.myPlayer)
			{
				Vector2 spinningpoint = new Vector2(0f, 6f);
				Vector2 center = base.Center;
				float num = (float)Math.PI / 4f;
				int num2 = 5;
				float num3 = (0f - num * 2f) / (float)(num2 - 1);
				for (int i = 0; i < num2; i++)
				{
					int num4 = NewProjectile(GetProjectileSource_FromThis(), center, spinningpoint.RotatedBy(num + num3 * (float)i), 710, damage, knockBack, owner, 0f, -1f);
					Projectile p = Main.projectile[num4];
					CopyLocalNPCImmunityTimes(p);
				}
			}
		}

		private void CopyLocalNPCImmunityTimes(Projectile p)
		{
			for (int i = 0; i < localNPCImmunity.Length; i++)
			{
				p.localNPCImmunity[i] = localNPCImmunity[i];
			}
		}

		private void AI_001()
		{
			//IL_21dc: Unknown result type (might be due to invalid IL or missing references)
			//IL_57e7: Unknown result type (might be due to invalid IL or missing references)
			//IL_57ec: Unknown result type (might be due to invalid IL or missing references)
			//IL_58cd: Unknown result type (might be due to invalid IL or missing references)
			//IL_58f3: Unknown result type (might be due to invalid IL or missing references)
			//IL_58f8: Unknown result type (might be due to invalid IL or missing references)
			//IL_7c56: Unknown result type (might be due to invalid IL or missing references)
			//IL_7e7b: Unknown result type (might be due to invalid IL or missing references)
			if (type == 469 && wet && !honeyWet)
			{
				Kill();
			}
			if (type == 601)
			{
				Color portalColor = PortalHelper.GetPortalColor(owner, (int)ai[0]);
				Vector3 rgb = portalColor.ToVector3();
				rgb *= 0.5f;
				Lighting.AddLight(base.Center + velocity * 3f, rgb);
				if (alpha > 0 && alpha <= 15)
				{
					Color color = portalColor;
					color.A = byte.MaxValue;
					for (int i = 0; i < 4; i++)
					{
						Dust obj = Main.dust[Dust.NewDust(base.Center, 0, 0, 264)];
						obj.position = base.Center;
						obj.velocity = velocity * 2f + Utils.RandomVector2(Main.rand, -1f, 1f);
						obj.color = color;
						obj.scale = 1.2f;
						obj.noLight = true;
						obj.noGravity = true;
						obj.customData = Main.player[owner];
					}
					if (ai[0] != 0f)
					{
						SoundEngine.PlaySound(SoundID.Item114, position);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item115, position);
					}
				}
				alpha -= 15;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (alpha == 0)
				{
					Color color2 = portalColor;
					color2.A = byte.MaxValue;
					Dust obj2 = Main.dust[Dust.NewDust(base.Center, 0, 0, 263)];
					obj2.position = base.Center;
					obj2.velocity = velocity / 4f;
					obj2.color = color2;
					obj2.noGravity = true;
					obj2.scale = 0.6f;
				}
			}
			if (type == 472)
			{
				int num = Dust.NewDust(position, width, height, 30);
				Main.dust[num].noGravity = true;
				Main.dust[num].velocity *= 0.25f;
				Main.dust[num].velocity += velocity * 0.75f;
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, position);
					for (int j = 0; j < 20; j++)
					{
						num = Dust.NewDust(position, width, height, 30);
						Main.dust[num].noGravity = true;
						Main.dust[num].velocity *= 0.25f;
						Main.dust[num].velocity += velocity;
						Main.dust[num].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
						Main.dust[num].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					}
				}
			}
			if (type == 323)
			{
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 436)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item12, position);
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 1.1f, 0.5f);
			}
			if (type == 467)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item34, position);
				}
				else if (ai[1] == 1f && Main.netMode != 1)
				{
					int num2 = -1;
					float num3 = 2000f;
					for (int k = 0; k < 255; k++)
					{
						if (Main.player[k].active && !Main.player[k].dead)
						{
							Vector2 center = Main.player[k].Center;
							float num4 = Vector2.Distance(center, base.Center);
							if ((num4 < num3 || num2 == -1) && Collision.CanHit(base.Center, 1, 1, center, 1, 1))
							{
								num3 = num4;
								num2 = k;
							}
						}
					}
					if (num3 < 20f)
					{
						Kill();
						return;
					}
					if (num2 != -1)
					{
						ai[1] = 21f;
						ai[0] = num2;
						netUpdate = true;
					}
				}
				else if (ai[1] > 20f && ai[1] < 200f)
				{
					ai[1] += 1f;
					int num5 = (int)ai[0];
					if (!Main.player[num5].active || Main.player[num5].dead)
					{
						ai[1] = 1f;
						ai[0] = 0f;
						netUpdate = true;
					}
					else
					{
						float num6 = velocity.ToRotation();
						Vector2 vector = Main.player[num5].Center - base.Center;
						if (vector.Length() < 20f)
						{
							Kill();
							return;
						}
						float targetAngle = vector.ToRotation();
						if (vector == Vector2.Zero)
						{
							targetAngle = num6;
						}
						float num7 = num6.AngleLerp(targetAngle, 0.008f);
						velocity = new Vector2(velocity.Length(), 0f).RotatedBy(num7);
					}
				}
				if (ai[1] >= 1f && ai[1] < 20f)
				{
					ai[1] += 1f;
					if (ai[1] == 20f)
					{
						ai[1] = 1f;
					}
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight(base.Center, 1.1f, 0.9f, 0.4f);
				localAI[0] += 1f;
				if (localAI[0] == 12f)
				{
					localAI[0] = 0f;
					for (int l = 0; l < 12; l++)
					{
						Vector2 spinningpoint = Vector2.UnitX * -width / 2f;
						spinningpoint += -Vector2.UnitY.RotatedBy((float)l * (float)Math.PI / 6f) * new Vector2(8f, 16f);
						spinningpoint = spinningpoint.RotatedBy(rotation - (float)Math.PI / 2f);
						int num8 = Dust.NewDust(base.Center, 0, 0, 6, 0f, 0f, 160);
						Main.dust[num8].scale = 1.1f;
						Main.dust[num8].noGravity = true;
						Main.dust[num8].position = base.Center + spinningpoint;
						Main.dust[num8].velocity = velocity * 0.1f;
						Main.dust[num8].velocity = Vector2.Normalize(base.Center - velocity * 3f - Main.dust[num8].position) * 1.25f;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					for (int m = 0; m < 1; m++)
					{
						Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(velocity.ToRotation());
						int num9 = Dust.NewDust(position, width, height, 31, 0f, 0f, 100);
						Main.dust[num9].velocity *= 0.1f;
						Main.dust[num9].position = base.Center + vector2 * width / 2f;
						Main.dust[num9].fadeIn = 0.9f;
					}
				}
				if (Main.rand.Next(32) == 0)
				{
					for (int n = 0; n < 1; n++)
					{
						Vector2 vector3 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy(velocity.ToRotation());
						int num10 = Dust.NewDust(position, width, height, 31, 0f, 0f, 155, default(Color), 0.8f);
						Main.dust[num10].velocity *= 0.3f;
						Main.dust[num10].position = base.Center + vector3 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num10].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					for (int num11 = 0; num11 < 2; num11++)
					{
						Vector2 vector4 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy(velocity.ToRotation());
						int num12 = Dust.NewDust(position, width, height, 6, 0f, 0f, 0, default(Color), 1.2f);
						Main.dust[num12].velocity *= 0.3f;
						Main.dust[num12].noGravity = true;
						Main.dust[num12].position = base.Center + vector4 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num12].fadeIn = 1.4f;
						}
					}
				}
			}
			if (type == 468)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item34, position);
				}
				else if (ai[1] == 1f && Main.netMode != 1)
				{
					int num13 = -1;
					float num14 = 2000f;
					for (int num15 = 0; num15 < 255; num15++)
					{
						if (Main.player[num15].active && !Main.player[num15].dead)
						{
							Vector2 center2 = Main.player[num15].Center;
							float num16 = Vector2.Distance(center2, base.Center);
							if ((num16 < num14 || num13 == -1) && Collision.CanHit(base.Center, 1, 1, center2, 1, 1))
							{
								num14 = num16;
								num13 = num15;
							}
						}
					}
					if (num14 < 20f)
					{
						Kill();
						return;
					}
					if (num13 != -1)
					{
						ai[1] = 21f;
						ai[0] = num13;
						netUpdate = true;
					}
				}
				else if (ai[1] > 20f && ai[1] < 200f)
				{
					ai[1] += 1f;
					int num17 = (int)ai[0];
					if (!Main.player[num17].active || Main.player[num17].dead)
					{
						ai[1] = 1f;
						ai[0] = 0f;
						netUpdate = true;
					}
					else
					{
						float num18 = velocity.ToRotation();
						Vector2 vector5 = Main.player[num17].Center - base.Center;
						if (vector5.Length() < 20f)
						{
							Kill();
							return;
						}
						float targetAngle2 = vector5.ToRotation();
						if (vector5 == Vector2.Zero)
						{
							targetAngle2 = num18;
						}
						float num19 = num18.AngleLerp(targetAngle2, 0.01f);
						velocity = new Vector2(velocity.Length(), 0f).RotatedBy(num19);
					}
				}
				if (ai[1] >= 1f && ai[1] < 20f)
				{
					ai[1] += 1f;
					if (ai[1] == 20f)
					{
						ai[1] = 1f;
					}
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight(base.Center, 0.2f, 0.1f, 0.6f);
				localAI[0] += 1f;
				if (localAI[0] == 12f)
				{
					localAI[0] = 0f;
					for (int num20 = 0; num20 < 12; num20++)
					{
						Vector2 spinningpoint2 = Vector2.UnitX * -width / 2f;
						spinningpoint2 += -Vector2.UnitY.RotatedBy((float)num20 * (float)Math.PI / 6f) * new Vector2(8f, 16f);
						spinningpoint2 = spinningpoint2.RotatedBy(rotation - (float)Math.PI / 2f);
						int num21 = Dust.NewDust(base.Center, 0, 0, 27, 0f, 0f, 160);
						Main.dust[num21].scale = 1.1f;
						Main.dust[num21].noGravity = true;
						Main.dust[num21].position = base.Center + spinningpoint2;
						Main.dust[num21].velocity = velocity * 0.1f;
						Main.dust[num21].velocity = Vector2.Normalize(base.Center - velocity * 3f - Main.dust[num21].position) * 1.25f;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					for (int num22 = 0; num22 < 1; num22++)
					{
						Vector2 vector6 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(velocity.ToRotation());
						int num23 = Dust.NewDust(position, width, height, 31, 0f, 0f, 100);
						Main.dust[num23].velocity *= 0.1f;
						Main.dust[num23].position = base.Center + vector6 * width / 2f;
						Main.dust[num23].fadeIn = 0.9f;
					}
				}
				if (Main.rand.Next(32) == 0)
				{
					for (int num24 = 0; num24 < 1; num24++)
					{
						Vector2 vector7 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy(velocity.ToRotation());
						int num25 = Dust.NewDust(position, width, height, 31, 0f, 0f, 155, default(Color), 0.8f);
						Main.dust[num25].velocity *= 0.3f;
						Main.dust[num25].position = base.Center + vector7 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num25].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(2) == 0)
				{
					for (int num26 = 0; num26 < 2; num26++)
					{
						Vector2 vector8 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy(velocity.ToRotation());
						int num27 = Dust.NewDust(position, width, height, 27, 0f, 0f, 0, default(Color), 1.2f);
						Main.dust[num27].velocity *= 0.3f;
						Main.dust[num27].noGravity = true;
						Main.dust[num27].position = base.Center + vector8 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num27].fadeIn = 1.4f;
						}
					}
				}
			}
			if (type == 634 || type == 635)
			{
				float num28 = 5f;
				float num29 = 250f;
				float num30 = 6f;
				Vector2 vector9 = new Vector2(8f, 10f);
				float num31 = 1.2f;
				Vector3 rgb2 = new Vector3(0.7f, 0.1f, 0.5f);
				int num32 = 4 * MaxUpdates;
				int num33 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, 255);
				int num34 = 255;
				if (type == 635)
				{
					vector9 = new Vector2(10f, 20f);
					num31 = 1f;
					num29 = 500f;
					num34 = 88;
					num32 = 3 * MaxUpdates;
					rgb2 = new Vector3(0.4f, 0.6f, 0.9f);
					num33 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					localAI[0] = -Main.rand.Next(48);
					SoundEngine.PlaySound(SoundID.Item34, position);
				}
				else if (ai[1] == 1f && owner == Main.myPlayer)
				{
					int num35 = -1;
					float num36 = num29;
					for (int num37 = 0; num37 < 200; num37++)
					{
						if (Main.npc[num37].active && Main.npc[num37].CanBeChasedBy(this))
						{
							Vector2 center3 = Main.npc[num37].Center;
							float num38 = Vector2.Distance(center3, base.Center);
							if (num38 < num36 && num35 == -1 && Collision.CanHitLine(base.Center, 1, 1, center3, 1, 1))
							{
								num36 = num38;
								num35 = num37;
							}
						}
					}
					if (num36 < 20f)
					{
						Kill();
						return;
					}
					if (num35 != -1)
					{
						ai[1] = num28 + 1f;
						ai[0] = num35;
						netUpdate = true;
					}
				}
				else if (ai[1] > num28)
				{
					ai[1] += 1f;
					int num39 = (int)ai[0];
					if (!Main.npc[num39].active || !Main.npc[num39].CanBeChasedBy(this))
					{
						ai[1] = 1f;
						ai[0] = 0f;
						netUpdate = true;
					}
					else
					{
						velocity.ToRotation();
						Vector2 vector10 = Main.npc[num39].Center - base.Center;
						if (vector10.Length() < 20f)
						{
							Kill();
							return;
						}
						if (vector10 != Vector2.Zero)
						{
							vector10.Normalize();
							vector10 *= num30;
						}
						float num40 = 30f;
						velocity = (velocity * (num40 - 1f) + vector10) / num40;
					}
				}
				if (ai[1] >= 1f && ai[1] < num28)
				{
					ai[1] += 1f;
					if (ai[1] == num28)
					{
						ai[1] = 1f;
					}
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= num32)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight(base.Center, rgb2);
				rotation = velocity.ToRotation();
				localAI[0] += 1f;
				if (localAI[0] == 48f)
				{
					localAI[0] = 0f;
				}
				else if (alpha == 0)
				{
					for (int num41 = 0; num41 < 2; num41++)
					{
						Vector2 vector11 = Vector2.UnitX * -30f;
						vector11 = -Vector2.UnitY.RotatedBy(localAI[0] * ((float)Math.PI / 24f) + (float)num41 * (float)Math.PI) * vector9 - rotation.ToRotationVector2() * 10f;
						int num42 = Dust.NewDust(base.Center, 0, 0, num34, 0f, 0f, 160);
						Main.dust[num42].scale = num31;
						Main.dust[num42].noGravity = true;
						Main.dust[num42].position = base.Center + vector11 + velocity * 2f;
						Main.dust[num42].velocity = Vector2.Normalize(base.Center + velocity * 2f * 8f - Main.dust[num42].position) * 2f + velocity * 2f;
					}
				}
				if (Main.rand.Next(12) == 0)
				{
					for (int num43 = 0; num43 < 1; num43++)
					{
						Vector2 vector12 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(velocity.ToRotation());
						int num44 = Dust.NewDust(position, width, height, 31, 0f, 0f, 100);
						Main.dust[num44].velocity *= 0.1f;
						Main.dust[num44].position = base.Center + vector12 * width / 2f + velocity * 2f;
						Main.dust[num44].fadeIn = 0.9f;
					}
				}
				if (Main.rand.Next(64) == 0)
				{
					for (int num45 = 0; num45 < 1; num45++)
					{
						Vector2 vector13 = -Vector2.UnitX.RotatedByRandom(0.39269909262657166).RotatedBy(velocity.ToRotation());
						int num46 = Dust.NewDust(position, width, height, 31, 0f, 0f, 155, default(Color), 0.8f);
						Main.dust[num46].velocity *= 0.3f;
						Main.dust[num46].position = base.Center + vector13 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num46].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					for (int num47 = 0; num47 < 2; num47++)
					{
						Vector2 vector14 = -Vector2.UnitX.RotatedByRandom(0.78539818525314331).RotatedBy(velocity.ToRotation());
						int num48 = Dust.NewDust(position, width, height, num33, 0f, 0f, 0, default(Color), 1.2f);
						Main.dust[num48].velocity *= 0.3f;
						Main.dust[num48].noGravity = true;
						Main.dust[num48].position = base.Center + vector14 * width / 2f;
						if (Main.rand.Next(2) == 0)
						{
							Main.dust[num48].fadeIn = 1.4f;
						}
					}
				}
				if (Main.rand.Next(12) == 0 && type == 634)
				{
					Vector2 vector15 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(velocity.ToRotation());
					int num49 = Dust.NewDust(position, width, height, num34, 0f, 0f, 100);
					Main.dust[num49].velocity *= 0.3f;
					Main.dust[num49].position = base.Center + vector15 * width / 2f;
					Main.dust[num49].fadeIn = 0.9f;
					Main.dust[num49].noGravity = true;
				}
				if (Main.rand.Next(3) == 0 && type == 635)
				{
					Vector2 vector16 = -Vector2.UnitX.RotatedByRandom(0.19634954631328583).RotatedBy(velocity.ToRotation());
					int num50 = Dust.NewDust(position, width, height, num34, 0f, 0f, 100);
					Main.dust[num50].velocity *= 0.3f;
					Main.dust[num50].position = base.Center + vector16 * width / 2f;
					Main.dust[num50].fadeIn = 1.2f;
					Main.dust[num50].scale = 1.5f;
					Main.dust[num50].noGravity = true;
				}
			}
			if (type == 459)
			{
				alpha -= 30;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 3)
					{
						frame = 0;
					}
				}
				position = base.Center;
				scale = ai[1];
				width = (height = (int)(22f * scale));
				base.Center = position;
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.85f, 0.9f);
				int num51 = 0;
				if ((double)scale < 0.85)
				{
					num51 = ((Main.rand.Next(3) == 0) ? 1 : 0);
				}
				else
				{
					num51 = 1;
					penetrate = -1;
					maxPenetrate = -1;
				}
				for (int num52 = 0; num52 < num51; num52++)
				{
					int num53 = Dust.NewDust(position, width, height, 226, velocity.X);
					Main.dust[num53].position -= Vector2.One * 3f;
					Main.dust[num53].scale = 0.5f;
					Main.dust[num53].noGravity = true;
					Main.dust[num53].velocity = velocity / 3f;
					Main.dust[num53].alpha = 255 - (int)(255f * scale);
				}
			}
			if (type == 709)
			{
				alpha -= 30;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 3)
					{
						frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.85f, 0.9f);
				if (ai[1] == 0f)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_SkyDragonsFuryShot, base.Center);
				}
				ai[1] += 1f;
				if (ai[1] >= 30f)
				{
					Kill();
					return;
				}
			}
			if (type == 442)
			{
				frame = 0;
				if (alpha != 0)
				{
					localAI[0] += 1f;
					if (localAI[0] >= 4f)
					{
						alpha -= 90;
						if (alpha < 0)
						{
							alpha = 0;
							localAI[0] = 2f;
						}
					}
				}
				if (Vector2.Distance(base.Center, new Vector2(ai[0], ai[1]) * 16f + Vector2.One * 8f) <= 16f)
				{
					Kill();
					return;
				}
				if (alpha == 0)
				{
					localAI[1] += 1f;
					if (localAI[1] >= 120f)
					{
						Kill();
						return;
					}
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.45f, 0.8f);
					localAI[0] += 1f;
					if (localAI[0] == 3f)
					{
						localAI[0] = 0f;
						for (int num54 = 0; num54 < 8; num54++)
						{
							Vector2 spinningpoint3 = Vector2.UnitX * -8f;
							spinningpoint3 += -Vector2.UnitY.RotatedBy((float)num54 * (float)Math.PI / 4f) * new Vector2(2f, 4f);
							spinningpoint3 = spinningpoint3.RotatedBy(rotation - (float)Math.PI / 2f);
							int num55 = Dust.NewDust(base.Center, 0, 0, 135);
							Main.dust[num55].scale = 1.5f;
							Main.dust[num55].noGravity = true;
							Main.dust[num55].position = base.Center + spinningpoint3;
							Main.dust[num55].velocity = velocity * 0.66f;
						}
					}
				}
			}
			if (type == 440 || type == 449 || type == 606)
			{
				if (alpha > 0)
				{
					alpha -= 25;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (type == 440)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.25f, 0.4f, 0.7f);
				}
				if (type == 449)
				{
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.7f, 0.65f, 0.3f);
				}
				if (type == 606)
				{
					Lighting.AddLight(base.Center, 0.7f, 0.3f, 0.3f);
				}
				float num56 = 100f;
				float num57 = 3f;
				if (type == 606)
				{
					num56 = 150f;
					num57 = 5f;
				}
				if (ai[1] == 0f)
				{
					localAI[0] += num57;
					if (localAI[0] == num57 * 1f && type == 606)
					{
						for (int num58 = 0; num58 < 4; num58++)
						{
							int num59 = Dust.NewDust(base.Center - velocity / 2f, 0, 0, 182, 0f, 0f, 100, default(Color), 1.4f);
							Main.dust[num59].velocity *= 0.2f;
							Main.dust[num59].velocity += velocity / 10f;
							Main.dust[num59].noGravity = true;
						}
					}
					if (localAI[0] > num56)
					{
						localAI[0] = num56;
					}
				}
				else
				{
					localAI[0] -= num57;
					if (localAI[0] <= 0f)
					{
						Kill();
						return;
					}
				}
			}
			if (type == 438)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.1f, 0.2f);
			}
			if (type == 593)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.4f, 0.1f, 0.3f);
				if (++frameCounter >= 12)
				{
					if (++frame >= Main.projFrames[type])
					{
						frame = 0;
					}
					frameCounter = 0;
				}
				if (Main.rand.Next(2) == 0)
				{
					Vector2 vector17 = Vector2.UnitY.RotatedByRandom(6.2831854820251465);
					Dust obj3 = Main.dust[Dust.NewDust(base.Center - vector17 * 8f, 0, 0, 240)];
					obj3.noGravity = true;
					obj3.position = base.Center - vector17 * 8f * scale;
					obj3.velocity = vector17.RotatedBy(-1.5707963705062866) * 2f;
					obj3.velocity = Vector2.Zero;
					obj3.scale = 0.5f + Main.rand.NextFloat();
					obj3.fadeIn = 0.5f;
				}
			}
			if (type == 592)
			{
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.15f, 0.15f, 0.4f);
			}
			if (type == 462)
			{
				int num60 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
				Main.dust[num60].noLight = true;
				Main.dust[num60].noGravity = true;
				Main.dust[num60].velocity = velocity;
				Main.dust[num60].position -= Vector2.One * 4f;
				Main.dust[num60].scale = 0.8f;
				if (++frameCounter >= 9)
				{
					frameCounter = 0;
					if (++frame >= 5)
					{
						frame = 0;
					}
				}
			}
			if (type == 437)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item12, position);
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num61 = 0; num61 < 4; num61++)
					{
						int num62 = Dust.NewDust(position, width, height, 226, velocity.X);
						Main.dust[num62].position = Vector2.Lerp(Main.dust[num62].position, base.Center, 0.25f);
						Main.dust[num62].scale = 0.5f;
						Main.dust[num62].noGravity = true;
						Main.dust[num62].velocity /= 2f;
						Main.dust[num62].velocity += velocity * 0.66f;
					}
				}
				if (ai[0] < 16f)
				{
					for (int num63 = 0; num63 < 2; num63++)
					{
						int num64 = Dust.NewDust(position, width, height, 226, velocity.X);
						Main.dust[num64].position = position + new Vector2(((direction == 1) ? 1 : 0) * width, 2 + (height - 4) * num63);
						Main.dust[num64].scale = 0.3f;
						Main.dust[num64].noGravity = true;
						Main.dust[num64].velocity = Vector2.Zero;
					}
				}
			}
			if (type == 435)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item12, position);
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.8f, 1.1f);
			}
			if (type == 682)
			{
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.DD2_LightningBugZap, position);
					for (int num65 = 0; num65 < 8; num65++)
					{
						Dust dust = Dust.NewDustDirect(position, width, height, 272);
						dust.velocity *= 1f;
						dust.velocity += velocity * 0.65f;
						dust.scale = 0.6f;
						dust.fadeIn = 0.8f;
						dust.noGravity = true;
						dust.noLight = true;
						dust.position += dust.velocity * 3f;
					}
				}
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				frameCounter++;
				if (frameCounter >= 3)
				{
					frame++;
					frameCounter = 0;
					if (frame >= 4)
					{
						frame = 0;
					}
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.5f, 0.2f, 1.1f);
			}
			if (type == 684)
			{
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
				localAI[0] += 1f;
				for (int num66 = 0; num66 < 1; num66++)
				{
					Vector2 spinningpoint4 = Utils.RandomVector2(Main.rand, -0.5f, 0.5f) * new Vector2(20f, 80f);
					spinningpoint4 = spinningpoint4.RotatedBy(velocity.ToRotation());
					Dust dust2 = Dust.NewDustDirect(base.Center, 0, 0, 60);
					dust2.alpha = 127;
					dust2.fadeIn = 1.5f;
					dust2.scale = 1.3f;
					dust2.velocity *= 0.3f;
					dust2.position = base.Center + spinningpoint4;
					dust2.noGravity = true;
					dust2.noLight = true;
					dust2.color = new Color(255, 255, 255, 0);
				}
				Lighting.AddLight(base.Center, 1.1f, 0.3f, 0.4f);
			}
			if (type == 408)
			{
				alpha -= 40;
				if (alpha < 0)
				{
					alpha = 0;
				}
				spriteDirection = direction;
			}
			if (type == 282)
			{
				int num67 = Dust.NewDust(position, width, height, 171, 0f, 0f, 100);
				Main.dust[num67].scale = (float)Main.rand.Next(1, 10) * 0.1f;
				Main.dust[num67].noGravity = true;
				Main.dust[num67].fadeIn = 1.5f;
				Main.dust[num67].velocity *= 0.25f;
				Main.dust[num67].velocity += velocity * 0.25f;
			}
			if (type == 275 || type == 276)
			{
				frameCounter++;
				if (frameCounter > 1)
				{
					frameCounter = 0;
					frame++;
					if (frame > 1)
					{
						frame = 0;
					}
				}
			}
			if (type == 225 && Main.rand.Next(2) == 0)
			{
				int num68 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 40);
				Main.dust[num68].noGravity = true;
				Main.dust[num68].scale = 1.3f;
				Main.dust[num68].velocity *= 0.5f;
			}
			if (type == 174)
			{
				if (alpha == 0)
				{
					int num69 = Dust.NewDust(oldPosition - velocity * 3f, width, height, 76, 0f, 0f, 50);
					Main.dust[num69].noGravity = true;
					Main.dust[num69].noLight = true;
					Main.dust[num69].velocity *= 0.5f;
				}
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, position);
				}
			}
			else if (type == 605 || type == 920 || type == 921 || type == 926 || type == 937)
			{
				if (type == 920 && frameCounter == 0)
				{
					frameCounter = 1;
					frame = Main.rand.Next(3);
				}
				if (alpha == 0 && Main.rand.Next(3) == 0)
				{
					int num70 = 4;
					Color newColor = new Color(78, 136, 255, 150);
					float num71 = 1.2f;
					bool noGravity = true;
					int num72 = 0;
					if (type == 921)
					{
						num70 = 243;
						newColor = default(Color);
					}
					if (type == 926)
					{
						num70 = 4;
						newColor = NPC.AI_121_QueenSlime_GetDustColor();
						newColor.A = 150;
						num71 = 1.2f;
						num72 = 8;
						noGravity = Main.rand.Next(2) == 0;
					}
					if (type == 937)
					{
						num70 = 4;
						newColor = NPC.AI_121_QueenSlime_GetDustColor();
						newColor.A = 150;
					}
					int num73 = Dust.NewDust(position - new Vector2(num72, num72) + velocity, width + num72 * 2, height + num72 * 2, num70, 0f, 0f, 50, newColor, num71);
					Main.dust[num73].velocity *= 0.3f;
					Main.dust[num73].velocity += velocity * 0.3f;
					Main.dust[num73].noGravity = noGravity;
				}
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (type != 937 && ai[1] == 0f)
				{
					ai[1] = 1f;
					if (type == 926)
					{
						SoundEngine.PlaySound(SoundID.Item155, position);
					}
					else
					{
						SoundEngine.PlaySound(SoundID.Item154, position);
					}
				}
			}
			else if (type == 176)
			{
				if (alpha == 0)
				{
					int num74 = Dust.NewDust(oldPosition, width, height, 22, 0f, 0f, 100, default(Color), 0.5f);
					Main.dust[num74].noGravity = true;
					Main.dust[num74].noLight = true;
					Main.dust[num74].velocity *= 0.15f;
					Main.dust[num74].fadeIn = 0.8f;
				}
				alpha -= 50;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, position);
				}
			}
			if (type == 350)
			{
				alpha -= 100;
				if (alpha < 0)
				{
					alpha = 0;
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
				if (alpha == 0)
				{
					int num75 = 2;
					if (Main.rand.Next(3) != 0)
					{
						int num76 = Dust.NewDust(new Vector2(base.Center.X - (float)num75, base.Center.Y - (float)num75 - 2f) - velocity * 0.5f, num75 * 2, num75 * 2, 6, 0f, 0f, 100);
						Main.dust[num76].scale *= 1.3f + (float)Main.rand.Next(10) * 0.05f;
						Main.dust[num76].velocity *= 0.2f;
						Main.dust[num76].noGravity = true;
						Main.dust[num76].noLight = true;
						Main.dust[num76].velocity += velocity * 0.25f;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num77 = (num77 = Dust.NewDust(new Vector2(base.Center.X - (float)num75, base.Center.Y - (float)num75 - 2f) - velocity * 0.5f, num75 * 2, num75 * 2, 31, 0f, 0f, 100, default(Color), 0.5f));
						Main.dust[num77].fadeIn = 0.6f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num77].velocity *= 0.05f;
						Main.dust[num77].velocity += velocity * 0.25f;
					}
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item42, position);
				}
			}
			if (type == 325)
			{
				alpha -= 100;
				if (alpha < 0)
				{
					alpha = 0;
				}
				Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
				if (alpha == 0)
				{
					int num78 = 2;
					if (Main.rand.Next(3) != 0)
					{
						int num79 = Dust.NewDust(new Vector2(base.Center.X - (float)num78, base.Center.Y - (float)num78 - 2f) - velocity * 0.5f, num78 * 2, num78 * 2, 6, 0f, 0f, 100);
						Main.dust[num79].scale *= 1.2f + (float)Main.rand.Next(10) * 0.05f;
						Main.dust[num79].velocity *= 0.2f;
						Main.dust[num79].noGravity = true;
						Main.dust[num79].noLight = true;
						Main.dust[num79].velocity += velocity * 0.25f;
					}
					if (Main.rand.Next(4) == 0)
					{
						int num80 = (num80 = Dust.NewDust(new Vector2(base.Center.X - (float)num78, base.Center.Y - (float)num78 - 2f) - velocity * 0.5f, num78 * 2, num78 * 2, 31, 0f, 0f, 100, default(Color), 0.5f));
						Main.dust[num80].fadeIn = 0.5f + (float)Main.rand.Next(5) * 0.05f;
						Main.dust[num80].velocity *= 0.05f;
					}
				}
				if (ai[1] == 0f)
				{
					ai[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item42, position);
				}
			}
			if (type == 469)
			{
				localAI[1] += 1f;
				if (localAI[1] > 2f)
				{
					alpha -= 50;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
			}
			else if (type == 83 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item33, position);
			}
			else if (type == 408 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 19);
			}
			else if (type == 259 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item33, position);
			}
			else if (type == 110 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item11, position);
			}
			else if (type == 302 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item11, position);
			}
			else if (type == 438 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, position);
			}
			else if (type == 593 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item11, position);
			}
			else if (type == 592 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, position);
			}
			else if (type == 462 && ai[1] == 0f)
			{
				ai[1] = 1f;
				if (Main.rand.Next(2) == 0)
				{
					SoundEngine.PlaySound(SoundID.Item124, position);
				}
				else
				{
					SoundEngine.PlaySound(SoundID.Item125, position);
				}
				Vector2 vector18 = Vector2.Normalize(velocity);
				int num81 = Main.rand.Next(5, 10);
				for (int num82 = 0; num82 < num81; num82++)
				{
					int num83 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
					Main.dust[num83].velocity.Y -= 1f;
					Main.dust[num83].velocity += vector18 * 2f;
					Main.dust[num83].position -= Vector2.One * 4f;
					Main.dust[num83].noGravity = true;
				}
			}
			else if (type == 84 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, position);
			}
			else if (type == 389 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, position);
			}
			else if (type == 257 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, position);
			}
			else if (type == 100 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item33, position);
			}
			else if (type == 98 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, position);
			}
			else if (type == 184 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, position);
			}
			else if (type == 195 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, position);
			}
			else if (type == 275 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, position);
			}
			else if (type == 276 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item17, position);
			}
			else if ((type == 81 || type == 82) && ai[1] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item5, position);
				ai[1] = 1f;
			}
			else if (type == 180 && ai[1] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item11, position);
				ai[1] = 1f;
			}
			else if (type == 248 && ai[1] == 0f)
			{
				SoundEngine.PlaySound(SoundID.Item17, position);
				ai[1] = 1f;
			}
			else if (type == 576 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item12, position);
			}
			else if (type == 577 && ai[1] == 0f)
			{
				ai[1] = 1f;
				SoundEngine.PlaySound(SoundID.Item36, position);
			}
			else if (type == 710)
			{
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (Main.rand.Next(4) == 0)
				{
					int num84;
					if (Main.rand.Next(2) == 0)
					{
						num84 = Dust.NewDust(position, width, height, 31, 0f, 0f, 100, default(Color), 1.6f);
						Main.dust[num84].noGravity = true;
					}
					num84 = Dust.NewDust(position, width, height, 6, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num84].noGravity = true;
					Main.dust[num84].velocity *= 2f;
					Main.dust[num84].velocity += velocity;
					if (ai[1] == -1f)
					{
						Main.dust[num84].fadeIn = 1.5f;
					}
					else
					{
						Main.dust[num84].fadeIn = 1.22f;
					}
					if (wet)
					{
						Kill();
					}
				}
			}
			else if (type == 639)
			{
				if (localAI[0] == 0f && localAI[1] == 0f)
				{
					localAI[0] = base.Center.X;
					localAI[1] = base.Center.Y;
					ai[0] = velocity.X;
					ai[1] = velocity.Y;
				}
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			else if (type == 640)
			{
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (velocity == Vector2.Zero)
				{
					ai[0] = 0f;
					bool flag = true;
					for (int num85 = 1; num85 < oldPos.Length; num85++)
					{
						if (oldPos[num85] != oldPos[0])
						{
							flag = false;
						}
					}
					if (flag)
					{
						Kill();
						return;
					}
					if (Main.rand.Next(extraUpdates) == 0 && (velocity != Vector2.Zero || Main.rand.Next((localAI[1] == 2f) ? 2 : 6) == 0))
					{
						for (int num86 = 0; num86 < 2; num86++)
						{
							float num87 = rotation + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
							float num88 = (float)Main.rand.NextDouble() * 0.8f + 1f;
							Vector2 vector19 = new Vector2((float)Math.Cos(num87) * num88, (float)Math.Sin(num87) * num88);
							int num89 = Dust.NewDust(base.Center, 0, 0, 229, vector19.X, vector19.Y);
							Main.dust[num89].noGravity = true;
							Main.dust[num89].scale = 1.2f;
						}
						if (Main.rand.Next(10) == 0)
						{
							Vector2 vector20 = velocity.RotatedBy(1.5707963705062866) * ((float)Main.rand.NextDouble() - 0.5f) * width;
							int num90 = Dust.NewDust(base.Center + vector20 - Vector2.One * 4f, 8, 8, 31, 0f, 0f, 100, default(Color), 1.5f);
							Main.dust[num90].velocity *= 0.5f;
							Main.dust[num90].velocity.Y = 0f - Math.Abs(Main.dust[num90].velocity.Y);
						}
					}
				}
				else if (numUpdates == 1)
				{
					float num91 = rotation + (float)Math.PI / 2f + ((Main.rand.Next(2) == 1) ? (-1f) : 1f) * ((float)Math.PI / 2f);
					float num92 = (float)Main.rand.NextDouble() * 0.25f + 0.25f;
					Vector2 vector21 = new Vector2((float)Math.Cos(num91) * num92, (float)Math.Sin(num91) * num92);
					int num93 = Dust.NewDust(position, 0, 0, 229, vector21.X, vector21.Y);
					Main.dust[num93].noGravity = true;
					Main.dust[num93].scale = 1.2f;
				}
			}
			if (type == 41)
			{
				int num94 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.6f);
				Main.dust[num94].noGravity = true;
				num94 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
				Main.dust[num94].noGravity = true;
			}
			else if (type == 55)
			{
				int num95 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 18, 0f, 0f, 0, default(Color), 0.9f);
				Main.dust[num95].noGravity = true;
			}
			else if (type == 719)
			{
				if (Main.rand.Next(2) == 0)
				{
					Dust.NewDustDirect(position - velocity, width, height, 147, 0f, 0f, 0, default(Color), 0.9f).noGravity = true;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num96 = 0; num96 < 20; num96++)
					{
						Dust dust3 = Dust.NewDustDirect(position - velocity, width, height, 147, 0f, 0f, 0, default(Color), 1.3f);
						dust3.noGravity = true;
						dust3.velocity += velocity * 0.75f;
					}
					for (int num97 = 0; num97 < 10; num97++)
					{
						Dust dust4 = Dust.NewDustDirect(position - velocity, width, height, 147, 0f, 0f, 0, default(Color), 1.3f);
						dust4.noGravity = true;
						dust4.velocity *= 2f;
					}
				}
			}
			else if (type == 763)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num98 = 0; num98 < 5; num98++)
					{
						Dust dust5 = Dust.NewDustDirect(position - velocity, width, height, 40, 0f, 0f, 0, default(Color), 1.1f);
						dust5.noGravity = true;
						dust5.velocity *= 1.5f;
					}
				}
			}
			else if (type == 772)
			{
				if (Main.rand.Next(7) == 0)
				{
					for (int num99 = 0; num99 < 1; num99++)
					{
						Dust dust6 = Dust.NewDustDirect(position - velocity, width, height, Main.rand.NextFromList<int>(86, 87, 88, 89, 90, 91, 138), 0f, 0f, 0, default(Color), 0.7f);
						dust6.noGravity = true;
						dust6.velocity = velocity * 0.6f;
						dust6.fadeIn = 0.8f;
					}
				}
			}
			else if (type == 374)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item17, position);
					localAI[0] = 1f;
				}
				if (Main.rand.Next(2) == 0)
				{
					int num100 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 18, 0f, 0f, 0, default(Color), 0.9f);
					Main.dust[num100].noGravity = true;
					Main.dust[num100].velocity *= 0.5f;
				}
			}
			else if (type == 376)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item20, position);
				}
				localAI[0] += 1f;
				if (localAI[0] > 3f)
				{
					int num101 = 1;
					if (localAI[0] > 5f)
					{
						num101 = 2;
					}
					for (int num102 = 0; num102 < num101; num102++)
					{
						int num103 = Dust.NewDust(new Vector2(position.X, position.Y + 2f), width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num103].noGravity = true;
						Main.dust[num103].velocity.X *= 0.3f;
						Main.dust[num103].velocity.Y *= 0.3f;
						Main.dust[num103].noLight = true;
					}
					if (wet && !lavaWet)
					{
						Kill();
						return;
					}
				}
			}
			else if (type == 91 && Main.rand.Next(2) == 0)
			{
				int num105 = Dust.NewDust(Type: (Main.rand.Next(2) != 0) ? 58 : 15, Position: position, Width: width, Height: height, SpeedX: velocity.X * 0.25f, SpeedY: velocity.Y * 0.25f, Alpha: 150, newColor: default(Color), Scale: 0.9f);
				Main.dust[num105].velocity *= 0.25f;
			}
			if (type == 163 || type == 310)
			{
				if (alpha > 0)
				{
					alpha -= 25;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			switch (type)
			{
			case 14:
			case 20:
			case 36:
			case 83:
			case 84:
			case 89:
			case 100:
			case 104:
			case 110:
			case 158:
			case 159:
			case 160:
			case 161:
			case 180:
			case 279:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 389:
				if (alpha > 0)
				{
					alpha -= 15;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				break;
			case 576:
			case 577:
				localAI[1] += 1f;
				if (localAI[1] > 2f)
				{
					if (alpha > 0)
					{
						alpha -= 15;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				break;
			}
			if (type == 484)
			{
				int num106 = Dust.NewDust(position, width, height, 78);
				Main.dust[num106].noGravity = true;
				Main.dust[num106].velocity *= 0.1f;
				Main.dust[num106].scale = 0.75f;
				Main.dust[num106].position = (Main.dust[num106].position + base.Center) / 2f;
				Main.dust[num106].position += velocity * Main.rand.Next(0, 101) * 0.01f;
			}
			if (type == 242 || type == 302 || type == 438 || type == 462 || type == 592)
			{
				float num107 = (float)Math.Sqrt(velocity.X * velocity.X + velocity.Y * velocity.Y);
				if (alpha > 0)
				{
					alpha -= (byte)((double)num107 * 0.9);
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 660)
			{
				DelegateMethods.v3_1 = new Vector3(0.6f, 1f, 1f) * 0.2f;
				Utils.PlotTileLine(base.Center, base.Center + velocity * 10f, 8f, DelegateMethods.CastLightOpen);
				if (alpha > 0)
				{
					SoundEngine.PlaySound(SoundID.Item9, base.Center);
					alpha = 0;
					scale = 1.1f;
					frame = Main.rand.Next(14);
					float num108 = 16f;
					for (int num109 = 0; (float)num109 < num108; num109++)
					{
						Vector2 spinningpoint5 = Vector2.UnitX * 0f;
						spinningpoint5 += -Vector2.UnitY.RotatedBy((float)num109 * ((float)Math.PI * 2f / num108)) * new Vector2(1f, 4f);
						spinningpoint5 = spinningpoint5.RotatedBy(velocity.ToRotation());
						int num110 = Dust.NewDust(base.Center, 0, 0, 180);
						Main.dust[num110].scale = 1.5f;
						Main.dust[num110].noGravity = true;
						Main.dust[num110].position = base.Center + spinningpoint5;
						Main.dust[num110].velocity = velocity * 0f + spinningpoint5.SafeNormalize(Vector2.UnitY) * 1f;
					}
				}
			}
			if (type == 712)
			{
				DelegateMethods.v3_1 = new Vector3(0.4f, 0.4f, 0.4f) * 0.7f;
				Utils.PlotTileLine(base.Center, base.Center + velocity * 10f, 8f, DelegateMethods.CastLightOpen);
				if (alpha == 255)
				{
					frame = Main.rand.Next(2) * 4;
				}
				if (++frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
					if (frame == 4)
					{
						frame = 0;
					}
					if (frame >= 8)
					{
						frame = 4;
					}
				}
				if (alpha > 0)
				{
					alpha = 0;
					scale = 1.1f;
					frame = Main.rand.Next(14);
					float num111 = 4f;
					for (int num112 = 0; (float)num112 < num111; num112++)
					{
						Vector2 spinningpoint6 = Vector2.UnitX * 0f;
						spinningpoint6 += -Vector2.UnitY.RotatedBy((float)num112 * ((float)Math.PI * 2f / num111)) * new Vector2(1f, 4f);
						spinningpoint6 = spinningpoint6.RotatedBy(velocity.ToRotation());
						int num113 = Dust.NewDust(base.Center, 0, 0, 15);
						Main.dust[num113].scale = 1.7f;
						Main.dust[num113].noGravity = true;
						Main.dust[num113].position = base.Center + spinningpoint6 + velocity.SafeNormalize(Vector2.Zero) * 50f;
						Main.dust[num113].velocity = Main.dust[num113].velocity * 2f + spinningpoint6.SafeNormalize(Vector2.UnitY) * 0.3f + velocity.SafeNormalize(Vector2.Zero) * 3f;
						Main.dust[num113].velocity *= 0.7f;
						Main.dust[num113].position += Main.dust[num113].velocity * 5f;
					}
				}
			}
			if (type == 661)
			{
				if (alpha <= 0)
				{
					for (int num114 = 0; num114 < 3; num114++)
					{
						int num115 = Dust.NewDust(position, width, height, 240);
						Main.dust[num115].noGravity = true;
						Main.dust[num115].velocity *= 0.3f;
						Main.dust[num115].noLight = true;
					}
				}
				if (alpha > 0)
				{
					alpha -= 55;
					scale = 1.3f;
					if (alpha < 0)
					{
						alpha = 0;
						float num116 = 16f;
						for (int num117 = 0; (float)num117 < num116; num117++)
						{
							Vector2 spinningpoint7 = Vector2.UnitX * 0f;
							spinningpoint7 += -Vector2.UnitY.RotatedBy((float)num117 * ((float)Math.PI * 2f / num116)) * new Vector2(1f, 4f);
							spinningpoint7 = spinningpoint7.RotatedBy(velocity.ToRotation());
							int num118 = Dust.NewDust(base.Center, 0, 0, 62);
							Main.dust[num118].scale = 1.5f;
							Main.dust[num118].noLight = true;
							Main.dust[num118].noGravity = true;
							Main.dust[num118].position = base.Center + spinningpoint7;
							Main.dust[num118].velocity = Main.dust[num118].velocity * 4f + velocity * 0.3f;
						}
					}
				}
			}
			if (type == 706)
			{
				if (wet)
				{
					Kill();
					return;
				}
				SlotId val;
				if (localAI[1] == 0f)
				{
					float[] array = localAI;
					val = SoundEngine.PlayTrackedSound(SoundID.DD2_PhantomPhoenixShot, base.Center);
					array[0] = ((SlotId)(val)).ToFloat();
					localAI[1] += 1f;
					for (int num119 = 0; num119 < 15; num119++)
					{
						if (Main.rand.Next(4) != 0)
						{
							Dust dust7 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, Utils.SelectRandom<int>(Main.rand, 6, 31, 31));
							dust7.noGravity = true;
							dust7.velocity *= 2.3f;
							dust7.fadeIn = 1.5f;
							dust7.noLight = true;
						}
					}
				}
				ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[0]));
				if (activeSound != null)
				{
					activeSound.Position = base.Center;
				}
				else
				{
					float[] array2 = localAI;
					val = SlotId.Invalid;
					array2[0] = ((SlotId)(val)).ToFloat();
				}
				if (alpha <= 0)
				{
					for (int num120 = 0; num120 < 2; num120++)
					{
						if (Main.rand.Next(4) != 0)
						{
							Dust dust8 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, Utils.SelectRandom<int>(Main.rand, 6, 31, 31));
							dust8.noGravity = true;
							dust8.velocity *= 2.3f;
							dust8.fadeIn = 1.5f;
							dust8.noLight = true;
						}
					}
					Vector2 spinningpoint8 = new Vector2(0f, (float)Math.Cos((float)frameCounter * ((float)Math.PI * 2f) / 40f - (float)Math.PI / 2f)) * 16f;
					spinningpoint8 = spinningpoint8.RotatedBy(rotation);
					Vector2 vector22 = velocity.SafeNormalize(Vector2.Zero);
					for (int num121 = 0; num121 < 1; num121++)
					{
						Dust dust9 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, 6);
						dust9.noGravity = true;
						dust9.position = base.Center + spinningpoint8;
						dust9.velocity *= 0f;
						dust9.fadeIn = 1.4f;
						dust9.scale = 1.15f;
						dust9.noLight = true;
						dust9.position += velocity * 1.2f;
						dust9.velocity += vector22 * 2f;
						Dust dust10 = Dust.NewDustDirect(base.Center - base.Size / 4f, width / 2, height / 2, 6);
						dust10.noGravity = true;
						dust10.position = base.Center + spinningpoint8;
						dust10.velocity *= 0f;
						dust10.fadeIn = 1.4f;
						dust10.scale = 1.15f;
						dust10.noLight = true;
						dust10.position += velocity * 0.5f;
						dust10.position += velocity * 1.2f;
						dust10.velocity += vector22 * 2f;
					}
				}
				if (++frameCounter >= 40)
				{
					frameCounter = 0;
				}
				frame = frameCounter / 5;
				if (alpha > 0)
				{
					alpha -= 55;
					if (alpha < 0)
					{
						alpha = 0;
						float num122 = 16f;
						for (int num123 = 0; (float)num123 < num122; num123++)
						{
							Vector2 spinningpoint9 = Vector2.UnitX * 0f;
							spinningpoint9 += -Vector2.UnitY.RotatedBy((float)num123 * ((float)Math.PI * 2f / num122)) * new Vector2(1f, 4f);
							spinningpoint9 = spinningpoint9.RotatedBy(velocity.ToRotation());
							int num124 = Dust.NewDust(base.Center, 0, 0, 6);
							Main.dust[num124].scale = 1.5f;
							Main.dust[num124].noLight = true;
							Main.dust[num124].noGravity = true;
							Main.dust[num124].position = base.Center + spinningpoint9;
							Main.dust[num124].velocity = Main.dust[num124].velocity * 4f + velocity * 0.3f;
						}
					}
				}
				DelegateMethods.v3_1 = new Vector3(1f, 0.6f, 0.2f);
				Utils.PlotTileLine(base.Center, base.Center + velocity * 4f, 40f, DelegateMethods.CastLightOpen);
			}
			if (type == 638)
			{
				float num125 = velocity.Length();
				if (alpha > 0)
				{
					alpha -= (byte)((double)num125 * 0.3);
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				Rectangle hitbox = base.Hitbox;
				hitbox.Offset((int)velocity.X, (int)velocity.Y);
				bool flag2 = false;
				for (int num126 = 0; num126 < 200; num126++)
				{
					NPC nPC = Main.npc[num126];
					if (nPC.active && !nPC.dontTakeDamage && nPC.immune[owner] == 0 && localNPCImmunity[num126] == 0 && nPC.Hitbox.Intersects(hitbox) && !nPC.friendly)
					{
						flag2 = true;
						break;
					}
				}
				if (flag2)
				{
					int num127 = Main.rand.Next(15, 31);
					for (int num128 = 0; num128 < num127; num128++)
					{
						int num129 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 0.8f);
						Main.dust[num129].velocity *= 1.6f;
						Main.dust[num129].velocity.Y -= 1f;
						Main.dust[num129].velocity += velocity;
						Main.dust[num129].noGravity = true;
					}
				}
			}
			if (type == 257 || type == 593)
			{
				if (alpha > 0)
				{
					alpha -= 10;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 876)
			{
				if (ai[1] == 0f)
				{
					tileCollide = true;
				}
				else
				{
					tileCollide = false;
				}
				if (alpha > 0)
				{
					alpha -= 10;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 88)
			{
				if (alpha > 0)
				{
					alpha -= 10;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 532)
			{
				ai[0] += 1f;
			}
			bool flag3 = true;
			switch (type)
			{
			case 5:
			case 14:
			case 20:
			case 36:
			case 38:
			case 55:
			case 83:
			case 84:
			case 88:
			case 89:
			case 98:
			case 100:
			case 104:
			case 110:
			case 158:
			case 159:
			case 160:
			case 161:
			case 180:
			case 184:
			case 242:
			case 248:
			case 257:
			case 259:
			case 265:
			case 270:
			case 279:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 299:
			case 302:
			case 323:
			case 325:
			case 348:
			case 349:
			case 350:
			case 355:
			case 374:
			case 376:
			case 389:
			case 435:
			case 436:
			case 438:
			case 440:
			case 442:
			case 449:
			case 459:
			case 462:
			case 467:
			case 468:
			case 469:
			case 472:
			case 483:
			case 484:
			case 485:
			case 498:
			case 576:
			case 577:
			case 585:
			case 592:
			case 593:
			case 601:
			case 606:
			case 616:
			case 634:
			case 635:
			case 638:
			case 639:
			case 660:
			case 661:
			case 682:
			case 684:
			case 706:
			case 709:
			case 710:
			case 712:
			case 876:
				flag3 = false;
				break;
			}
			if (flag3)
			{
				ai[0] += 1f;
			}
			if (type == 270)
			{
				int num130 = 0;
				num130 = Player.FindClosest(base.Center, 1, 1);
				ai[1] += 1f;
				if (ai[1] < 110f && ai[1] > 30f)
				{
					float num131 = velocity.Length();
					Vector2 vector23 = Main.player[num130].Center - base.Center;
					vector23.Normalize();
					vector23 *= num131;
					velocity = (velocity * 24f + vector23) / 25f;
					velocity.Normalize();
					velocity *= num131;
				}
				if (velocity.Length() < 18f)
				{
					velocity *= 1.02f;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item8, position);
					for (int num132 = 0; num132 < 10; num132++)
					{
						int num133 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 5, velocity.X, velocity.Y, 0, default(Color), 2f);
						Main.dust[num133].noGravity = true;
						Main.dust[num133].velocity = base.Center - Main.dust[num133].position;
						Main.dust[num133].velocity.Normalize();
						Main.dust[num133].velocity *= -5f;
						Main.dust[num133].velocity += velocity / 2f;
					}
				}
			}
			if (type == 585)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item8, position);
					for (int num134 = 0; num134 < 3; num134++)
					{
						int num135 = Dust.NewDust(position, width, height, 27, velocity.X, velocity.Y, 0, default(Color), 2f);
						Main.dust[num135].noGravity = true;
						Main.dust[num135].velocity = base.Center - Main.dust[num135].position;
						Main.dust[num135].velocity.Normalize();
						Main.dust[num135].velocity *= -5f;
						Main.dust[num135].velocity += velocity / 2f;
						Main.dust[num135].noLight = true;
					}
				}
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				frameCounter++;
				if (frameCounter >= 12)
				{
					frameCounter = 0;
				}
				frame = frameCounter / 2;
				if (frame > 3)
				{
					frame = 6 - frame;
				}
				Vector3 vector24 = NPCID.Sets.MagicAuraColor[54].ToVector3();
				Lighting.AddLight(base.Center, vector24.X, vector24.Y, vector24.Z);
				if (Main.rand.Next(3) == 0)
				{
					int num136 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 27, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					Main.dust[num136].position -= velocity * 2f;
					Main.dust[num136].noLight = true;
					Main.dust[num136].noGravity = true;
					Main.dust[num136].velocity.X *= 0.3f;
					Main.dust[num136].velocity.Y *= 0.3f;
				}
			}
			if (type == 594)
			{
				int num137 = (int)(43f - ai[1]) / 13;
				if (num137 < 1)
				{
					num137 = 1;
				}
				int num138 = ((ai[1] < 20f) ? 6 : 31);
				for (int num139 = 0; num139 < num137; num139++)
				{
					int num140 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, num138, velocity.X * 0.2f, velocity.Y * 0.2f, 0, default(Color), 2f);
					Main.dust[num140].position -= velocity * 2f;
					Main.dust[num140].noLight = true;
					Main.dust[num140].noGravity = true;
					Main.dust[num140].velocity.X *= 0.3f;
					Main.dust[num140].velocity.Y *= 0.3f;
					if (num138 == 6)
					{
						Main.dust[num140].fadeIn = Main.rand.NextFloat() * 2f;
					}
				}
				ai[1] += 1f;
				if (ai[1] > (float)(43 * MaxUpdates))
				{
					Kill();
					return;
				}
			}
			if (type == 622)
			{
				int num141 = 229;
				if (Main.rand.Next(3) != 0)
				{
					int num142 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, num141, velocity.X * 0.2f, velocity.Y * 0.2f, 0, default(Color), 1.2f);
					Main.dust[num142].position -= velocity * 2f;
					Main.dust[num142].noLight = true;
					Main.dust[num142].noGravity = true;
					Main.dust[num142].velocity.X *= 0.3f;
					Main.dust[num142].velocity.Y *= 0.3f;
				}
				ai[1] += 1f;
				if (ai[1] > (float)(23 * MaxUpdates))
				{
					Kill();
					return;
				}
			}
			if (type == 587)
			{
				Color newColor2 = Main.hslToRgb(ai[1], 1f, 0.5f);
				newColor2.A = 200;
				localAI[0] += 1f;
				if (!(localAI[0] < 2f))
				{
					if (localAI[0] == 2f)
					{
						SoundEngine.PlaySound(SoundID.Item5, position);
						for (int num143 = 0; num143 < 4; num143++)
						{
							int num144 = Dust.NewDust(position, width, height, 76, velocity.X, velocity.Y, 0, newColor2, 1.1f);
							Main.dust[num144].noGravity = true;
							Main.dust[num144].velocity = base.Center - Main.dust[num144].position;
							Main.dust[num144].velocity.Normalize();
							Main.dust[num144].velocity *= -3f;
							Main.dust[num144].velocity += velocity / 2f;
						}
					}
					else
					{
						frame++;
						if (frame > 2)
						{
							frame = 0;
						}
						for (int num145 = 0; num145 < 1; num145++)
						{
							int num146 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 76, velocity.X * 0.2f, velocity.Y * 0.2f, 0, newColor2, 0.9f);
							Main.dust[num146].position = base.Center;
							Main.dust[num146].noGravity = true;
							Main.dust[num146].velocity = velocity * 0.5f;
						}
					}
				}
			}
			if (type == 349)
			{
				frame = (int)ai[0];
				velocity.Y += 0.2f;
				if (localAI[0] == 0f || localAI[0] == 2f)
				{
					scale += 0.01f;
					alpha -= 50;
					if (alpha <= 0)
					{
						localAI[0] = 1f;
						alpha = 0;
					}
				}
				else if (localAI[0] == 1f)
				{
					scale -= 0.01f;
					alpha += 50;
					if (alpha >= 255)
					{
						localAI[0] = 2f;
						alpha = 255;
					}
				}
			}
			if (type == 348)
			{
				if (localAI[1] == 0f)
				{
					localAI[1] = 1f;
					SoundEngine.PlaySound(SoundID.Item8, position);
				}
				if (ai[0] == 0f || ai[0] == 2f)
				{
					scale += 0.01f;
					alpha -= 50;
					if (alpha <= 0)
					{
						ai[0] = 1f;
						alpha = 0;
					}
				}
				else if (ai[0] == 1f)
				{
					scale -= 0.01f;
					alpha += 50;
					if (alpha >= 255)
					{
						ai[0] = 2f;
						alpha = 255;
					}
				}
			}
			if (type == 572)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, position);
				}
				for (int num147 = 0; num147 < 2; num147++)
				{
					int num148 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 40, velocity.X, velocity.Y, 100);
					Main.dust[num148].velocity *= 0.5f;
					Main.dust[num148].velocity += velocity;
					Main.dust[num148].velocity *= 0.5f;
					Main.dust[num148].noGravity = true;
					Main.dust[num148].scale = 1.2f;
					Main.dust[num148].position = (base.Center + position) / 2f;
				}
			}
			if (type == 577)
			{
				Lighting.AddLight(base.Center, 0.1f, 0.3f, 0.4f);
			}
			else if (type == 576)
			{
				Lighting.AddLight(base.Center, 0.4f, 0.2f, 0.4f);
				for (int num149 = 0; num149 < 5; num149++)
				{
					Dust obj4 = Main.dust[Dust.NewDust(position, width, height, 242, velocity.X, velocity.Y, 100)];
					obj4.velocity = Vector2.Zero;
					obj4.position -= velocity / 5f * num149;
					obj4.noGravity = true;
					obj4.scale = 0.8f;
					obj4.noLight = true;
				}
			}
			else if (type == 581)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, base.Center);
				}
				for (int num150 = 0; num150 < 2; num150++)
				{
					int num151 = Utils.SelectRandom<int>(Main.rand, 229, 161, 161);
					Dust obj5 = Main.dust[Dust.NewDust(position, width, height, num151, velocity.X, velocity.Y, 100)];
					obj5.velocity = obj5.velocity / 4f + velocity / 2f;
					obj5.noGravity = true;
					obj5.scale = 1.2f;
					obj5.position = base.Center;
					obj5.noLight = true;
				}
			}
			else if (type == 671)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num152 = 0; num152 < 8; num152++)
					{
						int num153 = Utils.SelectRandom<int>(Main.rand, 27, 62);
						Dust obj6 = Main.dust[Dust.NewDust(position, width, height, num153, velocity.X, velocity.Y, 100)];
						obj6.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + velocity.SafeNormalize(Vector2.Zero) * 3f;
						obj6.noGravity = true;
						obj6.scale = 1.5f;
						obj6.fadeIn = 1.2f;
						obj6.position = base.Center;
						obj6.noLight = true;
					}
				}
				alpha -= 20;
				if (alpha < 0)
				{
					alpha = 0;
				}
				for (int num154 = 0; num154 < 2; num154++)
				{
					int num155 = Utils.SelectRandom<int>(Main.rand, 27, 27, 62);
					Dust obj7 = Main.dust[Dust.NewDust(position, width, height, num155, velocity.X, velocity.Y, 100)];
					obj7.velocity = obj7.velocity / 4f + velocity / 2f;
					obj7.noGravity = true;
					obj7.scale = 1.2f;
					obj7.position = base.Center;
					obj7.noLight = true;
				}
			}
			else if (type == 811)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item17, base.Center);
					localAI[0] = 1f;
					for (int num156 = 0; num156 < 8; num156++)
					{
						Dust obj8 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
						obj8.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + velocity.SafeNormalize(Vector2.Zero) * 3f;
						obj8.scale = 1.5f;
						obj8.fadeIn = 1.7f;
						obj8.position = base.Center;
					}
				}
				alpha -= 20;
				if (alpha < 0)
				{
					alpha = 0;
				}
				for (int num157 = 0; num157 < 2; num157++)
				{
					Dust obj9 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
					obj9.velocity = obj9.velocity / 4f + velocity / 2f;
					obj9.scale = 1.2f;
					obj9.position = base.Center + Main.rand.NextFloat() * velocity * 2f;
				}
			}
			else if (type == 819)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num158 = 0; num158 < 8; num158++)
					{
						Dust obj10 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
						obj10.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + velocity.SafeNormalize(Vector2.Zero) * 2f;
						obj10.scale = 0.9f;
						obj10.fadeIn = 1.1f;
						obj10.position = base.Center;
					}
				}
				alpha -= 20;
				if (alpha < 0)
				{
					alpha = 0;
				}
				for (int num159 = 1; num159 < 3; num159++)
				{
					Dust obj11 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
					obj11.velocity = velocity;
					obj11.velocity *= 0.75f;
					obj11.scale = 1f;
					obj11.position = base.Center + velocity * num159;
				}
			}
			else if (type == 814)
			{
				if (localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item171, base.Center);
					localAI[0] = 1f;
					for (int num160 = 0; num160 < 8; num160++)
					{
						Dust obj12 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
						obj12.velocity = (Main.rand.NextFloatDirection() * (float)Math.PI).ToRotationVector2() * 2f + velocity.SafeNormalize(Vector2.Zero) * 2f;
						obj12.scale = 0.9f;
						obj12.fadeIn = 1.1f;
						obj12.position = base.Center;
					}
				}
				alpha -= 20;
				if (alpha < 0)
				{
					alpha = 0;
				}
				for (int num161 = 0; num161 < 2; num161++)
				{
					Dust obj13 = Main.dust[Dust.NewDust(position, width, height, 5, velocity.X, velocity.Y, 100)];
					obj13.velocity = obj13.velocity / 4f + velocity / 2f;
					obj13.scale = 1.2f;
					obj13.position = base.Center + Main.rand.NextFloat() * velocity * 2f;
				}
				for (int num162 = 1; num162 < oldPos.Length && !(oldPos[num162] == Vector2.Zero); num162++)
				{
					if (Main.rand.Next(3) == 0)
					{
						Dust obj14 = Main.dust[Dust.NewDust(oldPos[num162], width, height, 5, velocity.X, velocity.Y, 100)];
						obj14.velocity = obj14.velocity / 4f + velocity / 2f;
						obj14.scale = 1.2f;
						obj14.position = oldPos[num162] + base.Size / 2f + Main.rand.NextFloat() * velocity * 2f;
					}
				}
			}
			else if (type == 675)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlayTrackedSound(SoundID.DD2_DarkMageAttack, base.Center);
				}
				alpha -= 20;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			else if (type == 676)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item17, base.Center);
				}
				alpha -= 20;
				if (alpha < 0)
				{
					alpha = 0;
				}
				for (int num163 = 0; num163 < 2; num163++)
				{
					if (Main.rand.Next(5) != 0)
					{
						int num164 = Utils.SelectRandom<int>(Main.rand, 4, 256);
						Dust dust11 = Main.dust[Dust.NewDust(position, width, height, num164, velocity.X, velocity.Y, 100)];
						dust11.velocity = dust11.velocity / 4f + velocity / 2f;
						dust11.scale = 0.8f + Main.rand.NextFloat() * 0.4f;
						dust11.position = base.Center;
						dust11.position += new Vector2(width * 2, 0f).RotatedBy((float)Math.PI * 2f * Main.rand.NextFloat()) * Main.rand.NextFloat();
						dust11.noLight = true;
						if (dust11.type == 4)
						{
							dust11.color = new Color(80, 170, 40, 120);
						}
					}
				}
			}
			else if (type == 686)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyFireballShot, base.Center);
				}
				if (ai[0] >= 2f)
				{
					alpha -= 25;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					Dust dust12 = Dust.NewDustDirect(position, width, height, 55, 0f, 0f, 200);
					dust12.scale *= 0.7f;
					dust12.velocity += velocity * 1f;
				}
				if (Main.rand.Next(3) == 0 && oldPos[9] != Vector2.Zero)
				{
					Dust dust13 = Dust.NewDustDirect(oldPos[9], width, height, 55, 0f, 0f, 50);
					dust13.scale *= 0.85f;
					dust13.velocity += velocity * 0.85f;
					dust13.color = Color.Purple;
				}
			}
			else if (type == 711)
			{
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					for (int num165 = 0; num165 < 10; num165++)
					{
						Dust dust14 = Dust.NewDustDirect(position, width, height, 55, 0f, 0f, 200);
						dust14.scale *= 0.65f;
						dust14.velocity *= 1.5f;
						dust14.velocity += velocity * 0.3f;
						dust14.fadeIn = 0.7f;
					}
				}
				if (ai[0] >= 2f)
				{
					alpha -= 25;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				if (Main.rand.Next(4) == 0)
				{
					Dust dust15 = Dust.NewDustDirect(position, width, height, 55, 0f, 0f, 200);
					dust15.scale *= 0.7f;
					dust15.velocity += velocity * 1f;
				}
				if (Main.rand.Next(3) == 0 && oldPos[9] != Vector2.Zero)
				{
					Dust dust16 = Dust.NewDustDirect(oldPos[9], width, height, 55, 0f, 0f, 50);
					dust16.scale *= 0.85f;
					dust16.velocity += velocity * 0.85f;
					dust16.color = Color.Purple;
				}
			}
			if (type == 299)
			{
				if (localAI[0] == 6f)
				{
					SoundEngine.PlaySound(SoundID.Item8, position);
					for (int num166 = 0; num166 < 40; num166++)
					{
						int num167 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 181, 0f, 0f, 100);
						Main.dust[num167].velocity *= 3f;
						Main.dust[num167].velocity += velocity * 0.75f;
						Main.dust[num167].scale *= 1.2f;
						Main.dust[num167].noGravity = true;
					}
				}
				localAI[0] += 1f;
				if (localAI[0] > 6f)
				{
					for (int num168 = 0; num168 < 3; num168++)
					{
						int num169 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 181, velocity.X * 0.2f, velocity.Y * 0.2f, 100);
						Main.dust[num169].velocity *= 0.6f;
						Main.dust[num169].scale *= 1.4f;
						Main.dust[num169].noGravity = true;
					}
				}
			}
			else if (type == 270 || type == 837)
			{
				if (type == 270)
				{
					alpha = 0;
				}
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				frame++;
				if (frame > 2)
				{
					frame = 0;
				}
				if (type == 270)
				{
					for (int num170 = 0; num170 < 2; num170++)
					{
						int num171 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 5, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 1.5f);
						Main.dust[num171].position -= velocity;
						Main.dust[num171].noGravity = true;
						Main.dust[num171].velocity.X *= 0.3f;
						Main.dust[num171].velocity.Y *= 0.3f;
					}
				}
				else
				{
					for (int num172 = 0; num172 < 2; num172++)
					{
						int num173 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
						Main.dust[num173].position -= velocity * 2f;
						Main.dust[num173].noGravity = true;
						Main.dust[num173].velocity.X *= 0.3f;
						Main.dust[num173].velocity.Y *= 0.3f;
					}
				}
			}
			if (type == 259)
			{
				if (alpha > 0)
				{
					alpha -= 10;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			if (type == 265)
			{
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha == 0)
				{
					int num174 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 163, velocity.X, velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num174].noGravity = true;
					Main.dust[num174].velocity *= 0.3f;
					Main.dust[num174].velocity -= velocity * 0.4f;
				}
			}
			if (type == 355)
			{
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (alpha == 0)
				{
					int num175 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 205, velocity.X, velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num175].noGravity = true;
					Main.dust[num175].velocity *= 0.3f;
					Main.dust[num175].velocity -= velocity * 0.4f;
				}
			}
			if (type == 357)
			{
				if (alpha < 170)
				{
					for (int num176 = 0; num176 < 10; num176++)
					{
						float x = position.X - velocity.X / 10f * (float)num176;
						float y = position.Y - velocity.Y / 10f * (float)num176;
						int num177 = Dust.NewDust(new Vector2(x, y), 1, 1, 206);
						Main.dust[num177].alpha = alpha;
						Main.dust[num177].position.X = x;
						Main.dust[num177].position.Y = y;
						Main.dust[num177].velocity *= 0f;
						Main.dust[num177].noGravity = true;
					}
				}
				if (alpha > 0)
				{
					alpha -= 25;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			else if (type == 207 || type == 837)
			{
				if (type == 207 && alpha < 170)
				{
					for (int num178 = 0; num178 < 10; num178++)
					{
						float x2 = position.X - velocity.X / 10f * (float)num178;
						float y2 = position.Y - velocity.Y / 10f * (float)num178;
						int num179 = Dust.NewDust(new Vector2(x2, y2), 1, 1, 75);
						Main.dust[num179].alpha = alpha;
						Main.dust[num179].position.X = x2;
						Main.dust[num179].position.Y = y2;
						Main.dust[num179].velocity *= 0f;
						Main.dust[num179].noGravity = true;
					}
				}
				float num180 = (float)Math.Sqrt(velocity.X * velocity.X + velocity.Y * velocity.Y);
				float num181 = localAI[0];
				if (num181 == 0f)
				{
					localAI[0] = num180;
					num181 = num180;
				}
				if (alpha > 0)
				{
					alpha -= 25;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				float num182 = position.X;
				float num183 = position.Y;
				float num184 = 300f;
				bool flag4 = false;
				int num185 = 0;
				if (ai[1] == 0f)
				{
					for (int num186 = 0; num186 < 200; num186++)
					{
						if (Main.npc[num186].CanBeChasedBy(this) && (ai[1] == 0f || ai[1] == (float)(num186 + 1)))
						{
							float num187 = Main.npc[num186].position.X + (float)(Main.npc[num186].width / 2);
							float num188 = Main.npc[num186].position.Y + (float)(Main.npc[num186].height / 2);
							float num189 = Math.Abs(position.X + (float)(width / 2) - num187) + Math.Abs(position.Y + (float)(height / 2) - num188);
							if (num189 < num184 && Collision.CanHit(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), 1, 1, Main.npc[num186].position, Main.npc[num186].width, Main.npc[num186].height))
							{
								num184 = num189;
								num182 = num187;
								num183 = num188;
								flag4 = true;
								num185 = num186;
							}
						}
					}
					if (flag4)
					{
						ai[1] = num185 + 1;
					}
					flag4 = false;
				}
				if (ai[1] > 0f)
				{
					int num190 = (int)(ai[1] - 1f);
					if (Main.npc[num190].active && Main.npc[num190].CanBeChasedBy(this, ignoreDontTakeDamage: true) && !Main.npc[num190].dontTakeDamage)
					{
						float num191 = Main.npc[num190].position.X + (float)(Main.npc[num190].width / 2);
						float num192 = Main.npc[num190].position.Y + (float)(Main.npc[num190].height / 2);
						if (Math.Abs(position.X + (float)(width / 2) - num191) + Math.Abs(position.Y + (float)(height / 2) - num192) < 1000f)
						{
							flag4 = true;
							num182 = Main.npc[num190].position.X + (float)(Main.npc[num190].width / 2);
							num183 = Main.npc[num190].position.Y + (float)(Main.npc[num190].height / 2);
						}
					}
					else
					{
						ai[1] = 0f;
					}
				}
				if (!friendly)
				{
					flag4 = false;
				}
				if (flag4)
				{
					float num193 = num181;
					Vector2 vector25 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num194 = num182 - vector25.X;
					float num195 = num183 - vector25.Y;
					float num196 = (float)Math.Sqrt(num194 * num194 + num195 * num195);
					num196 = num193 / num196;
					num194 *= num196;
					num195 *= num196;
					int num197 = 8;
					if (type == 837)
					{
						num197 = 32;
					}
					velocity.X = (velocity.X * (float)(num197 - 1) + num194) / (float)num197;
					velocity.Y = (velocity.Y * (float)(num197 - 1) + num195) / (float)num197;
				}
			}
			else if (type == 81 || type == 91)
			{
				if (ai[0] >= 20f)
				{
					ai[0] = 20f;
					velocity.Y += 0.07f;
				}
			}
			else if (type == 174 || type == 605 || type == 920 || type == 921 || type == 926 || type == 937)
			{
				if (ai[0] >= 5f)
				{
					ai[0] = 5f;
					velocity.Y += 0.15f;
				}
			}
			else if (type == 962)
			{
				frame = (int)ai[1];
				if (localAI[0] == 0f)
				{
					localAI[0] = 1f;
					rotation = velocity.ToRotation();
					for (int num198 = 0; num198 < 5; num198++)
					{
						Dust dust17 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), 16, velocity * MathHelper.Lerp(0.2f, 0.7f, Main.rand.NextFloat()));
						dust17.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
						dust17.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
					}
					for (int num199 = 0; num199 < 5; num199++)
					{
						Dust dust18 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(24f, 24f), 16, Main.rand.NextVector2Circular(2f, 2f) + velocity * MathHelper.Lerp(0.2f, 0.5f, Main.rand.NextFloat()));
						dust18.velocity += Main.rand.NextVector2Circular(0.5f, 0.5f);
						dust18.scale = 0.8f + Main.rand.NextFloat() * 0.5f;
						dust18.fadeIn = 1f;
					}
				}
				if (ai[0] >= 5f)
				{
					velocity.Y += 0.15f;
				}
			}
			else if (type == 337)
			{
				if (position.Y > Main.player[owner].position.Y - 300f)
				{
					tileCollide = true;
				}
				if ((double)position.Y < Main.worldSurface * 16.0)
				{
					tileCollide = true;
				}
				frame = (int)ai[1];
				if (Main.rand.Next(2) == 0)
				{
					int num200 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 197);
					Main.dust[num200].velocity *= 0.5f;
					Main.dust[num200].noGravity = true;
				}
			}
			else if (type == 645)
			{
				if (ai[1] != -1f && position.Y > ai[1])
				{
					tileCollide = true;
				}
				if (position.HasNaNs())
				{
					Kill();
					return;
				}
				bool num201 = WorldGen.SolidTile(Framing.GetTileSafely((int)position.X / 16, (int)position.Y / 16));
				Dust dust19 = Main.dust[Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229)];
				dust19.position = base.Center;
				dust19.velocity = Vector2.Zero;
				dust19.noGravity = true;
				if (num201)
				{
					dust19.noLight = true;
				}
				if (ai[1] == -1f)
				{
					ai[0] += 1f;
					velocity = Vector2.Zero;
					tileCollide = false;
					penetrate = -1;
					position = base.Center;
					width = (height = 140);
					base.Center = position;
					alpha -= 10;
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (++frameCounter >= MaxUpdates * 3)
					{
						frameCounter = 0;
						frame++;
					}
					if (ai[0] >= (float)(Main.projFrames[type] * MaxUpdates * 3))
					{
						Kill();
					}
					return;
				}
				alpha = 255;
				if (numUpdates == 0)
				{
					int num202 = -1;
					float num203 = 60f;
					for (int num204 = 0; num204 < 200; num204++)
					{
						NPC nPC2 = Main.npc[num204];
						if (nPC2.CanBeChasedBy(this))
						{
							float num205 = Distance(nPC2.Center);
							if (num205 < num203 && Collision.CanHitLine(base.Center, 0, 0, nPC2.Center, 0, 0))
							{
								num203 = num205;
								num202 = num204;
							}
						}
					}
					if (num202 != -1)
					{
						ai[0] = 0f;
						ai[1] = -1f;
						netUpdate = true;
						return;
					}
				}
			}
			else if (type >= 424 && type <= 426)
			{
				if (position.Y > Main.player[owner].position.Y - 300f)
				{
					tileCollide = true;
				}
				if ((double)position.Y < Main.worldSurface * 16.0)
				{
					tileCollide = true;
				}
				scale = ai[1];
				rotation += velocity.X * 2f;
				Vector2 vector26 = base.Center + Vector2.Normalize(velocity) * 10f;
				Dust obj15 = Main.dust[Dust.NewDust(position, width, height, 6)];
				obj15.position = vector26;
				obj15.velocity = velocity.RotatedBy(1.5707963705062866) * 0.33f + velocity / 4f;
				obj15.position += velocity.RotatedBy(1.5707963705062866);
				obj15.fadeIn = 0.5f;
				obj15.noGravity = true;
				Dust obj16 = Main.dust[Dust.NewDust(position, width, height, 6)];
				obj16.position = vector26;
				obj16.velocity = velocity.RotatedBy(-1.5707963705062866) * 0.33f + velocity / 4f;
				obj16.position += velocity.RotatedBy(-1.5707963705062866);
				obj16.fadeIn = 0.5f;
				obj16.noGravity = true;
				for (int num206 = 0; num206 < 1; num206++)
				{
					int num207 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6);
					Main.dust[num207].velocity *= 0.5f;
					Main.dust[num207].scale *= 1.3f;
					Main.dust[num207].fadeIn = 1f;
					Main.dust[num207].noGravity = true;
				}
			}
			else if (type == 344)
			{
				if (WorldGen.SolidTile((int)position.X / 16, (int)(position.Y + velocity.Y) / 16 + 1) || WorldGen.SolidTile((int)(position.X + (float)width) / 16, (int)(position.Y + velocity.Y) / 16 + 1))
				{
					Kill();
					return;
				}
				localAI[1] += 1f;
				if (localAI[1] > 5f)
				{
					alpha -= 50;
					if (alpha < 0)
					{
						alpha = 0;
					}
				}
				frame = (int)ai[1];
				if (localAI[1] > 20f)
				{
					localAI[1] = 20f;
					velocity.Y += 0.15f;
				}
				rotation += Main.windSpeedCurrent * 0.2f;
				velocity.X += Main.windSpeedCurrent * 0.1f;
			}
			else if (type == 336 || type == 345)
			{
				if (type == 345 && localAI[0] == 0f)
				{
					localAI[0] = 1f;
					SoundEngine.PlaySound(SoundID.Item1, position);
				}
				if (ai[0] >= 50f)
				{
					ai[0] = 50f;
					velocity.Y += 0.5f;
				}
			}
			else if (type == 246)
			{
				alpha -= 20;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (ai[0] >= 60f)
				{
					ai[0] = 60f;
					velocity.Y += 0.15f;
				}
			}
			else if (type == 311)
			{
				if (alpha > 0)
				{
					alpha -= 50;
				}
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (ai[0] >= 30f)
				{
					ai[0] = 30f;
					if (ai[1] == 0f)
					{
						ai[1] = 1f;
					}
					velocity.Y += 0.5f;
				}
			}
			else if (type == 312)
			{
				if (ai[0] >= 5f)
				{
					alpha = 0;
				}
				if (ai[0] >= 20f)
				{
					ai[0] = 30f;
					velocity.Y += 0.5f;
				}
				Lighting.AddLight(base.Center, 0.6f, 0.4f, 0.3f);
			}
			else if (type != 239 && type != 264)
			{
				if (type == 176)
				{
					if (ai[0] >= 15f)
					{
						ai[0] = 15f;
						velocity.Y += 0.05f;
					}
				}
				else if (type == 275 || type == 276)
				{
					if (alpha > 0)
					{
						alpha -= 30;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (ai[0] >= 35f)
					{
						ai[0] = 35f;
						velocity.Y += 0.025f;
					}
					if (Main.expertMode)
					{
						float num208 = 18f;
						int num209 = Player.FindClosest(base.Center, 1, 1);
						Vector2 vector27 = Main.player[num209].Center - base.Center;
						vector27.Normalize();
						vector27 *= num208;
						int num210 = 70;
						velocity = (velocity * (num210 - 1) + vector27) / num210;
						if (velocity.Length() < 14f)
						{
							velocity.Normalize();
							velocity *= 14f;
						}
						tileCollide = false;
						if (timeLeft > 180)
						{
							timeLeft = 180;
						}
					}
				}
				else if (type == 172)
				{
					if (ai[0] >= 17f)
					{
						ai[0] = 17f;
						velocity.Y += 0.085f;
					}
				}
				else if (type == 117)
				{
					if (ai[0] >= 35f)
					{
						ai[0] = 35f;
						velocity.Y += 0.06f;
					}
				}
				else if (type == 120)
				{
					int num211 = Dust.NewDust(new Vector2(position.X - velocity.X, position.Y - velocity.Y), width, height, 67, velocity.X, velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num211].noGravity = true;
					Main.dust[num211].velocity *= 0.3f;
					if (ai[0] >= 30f)
					{
						ai[0] = 30f;
						velocity.Y += 0.05f;
					}
				}
				else if (type == 195)
				{
					if (ai[0] >= 20f)
					{
						ai[0] = 20f;
						velocity.Y += 0.3f;
						tileCollide = true;
					}
					else
					{
						tileCollide = false;
					}
				}
				else if (type == 267 || type == 477 || type == 478 || type == 479)
				{
					localAI[0] += 1f;
					if (localAI[0] > 3f)
					{
						alpha = 0;
					}
					if (ai[0] >= 20f)
					{
						ai[0] = 20f;
						if (type != 477)
						{
							velocity.Y += 0.075f;
						}
					}
					if (type == 479 && Main.myPlayer == owner)
					{
						if (ai[1] >= 0f)
						{
							penetrate = -1;
						}
						else if (penetrate < 0)
						{
							penetrate = 1;
						}
						if (ai[1] >= 0f)
						{
							ai[1] += 1f;
						}
						if (ai[1] > (float)Main.rand.Next(5, 30))
						{
							ai[1] = -1000f;
							float num212 = velocity.Length();
							Vector2 vector28 = velocity;
							vector28.Normalize();
							int num213 = Main.rand.Next(2, 4);
							if (Main.rand.Next(4) == 0)
							{
								num213++;
							}
							for (int num214 = 0; num214 < num213; num214++)
							{
								Vector2 vector29 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
								vector29.Normalize();
								vector29 += vector28 * 2f;
								vector29.Normalize();
								vector29 *= num212;
								NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector29.X, vector29.Y, type, damage, knockBack, owner, 0f, -1000f);
							}
						}
					}
					if (type == 478 && Main.myPlayer == owner)
					{
						ai[1] += 1f;
						if (ai[1] > (float)Main.rand.Next(5, 20))
						{
							if (timeLeft > 40)
							{
								timeLeft -= 20;
							}
							ai[1] = 0f;
							NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 480, (int)((double)damage * 0.8), knockBack * 0.5f, owner);
						}
					}
				}
				else if (type == 408)
				{
					if (ai[0] >= 45f)
					{
						ai[0] = 45f;
						velocity.Y += 0.05f;
					}
				}
				else if (type == 616)
				{
					if (alpha < 170)
					{
						float num215 = 3f;
						for (int num216 = 0; (float)num216 < num215; num216++)
						{
							int num217 = Dust.NewDust(position, 1, 1, 229);
							Main.dust[num217].position = base.Center - velocity / num215 * num216;
							Main.dust[num217].velocity *= 0f;
							Main.dust[num217].noGravity = true;
							Main.dust[num217].alpha = 200;
							Main.dust[num217].scale = 0.5f;
						}
					}
					float num218 = (float)Math.Sqrt(velocity.X * velocity.X + velocity.Y * velocity.Y);
					float num219 = localAI[0];
					if (num219 == 0f)
					{
						localAI[0] = num218;
						num219 = num218;
					}
					if (alpha > 0)
					{
						alpha -= 25;
					}
					if (alpha < 0)
					{
						alpha = 0;
					}
					float num220 = position.X;
					float num221 = position.Y;
					float num222 = 800f;
					bool flag5 = false;
					int num223 = 0;
					ai[0] += 1f;
					if (ai[0] > 20f)
					{
						ai[0] -= 1f;
						if (ai[1] == 0f)
						{
							for (int num224 = 0; num224 < 200; num224++)
							{
								if (Main.npc[num224].CanBeChasedBy(this) && (ai[1] == 0f || ai[1] == (float)(num224 + 1)))
								{
									float num225 = Main.npc[num224].position.X + (float)(Main.npc[num224].width / 2);
									float num226 = Main.npc[num224].position.Y + (float)(Main.npc[num224].height / 2);
									float num227 = Math.Abs(position.X + (float)(width / 2) - num225) + Math.Abs(position.Y + (float)(height / 2) - num226);
									if (num227 < num222 && Collision.CanHit(new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2)), 1, 1, Main.npc[num224].position, Main.npc[num224].width, Main.npc[num224].height))
									{
										num222 = num227;
										num220 = num225;
										num221 = num226;
										flag5 = true;
										num223 = num224;
									}
								}
							}
							if (flag5)
							{
								ai[1] = num223 + 1;
							}
							flag5 = false;
						}
						if (ai[1] != 0f)
						{
							int num228 = (int)(ai[1] - 1f);
							if (Main.npc[num228].active && Main.npc[num228].CanBeChasedBy(this, ignoreDontTakeDamage: true))
							{
								float num229 = Main.npc[num228].position.X + (float)(Main.npc[num228].width / 2);
								float num230 = Main.npc[num228].position.Y + (float)(Main.npc[num228].height / 2);
								if (Math.Abs(position.X + (float)(width / 2) - num229) + Math.Abs(position.Y + (float)(height / 2) - num230) < 1000f)
								{
									flag5 = true;
									num220 = Main.npc[num228].position.X + (float)(Main.npc[num228].width / 2);
									num221 = Main.npc[num228].position.Y + (float)(Main.npc[num228].height / 2);
								}
							}
						}
						if (!friendly)
						{
							flag5 = false;
						}
						if (flag5)
						{
							float num231 = num219;
							Vector2 vector30 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
							float num232 = num220 - vector30.X;
							float num233 = num221 - vector30.Y;
							float num234 = (float)Math.Sqrt(num232 * num232 + num233 * num233);
							num234 = num231 / num234;
							num232 *= num234;
							num233 *= num234;
							int num235 = 8;
							velocity.X = (velocity.X * (float)(num235 - 1) + num232) / (float)num235;
							velocity.Y = (velocity.Y * (float)(num235 - 1) + num233) / (float)num235;
						}
					}
				}
				else if (type == 507 || type == 508 || type == 662 || type == 680 || type == 685)
				{
					if (ai[0] > 45f)
					{
						velocity.X *= 0.98f;
						velocity.Y += 0.3f;
					}
				}
				else if (type == 495)
				{
					int num236 = Dust.NewDust(new Vector2(position.X - velocity.X, position.Y - velocity.Y), width, height, 27, velocity.X, velocity.Y, 100, default(Color), 1.2f);
					Main.dust[num236].noGravity = true;
					Main.dust[num236].velocity *= 0.3f;
					if (ai[0] >= 30f)
					{
						ai[0] = 30f;
						velocity.Y += 0.04f;
					}
				}
				else if (type == 498)
				{
					if (localAI[0] == 0f)
					{
						localAI[0] += 1f;
						SoundEngine.PlaySound(SoundID.Item17, position);
					}
					ai[0] += 1f;
					if (ai[0] >= 50f)
					{
						velocity.X *= 0.98f;
						velocity.Y += 0.15f;
						rotation += (float)direction * 0.5f;
					}
					else
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					}
				}
				else if (type == 437)
				{
					if (ai[0] >= 12f)
					{
						if (ai[0] >= 20f)
						{
							Kill();
						}
						alpha += 30;
					}
				}
				else if (type != 442 && type != 634 && type != 635 && type != 675)
				{
					if (type == 686 || type == 711)
					{
						if (ai[0] >= 10f)
						{
							velocity.Y += 0.1f;
						}
						if (ai[0] >= 20f)
						{
							velocity.Y += 0.1f;
						}
						if (ai[0] > 20f)
						{
							ai[0] = 20f;
						}
						velocity.X *= 0.99f;
						if (velocity.Y > 32f)
						{
							velocity.Y = 32f;
						}
					}
					else if (type == 639)
					{
						if (timeLeft <= MaxUpdates * 45 - 14)
						{
							velocity.Y += 0.1f;
						}
					}
					else if (type == 710)
					{
						if (ai[0] >= 0f)
						{
							ai[0] += 1f;
							if (ai[0] >= 20f)
							{
								velocity.Y += 0.2f;
								if (velocity.Y > 0f)
								{
									velocity.X *= 0.98f;
								}
								if (velocity.Y > 12f)
								{
									velocity.Y = 12f;
								}
							}
						}
					}
					else if (ai[0] >= 15f)
					{
						ai[0] = 15f;
						velocity.Y += 0.1f;
					}
				}
			}
			if (type == 921 || type == 926 || type == 937)
			{
				rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.05f;
			}
			else if (type == 248)
			{
				if (velocity.X < 0f)
				{
					rotation -= (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.05f;
				}
				else
				{
					rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.05f;
				}
			}
			else if (type == 270 || type == 585 || type == 601 || type == 706 || type == 837)
			{
				spriteDirection = direction;
				if (direction < 0)
				{
					rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
			}
			else if (type == 311)
			{
				if (ai[1] != 0f)
				{
					rotation += velocity.X * 0.1f + (float)Main.rand.Next(-10, 11) * 0.025f;
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			else if (type == 312)
			{
				rotation += velocity.X * 0.02f;
			}
			else if (type == 675)
			{
				rotation += velocity.X * 0.03f;
			}
			else if (type != 676)
			{
				if (type == 408)
				{
					rotation = velocity.ToRotation();
					if (direction == -1)
					{
						rotation += (float)Math.PI;
					}
				}
				else if (type == 435 || type == 459 || type == 682 || type == 709)
				{
					rotation = velocity.ToRotation();
					if (direction == -1)
					{
						rotation += (float)Math.PI;
					}
				}
				else if (type == 660)
				{
					rotation = velocity.ToRotation() + (float)Math.PI / 4f;
				}
				else if (type == 662 || type == 685)
				{
					rotation = velocity.ToRotation() - (float)Math.PI - (float)Math.PI / 4f;
				}
				else if (type == 680 || type == 684 || type == 686 || type == 711 || type == 712)
				{
					rotation = velocity.ToRotation() + (float)Math.PI / 2f;
				}
				else if (type == 436)
				{
					rotation = velocity.ToRotation();
					rotation += (float)Math.PI;
					if (direction == -1)
					{
						rotation += (float)Math.PI;
					}
				}
				else if (type == 469)
				{
					if (velocity.X > 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					}
					else
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					}
				}
				else if (type == 477)
				{
					if (localAI[1] < 5f)
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
						localAI[1] += 1f;
					}
					else
					{
						rotation = (rotation * 2f + (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f) / 3f;
					}
				}
				else if (type == 532)
				{
					rotation += 0.2f + Math.Abs(velocity.X) * 0.1f;
				}
				else if (type == 483)
				{
					rotation += velocity.X * 0.05f;
				}
				else if (type == 772)
				{
					rotation += (float)Math.Sign(velocity.X) * (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.05f;
				}
				else if (type == 485)
				{
					Vector2 vector31 = new Vector2(ai[0], ai[1]);
					velocity = (velocity * 39f + vector31) / 40f;
					int num237 = Dust.NewDust(position, width, height, 6);
					Main.dust[num237].noGravity = true;
					Main.dust[num237].velocity *= 0.2f;
					Main.dust[num237].position = (Main.dust[num237].position + base.Center) / 2f;
					frameCounter++;
					if (frameCounter >= 2)
					{
						frameCounter = 0;
						frame++;
						if (frame >= 5)
						{
							frame = 0;
						}
					}
					if (velocity.X < 0f)
					{
						spriteDirection = -1;
						rotation = (float)Math.Atan2(0f - velocity.Y, 0f - velocity.X);
					}
					else
					{
						spriteDirection = 1;
						rotation = (float)Math.Atan2(velocity.Y, velocity.X);
					}
				}
				else if (type == 640)
				{
					if (velocity != Vector2.Zero)
					{
						rotation = velocity.ToRotation() + (float)Math.PI / 2f;
					}
				}
				else if (type == 325)
				{
					rotation = velocity.ToRotation() - (float)Math.PI / 2f;
				}
				else if (type != 344 && type != 498)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
				}
			}
			if (velocity.Y > 16f)
			{
				velocity.Y = 16f;
			}
		}

		private void AI_010()
		{
			if (type == 31 && ai[0] != 2f)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 32, 0f, velocity.Y / 2f);
					Main.dust[num].velocity.X *= 0.4f;
				}
			}
			else if (type == 39)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num2 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 38, 0f, velocity.Y / 2f);
					Main.dust[num2].velocity.X *= 0.4f;
				}
			}
			else if (type >= 411 && type <= 414)
			{
				if (Main.rand.Next(3) == 0)
				{
					int num3 = 9;
					if (type == 412 || type == 414)
					{
						num3 = 11;
					}
					if (type == 413)
					{
						num3 = 19;
					}
					int num4 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num3, 0f, velocity.Y / 2f);
					Main.dust[num4].noGravity = true;
					Main.dust[num4].velocity -= velocity * 0.5f;
				}
			}
			else if (type == 40)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num5 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 36, 0f, velocity.Y / 2f);
					Main.dust[num5].velocity *= 0.4f;
				}
			}
			else if (type == 42 || type == 31)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num6 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 32);
					Main.dust[num6].velocity.X *= 0.4f;
				}
			}
			else if (type == 56 || type == 65)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num7 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14);
					Main.dust[num7].velocity.X *= 0.4f;
				}
			}
			else if (type == 67 || type == 68)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num8 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 51);
					Main.dust[num8].velocity.X *= 0.4f;
				}
			}
			else if (type == 71)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num9 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 53);
					Main.dust[num9].velocity.X *= 0.4f;
				}
			}
			else if (type == 179)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num10 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 149);
					Main.dust[num10].velocity.X *= 0.4f;
				}
			}
			else if (type == 241 || type == 354)
			{
				if (Main.rand.Next(2) == 0)
				{
					int num11 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 36);
					Main.dust[num11].velocity.X *= 0.4f;
				}
			}
			else if (type >= 736 && type <= 738)
			{
				if (Main.rand.Next(40) == 0)
				{
					int num12 = Dust.NewDust(position, width, height, type - 736 + 275);
					if (num12 >= 0)
					{
						Main.dust[num12].velocity = Main.dust[num12].velocity * 0.5f + velocity * 0.5f;
					}
				}
			}
			else if (type != 109 && Main.rand.Next(20) == 0)
			{
				Dust.NewDust(new Vector2(position.X, position.Y), width, height, 0);
			}
			if (type >= 736 && type <= 738)
			{
				if (localAI[0] == 0f)
				{
					frame = Main.rand.Next(3);
					scale = 1f - (float)Main.rand.Next(30) * 0.01f;
				}
				localAI[0] += 1f;
			}
			tileCollide = true;
			localAI[1] = 0f;
			if (Main.myPlayer == owner && ai[0] == 0f)
			{
				tileCollide = false;
				if (Main.player[owner].channel && (type < 736 || type > 738) && type != 40)
				{
					localAI[1] = -1f;
					float num13 = 12f;
					Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num14 = (float)Main.mouseX + Main.screenPosition.X - vector.X;
					float num15 = (float)Main.mouseY + Main.screenPosition.Y - vector.Y;
					if (Main.player[owner].gravDir == -1f)
					{
						num15 = Main.screenPosition.Y + (float)Main.screenHeight - (float)Main.mouseY - vector.Y;
					}
					float num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
					num16 = (float)Math.Sqrt(num14 * num14 + num15 * num15);
					if (num16 > num13)
					{
						num16 = num13 / num16;
						num14 *= num16;
						num15 *= num16;
						if (num14 != velocity.X || num15 != velocity.Y)
						{
							netUpdate = true;
						}
						velocity.X = num14;
						velocity.Y = num15;
					}
					else
					{
						if (num14 != velocity.X || num15 != velocity.Y)
						{
							netUpdate = true;
						}
						velocity.X = num14;
						velocity.Y = num15;
					}
				}
				else
				{
					ai[0] = 1f;
					netUpdate = true;
				}
			}
			if (ai[0] == 1f && type != 109)
			{
				if (type == 42 || type == 65 || type == 68 || type == 354)
				{
					ai[1] += 1f;
					if (ai[1] >= 60f)
					{
						ai[1] = 60f;
						velocity.Y += 0.2f;
					}
				}
				else
				{
					velocity.Y += 0.41f;
				}
			}
			else if (ai[0] == 2f && type != 109)
			{
				velocity.Y += 0.2f;
				if ((double)velocity.X < -0.04)
				{
					velocity.X += 0.04f;
				}
				else if ((double)velocity.X > 0.04)
				{
					velocity.X -= 0.04f;
				}
				else
				{
					velocity.X = 0f;
				}
			}
			if (owner == Main.myPlayer)
			{
				for (int i = (int)(position.X / 16f); i <= (int)((position.X + (float)width) / 16f); i++)
				{
					for (int j = (int)(position.Y / 16f); j <= (int)((position.Y + (float)height) / 16f); j++)
					{
						if (!WorldGen.InWorld(i, j))
						{
							continue;
						}
						Tile tile = Main.tile[i, j];
						if (tile != null && tile.active())
						{
							if ((tile.type >= 185 && tile.type <= 187) || tile.type == 165 || tile.type == 12 || tile.type == 105 || tile.type == 178)
							{
								WorldGen.KillTile(i, j);
							}
							else if (tile.topSlope() && !TileID.Sets.Platforms[tile.type])
							{
								tile.slope(0);
							}
						}
					}
				}
			}
			if (type >= 736 && type <= 738)
			{
				if (frame == 0)
				{
					rotation -= 0.1f;
				}
				else if (frame == 1)
				{
					rotation += 0.1f;
				}
				else
				{
					rotation += 0.15f;
				}
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
			else
			{
				rotation += 0.1f;
				if (velocity.Y > 10f)
				{
					velocity.Y = 10f;
				}
			}
		}

		private void AI_026()
		{
			if (!Main.player[owner].active)
			{
				active = false;
				return;
			}
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			bool flag4 = false;
			bool flag5 = false;
			int num = 85;
			bool flag6 = type >= 191 && type <= 194;
			if (type == 324)
			{
				num = 120;
			}
			if (type == 112)
			{
				num = 100;
			}
			if (type == 127)
			{
				num = 50;
			}
			switch (type)
			{
			case 816:
			case 821:
			case 825:
			case 854:
			case 858:
			case 859:
			case 860:
			case 881:
			case 885:
			case 889:
			case 891:
			case 897:
			case 899:
			case 900:
			case 934:
				num = 95;
				break;
			case 884:
			case 890:
				num = 80;
				break;
			}
			if (type == 960)
			{
				Main.CurrentFrameFlags.HadAnActiveInteractibleProjectile = true;
				flag = true;
			}
			if (flag6)
			{
				if (lavaWet)
				{
					ai[0] = 1f;
					ai[1] = 0f;
				}
				num = 60 + 30 * minionPos;
			}
			else if (type == 266)
			{
				num = 60 + 30 * minionPos;
			}
			bool flag7 = ai[0] == -1f || ai[0] == -2f;
			bool num2 = ai[0] == -1f;
			bool flag8 = ai[0] == -2f;
			if (type == 111)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].bunny = false;
				}
				if (Main.player[owner].bunny)
				{
					timeLeft = 2;
				}
			}
			if (type == 112)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].penguin = false;
				}
				if (Main.player[owner].penguin)
				{
					timeLeft = 2;
				}
			}
			if (type == 334)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].puppy = false;
				}
				if (Main.player[owner].puppy)
				{
					timeLeft = 2;
				}
			}
			if (type == 353)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].grinch = false;
				}
				if (Main.player[owner].grinch)
				{
					timeLeft = 2;
				}
			}
			if (type == 127)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].turtle = false;
				}
				if (Main.player[owner].turtle)
				{
					timeLeft = 2;
				}
			}
			if (type == 175)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].eater = false;
				}
				if (Main.player[owner].eater)
				{
					timeLeft = 2;
				}
			}
			if (type == 197)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].skeletron = false;
				}
				if (Main.player[owner].skeletron)
				{
					timeLeft = 2;
				}
			}
			if (type == 198)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].hornet = false;
				}
				if (Main.player[owner].hornet)
				{
					timeLeft = 2;
				}
			}
			if (type == 199)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].tiki = false;
				}
				if (Main.player[owner].tiki)
				{
					timeLeft = 2;
				}
			}
			if (type == 200)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].lizard = false;
				}
				if (Main.player[owner].lizard)
				{
					timeLeft = 2;
				}
			}
			if (type == 208)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].parrot = false;
				}
				if (Main.player[owner].parrot)
				{
					timeLeft = 2;
				}
			}
			if (type == 209)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].truffle = false;
				}
				if (Main.player[owner].truffle)
				{
					timeLeft = 2;
				}
			}
			if (type == 210)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].sapling = false;
				}
				if (Main.player[owner].sapling)
				{
					timeLeft = 2;
				}
			}
			if (type == 324)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].cSapling = false;
				}
				if (Main.player[owner].cSapling)
				{
					timeLeft = 2;
				}
			}
			if (type == 313)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].spider = false;
				}
				if (Main.player[owner].spider)
				{
					timeLeft = 2;
				}
			}
			if (type == 314)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].squashling = false;
				}
				if (Main.player[owner].squashling)
				{
					timeLeft = 2;
				}
			}
			if (type == 211)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].wisp = false;
				}
				if (Main.player[owner].wisp)
				{
					timeLeft = 2;
				}
			}
			if (type == 236)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].dino = false;
				}
				if (Main.player[owner].dino)
				{
					timeLeft = 2;
				}
			}
			if (type == 499)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].babyFaceMonster = false;
				}
				if (Main.player[owner].babyFaceMonster)
				{
					timeLeft = 2;
				}
			}
			if (type == 765)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagSugarGlider = false;
				}
				if (Main.player[owner].petFlagSugarGlider)
				{
					timeLeft = 2;
				}
			}
			if (type == 266)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].slime = false;
				}
				if (Main.player[owner].slime)
				{
					timeLeft = 2;
				}
			}
			if (type == 268)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].eyeSpring = false;
				}
				if (Main.player[owner].eyeSpring)
				{
					timeLeft = 2;
				}
			}
			if (type == 269)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].snowman = false;
				}
				if (Main.player[owner].snowman)
				{
					timeLeft = 2;
				}
			}
			if (type == 319)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].blackCat = false;
				}
				if (Main.player[owner].blackCat)
				{
					timeLeft = 2;
				}
			}
			if (type == 380)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].zephyrfish = false;
				}
				if (Main.player[owner].zephyrfish)
				{
					timeLeft = 2;
				}
			}
			if (type == 774)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagBabyShark = false;
				}
				if (Main.player[owner].petFlagBabyShark)
				{
					timeLeft = 2;
				}
			}
			if (type == 815)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagLilHarpy = false;
				}
				if (Main.player[owner].petFlagLilHarpy)
				{
					timeLeft = 2;
				}
			}
			if (type == 816)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagFennecFox = false;
				}
				if (Main.player[owner].petFlagFennecFox)
				{
					timeLeft = 2;
				}
			}
			if (type == 817)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagGlitteryButterfly = false;
				}
				if (Main.player[owner].petFlagGlitteryButterfly)
				{
					timeLeft = 2;
				}
			}
			if (type == 821)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagBabyImp = false;
				}
				if (Main.player[owner].petFlagBabyImp)
				{
					timeLeft = 2;
				}
			}
			if (type == 825)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagBabyRedPanda = false;
				}
				if (Main.player[owner].petFlagBabyRedPanda)
				{
					timeLeft = 2;
				}
			}
			if (type == 854)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagPlantero = false;
				}
				if (Main.player[owner].petFlagPlantero)
				{
					timeLeft = 2;
				}
			}
			if (type == 858)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagDynamiteKitten = false;
				}
				if (Main.player[owner].petFlagDynamiteKitten)
				{
					timeLeft = 2;
				}
			}
			if (type == 859)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagBabyWerewolf = false;
				}
				if (Main.player[owner].petFlagBabyWerewolf)
				{
					timeLeft = 2;
				}
			}
			if (type == 860)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagShadowMimic = false;
				}
				if (Main.player[owner].petFlagShadowMimic)
				{
					timeLeft = 2;
				}
			}
			if (type == 875)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagVoltBunny = false;
				}
				if (Main.player[owner].petFlagVoltBunny)
				{
					timeLeft = 2;
				}
			}
			if (type == 881)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagKingSlimePet = false;
				}
				if (Main.player[owner].petFlagKingSlimePet)
				{
					timeLeft = 2;
				}
			}
			if (type == 884)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagBrainOfCthulhuPet = false;
				}
				if (Main.player[owner].petFlagBrainOfCthulhuPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 885)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagSkeletronPet = false;
				}
				if (Main.player[owner].petFlagSkeletronPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 886)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagQueenBeePet = false;
				}
				if (Main.player[owner].petFlagQueenBeePet)
				{
					timeLeft = 2;
				}
			}
			if (type == 889)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagSkeletronPrimePet = false;
				}
				if (Main.player[owner].petFlagSkeletronPrimePet)
				{
					timeLeft = 2;
				}
			}
			if (type == 890)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagPlanteraPet = false;
				}
				if (Main.player[owner].petFlagPlanteraPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 891)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagGolemPet = false;
				}
				if (Main.player[owner].petFlagGolemPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 892)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagDukeFishronPet = false;
				}
				if (Main.player[owner].petFlagDukeFishronPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 894)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagMoonLordPet = false;
				}
				if (Main.player[owner].petFlagMoonLordPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 897)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagEverscreamPet = false;
				}
				if (Main.player[owner].petFlagEverscreamPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 899)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagMartianPet = false;
				}
				if (Main.player[owner].petFlagMartianPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 900)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagDD2OgrePet = false;
				}
				if (Main.player[owner].petFlagDD2OgrePet)
				{
					timeLeft = 2;
				}
			}
			if (type == 901)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagDD2BetsyPet = false;
				}
				if (Main.player[owner].petFlagDD2BetsyPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 934)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagQueenSlimePet = false;
				}
				if (Main.player[owner].petFlagQueenSlimePet)
				{
					timeLeft = 2;
				}
			}
			if (type == 956)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagBerniePet = false;
				}
				if (Main.player[owner].petFlagBerniePet)
				{
					timeLeft = 2;
				}
			}
			if (type == 958)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagDeerclopsPet = false;
				}
				if (Main.player[owner].petFlagDeerclopsPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 959)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagPigPet = false;
				}
				if (Main.player[owner].petFlagPigPet)
				{
					timeLeft = 2;
				}
			}
			if (type == 960)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].petFlagChesterPet = false;
				}
				if (Main.player[owner].petFlagChesterPet)
				{
					timeLeft = 2;
				}
			}
			if (flag6)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].pygmy = false;
				}
				if (Main.player[owner].pygmy)
				{
					timeLeft = Main.rand.Next(2, 10);
				}
			}
			if (type >= 390 && type <= 392)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].spiderMinion = false;
				}
				if (Main.player[owner].spiderMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 398)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].miniMinotaur = false;
				}
				if (Main.player[owner].miniMinotaur)
				{
					timeLeft = 2;
				}
			}
			if (flag7)
			{
				timeLeft = 2;
			}
			if (flag6 || type == 266 || (type >= 390 && type <= 392))
			{
				num = 10;
				int num3 = 40 * (minionPos + 1) * Main.player[owner].direction;
				if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2) - (float)num + (float)num3)
				{
					flag2 = true;
				}
				else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) > position.X + (float)(width / 2) + (float)num + (float)num3)
				{
					flag3 = true;
				}
			}
			else if (type == 891)
			{
				num = 30;
				float num4 = -50 * -Main.player[owner].direction;
				float num5 = Main.player[owner].Center.X + num4;
				if (num5 < position.X + (float)(width / 2) - (float)num)
				{
					flag2 = true;
				}
				else if (num5 > position.X + (float)(width / 2) + (float)num)
				{
					flag3 = true;
				}
			}
			else if (type == 960 && !flag7)
			{
				num = 10;
				Player player = Main.player[owner];
				int num6 = ((player.Center.X - base.Center.X > 0f) ? 1 : (-1));
				if (player.velocity.X != 0f)
				{
					num6 = player.direction;
				}
				float num7 = -70 * num6;
				float num8 = player.Center.X + num7;
				if (num8 < base.Center.X - (float)num)
				{
					flag2 = true;
				}
				else if (num8 > base.Center.X + (float)num)
				{
					flag3 = true;
				}
			}
			else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2) - (float)num)
			{
				flag2 = true;
			}
			else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) > position.X + (float)(width / 2) + (float)num)
			{
				flag3 = true;
			}
			if (num2)
			{
				flag2 = false;
				flag3 = true;
				num = 30;
			}
			if (flag8)
			{
				flag2 = false;
				flag3 = false;
			}
			if (type == 175)
			{
				float num9 = 0.1f;
				tileCollide = false;
				int num10 = 300;
				Vector2 vector = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num11 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector.X;
				float num12 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector.Y;
				if (type == 127)
				{
					num12 = Main.player[owner].position.Y - vector.Y;
				}
				float num13 = (float)Math.Sqrt(num11 * num11 + num12 * num12);
				float num14 = 7f;
				float num15 = 2000f;
				bool num16 = num13 > num15;
				if (num13 < (float)num10 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
				}
				if (num13 < 150f)
				{
					if (Math.Abs(velocity.X) > 2f || Math.Abs(velocity.Y) > 2f)
					{
						velocity *= 0.99f;
					}
					num9 = 0.01f;
					if (num11 < -2f)
					{
						num11 = -2f;
					}
					if (num11 > 2f)
					{
						num11 = 2f;
					}
					if (num12 < -2f)
					{
						num12 = -2f;
					}
					if (num12 > 2f)
					{
						num12 = 2f;
					}
				}
				else
				{
					if (num13 > 300f)
					{
						num9 = 0.2f;
					}
					num13 = num14 / num13;
					num11 *= num13;
					num12 *= num13;
				}
				if (num16)
				{
					int num17 = 17;
					for (int i = 0; i < 12; i++)
					{
						float speedX = 1f - Main.rand.NextFloat() * 2f;
						float speedY = 1f - Main.rand.NextFloat() * 2f;
						int num18 = Dust.NewDust(position, width, height, num17, speedX, speedY);
						Main.dust[num18].noLightEmittence = true;
						Main.dust[num18].noGravity = true;
					}
					base.Center = Main.player[owner].Center;
					velocity = Vector2.Zero;
					if (Main.myPlayer == owner)
					{
						netUpdate = true;
					}
				}
				if (Math.Abs(num11) > Math.Abs(num12) || num9 == 0.05f)
				{
					if (velocity.X < num11)
					{
						velocity.X += num9;
						if (num9 > 0.05f && velocity.X < 0f)
						{
							velocity.X += num9;
						}
					}
					if (velocity.X > num11)
					{
						velocity.X -= num9;
						if (num9 > 0.05f && velocity.X > 0f)
						{
							velocity.X -= num9;
						}
					}
				}
				if (Math.Abs(num11) <= Math.Abs(num12) || num9 == 0.05f)
				{
					if (velocity.Y < num12)
					{
						velocity.Y += num9;
						if (num9 > 0.05f && velocity.Y < 0f)
						{
							velocity.Y += num9;
						}
					}
					if (velocity.Y > num12)
					{
						velocity.Y -= num9;
						if (num9 > 0.05f && velocity.Y > 0f)
						{
							velocity.Y -= num9;
						}
					}
				}
				rotation = (float)Math.Atan2(velocity.Y, velocity.X) - 1.57f;
				frameCounter++;
				if (frameCounter > 6)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 1)
				{
					frame = 0;
				}
				return;
			}
			if (type == 197)
			{
				float num19 = 0.1f;
				tileCollide = false;
				int num20 = 300;
				Vector2 vector2 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num21 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector2.X;
				float num22 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector2.Y;
				if (type == 127)
				{
					num22 = Main.player[owner].position.Y - vector2.Y;
				}
				float num23 = (float)Math.Sqrt(num21 * num21 + num22 * num22);
				float num24 = 3f;
				if (num23 > 500f)
				{
					localAI[0] = 10000f;
				}
				if (localAI[0] >= 10000f)
				{
					num24 = 14f;
				}
				float num25 = 2000f;
				bool num26 = num23 > num25;
				if (num23 < (float)num20 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
				}
				if (num23 < 150f)
				{
					if (Math.Abs(velocity.X) > 2f || Math.Abs(velocity.Y) > 2f)
					{
						velocity *= 0.99f;
					}
					num19 = 0.01f;
					if (num21 < -2f)
					{
						num21 = -2f;
					}
					if (num21 > 2f)
					{
						num21 = 2f;
					}
					if (num22 < -2f)
					{
						num22 = -2f;
					}
					if (num22 > 2f)
					{
						num22 = 2f;
					}
				}
				else
				{
					if (num23 > 300f)
					{
						num19 = 0.2f;
					}
					num23 = num24 / num23;
					num21 *= num23;
					num22 *= num23;
				}
				if (num26)
				{
					int num27 = 26;
					for (int j = 0; j < 12; j++)
					{
						float speedX2 = 1f - Main.rand.NextFloat() * 2f;
						float speedY2 = 1f - Main.rand.NextFloat() * 2f;
						int num28 = Dust.NewDust(position, width, height, num27, speedX2, speedY2);
						Main.dust[num28].noLightEmittence = true;
						Main.dust[num28].noGravity = true;
					}
					base.Center = Main.player[owner].Center;
					velocity = Vector2.Zero;
					if (Main.myPlayer == owner)
					{
						netUpdate = true;
					}
				}
				if (velocity.X < num21)
				{
					velocity.X += num19;
					if (num19 > 0.05f && velocity.X < 0f)
					{
						velocity.X += num19;
					}
				}
				if (velocity.X > num21)
				{
					velocity.X -= num19;
					if (num19 > 0.05f && velocity.X > 0f)
					{
						velocity.X -= num19;
					}
				}
				if (velocity.Y < num22)
				{
					velocity.Y += num19;
					if (num19 > 0.05f && velocity.Y < 0f)
					{
						velocity.Y += num19;
					}
				}
				if (velocity.Y > num22)
				{
					velocity.Y -= num19;
					if (num19 > 0.05f && velocity.Y > 0f)
					{
						velocity.Y -= num19;
					}
				}
				localAI[0] += Main.rand.Next(10);
				if (localAI[0] > 10000f)
				{
					if (localAI[1] == 0f)
					{
						if (velocity.X < 0f)
						{
							localAI[1] = -1f;
						}
						else
						{
							localAI[1] = 1f;
						}
					}
					rotation += 0.25f * localAI[1];
					if (localAI[0] > 12000f)
					{
						localAI[0] = 0f;
					}
				}
				else
				{
					localAI[1] = 0f;
					float num29 = velocity.X * 0.1f;
					if (rotation > num29)
					{
						rotation -= (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
						if (rotation < num29)
						{
							rotation = num29;
						}
					}
					if (rotation < num29)
					{
						rotation += (Math.Abs(velocity.X) + Math.Abs(velocity.Y)) * 0.01f;
						if (rotation > num29)
						{
							rotation = num29;
						}
					}
				}
				if ((double)rotation > 6.28)
				{
					rotation -= 6.28f;
				}
				if ((double)rotation < -6.28)
				{
					rotation += 6.28f;
				}
				return;
			}
			if (type == 198 || type == 380 || type == 774 || type == 815 || type == 817 || type == 886 || type == 892 || type == 894 || type == 901)
			{
				float num30 = 0.4f;
				if (type == 380)
				{
					num30 = 0.3f;
				}
				if (type == 774)
				{
					num30 = 0.3f;
				}
				tileCollide = false;
				int num31 = 100;
				float num32 = 50f;
				float num33 = 400f;
				float num34 = num33 / 2f;
				float num35 = 2000f;
				bool flag9 = false;
				Vector2 vector3 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num36 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector3.X;
				float num37 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector3.Y;
				if (type == 774)
				{
					num32 = 2f;
					float num38 = (float)Math.Sin((float)Math.PI * 2f * ((float)Main.player[owner].miscCounter / 60f));
					float num39 = Utils.GetLerpValue(0.5f, 1f, num38, clamped: true);
					if (new Vector2(num36 - (float)(70 * Main.player[owner].direction), num37 - 60f).Length() > 50f)
					{
						num38 = 0f;
						num39 = 0f;
					}
					num37 += -60f + num39 * -8f + num38 * 8f;
					num36 += (float)(70 * -Main.player[owner].direction);
				}
				else
				{
					if (type != 892 && type != 894)
					{
						num37 += (float)Main.rand.Next(-10, 21);
						num36 += (float)Main.rand.Next(-10, 21);
					}
					num36 += (float)(60 * -Main.player[owner].direction);
					num37 -= 60f;
				}
				Vector2 vector4 = new Vector2(num36, num37);
				if (type == 127)
				{
					num37 = Main.player[owner].position.Y - vector3.Y;
				}
				float num40 = (float)Math.Sqrt(num36 * num36 + num37 * num37);
				float num41 = num40;
				float num42 = 14f;
				if (type == 380)
				{
					num42 = 6f;
				}
				if (type == 815 || type == 817)
				{
					num42 = ((!(num40 < num33)) ? 10f : 6f);
				}
				if (type == 892 || type == 894 || type == 901)
				{
					if (num40 < num34)
					{
						num42 = 6f;
					}
					num42 = ((!(num40 < num33)) ? 12f : 9f);
				}
				if (type == 774)
				{
					num42 = 5f;
				}
				if (num40 < (float)num31 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
				}
				if (num40 < num32)
				{
					if (Math.Abs(velocity.X) > 2f || Math.Abs(velocity.Y) > 2f)
					{
						if (type == 892 || type == 892)
						{
							velocity *= 0.95f;
						}
						else
						{
							velocity *= 0.99f;
						}
					}
					num30 = 0.01f;
				}
				else
				{
					if (type == 892 || type == 894 || type == 901)
					{
						if (num40 < 100f)
						{
							num30 = 0.1f;
						}
						if (num40 > num35)
						{
							flag9 = true;
						}
						else if (num40 > num33)
						{
							num30 = 0.7f;
						}
						else if (num40 > num34)
						{
							num30 = 0.5f;
						}
					}
					else if (type == 815 || type == 817)
					{
						if (num40 < 100f)
						{
							num30 = 0.1f;
						}
						if (num40 > num35)
						{
							flag9 = true;
						}
						else if (type != 815 && num40 > num33)
						{
							num30 = 0.5f;
						}
					}
					else if (type == 380)
					{
						if (num40 < 100f)
						{
							num30 = 0.1f;
						}
						if (num40 > 300f)
						{
							num30 = 0.4f;
						}
						if (num40 > num35)
						{
							flag9 = true;
						}
					}
					else if (type == 198 || type == 886)
					{
						if (num40 < 100f)
						{
							num30 = 0.1f;
						}
						if (num40 > 300f)
						{
							num30 = 0.6f;
						}
						if (num40 > num35)
						{
							flag9 = true;
						}
					}
					else if (type == 774)
					{
						if (num40 < 40f)
						{
							num30 = 0.1f;
						}
						if (num40 > 300f)
						{
							num30 = 0.6f;
						}
						if (num40 > num35)
						{
							flag9 = true;
						}
					}
					num40 = num42 / num40;
					num36 *= num40;
					num37 *= num40;
				}
				if (velocity.X < num36)
				{
					velocity.X += num30;
					if (num30 > 0.05f && velocity.X < 0f)
					{
						velocity.X += num30;
					}
				}
				if (velocity.X > num36)
				{
					velocity.X -= num30;
					if (num30 > 0.05f && velocity.X > 0f)
					{
						velocity.X -= num30;
					}
				}
				if (velocity.Y < num37)
				{
					velocity.Y += num30;
					if (num30 > 0.05f && velocity.Y < 0f)
					{
						velocity.Y += num30 * 2f;
					}
				}
				if (velocity.Y > num37)
				{
					velocity.Y -= num30;
					if (num30 > 0.05f && velocity.Y > 0f)
					{
						velocity.Y -= num30 * 2f;
					}
				}
				if ((double)velocity.X > 0.25)
				{
					direction = -1;
				}
				else if ((double)velocity.X < -0.25)
				{
					direction = 1;
				}
				spriteDirection = direction;
				rotation = velocity.X * 0.05f;
				if (flag9)
				{
					int num43 = 33;
					if (type == 198 || type == 886)
					{
						num43 = 147;
					}
					if (type == 815)
					{
						num43 = 31;
					}
					if (type == 817)
					{
						num43 = 21;
					}
					for (int k = 0; k < 12; k++)
					{
						float speedX3 = 1f - Main.rand.NextFloat() * 2f;
						float speedY3 = 1f - Main.rand.NextFloat() * 2f;
						int num44 = Dust.NewDust(position, width, height, num43, speedX3, speedY3);
						Main.dust[num44].noLightEmittence = true;
						Main.dust[num44].noGravity = true;
					}
					base.Center = Main.player[owner].Center;
					velocity = Vector2.Zero;
					if (Main.myPlayer == owner)
					{
						netUpdate = true;
					}
				}
				int num45 = 3;
				int num46 = 0;
				int num47 = 3;
				if (type == 380)
				{
					num45 = 6;
				}
				if (type == 815)
				{
					num45 = 5;
					num46 = 0;
					num47 = 5;
					if (num41 > num33)
					{
						num46 = 6;
						num47 = 9;
					}
				}
				if (type == 817)
				{
					num45 = 6;
					num46 = 0;
					num47 = 2;
				}
				if (type == 901)
				{
					num45 = 4;
					num46 = 0;
					num47 = 5;
					if (num41 > num33 / 2f)
					{
						num45 = 3;
						num46 = 6;
						num47 = 11;
					}
				}
				if (type == 892)
				{
					num45 = 6;
					num46 = 0;
					num47 = Main.projFrames[type] - 1;
				}
				if (type == 886 || type == 894)
				{
					num45 = 4;
					num46 = 0;
					num47 = Main.projFrames[type] - 1;
				}
				if (type == 774)
				{
					if (Main.player[owner].velocity.Length() < 2f && vector4.Length() < 10f)
					{
						direction = -Main.player[owner].direction;
						spriteDirection = direction;
					}
					num45 = 6;
					if (!wet)
					{
						num46 += 4;
						num47 += 4;
					}
					rotation = velocity.X * 0.05f + Math.Abs(velocity.Y * -0.05f);
				}
				if (++frameCounter >= num45)
				{
					frameCounter = 0;
					frame++;
					if (frame < num46 || frame > num47)
					{
						frame = num46;
					}
				}
				return;
			}
			if (type == 211)
			{
				float num48 = 0.2f;
				float num49 = 5f;
				tileCollide = false;
				Vector2 vector5 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num50 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector5.X;
				float num51 = Main.player[owner].position.Y + Main.player[owner].gfxOffY + (float)(Main.player[owner].height / 2) - vector5.Y;
				if (Main.player[owner].controlLeft)
				{
					num50 -= 120f;
				}
				else if (Main.player[owner].controlRight)
				{
					num50 += 120f;
				}
				if (Main.player[owner].controlDown)
				{
					num51 += 120f;
				}
				else
				{
					if (Main.player[owner].controlUp)
					{
						num51 -= 120f;
					}
					num51 -= 60f;
				}
				float num52 = (float)Math.Sqrt(num50 * num50 + num51 * num51);
				if (num52 > 1000f)
				{
					position.X += num50;
					position.Y += num51;
				}
				if (localAI[0] == 1f)
				{
					if (num52 < 10f)
					{
						Player player2 = Main.player[owner];
						if (Math.Abs(player2.velocity.X) + Math.Abs(player2.velocity.Y) < num49 && (player2.velocity.Y == 0f || (player2.mount.Active && player2.mount.CanFly())))
						{
							localAI[0] = 0f;
						}
					}
					num49 = 12f;
					if (num52 < num49)
					{
						velocity.X = num50;
						velocity.Y = num51;
					}
					else
					{
						num52 = num49 / num52;
						velocity.X = num50 * num52;
						velocity.Y = num51 * num52;
					}
					if ((double)velocity.X > 0.5)
					{
						direction = -1;
					}
					else if ((double)velocity.X < -0.5)
					{
						direction = 1;
					}
					spriteDirection = direction;
					rotation -= (0.2f + Math.Abs(velocity.X) * 0.025f) * (float)direction;
					frameCounter++;
					if (frameCounter > 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 5)
					{
						frame = 5;
					}
					if (frame > 9)
					{
						frame = 5;
					}
					for (int l = 0; l < 2; l++)
					{
						int num53 = Dust.NewDust(new Vector2(position.X + 3f, position.Y + 4f), 14, 14, 156);
						Main.dust[num53].velocity *= 0.2f;
						Main.dust[num53].noGravity = true;
						Main.dust[num53].scale = 1.25f;
						Main.dust[num53].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].cLight, Main.player[owner]);
					}
					return;
				}
				if (num52 > 200f)
				{
					localAI[0] = 1f;
				}
				if ((double)velocity.X > 0.5)
				{
					direction = -1;
				}
				else if ((double)velocity.X < -0.5)
				{
					direction = 1;
				}
				spriteDirection = direction;
				if (num52 < 10f)
				{
					velocity.X = num50;
					velocity.Y = num51;
					rotation = velocity.X * 0.05f;
					if (num52 < num49)
					{
						position += velocity;
						velocity *= 0f;
						num48 = 0f;
					}
					direction = -Main.player[owner].direction;
				}
				num52 = num49 / num52;
				num50 *= num52;
				num51 *= num52;
				if (velocity.X < num50)
				{
					velocity.X += num48;
					if (velocity.X < 0f)
					{
						velocity.X *= 0.99f;
					}
				}
				if (velocity.X > num50)
				{
					velocity.X -= num48;
					if (velocity.X > 0f)
					{
						velocity.X *= 0.99f;
					}
				}
				if (velocity.Y < num51)
				{
					velocity.Y += num48;
					if (velocity.Y < 0f)
					{
						velocity.Y *= 0.99f;
					}
				}
				if (velocity.Y > num51)
				{
					velocity.Y -= num48;
					if (velocity.Y > 0f)
					{
						velocity.Y *= 0.99f;
					}
				}
				if (velocity.X != 0f || velocity.Y != 0f)
				{
					rotation = velocity.X * 0.05f;
				}
				frameCounter++;
				if (frameCounter > 3)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 4)
				{
					frame = 0;
				}
				return;
			}
			if (type == 199)
			{
				float num54 = 0.1f;
				tileCollide = false;
				int num55 = 200;
				Vector2 vector6 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num56 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector6.X;
				float num57 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector6.Y;
				num57 -= 60f;
				num56 -= 2f;
				if (type == 127)
				{
					num57 = Main.player[owner].position.Y - vector6.Y;
				}
				float num58 = (float)Math.Sqrt(num56 * num56 + num57 * num57);
				float num59 = 4f;
				float num60 = num58;
				float num61 = 2000f;
				bool num62 = num58 > num61;
				if (num58 < (float)num55 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
				}
				if (num58 < 4f)
				{
					velocity.X = num56;
					velocity.Y = num57;
					num54 = 0f;
				}
				else
				{
					if (num58 > 350f)
					{
						num54 = 0.2f;
						num59 = 10f;
					}
					num58 = num59 / num58;
					num56 *= num58;
					num57 *= num58;
				}
				if (num62)
				{
					int num63 = 2;
					for (int m = 0; m < 12; m++)
					{
						float speedX4 = 1f - Main.rand.NextFloat() * 2f;
						float speedY4 = 1f - Main.rand.NextFloat() * 2f;
						int num64 = Dust.NewDust(position, width, height, num63, speedX4, speedY4);
						Main.dust[num64].noLightEmittence = true;
						Main.dust[num64].noGravity = true;
					}
					base.Center = Main.player[owner].Center;
					velocity = Vector2.Zero;
					if (Main.myPlayer == owner)
					{
						netUpdate = true;
					}
				}
				if (velocity.X < num56)
				{
					velocity.X += num54;
					if (velocity.X < 0f)
					{
						velocity.X += num54;
					}
				}
				if (velocity.X > num56)
				{
					velocity.X -= num54;
					if (velocity.X > 0f)
					{
						velocity.X -= num54;
					}
				}
				if (velocity.Y < num57)
				{
					velocity.Y += num54;
					if (velocity.Y < 0f)
					{
						velocity.Y += num54;
					}
				}
				if (velocity.Y > num57)
				{
					velocity.Y -= num54;
					if (velocity.Y > 0f)
					{
						velocity.Y -= num54;
					}
				}
				direction = -Main.player[owner].direction;
				spriteDirection = 1;
				rotation = velocity.Y * 0.05f * (float)(-direction);
				if (num60 >= 50f)
				{
					frameCounter++;
					if (frameCounter <= 6)
					{
						return;
					}
					frameCounter = 0;
					if (velocity.X < 0f)
					{
						if (frame < 2)
						{
							frame++;
						}
						if (frame > 2)
						{
							frame--;
						}
					}
					else
					{
						if (frame < 6)
						{
							frame++;
						}
						if (frame > 6)
						{
							frame--;
						}
					}
				}
				else
				{
					frameCounter++;
					if (frameCounter > 6)
					{
						frame += direction;
						frameCounter = 0;
					}
					if (frame > 7)
					{
						frame = 0;
					}
					if (frame < 0)
					{
						frame = 7;
					}
				}
				return;
			}
			if (type == 885 || type == 889)
			{
				Player player3 = Main.player[owner];
				float num65 = 0.15f;
				tileCollide = false;
				int num66 = 150;
				Vector2 center = base.Center;
				float num67 = player3.Center.X - center.X;
				float num68 = player3.Center.Y - center.Y;
				num68 -= 65f;
				num67 -= (float)(30 * player3.direction);
				float num69 = (float)Math.Sqrt(num67 * num67 + num68 * num68);
				float num70 = 8f;
				float num71 = num69;
				float num72 = 2000f;
				bool num73 = num69 > num72;
				if (num69 < (float)num66 && player3.velocity.Y == 0f && position.Y + (float)height <= player3.position.Y + (float)player3.height && !Collision.SolidCollision(position, width, height) && velocity.Y < -6f)
				{
					velocity.Y = -6f;
				}
				if (num69 < 10f)
				{
					velocity *= 0.9f;
					if (velocity.Length() < 0.5f)
					{
						velocity = Vector2.Zero;
					}
					num65 = 0f;
				}
				else
				{
					if (num69 > (float)num66)
					{
						num65 = 0.2f;
						num70 = 12f;
					}
					num69 = num70 / num69;
					num67 *= num69;
					num68 *= num69;
				}
				if (num73)
				{
					int num74 = 234;
					if (type == 889)
					{
						num74 = 60;
					}
					for (int n = 0; n < 12; n++)
					{
						float speedX5 = 1f - Main.rand.NextFloat() * 2f;
						float speedY5 = 1f - Main.rand.NextFloat() * 2f;
						int num75 = Dust.NewDust(position, width, height, num74, speedX5, speedY5);
						Main.dust[num75].noLightEmittence = true;
						Main.dust[num75].noGravity = true;
					}
					base.Center = player3.Center;
					velocity = Vector2.Zero;
					if (Main.myPlayer == owner)
					{
						netUpdate = true;
					}
				}
				if (velocity.X < num67)
				{
					velocity.X += num65;
					if (velocity.X < 0f)
					{
						velocity.X += num65;
					}
				}
				if (velocity.X > num67)
				{
					velocity.X -= num65;
					if (velocity.X > 0f)
					{
						velocity.X -= num65;
					}
				}
				if (velocity.Y < num68)
				{
					velocity.Y += num65;
					if (velocity.Y < 0f)
					{
						velocity.Y += num65;
					}
				}
				if (velocity.Y > num68)
				{
					velocity.Y -= num65;
					if (velocity.Y > 0f)
					{
						velocity.Y -= num65;
					}
				}
				direction = -player3.direction;
				spriteDirection = -direction;
				int num76 = 100;
				if (num71 >= (float)num66)
				{
					rotation += 0.5f;
					if (rotation > (float)Math.PI * 2f)
					{
						rotation -= (float)Math.PI * 2f;
					}
					frame = 6;
					frameCounter = 0;
					if (type == 885)
					{
						localAI[0] = 0f;
					}
					if (type == 889)
					{
						localAI[0] += 3f;
						if (localAI[0] > (float)num76)
						{
							localAI[0] = num76;
						}
					}
					return;
				}
				rotation *= 0.95f;
				if (rotation < 0.05f)
				{
					rotation = 0f;
				}
				frameCounter++;
				if (type == 885)
				{
					switch (frameCounter)
					{
					case 10:
						localAI[0] = 0f;
						break;
					case 20:
						localAI[0] = 1f;
						break;
					case 30:
						localAI[0] = 2f;
						break;
					case 40:
						localAI[0] = 1f;
						break;
					}
				}
				if (type == 889)
				{
					localAI[0] -= 3f;
					if (localAI[0] < 0f)
					{
						localAI[0] = 0f;
					}
				}
				if (frameCounter % 5 == 0)
				{
					frame++;
					if (frame > 5)
					{
						frame = 0;
					}
				}
				if (frameCounter >= 40)
				{
					frameCounter = 0;
				}
				return;
			}
			bool flag10 = ai[1] == 0f;
			if (flag)
			{
				flag10 = true;
			}
			if (flag10)
			{
				int num77 = 500;
				if (type == 127)
				{
					num77 = 200;
				}
				if (type == 208)
				{
					num77 = 300;
				}
				switch (type)
				{
				case 816:
				case 825:
				case 854:
				case 858:
				case 859:
				case 860:
				case 881:
				case 884:
				case 890:
				case 891:
				case 897:
				case 900:
				case 934:
					num77 = 400;
					break;
				case 821:
				case 899:
					num77 = 500;
					break;
				}
				if (flag6 || type == 266 || (type >= 390 && type <= 392))
				{
					num77 += 40 * minionPos;
					if (localAI[0] > 0f)
					{
						num77 += 500;
					}
					if (type == 266 && localAI[0] > 0f)
					{
						num77 += 100;
					}
					if (type >= 390 && type <= 392 && localAI[0] > 0f)
					{
						num77 += 400;
					}
				}
				if (Main.player[owner].rocketDelay2 > 0)
				{
					ai[0] = 1f;
				}
				Vector2 vector7 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num78 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector7.X;
				float num79 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector7.Y;
				float num80 = (float)Math.Sqrt(num78 * num78 + num79 * num79);
				if (!flag7)
				{
					if (num80 > 2000f)
					{
						position.X = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - (float)(width / 2);
						position.Y = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - (float)(height / 2);
					}
					else if (num80 > (float)num77 || (Math.Abs(num79) > 300f && ((!flag6 && type != 266 && (type < 390 || type > 392)) || !(localAI[0] > 0f))))
					{
						if (type != 324)
						{
							if (num79 > 0f && velocity.Y < 0f)
							{
								velocity.Y = 0f;
							}
							if (num79 < 0f && velocity.Y > 0f)
							{
								velocity.Y = 0f;
							}
						}
						ai[0] = 1f;
					}
				}
			}
			if ((type == 209 || type == 956) && ai[0] != 0f)
			{
				if (Main.player[owner].velocity.Y == 0f && alpha >= 100)
				{
					position.X = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - (float)(width / 2);
					position.Y = Main.player[owner].position.Y + (float)Main.player[owner].height - (float)height;
					ai[0] = 0f;
				}
				else
				{
					velocity.X = 0f;
					velocity.Y = 0f;
					if (type == 956 && alpha < 100)
					{
						int num81 = Dust.NewDust(position, width, height, 6, velocity.X, velocity.Y, 0, default(Color), 1.2f);
						Main.dust[num81].velocity.X += Main.rand.NextFloat() - 0.5f;
						Main.dust[num81].velocity.Y += (Main.rand.NextFloat() + 0.5f) * -1f;
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num81].noGravity = true;
						}
					}
					alpha += 5;
					if (alpha > 255)
					{
						alpha = 255;
					}
				}
			}
			else if (ai[0] != 0f && !flag7)
			{
				float num82 = 0.2f;
				int num83 = 200;
				if (type == 127)
				{
					num83 = 100;
				}
				if (flag6 || type == 816 || type == 821 || type == 825 || type == 854 || type == 858 || type == 859 || type == 860)
				{
					num82 = 0.5f;
					num83 = 100;
				}
				if (type == 875)
				{
					num82 = 2f;
					num83 = 100;
				}
				tileCollide = false;
				Vector2 vector8 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
				float num84 = Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - vector8.X;
				if (flag6 || type == 266 || (type >= 390 && type <= 392))
				{
					num84 -= (float)(40 * Main.player[owner].direction);
					float num85 = 700f;
					if (flag6)
					{
						num85 += 100f;
					}
					bool flag11 = false;
					int num86 = -1;
					for (int num87 = 0; num87 < 200; num87++)
					{
						if (!Main.npc[num87].CanBeChasedBy(this))
						{
							continue;
						}
						float num88 = Main.npc[num87].position.X + (float)(Main.npc[num87].width / 2);
						float num89 = Main.npc[num87].position.Y + (float)(Main.npc[num87].height / 2);
						if (Math.Abs(Main.player[owner].position.X + (float)(Main.player[owner].width / 2) - num88) + Math.Abs(Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - num89) < num85)
						{
							if (Collision.CanHit(position, width, height, Main.npc[num87].position, Main.npc[num87].width, Main.npc[num87].height))
							{
								num86 = num87;
							}
							flag11 = true;
							break;
						}
					}
					if (!flag11)
					{
						num84 -= (float)(40 * minionPos * Main.player[owner].direction);
					}
					if (flag11 && num86 >= 0)
					{
						ai[0] = 0f;
					}
				}
				float num90 = Main.player[owner].position.Y + (float)(Main.player[owner].height / 2) - vector8.Y;
				if (type == 127)
				{
					num90 = Main.player[owner].position.Y - vector8.Y;
				}
				float num91 = (float)Math.Sqrt(num84 * num84 + num90 * num90);
				float num92 = num91;
				float num93 = 10f;
				float num94 = num91;
				if (type == 111)
				{
					num93 = 11f;
				}
				if (type == 127)
				{
					num93 = 9f;
				}
				if (type == 875)
				{
					num82 = 1.8f;
					num93 = 16f;
				}
				if (type == 324)
				{
					num93 = 20f;
				}
				if (flag6 || type == 816 || type == 821 || type == 825 || type == 854 || type == 858 || type == 859 || type == 860 || type == 956 || type == 958 || type == 959 || type == 960)
				{
					num82 = 0.4f;
					num93 = 12f;
					if (num93 < Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y))
					{
						num93 = Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y);
					}
				}
				if (type == 208 && Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y) > 4f)
				{
					num83 = -1;
				}
				if (num91 < (float)num83 && Main.player[owner].velocity.Y == 0f && position.Y + (float)height <= Main.player[owner].position.Y + (float)Main.player[owner].height && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					if (velocity.Y < -6f)
					{
						velocity.Y = -6f;
					}
				}
				if (num91 < 60f)
				{
					num84 = velocity.X;
					num90 = velocity.Y;
				}
				else
				{
					num91 = num93 / num91;
					num84 *= num91;
					num90 *= num91;
				}
				if (type == 324)
				{
					if (num94 > 1000f)
					{
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num93 - 1.25)
						{
							velocity *= 1.025f;
						}
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) > (double)num93 + 1.25)
						{
							velocity *= 0.975f;
						}
					}
					else if (num94 > 600f)
					{
						if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) < num93 - 1f)
						{
							velocity *= 1.05f;
						}
						if (Math.Abs(velocity.X) + Math.Abs(velocity.Y) > num93 + 1f)
						{
							velocity *= 0.95f;
						}
					}
					else if (num94 > 400f)
					{
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num93 - 0.5)
						{
							velocity *= 1.075f;
						}
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) > (double)num93 + 0.5)
						{
							velocity *= 0.925f;
						}
					}
					else
					{
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < (double)num93 - 0.25)
						{
							velocity *= 1.1f;
						}
						if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) > (double)num93 + 0.25)
						{
							velocity *= 0.9f;
						}
					}
					velocity.X = (velocity.X * 34f + num84) / 35f;
					velocity.Y = (velocity.Y * 34f + num90) / 35f;
				}
				else if (type == 875)
				{
					if (num92 < (float)num83)
					{
						if (velocity.X < num84)
						{
							velocity.X += num82;
						}
						else if (velocity.X > num84)
						{
							velocity.X -= num82;
						}
						if (velocity.Y < num90)
						{
							velocity.Y += num82;
						}
						else if (velocity.Y > num90)
						{
							velocity.Y -= num82;
						}
					}
					else
					{
						velocity = Vector2.Lerp(velocity, new Vector2(num84, num90), 0.75f);
					}
				}
				else
				{
					if (velocity.X < num84)
					{
						velocity.X += num82;
						if (velocity.X < 0f)
						{
							velocity.X += num82 * 1.5f;
						}
					}
					if (velocity.X > num84)
					{
						velocity.X -= num82;
						if (velocity.X > 0f)
						{
							velocity.X -= num82 * 1.5f;
						}
					}
					if (velocity.Y < num90)
					{
						velocity.Y += num82;
						if (velocity.Y < 0f)
						{
							velocity.Y += num82 * 1.5f;
						}
					}
					if (velocity.Y > num90)
					{
						velocity.Y -= num82;
						if (velocity.Y > 0f)
						{
							velocity.Y -= num82 * 1.5f;
						}
					}
				}
				if (type == 111)
				{
					frame = 7;
				}
				if (type == 112)
				{
					frame = 2;
				}
				if (flag6 && frame < 12)
				{
					frame = Main.rand.Next(12, 18);
					frameCounter = 0;
				}
				if (type != 313)
				{
					if ((double)velocity.X > 0.5)
					{
						spriteDirection = -1;
					}
					else if ((double)velocity.X < -0.5)
					{
						spriteDirection = 1;
					}
				}
				if (type == 900)
				{
					spriteDirection = -1;
					if (velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					frameCounter++;
					if (frame < 10)
					{
						frame = 10;
						frameCounter = 0;
					}
					if (frameCounter > 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 10;
						}
					}
					rotation = velocity.X * 0.125f;
				}
				else if (type == 899)
				{
					spriteDirection = -1;
					if (velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					frameCounter++;
					if (frame < 10)
					{
						frame = 10;
						frameCounter = 0;
					}
					if (frameCounter > 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 10;
						}
					}
					Vector2 v = velocity;
					v.Normalize();
					rotation = v.ToRotation();
					if (velocity.X < 0f)
					{
						rotation += (float)Math.PI;
					}
				}
				else if (type == 897)
				{
					spriteDirection = 1;
					frameCounter++;
					if (frame < 8)
					{
						frame = 8;
						frameCounter = 0;
					}
					if (frameCounter > 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 8;
						}
					}
					Vector2 v2 = velocity;
					v2.Normalize();
					rotation = v2.ToRotation() + (float)Math.PI / 2f;
				}
				else if (type == 891)
				{
					spriteDirection = 1;
					frameCounter++;
					if (frame < 9)
					{
						frame = 9;
						frameCounter = 0;
					}
					if (frameCounter > 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 9;
						}
					}
					Vector2 v3 = velocity;
					v3.Normalize();
					rotation = v3.ToRotation() + (float)Math.PI / 2f;
				}
				else if (type == 890)
				{
					spriteDirection = -1;
					if (velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					frameCounter++;
					if (frame < 9)
					{
						frame = 9;
						frameCounter = 0;
					}
					if (frameCounter > 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 9;
						}
					}
					rotation = velocity.X * 0.025f;
				}
				else if (type == 884)
				{
					spriteDirection = -1;
					if (velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					frameCounter++;
					if (frame < 9)
					{
						frame = 9;
						frameCounter = 0;
					}
					if (frameCounter > 3)
					{
						frameCounter = 0;
						frame++;
						if (frame >= Main.projFrames[type])
						{
							frame = 9;
						}
					}
					Vector2 v4 = velocity;
					v4.Normalize();
					rotation = v4.ToRotation() + (float)Math.PI / 2f;
				}
				else if (type == 881 || type == 934)
				{
					int num95 = 1226;
					if (type == 934)
					{
						num95 = 1261;
					}
					if (frame < 6 || frame > 11)
					{
						Gore.NewGore(new Vector2(base.Center.X, position.Y), velocity * 0.5f, num95);
					}
					frameCounter++;
					if (frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 6 || frame > 11)
					{
						frame = 6;
					}
					Vector2 v5 = velocity;
					v5.Normalize();
					rotation = v5.ToRotation() + (float)Math.PI / 2f;
				}
				else if (type == 875)
				{
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 7 || frame > 10)
					{
						frame = 7;
					}
					Vector2 v6 = velocity;
					v6.Normalize();
					rotation = v6.ToRotation() + ((spriteDirection == -1) ? 0f : ((float)Math.PI));
				}
				else if (type == 825)
				{
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 21 || frame > 25)
					{
						frame = 21;
					}
					rotation = velocity.X * 0.025f;
				}
				else if (type == 854)
				{
					if (frame < 13)
					{
						Gore.NewGore(new Vector2(base.Center.X, position.Y), velocity * 0.5f, 1269);
					}
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 13 || frame > 18)
					{
						frame = 13;
					}
					Vector2 v7 = velocity;
					v7.Normalize();
					rotation = v7.ToRotation() + (float)Math.PI / 2f;
				}
				else if (type == 858)
				{
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 10 || frame > 13)
					{
						frame = 10;
					}
					Vector2 v8 = velocity;
					v8.Normalize();
					rotation = v8.ToRotation() + ((spriteDirection == -1) ? 0f : ((float)Math.PI));
				}
				else if (type == 859)
				{
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 18 || frame > 23)
					{
						frame = 18;
					}
					rotation = velocity.X * 0.025f;
				}
				else if (type == 860)
				{
					if (frame < 6)
					{
						frame = 8;
						frameCounter = 0;
					}
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 13)
					{
						frame = 6;
					}
					Vector2 v9 = velocity;
					v9.Normalize();
					rotation = v9.ToRotation() + (float)Math.PI / 2f;
				}
				else if (type == 816)
				{
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 11 || frame > 16)
					{
						frame = 11;
					}
					rotation = velocity.X * 0.025f;
				}
				else if (type == 821)
				{
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 19 || frame > 22)
					{
						frame = 19;
					}
					rotation = velocity.X * 0.025f;
				}
				else if (type == 958)
				{
					spriteDirection = -1;
					if (velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					if (frame < 13)
					{
						frame = 13;
						frameCounter = 0;
					}
					if (++frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 16)
					{
						frame = 13;
					}
					rotation = MathHelper.Clamp(velocity.X * 0.025f, -0.4f, 0.4f);
				}
				else if (type == 960)
				{
					spriteDirection = -1;
					if (velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					frame = 4;
					frameCounter = 0;
					Vector2 v10 = velocity;
					v10.Normalize();
					rotation = v10.ToRotation() + (float)Math.PI / 2f;
				}
				else if (type == 959)
				{
					spriteDirection = -1;
					if (velocity.X > 0f)
					{
						spriteDirection = 1;
					}
					frame = 11;
					frameCounter = 0;
					rotation = MathHelper.Clamp(velocity.X * 0.025f, -0.4f, 0.4f);
					float num96 = Vector2.Dot(velocity.SafeNormalize(Vector2.UnitX), new Vector2(0f, -1f));
					if (num96 > 0f && Main.rand.NextFloat() < 0.3f + num96 * 0.3f)
					{
						Dust dust = Dust.NewDustDirect(position, width, height, 16, velocity.X * 0.7f, velocity.Y * 1.2f, 150, default(Color), 0.6f);
						dust.noGravity = true;
						dust.fadeIn = 1f;
						dust.velocity.X = velocity.X * 0.3f;
						dust.position = base.Top + new Vector2(0f, -10f) + new Vector2(Main.rand.NextFloatDirection() * 30f, Main.rand.NextFloatDirection() * 10f);
						dust.velocity *= 0.7f;
						dust.position += dust.velocity * 2f;
					}
				}
				else if (type == 112)
				{
					if (spriteDirection == -1)
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					}
					else
					{
						rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.57f;
					}
				}
				else if (type >= 390 && type <= 392)
				{
					int num97 = (int)(base.Center.X / 16f);
					int num98 = (int)(base.Center.Y / 16f);
					if (Main.tile[num97, num98] != null && Main.tile[num97, num98].wall > 0)
					{
						rotation = velocity.ToRotation() + (float)Math.PI / 2f;
						frameCounter += (int)(Math.Abs(velocity.X) + Math.Abs(velocity.Y));
						if (frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 7)
						{
							frame = 4;
						}
						if (frame < 4)
						{
							frame = 7;
						}
					}
					else
					{
						frameCounter++;
						if (frameCounter > 2)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 8 || frame > 10)
						{
							frame = 8;
						}
						rotation = velocity.X * 0.1f;
					}
				}
				else if (type == 334)
				{
					frameCounter++;
					if (frameCounter > 1)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 7 || frame > 10)
					{
						frame = 7;
					}
					rotation = velocity.X * 0.1f;
				}
				else if (type == 353)
				{
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 10 || frame > 13)
					{
						frame = 10;
					}
					rotation = velocity.X * 0.05f;
				}
				else if (type == 127)
				{
					frameCounter += 3;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame <= 5 || frame > 15)
					{
						frame = 6;
					}
					rotation = velocity.X * 0.1f;
				}
				else if (type == 269)
				{
					if (frame == 6)
					{
						frameCounter = 0;
					}
					else if (frame < 4 || frame > 6)
					{
						frameCounter = 0;
						frame = 4;
					}
					else
					{
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
					}
					rotation = velocity.X * 0.05f;
				}
				else if (type == 266)
				{
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 2 || frame > 5)
					{
						frame = 2;
					}
					rotation = velocity.X * 0.1f;
				}
				else if (type == 324)
				{
					frameCounter++;
					if (frameCounter > 1)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 6 || frame > 9)
					{
						frame = 6;
					}
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.9f, 0.6f, 0.2f);
					for (int num99 = 0; num99 < 2; num99++)
					{
						int num100 = 4;
						int num101 = Dust.NewDust(new Vector2(base.Center.X - (float)num100, base.Center.Y - (float)num100) - velocity * 0f, num100 * 2, num100 * 2, 6, 0f, 0f, 100);
						Main.dust[num101].scale *= 1.8f + (float)Main.rand.Next(10) * 0.1f;
						Main.dust[num101].velocity *= 0.2f;
						if (num99 == 1)
						{
							Main.dust[num101].position -= velocity * 0.5f;
						}
						Main.dust[num101].noGravity = true;
						num101 = Dust.NewDust(new Vector2(base.Center.X - (float)num100, base.Center.Y - (float)num100) - velocity * 0f, num100 * 2, num100 * 2, 31, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num101].fadeIn = 1f + (float)Main.rand.Next(5) * 0.1f;
						Main.dust[num101].velocity *= 0.05f;
						if (num99 == 1)
						{
							Main.dust[num101].position -= velocity * 0.5f;
						}
					}
				}
				else if (type == 268)
				{
					frameCounter++;
					if (frameCounter > 4)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 6 || frame > 7)
					{
						frame = 6;
					}
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
				}
				else if (type == 200)
				{
					frameCounter += 3;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame <= 5 || frame > 9)
					{
						frame = 6;
					}
					rotation = velocity.X * 0.1f;
				}
				else if (type == 208)
				{
					rotation = velocity.X * 0.075f;
					frameCounter++;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 4)
					{
						frame = 1;
					}
					if (frame < 1)
					{
						frame = 1;
					}
				}
				else if (type == 236)
				{
					rotation = velocity.Y * 0.05f * (float)direction;
					if (velocity.Y < 0f)
					{
						frameCounter += 2;
					}
					else
					{
						frameCounter++;
					}
					if (frameCounter >= 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 12)
					{
						frame = 9;
					}
					if (frame < 9)
					{
						frame = 9;
					}
				}
				else if (type == 499)
				{
					rotation = velocity.Y * 0.05f * (float)direction;
					if (velocity.Y < 0f)
					{
						frameCounter += 2;
					}
					else
					{
						frameCounter++;
					}
					if (frameCounter >= 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame >= 12)
					{
						frame = 8;
					}
					if (frame < 8)
					{
						frame = 8;
					}
				}
				else if (type == 765)
				{
					rotation = velocity.Y * 0.05f * (float)direction;
					frameCounter++;
					if (frameCounter >= 8)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame >= 10)
					{
						frame = 8;
					}
					if (frame < 6)
					{
						frame = 6;
					}
				}
				else if (type == 314)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
					frameCounter++;
					if (frameCounter >= 3)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 12)
					{
						frame = 7;
					}
					if (frame < 7)
					{
						frame = 7;
					}
				}
				else if (type == 319)
				{
					rotation = velocity.X * 0.05f;
					frameCounter++;
					if (frameCounter >= 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 10)
					{
						frame = 6;
					}
					if (frame < 6)
					{
						frame = 6;
					}
				}
				else if (type == 210)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 1.58f;
					frameCounter += 3;
					if (frameCounter > 6)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame > 11)
					{
						frame = 7;
					}
					if (frame < 7)
					{
						frame = 7;
					}
				}
				else if (type == 313)
				{
					position.Y += height;
					height = 54;
					position.Y -= height;
					position.X += width / 2;
					width = 54;
					position.X -= width / 2;
					rotation += velocity.X * 0.01f;
					frameCounter = 0;
					frame = 11;
				}
				else if (type == 398)
				{
					if ((double)velocity.X > 0.5)
					{
						spriteDirection = 1;
					}
					else if ((double)velocity.X < -0.5)
					{
						spriteDirection = -1;
					}
					frameCounter++;
					if (frameCounter > 1)
					{
						frame++;
						frameCounter = 0;
					}
					if (frame < 6 || frame > 9)
					{
						frame = 6;
					}
					rotation = velocity.X * 0.1f;
				}
				else if (spriteDirection == -1)
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X);
				}
				else
				{
					rotation = (float)Math.Atan2(velocity.Y, velocity.X) + 3.14f;
				}
				if (!flag6 && type != 499 && type != 765 && type != 816 && type != 821 && type != 825 && type != 859 && type != 881 && type != 884 && type != 890 && type != 891 && type != 900 && type != 934 && type != 958 && type != 959 && type != 960)
				{
					if (type == 899)
					{
						int num102 = 6;
						if (Main.rand.Next(4) == 0)
						{
							num102 = 31;
						}
						int num103 = Dust.NewDust(base.Center + new Vector2(-8f, 0f) - velocity * 0.25f, 15, 15, num102, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 0, default(Color), 1.3f);
						Main.dust[num103].velocity.X = Main.dust[num103].velocity.X * 0.2f;
						Main.dust[num103].velocity.Y = Main.dust[num103].velocity.Y * 0.2f - 0.2f;
						Main.dust[num103].noGravity = true;
					}
					else if (type == 897)
					{
						int num104 = 6;
						if (Main.rand.Next(4) == 0)
						{
							num104 = 31;
						}
						int num105 = Dust.NewDust(base.Center + new Vector2(-8f, -8f) - velocity * 0.25f, 15, 15, num104, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 0, default(Color), 1.3f);
						Main.dust[num105].velocity.X = Main.dust[num105].velocity.X * 0.2f;
						Main.dust[num105].velocity.Y = Main.dust[num105].velocity.Y * 0.2f - 0.2f;
						Main.dust[num105].noGravity = true;
					}
					else if (type == 875)
					{
						if (Main.rand.Next(3) == 0)
						{
							Gore.NewGorePerfect(base.Center + new Vector2(-10f + (float)Main.rand.Next(-20, 20) * 0.5f, -10f + (float)Main.rand.Next(-20, 20) * 0.5f), velocity * 0.1f, 1225, 0.5f + Main.rand.NextFloat() * 1f);
							Vector2 vector9 = Main.rand.NextVector2CircularEdge(2f, 2f) + velocity * -0.5f;
							vector9 *= 0.5f;
							int num106 = Dust.NewDust(base.Center - velocity * 1.5f - new Vector2(7f, 7f), 15, 15, 226, vector9.X, vector9.Y, 0, default(Color), 0.65f);
							Main.dust[num106].noGravity = true;
						}
					}
					else if (type == 860)
					{
						int num107 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) - 4f, position.Y + (float)(height / 2) - 4f) + velocity, 8, 8, 27, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f);
						Main.dust[num107].velocity.X = Main.dust[num107].velocity.X * 0.2f;
						Main.dust[num107].velocity.Y = Main.dust[num107].velocity.Y * 0.2f - 0.2f;
						Main.dust[num107].velocity += new Vector2((float)Main.rand.Next(-10, 10) * 0.4f, (float)Main.rand.Next(-10, 10) * 0.4f) * 0.5f;
						Main.dust[num107].noGravity = true;
					}
					else if (type == 858)
					{
						int num108 = 6;
						if (Main.rand.Next(4) == 0)
						{
							num108 = 31;
						}
						int num109 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) - 4f, position.Y + (float)(height / 2) - 4f) - velocity, 10, 10, num108, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 0, default(Color), 1.3f);
						Main.dust[num109].velocity.X = Main.dust[num109].velocity.X * 0.2f;
						Main.dust[num109].velocity.Y = Main.dust[num109].velocity.Y * 0.2f - 0.2f;
						Main.dust[num109].noGravity = true;
					}
					else if (type == 854)
					{
						if (Main.rand.Next(6) == 0)
						{
							Vector2 vector10 = base.Center / 16f;
							int i2 = (int)vector10.X;
							int num110 = (int)vector10.Y;
							Tile tileSafely = Framing.GetTileSafely(i2, num110 + 1);
							if (!WorldGen.SolidTile(tileSafely) && tileSafely.liquid == 0)
							{
								Gore gore = Gore.NewGorePerfect(base.Center + new Vector2((float)Main.rand.Next(-30, 30) * 0.5f, (float)Main.rand.Next(-30, 30) * 0.5f), velocity * -0.2f, 910);
								gore.Frame.CurrentColumn = 0;
								gore.timeLeft = 1;
							}
						}
					}
					else if (type != 398 && type != 390 && type != 391 && type != 392 && type != 127 && type != 200 && type != 208 && type != 210 && type != 236 && type != 266 && type != 268 && type != 269 && type != 313 && type != 314 && type != 319 && type != 324 && type != 334 && type != 353)
					{
						int num111 = Dust.NewDust(new Vector2(position.X + (float)(width / 2) - 4f, position.Y + (float)(height / 2) - 4f) - velocity, 8, 8, 16, (0f - velocity.X) * 0.5f, velocity.Y * 0.5f, 50, default(Color), 1.7f);
						Main.dust[num111].velocity.X = Main.dust[num111].velocity.X * 0.2f;
						Main.dust[num111].velocity.Y = Main.dust[num111].velocity.Y * 0.2f;
						Main.dust[num111].noGravity = true;
					}
				}
			}
			else
			{
				if (flag6)
				{
					float num112 = 40 * minionPos;
					int num113 = 30;
					int num114 = 60;
					localAI[0] -= 1f;
					if (localAI[0] < 0f)
					{
						localAI[0] = 0f;
					}
					if (ai[1] > 0f)
					{
						ai[1] -= 1f;
					}
					else
					{
						float num115 = position.X;
						float num116 = position.Y;
						float num117 = 100000f;
						float num118 = num117;
						int num119 = -1;
						NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
						if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
						{
							float num120 = ownerMinionAttackTargetNPC.position.X + (float)(ownerMinionAttackTargetNPC.width / 2);
							float num121 = ownerMinionAttackTargetNPC.position.Y + (float)(ownerMinionAttackTargetNPC.height / 2);
							float num122 = Math.Abs(position.X + (float)(width / 2) - num120) + Math.Abs(position.Y + (float)(height / 2) - num121);
							if (num122 < num117)
							{
								if (num119 == -1 && num122 <= num118)
								{
									num118 = num122;
									num115 = num120;
									num116 = num121;
								}
								if (Collision.CanHit(position, width, height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
								{
									num117 = num122;
									num115 = num120;
									num116 = num121;
									num119 = ownerMinionAttackTargetNPC.whoAmI;
								}
							}
						}
						if (num119 == -1)
						{
							for (int num123 = 0; num123 < 200; num123++)
							{
								if (!Main.npc[num123].CanBeChasedBy(this))
								{
									continue;
								}
								float num124 = Main.npc[num123].position.X + (float)(Main.npc[num123].width / 2);
								float num125 = Main.npc[num123].position.Y + (float)(Main.npc[num123].height / 2);
								float num126 = Math.Abs(position.X + (float)(width / 2) - num124) + Math.Abs(position.Y + (float)(height / 2) - num125);
								if (num126 < num117)
								{
									if (num119 == -1 && num126 <= num118)
									{
										num118 = num126;
										num115 = num124;
										num116 = num125;
									}
									if (Collision.CanHit(position, width, height, Main.npc[num123].position, Main.npc[num123].width, Main.npc[num123].height))
									{
										num117 = num126;
										num115 = num124;
										num116 = num125;
										num119 = num123;
									}
								}
							}
						}
						if (num119 == -1 && num118 < num117)
						{
							num117 = num118;
						}
						float num127 = 400f;
						if ((double)position.Y > Main.worldSurface * 16.0)
						{
							num127 = 200f;
						}
						if (num117 < num127 + num112 && num119 == -1)
						{
							float num128 = num115 - (position.X + (float)(width / 2));
							if (num128 < -5f)
							{
								flag2 = true;
								flag3 = false;
							}
							else if (num128 > 5f)
							{
								flag3 = true;
								flag2 = false;
							}
						}
						else if (num119 >= 0 && num117 < 800f + num112)
						{
							localAI[0] = num114;
							float num129 = num115 - (position.X + (float)(width / 2));
							if (num129 > 450f || num129 < -450f)
							{
								if (num129 < -50f)
								{
									flag2 = true;
									flag3 = false;
								}
								else if (num129 > 50f)
								{
									flag3 = true;
									flag2 = false;
								}
							}
							else if (owner == Main.myPlayer)
							{
								ai[1] = num113;
								Vector2 vector11 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)(height / 2) - 8f);
								float num130 = num115 - vector11.X + (float)Main.rand.Next(-20, 21);
								float num131 = Math.Abs(num130) * 0.1f;
								num131 = num131 * (float)Main.rand.Next(0, 100) * 0.001f;
								float num132 = num116 - vector11.Y + (float)Main.rand.Next(-20, 21) - num131;
								float num133 = (float)Math.Sqrt(num130 * num130 + num132 * num132);
								num133 = 18f / num133;
								num130 *= num133;
								num132 *= num133;
								int num134 = damage;
								int num135 = 195;
								int num136 = NewProjectile(GetProjectileSource_FromThis(), vector11.X, vector11.Y, num130, num132, num135, num134, knockBack, Main.myPlayer);
								Main.projectile[num136].timeLeft = 300;
								if (num130 < 0f)
								{
									direction = -1;
								}
								if (num130 > 0f)
								{
									direction = 1;
								}
								netUpdate = true;
							}
						}
					}
				}
				bool flag12 = false;
				Vector2 vector12 = Vector2.Zero;
				bool flag13 = false;
				if (type == 266 || (type >= 390 && type <= 392))
				{
					float num137 = 40 * minionPos;
					int num138 = 60;
					localAI[0] -= 1f;
					if (localAI[0] < 0f)
					{
						localAI[0] = 0f;
					}
					if (ai[1] > 0f)
					{
						ai[1] -= 1f;
					}
					else
					{
						float num139 = position.X;
						float num140 = position.Y;
						float num141 = 100000f;
						float num142 = num141;
						int num143 = -1;
						NPC ownerMinionAttackTargetNPC2 = OwnerMinionAttackTargetNPC;
						if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this))
						{
							float x = ownerMinionAttackTargetNPC2.Center.X;
							float y = ownerMinionAttackTargetNPC2.Center.Y;
							float num144 = Math.Abs(position.X + (float)(width / 2) - x) + Math.Abs(position.Y + (float)(height / 2) - y);
							if (num144 < num141)
							{
								if (num143 == -1 && num144 <= num142)
								{
									num142 = num144;
									num139 = x;
									num140 = y;
								}
								if (Collision.CanHit(position, width, height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height))
								{
									num141 = num144;
									num139 = x;
									num140 = y;
									num143 = ownerMinionAttackTargetNPC2.whoAmI;
								}
							}
						}
						if (num143 == -1)
						{
							for (int num145 = 0; num145 < 200; num145++)
							{
								if (!Main.npc[num145].CanBeChasedBy(this))
								{
									continue;
								}
								float num146 = Main.npc[num145].position.X + (float)(Main.npc[num145].width / 2);
								float num147 = Main.npc[num145].position.Y + (float)(Main.npc[num145].height / 2);
								float num148 = Math.Abs(position.X + (float)(width / 2) - num146) + Math.Abs(position.Y + (float)(height / 2) - num147);
								if (num148 < num141)
								{
									if (num143 == -1 && num148 <= num142)
									{
										num142 = num148;
										num139 = num146;
										num140 = num147;
									}
									if (Collision.CanHit(position, width, height, Main.npc[num145].position, Main.npc[num145].width, Main.npc[num145].height))
									{
										num141 = num148;
										num139 = num146;
										num140 = num147;
										num143 = num145;
									}
								}
							}
						}
						if (type >= 390 && type <= 392 && !Collision.SolidCollision(position, width, height))
						{
							tileCollide = true;
						}
						if (num143 == -1 && num142 < num141)
						{
							num141 = num142;
						}
						else if (num143 >= 0)
						{
							flag12 = true;
							vector12 = new Vector2(num139, num140) - base.Center;
							if (type >= 390 && type <= 392)
							{
								if (Main.npc[num143].position.Y > position.Y + (float)height)
								{
									int num149 = (int)(base.Center.X / 16f);
									int num150 = (int)((position.Y + (float)height + 1f) / 16f);
									if (Main.tile[num149, num150] != null && Main.tile[num149, num150].active() && TileID.Sets.Platforms[Main.tile[num149, num150].type])
									{
										tileCollide = false;
									}
								}
								Rectangle rectangle = new Rectangle((int)position.X, (int)position.Y, width, height);
								Rectangle value = new Rectangle((int)Main.npc[num143].position.X, (int)Main.npc[num143].position.Y, Main.npc[num143].width, Main.npc[num143].height);
								int num151 = 10;
								value.X -= num151;
								value.Y -= num151;
								value.Width += num151 * 2;
								value.Height += num151 * 2;
								if (rectangle.Intersects(value))
								{
									flag13 = true;
									Vector2 vector13 = Main.npc[num143].Center - base.Center;
									if (velocity.Y > 0f && vector13.Y < 0f)
									{
										velocity.Y *= 0.5f;
									}
									if (velocity.Y < 0f && vector13.Y > 0f)
									{
										velocity.Y *= 0.5f;
									}
									if (velocity.X > 0f && vector13.X < 0f)
									{
										velocity.X *= 0.5f;
									}
									if (velocity.X < 0f && vector13.X > 0f)
									{
										velocity.X *= 0.5f;
									}
									if (vector13.Length() > 14f)
									{
										vector13.Normalize();
										vector13 *= 14f;
									}
									rotation = (rotation * 5f + vector13.ToRotation() + (float)Math.PI / 2f) / 6f;
									velocity = (velocity * 9f + vector13) / 10f;
									for (int num152 = 0; num152 < 1000; num152++)
									{
										if (whoAmI != num152 && owner == Main.projectile[num152].owner && Main.projectile[num152].type >= 390 && Main.projectile[num152].type <= 392 && (Main.projectile[num152].Center - base.Center).Length() < 15f)
										{
											float num153 = 0.5f;
											if (base.Center.Y > Main.projectile[num152].Center.Y)
											{
												Main.projectile[num152].velocity.Y -= num153;
												velocity.Y += num153;
											}
											else
											{
												Main.projectile[num152].velocity.Y += num153;
												velocity.Y -= num153;
											}
											if (base.Center.X > Main.projectile[num152].Center.X)
											{
												velocity.X += num153;
												Main.projectile[num152].velocity.X -= num153;
											}
											else
											{
												velocity.X -= num153;
												Main.projectile[num152].velocity.Y += num153;
											}
										}
									}
								}
							}
						}
						float num154 = 300f;
						if ((double)position.Y > Main.worldSurface * 16.0)
						{
							num154 = 150f;
						}
						if (type >= 390 && type <= 392)
						{
							num154 = 500f;
							if ((double)position.Y > Main.worldSurface * 16.0)
							{
								num154 = 250f;
							}
						}
						if (num141 < num154 + num137 && num143 == -1)
						{
							float num155 = num139 - (position.X + (float)(width / 2));
							if (num155 < -5f)
							{
								flag2 = true;
								flag3 = false;
							}
							else if (num155 > 5f)
							{
								flag3 = true;
								flag2 = false;
							}
						}
						bool flag14 = false;
						if (type >= 390 && type <= 392 && localAI[1] > 0f)
						{
							flag14 = true;
							localAI[1] -= 1f;
						}
						if (num143 >= 0 && num141 < 800f + num137)
						{
							friendly = true;
							localAI[0] = num138;
							float num156 = num139 - (position.X + (float)(width / 2));
							if (num156 < -10f)
							{
								flag2 = true;
								flag3 = false;
							}
							else if (num156 > 10f)
							{
								flag3 = true;
								flag2 = false;
							}
							if (num140 < base.Center.Y - 100f && num156 > -50f && num156 < 50f && velocity.Y == 0f)
							{
								float num157 = Math.Abs(num140 - base.Center.Y);
								if (num157 < 120f)
								{
									velocity.Y = -10f;
								}
								else if (num157 < 210f)
								{
									velocity.Y = -13f;
								}
								else if (num157 < 270f)
								{
									velocity.Y = -15f;
								}
								else if (num157 < 310f)
								{
									velocity.Y = -17f;
								}
								else if (num157 < 380f)
								{
									velocity.Y = -18f;
								}
							}
							if (flag14)
							{
								friendly = false;
								if (velocity.X < 0f)
								{
									flag2 = true;
								}
								else if (velocity.X > 0f)
								{
									flag3 = true;
								}
							}
						}
						else
						{
							friendly = false;
						}
					}
				}
				if (ai[1] != 0f)
				{
					flag2 = false;
					flag3 = false;
				}
				else if (flag6 && localAI[0] == 0f)
				{
					direction = Main.player[owner].direction;
				}
				else if (type >= 390 && type <= 392)
				{
					int num158 = (int)(base.Center.X / 16f);
					int num159 = (int)(base.Center.Y / 16f);
					if (Main.tile[num158, num159] != null && Main.tile[num158, num159].wall > 0)
					{
						flag2 = (flag3 = false);
					}
				}
				if (type == 127)
				{
					if ((double)rotation > -0.1 && (double)rotation < 0.1)
					{
						rotation = 0f;
					}
					else if (rotation < 0f)
					{
						rotation += 0.1f;
					}
					else
					{
						rotation -= 0.1f;
					}
				}
				else if (type != 313 && !flag13)
				{
					rotation = 0f;
				}
				if (type < 390 || type > 392)
				{
					tileCollide = true;
				}
				float num160 = 0.08f;
				float num161 = 6.5f;
				if (type == 127)
				{
					num161 = 2f;
					num160 = 0.04f;
				}
				if (type == 112)
				{
					num161 = 6f;
					num160 = 0.06f;
				}
				if (type == 334)
				{
					num161 = 8f;
					num160 = 0.08f;
				}
				if (type == 268)
				{
					num161 = 8f;
					num160 = 0.4f;
				}
				if (type == 324)
				{
					num160 = 0.1f;
					num161 = 3f;
				}
				if (type == 858)
				{
					num160 = 0.3f;
					num161 = 7f;
				}
				if (flag6 || type == 266 || (type >= 390 && type <= 392) || type == 816 || type == 821 || type == 825 || type == 859 || type == 860 || type == 881 || type == 884 || type == 890 || type == 891 || type == 897 || type == 899 || type == 900 || type == 934 || type == 956 || type == 958 || type == 959 || type == 960)
				{
					num161 = 6f;
					num160 = 0.2f;
					if (num161 < Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y))
					{
						num161 = Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y);
						num160 = 0.3f;
					}
				}
				if (type == 875)
				{
					num161 = 7f;
					num160 = 0.25f;
					if (num161 < Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y))
					{
						num161 = Math.Abs(Main.player[owner].velocity.X) + Math.Abs(Main.player[owner].velocity.Y);
						num160 = 0.35f;
					}
				}
				if (type >= 390 && type <= 392)
				{
					num160 *= 2f;
				}
				if (flag7)
				{
					num161 = 6f;
				}
				if (flag2)
				{
					if ((double)velocity.X > -3.5)
					{
						velocity.X -= num160;
					}
					else
					{
						velocity.X -= num160 * 0.25f;
					}
				}
				else if (flag3)
				{
					if ((double)velocity.X < 3.5)
					{
						velocity.X += num160;
					}
					else
					{
						velocity.X += num160 * 0.25f;
					}
				}
				else
				{
					velocity.X *= 0.9f;
					if (velocity.X >= 0f - num160 && velocity.X <= num160)
					{
						velocity.X = 0f;
					}
				}
				if (type == 208)
				{
					velocity.X *= 0.95f;
					if ((double)velocity.X > -0.1 && (double)velocity.X < 0.1)
					{
						velocity.X = 0f;
					}
					flag2 = false;
					flag3 = false;
				}
				if (flag2 || flag3)
				{
					int num162 = (int)(position.X + (float)(width / 2)) / 16;
					int j2 = (int)(position.Y + (float)(height / 2)) / 16;
					if (type == 236)
					{
						num162 += direction;
					}
					if (flag2)
					{
						num162--;
					}
					if (flag3)
					{
						num162++;
					}
					num162 += (int)velocity.X;
					if (WorldGen.SolidTile(num162, j2))
					{
						flag5 = true;
					}
				}
				if (Main.player[owner].position.Y + (float)Main.player[owner].height - 8f > position.Y + (float)height)
				{
					flag4 = true;
				}
				if (type == 268 && frameCounter < 10)
				{
					flag5 = false;
				}
				if (type == 860 && velocity.X != 0f)
				{
					flag5 = true;
				}
				if ((type == 881 || type == 934) && velocity.X != 0f)
				{
					flag5 = true;
				}
				Collision.StepUp(ref position, ref velocity, width, height, ref stepSpeed, ref gfxOffY);
				if (velocity.Y == 0f || type == 200)
				{
					if (!flag4 && (velocity.X < 0f || velocity.X > 0f))
					{
						int num163 = (int)(position.X + (float)(width / 2)) / 16;
						int j3 = (int)(position.Y + (float)(height / 2)) / 16 + 1;
						if (flag2)
						{
							num163--;
						}
						if (flag3)
						{
							num163++;
						}
						WorldGen.SolidTile(num163, j3);
					}
					if (flag5)
					{
						int num164 = (int)(position.X + (float)(width / 2)) / 16;
						int num165 = (int)(position.Y + (float)height) / 16;
						if (WorldGen.SolidTileAllowBottomSlope(num164, num165) || Main.tile[num164, num165].halfBrick() || Main.tile[num164, num165].slope() > 0 || type == 200)
						{
							if (type == 200)
							{
								velocity.Y = -3.1f;
							}
							else
							{
								try
								{
									num164 = (int)(position.X + (float)(width / 2)) / 16;
									num165 = (int)(position.Y + (float)(height / 2)) / 16;
									if (flag2)
									{
										num164--;
									}
									if (flag3)
									{
										num164++;
									}
									num164 += (int)velocity.X;
									if (!WorldGen.SolidTile(num164, num165 - 1) && !WorldGen.SolidTile(num164, num165 - 2))
									{
										velocity.Y = -5.1f;
									}
									else if (!WorldGen.SolidTile(num164, num165 - 2))
									{
										velocity.Y = -7.1f;
									}
									else if (WorldGen.SolidTile(num164, num165 - 5))
									{
										velocity.Y = -11.1f;
									}
									else if (WorldGen.SolidTile(num164, num165 - 4))
									{
										velocity.Y = -10.1f;
									}
									else
									{
										velocity.Y = -9.1f;
									}
								}
								catch
								{
									velocity.Y = -9.1f;
								}
							}
							if (type == 127)
							{
								ai[0] = 1f;
							}
						}
					}
					else if (type == 266 && (flag2 || flag3))
					{
						velocity.Y -= 6f;
					}
				}
				if (velocity.X > num161)
				{
					velocity.X = num161;
				}
				if (velocity.X < 0f - num161)
				{
					velocity.X = 0f - num161;
				}
				if (velocity.X < 0f)
				{
					direction = -1;
				}
				if (velocity.X > 0f)
				{
					direction = 1;
				}
				if (velocity.X > num160 && flag3)
				{
					direction = 1;
				}
				if (velocity.X < 0f - num160 && flag2)
				{
					direction = -1;
				}
				if (type != 313)
				{
					if (direction == -1)
					{
						spriteDirection = 1;
					}
					if (direction == 1)
					{
						spriteDirection = -1;
					}
				}
				if (type == 398 || type == 958 || type == 960 || type == 956 || type == 959)
				{
					spriteDirection = direction;
				}
				bool flag15 = position.X - oldPosition.X == 0f;
				if (type == 956)
				{
					if (alpha > 0)
					{
						int num166 = Dust.NewDust(position, width, height, 6, velocity.X, velocity.Y, 0, default(Color), 1.2f);
						Main.dust[num166].velocity.X += Main.rand.NextFloat() - 0.5f;
						Main.dust[num166].velocity.Y += (Main.rand.NextFloat() + 0.5f) * -1f;
						if (Main.rand.Next(3) != 0)
						{
							Main.dust[num166].noGravity = true;
						}
						alpha -= 5;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					if (velocity.Y != 0f)
					{
						frame = 10;
					}
					else if (flag15)
					{
						spriteDirection = 1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = -1;
						}
						frame = 0;
					}
					else
					{
						float num167 = velocity.Length();
						frameCounter += (int)num167;
						if (frameCounter > 7)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 1 || frame > 9)
						{
							frame = 1;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 958)
				{
					if (velocity.Y != 0f)
					{
						localAI[0] = 0f;
						frame = 4;
					}
					else if (flag15)
					{
						spriteDirection = 1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = -1;
						}
						localAI[0] += 1f;
						if (localAI[0] > 200f)
						{
							frame = 1 + (int)(localAI[0] - 200f) / 6;
							if (localAI[0] >= 218f)
							{
								frame = 0;
								localAI[0] = Main.rand.Next(100);
							}
						}
						else
						{
							frame = 0;
						}
					}
					else
					{
						localAI[0] = 0f;
						float num168 = velocity.Length();
						frameCounter += (int)num168;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 5 || frame > 12)
						{
							frame = 5;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 959)
				{
					if (velocity.Y != 0f)
					{
						frame = ((velocity.Y > 0f) ? 10 : 9);
					}
					else if (flag15)
					{
						spriteDirection = 1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = -1;
						}
						frame = 0;
					}
					else
					{
						float num169 = velocity.Length();
						frameCounter += (int)num169;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 1 || frame > 8)
						{
							frame = 1;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 960)
				{
					_ = Main.player[owner];
					if (velocity.Y != 0f)
					{
						localAI[0] = 0f;
						localAI[1] = 0f;
						frameCounter = 0;
						frame = 4;
					}
					else if (flag15)
					{
						if (!flag7)
						{
							spriteDirection = 1;
							if (Main.player[owner].Center.X < base.Center.X)
							{
								spriteDirection = -1;
							}
						}
						if (frame >= 5 && frame < 12)
						{
							frameCounter++;
							if (frameCounter > 3)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 12)
							{
								frame = 0;
							}
						}
						else if (Chester_IsAnyPlayerTrackingThisProjectile())
						{
							if (localAI[0] == 0f)
							{
								if (localAI[1] == 0f)
								{
									localAI[1] = 1f;
									frameCounter = 0;
								}
								frame = 13;
								frameCounter++;
								if (frameCounter > 6)
								{
									localAI[0] = 1f;
									frame = 14;
									frameCounter = 0;
								}
							}
							else
							{
								frameCounter++;
								if (frameCounter > 6)
								{
									frame++;
									if (frame > 18)
									{
										frame = 14;
									}
									frameCounter = 0;
								}
							}
						}
						else
						{
							localAI[0] = 0f;
							if (localAI[1] == 1f)
							{
								localAI[1] = 0f;
								frameCounter = 0;
							}
							if (frame >= 12 && frame <= 19)
							{
								frame = 19;
								frameCounter++;
								if (frameCounter > 6)
								{
									frame = 0;
									frameCounter = 0;
								}
							}
							else
							{
								frameCounter++;
								if (frameCounter >= 24)
								{
									frameCounter = 0;
								}
								frame = frameCounter / 6;
							}
						}
					}
					else
					{
						localAI[0] = 0f;
						localAI[1] = 0f;
						float val = velocity.Length();
						frameCounter += (int)Math.Max(2f, val);
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 5 || frame > 12)
						{
							frame = 5;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 816)
				{
					if (velocity.Y != 0f)
					{
						frame = 4;
					}
					else if (flag15)
					{
						spriteDirection = -1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = 1;
						}
						if (++frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 0 || frame > 3)
						{
							frame = 0;
						}
					}
					else
					{
						int num170 = 5;
						float num171 = velocity.Length();
						if (num171 > 4f)
						{
							num170 = 3;
						}
						else if (num171 > 2f)
						{
							num170 = 4;
						}
						if (++frameCounter > num170)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 4 || frame > 10)
						{
							frame = 4;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				if (type == 860)
				{
					if (velocity.Y != 0f)
					{
						localAI[0] = 0f;
						if (frame >= 5)
						{
							frame = 5;
							frameCounter = 0;
						}
						else if (++frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
					}
					else if (Math.Abs(velocity.X) < 1f)
					{
						if (localAI[0] > 800f)
						{
							frameCounter++;
							if (frameCounter > 3)
							{
								frameCounter = 0;
								frame++;
								if (frame > 3)
								{
									frame = 3;
								}
							}
							localAI[0] += 1f;
							if (localAI[0] > 850f)
							{
								localAI[0] = 0f;
							}
							if (frame == 3 && localAI[0] == 820f)
							{
								for (int num172 = 0; num172 < 3 + Main.rand.Next(3); num172++)
								{
									int num173 = Gore.NewGore(new Vector2(position.X, base.Center.Y - 10f), Vector2.Zero, 1218);
									Main.gore[num173].velocity = new Vector2((float)Main.rand.Next(1, 10) * 0.3f * (float)(-spriteDirection), 0f - (2f + (float)Main.rand.Next(4) * 0.3f));
								}
							}
						}
						else if (frame == 0)
						{
							localAI[0] += 1f;
							frame = 0;
							frameCounter = 0;
						}
						else
						{
							localAI[0] = 0f;
							if (frame > 5)
							{
								frame = 5;
								frameCounter = 0;
							}
							if (++frameCounter > 4)
							{
								frame--;
								frameCounter = 0;
							}
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				if (type == 859)
				{
					if (velocity.Y != 0f)
					{
						frame = 4;
					}
					else if (flag15)
					{
						spriteDirection = -1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = 1;
						}
						if (frame == 6)
						{
							if (++frameCounter > 5)
							{
								frame = 0;
								frameCounter = 0;
							}
						}
						else if (frame > 3)
						{
							frame = 6;
							frameCounter = 0;
						}
						else
						{
							if (++frameCounter > 5)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame < 0 || frame > 3)
							{
								frame = 0;
							}
						}
					}
					else
					{
						float num174 = velocity.Length();
						int num175 = 8;
						if (num174 < 3f)
						{
							num175 = 4;
						}
						if (num174 < 1f)
						{
							num175 = 2;
						}
						frameCounter += (int)num174;
						if (frameCounter > num175)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 5 || frame > 17)
						{
							frame = 5;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 858)
				{
					if (velocity.Y != 0f)
					{
						frame = 1;
					}
					else if (flag15)
					{
						spriteDirection = -1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = 1;
						}
						frame = 0;
					}
					else
					{
						float num176 = velocity.Length();
						frameCounter += (int)num176;
						if (frameCounter > 3)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 2 || frame > 9)
						{
							frame = 2;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 900)
				{
					spriteDirection = direction;
					if (velocity.Y != 0f)
					{
						frame = 1;
						frameCounter = 0;
					}
					else if (flag15)
					{
						spriteDirection = 1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = -1;
						}
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						frameCounter += 1 + (int)Math.Abs(velocity.X * 0.3f);
						if (frame < 2)
						{
							frame = 2;
							frameCounter = 0;
						}
						if (frameCounter > 4)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 9)
						{
							frame = 2;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 899)
				{
					spriteDirection = direction;
					if (velocity.Y != 0f)
					{
						frame = 1;
						frameCounter = 0;
					}
					else if (flag15)
					{
						spriteDirection = 1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = -1;
						}
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						frameCounter += 1 + (int)Math.Abs(velocity.X * 0.3f);
						if (frame < 2)
						{
							frame = 2;
							frameCounter = 0;
						}
						if (frameCounter > 4)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 9)
						{
							frame = 2;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 897)
				{
					spriteDirection = direction;
					if (velocity.Y != 0f)
					{
						frame = 1;
						frameCounter = 0;
					}
					else if (flag15)
					{
						spriteDirection = 1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = -1;
						}
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						frameCounter += 1 + (int)Math.Abs(velocity.X * 0.3f);
						if (frame < 2)
						{
							frame = 2;
							frameCounter = 0;
						}
						if (frameCounter > 4)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 7)
						{
							frame = 2;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 891)
				{
					spriteDirection = direction;
					if (velocity.Y != 0f)
					{
						frame = 1;
						frameCounter = 0;
					}
					else if (flag15)
					{
						spriteDirection = Main.player[owner].direction;
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						frameCounter += 1 + (int)Math.Abs(velocity.X * 0.3f);
						if (frame < 2)
						{
							frame = 2;
							frameCounter = 0;
						}
						if (frameCounter > 4)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 8)
						{
							frame = 2;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 890)
				{
					spriteDirection = direction;
					if (velocity.Y != 0f)
					{
						frame = 1;
						frameCounter = 0;
					}
					else if (flag15)
					{
						spriteDirection = 1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = -1;
						}
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						frameCounter += 1 + (int)Math.Abs(velocity.X * 0.3f);
						if (frame < 2)
						{
							frame = 2;
							frameCounter = 0;
						}
						if (frameCounter > 4)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 7)
						{
							frame = 2;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 884)
				{
					spriteDirection = direction;
					if (velocity.Y != 0f)
					{
						if (velocity.Y < 0f)
						{
							frame = 9;
						}
						else
						{
							frame = 1;
						}
						frameCounter = 0;
					}
					else if (flag15)
					{
						spriteDirection = 1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = -1;
						}
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						frameCounter += 1 + (int)Math.Abs(velocity.X * 0.5f);
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 8)
						{
							frame = 2;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 881 || type == 934)
				{
					spriteDirection = 1;
					if (Main.player[owner].Center.X < base.Center.X)
					{
						spriteDirection = -1;
					}
					if (velocity.Y > 0f)
					{
						frameCounter++;
						if (frameCounter > 2)
						{
							frame++;
							if (frame >= 2)
							{
								frame = 2;
							}
							frameCounter = 0;
						}
					}
					else if (velocity.Y < 0f)
					{
						frameCounter++;
						if (frameCounter > 2)
						{
							frame++;
							if (frame >= 5)
							{
								frame = 0;
							}
							frameCounter = 0;
						}
					}
					else if (frame == 0)
					{
						frame = 0;
					}
					else if (++frameCounter > 3)
					{
						frame++;
						if (frame >= 6)
						{
							frame = 0;
						}
						frameCounter = 0;
					}
					if (wet && Main.player[owner].position.Y + (float)Main.player[owner].height < position.Y + (float)height && localAI[0] == 0f)
					{
						if (velocity.Y > -4f)
						{
							velocity.Y -= 0.2f;
						}
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.95f;
						}
					}
					else
					{
						velocity.Y += 0.4f;
					}
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 875)
				{
					if (velocity.Y != 0f)
					{
						if (velocity.Y < 0f)
						{
							frame = 3;
						}
						else
						{
							frame = 6;
						}
						frameCounter = 0;
					}
					else if (flag15)
					{
						spriteDirection = -1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = 1;
						}
						frame = 0;
						frameCounter = 0;
					}
					else
					{
						frameCounter += 1 + (int)Math.Abs(velocity.X * 0.75f);
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 6)
						{
							frame = 0;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 854)
				{
					if (velocity.Y != 0f)
					{
						frame = 7;
					}
					else if (flag15)
					{
						spriteDirection = -1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = 1;
						}
						if (++frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 0 || frame > 3)
						{
							frame = 0;
						}
					}
					else
					{
						int num177 = 3;
						float num178 = velocity.Length();
						if (num178 > 4f)
						{
							num177 = 1;
						}
						else if (num178 > 2f)
						{
							num177 = 2;
						}
						if (++frameCounter > num177)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 4 || frame > 12)
						{
							frame = 4;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 825)
				{
					if (velocity.Y != 0f)
					{
						localAI[0] = 0f;
						frame = 12;
					}
					else if (flag15)
					{
						spriteDirection = -1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = 1;
						}
						if (frame >= 1 && frame <= 2)
						{
							localAI[0] = 0f;
							if (++frameCounter > 5)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 2)
							{
								frame = 0;
							}
						}
						else if (frame >= 3 && frame <= 11)
						{
							localAI[0] = 0f;
							if (++frameCounter > 5)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 11)
							{
								frame = 0;
							}
						}
						else
						{
							if (frame == 13)
							{
								if (++frameCounter > 8)
								{
									frame++;
									frameCounter = 0;
								}
								if (frame == 14)
								{
									frame = 0;
								}
							}
							if (frame != 0)
							{
								frame = 13;
							}
							else
							{
								frame = 0;
							}
							if (frame == 0)
							{
								localAI[0] += 1f;
								if (localAI[0] > 300f && Main.rand.Next(50) == 0)
								{
									switch (Main.rand.Next(2))
									{
									case 0:
										frame = 1;
										break;
									case 1:
										frame = 3;
										break;
									}
								}
							}
						}
					}
					else
					{
						localAI[0] = 0f;
						int num179 = 3;
						float num180 = velocity.Length();
						if (num180 > 4f)
						{
							num179 = 2;
						}
						else if (num180 > 2f)
						{
							num179 = 1;
						}
						if (++frameCounter > num179)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame < 13)
						{
							frame = 13;
						}
						if (frame > 19)
						{
							frame = 14;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 821)
				{
					if (velocity.Y != 0f)
					{
						localAI[0] = 0f;
						frame = 12;
					}
					else if (flag15)
					{
						spriteDirection = -1;
						if (Main.player[owner].Center.X < base.Center.X)
						{
							spriteDirection = 1;
						}
						localAI[0] += 1f;
						if (localAI[0] > 400f)
						{
							int num181 = 7;
							if (frame == 9)
							{
								num181 = 25;
							}
							if (++frameCounter > num181)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame < 5)
							{
								frame = 5;
							}
							if (frame > 11)
							{
								localAI[0] = 0f;
								frame = 0;
							}
						}
						else
						{
							if (++frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame < 0 || frame > 4)
							{
								frame = 0;
							}
						}
					}
					else
					{
						localAI[0] = 0f;
						int num182 = 4;
						float num183 = velocity.Length();
						if (num183 > 3f)
						{
							num182 = 3;
						}
						if (num183 > 5f)
						{
							num182 = 2;
						}
						if (++frameCounter > num182)
						{
							frame++;
							if (num182 == 0)
							{
								frame++;
							}
							frameCounter = 0;
						}
						if (frame < 13 || frame > 18)
						{
							frame = 13;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (flag6)
				{
					if (ai[1] > 0f)
					{
						if (localAI[1] == 0f)
						{
							localAI[1] = 1f;
							frame = 1;
						}
						if (frame != 0)
						{
							frameCounter++;
							if (frameCounter > 4)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 4)
							{
								frame = 0;
							}
						}
					}
					else if (velocity.Y == 0f)
					{
						localAI[1] = 0f;
						if (flag15)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame < 5)
							{
								frame = 5;
							}
							if (frame >= 11)
							{
								frame = 5;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (velocity.Y < 0f)
					{
						frameCounter = 0;
						frame = 4;
					}
					else if (velocity.Y > 0f)
					{
						frameCounter = 0;
						frame = 4;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
					_ = velocity;
				}
				else if (type == 268)
				{
					if (velocity.Y == 0f)
					{
						if (frame > 5)
						{
							frameCounter = 0;
						}
						if (flag15)
						{
							int num184 = 3;
							frameCounter++;
							if (frameCounter < num184)
							{
								frame = 0;
							}
							else if (frameCounter < num184 * 2)
							{
								frame = 1;
							}
							else if (frameCounter < num184 * 3)
							{
								frame = 2;
							}
							else if (frameCounter < num184 * 4)
							{
								frame = 3;
							}
							else
							{
								frameCounter = num184 * 4;
							}
						}
						else
						{
							velocity.X *= 0.8f;
							frameCounter++;
							int num185 = 3;
							if (frameCounter < num185)
							{
								frame = 0;
							}
							else if (frameCounter < num185 * 2)
							{
								frame = 1;
							}
							else if (frameCounter < num185 * 3)
							{
								frame = 2;
							}
							else if (frameCounter < num185 * 4)
							{
								frame = 3;
							}
							else if (flag2 || flag3)
							{
								velocity.X *= 2f;
								frame = 4;
								velocity.Y = -6.1f;
								frameCounter = 0;
								for (int num186 = 0; num186 < 4; num186++)
								{
									int num187 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), width, 4, 5);
									Main.dust[num187].velocity += velocity;
									Main.dust[num187].velocity *= 0.4f;
								}
							}
							else
							{
								frameCounter = num185 * 4;
							}
						}
					}
					else if (velocity.Y < 0f)
					{
						frameCounter = 0;
						frame = 5;
					}
					else
					{
						frame = 4;
						frameCounter = 3;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 269)
				{
					if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
					{
						if (flag15)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							int num188 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), width, 6, 76);
							Main.dust[num188].noGravity = true;
							Main.dust[num188].velocity *= 0.3f;
							Main.dust[num188].noLight = true;
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 3)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 2;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 313)
				{
					int i3 = (int)(base.Center.X / 16f);
					int num189 = (int)(base.Center.Y / 16f);
					int num190 = 0;
					Tile tileSafely2 = Framing.GetTileSafely(i3, num189);
					Tile tileSafely3 = Framing.GetTileSafely(i3, num189 - 1);
					Tile tileSafely4 = Framing.GetTileSafely(i3, num189 + 1);
					if (tileSafely2.wall > 0)
					{
						num190++;
					}
					if (tileSafely3.wall > 0)
					{
						num190++;
					}
					if (tileSafely4.wall > 0)
					{
						num190++;
					}
					if (num190 > 1)
					{
						position.Y += height;
						height = 34;
						position.Y -= height;
						position.X += width / 2;
						width = 34;
						position.X -= width / 2;
						Vector2 vector14 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
						float num191 = Main.player[owner].Center.X - vector14.X;
						float num192 = Main.player[owner].Center.Y - vector14.Y;
						float num193 = (float)Math.Sqrt(num191 * num191 + num192 * num192);
						float num194 = 4f / num193;
						num191 *= num194;
						num192 *= num194;
						if (num193 < 120f)
						{
							velocity.X *= 0.9f;
							velocity.Y *= 0.9f;
							if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < 0.1)
							{
								velocity *= 0f;
							}
						}
						else
						{
							velocity.X = (velocity.X * 9f + num191) / 10f;
							velocity.Y = (velocity.Y * 9f + num192) / 10f;
						}
						if (num193 >= 120f)
						{
							spriteDirection = direction;
							rotation = (float)Math.Atan2(velocity.Y * (float)(-direction), velocity.X * (float)(-direction));
						}
						frameCounter += (int)(Math.Abs(velocity.X) + Math.Abs(velocity.Y));
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 10)
						{
							frame = 5;
						}
						if (frame < 5)
						{
							frame = 10;
						}
					}
					else
					{
						rotation = 0f;
						if (direction == -1)
						{
							spriteDirection = 1;
						}
						if (direction == 1)
						{
							spriteDirection = -1;
						}
						position.Y += height;
						height = 30;
						position.Y -= height;
						position.X += width / 2;
						width = 30;
						position.X -= width / 2;
						if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
						{
							if (flag15)
							{
								frame = 0;
								frameCounter = 0;
							}
							else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
							{
								frameCounter += (int)Math.Abs(velocity.X);
								frameCounter++;
								if (frameCounter > 6)
								{
									frame++;
									frameCounter = 0;
								}
								if (frame > 3)
								{
									frame = 0;
								}
							}
							else
							{
								frame = 0;
								frameCounter = 0;
							}
						}
						else
						{
							frameCounter = 0;
							frame = 4;
						}
						velocity.Y += 0.4f;
						if (velocity.Y > 10f)
						{
							velocity.Y = 10f;
						}
					}
				}
				else if (type >= 390 && type <= 392)
				{
					int i4 = (int)(base.Center.X / 16f);
					int num195 = (int)(base.Center.Y / 16f);
					int num196 = 0;
					Tile tileSafely5 = Framing.GetTileSafely(i4, num195);
					Tile tileSafely6 = Framing.GetTileSafely(i4, num195 - 1);
					Tile tileSafely7 = Framing.GetTileSafely(i4, num195 + 1);
					if (tileSafely5.wall > 0)
					{
						num196++;
					}
					if (tileSafely6.wall > 0)
					{
						num196++;
					}
					if (tileSafely7.wall > 0)
					{
						num196++;
					}
					if (num196 > 1)
					{
						position.Y += height;
						height = 34;
						position.Y -= height;
						position.X += width / 2;
						width = 34;
						position.X -= width / 2;
						float num197 = 9f;
						float num198 = 40 * (minionPos + 1);
						Vector2 v11 = Main.player[owner].Center - base.Center;
						if (flag12)
						{
							v11 = vector12;
							num198 = 10f;
						}
						else if (!Collision.CanHitLine(base.Center, 1, 1, Main.player[owner].Center, 1, 1))
						{
							ai[0] = 1f;
						}
						if (v11.Length() < num198)
						{
							velocity *= 0.9f;
							if ((double)(Math.Abs(velocity.X) + Math.Abs(velocity.Y)) < 0.1)
							{
								velocity *= 0f;
							}
						}
						else if (v11.Length() < 800f || !flag12)
						{
							velocity = (velocity * 9f + v11.SafeNormalize(Vector2.Zero) * num197) / 10f;
						}
						if (v11.Length() >= num198)
						{
							spriteDirection = direction;
							rotation = velocity.ToRotation() + (float)Math.PI / 2f;
						}
						else
						{
							rotation = v11.ToRotation() + (float)Math.PI / 2f;
						}
						frameCounter += (int)(Math.Abs(velocity.X) + Math.Abs(velocity.Y));
						if (frameCounter > 5)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 7)
						{
							frame = 4;
						}
						if (frame < 4)
						{
							frame = 7;
						}
					}
					else
					{
						if (!flag13)
						{
							rotation = 0f;
						}
						if (direction == -1)
						{
							spriteDirection = 1;
						}
						if (direction == 1)
						{
							spriteDirection = -1;
						}
						position.Y += height;
						height = 30;
						position.Y -= height;
						position.X += width / 2;
						width = 30;
						position.X -= width / 2;
						if (!flag12 && !Collision.CanHitLine(base.Center, 1, 1, Main.player[owner].Center, 1, 1))
						{
							ai[0] = 1f;
						}
						if (!flag13 && frame >= 4 && frame <= 7)
						{
							Vector2 vector15 = Main.player[owner].Center - base.Center;
							if (flag12)
							{
								vector15 = vector12;
							}
							float num199 = 0f - vector15.Y;
							if (!(vector15.Y > 0f))
							{
								if (num199 < 120f)
								{
									velocity.Y = -10f;
								}
								else if (num199 < 210f)
								{
									velocity.Y = -13f;
								}
								else if (num199 < 270f)
								{
									velocity.Y = -15f;
								}
								else if (num199 < 310f)
								{
									velocity.Y = -17f;
								}
								else if (num199 < 380f)
								{
									velocity.Y = -18f;
								}
							}
						}
						if (flag13)
						{
							frameCounter++;
							if (frameCounter > 3)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 8)
							{
								frame = 4;
							}
							if (frame <= 3)
							{
								frame = 7;
							}
						}
						else if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
						{
							if (flag15)
							{
								frame = 0;
								frameCounter = 0;
							}
							else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
							{
								frameCounter += (int)Math.Abs(velocity.X);
								frameCounter++;
								if (frameCounter > 5)
								{
									frame++;
									frameCounter = 0;
								}
								if (frame > 2)
								{
									frame = 0;
								}
							}
							else
							{
								frame = 0;
								frameCounter = 0;
							}
						}
						else
						{
							frameCounter = 0;
							frame = 3;
						}
						velocity.Y += 0.4f;
						if (velocity.Y > 10f)
						{
							velocity.Y = 10f;
						}
					}
				}
				else if (type == 314)
				{
					if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
					{
						if (flag15)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 6)
							{
								frame = 1;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 7;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 319)
				{
					if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
					{
						if (flag15)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 8)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 5)
							{
								frame = 2;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 1;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 236)
				{
					if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
					{
						if (flag15)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							if (frame < 2)
							{
								frame = 2;
							}
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 8)
							{
								frame = 2;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 1;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 499)
				{
					if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
					{
						if (flag15)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							if (frame < 2)
							{
								frame = 2;
							}
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 8)
							{
								frame = 2;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 1;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 765)
				{
					if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
					{
						if (flag15)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							if (frame < 1)
							{
								frame = 1;
							}
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 6)
							{
								frame = 1;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 266)
				{
					if (velocity.Y >= 0f && (double)velocity.Y <= 0.8)
					{
						if (flag15)
						{
							frameCounter++;
						}
						else
						{
							frameCounter += 3;
						}
					}
					else
					{
						frameCounter += 5;
					}
					if (frameCounter >= 20)
					{
						frameCounter -= 20;
						frame++;
					}
					if (frame > 1)
					{
						frame = 0;
					}
					if (wet && Main.player[owner].position.Y + (float)Main.player[owner].height < position.Y + (float)height && localAI[0] == 0f)
					{
						if (velocity.Y > -4f)
						{
							velocity.Y -= 0.2f;
						}
						if (velocity.Y > 0f)
						{
							velocity.Y *= 0.95f;
						}
					}
					else
					{
						velocity.Y += 0.4f;
					}
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 334)
				{
					if (velocity.Y == 0f)
					{
						if (flag15)
						{
							if (frame > 0)
							{
								frameCounter += 2;
								if (frameCounter > 6)
								{
									frame++;
									frameCounter = 0;
								}
								if (frame >= 7)
								{
									frame = 0;
								}
							}
							else
							{
								frame = 0;
								frameCounter = 0;
							}
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs((double)velocity.X * 0.75);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 7 || frame < 1)
							{
								frame = 1;
							}
						}
						else if (frame > 0)
						{
							frameCounter += 2;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 7)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (velocity.Y < 0f)
					{
						frameCounter = 0;
						frame = 2;
					}
					else if (velocity.Y > 0f)
					{
						frameCounter = 0;
						frame = 4;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 353)
				{
					if (velocity.Y == 0f)
					{
						if (flag15)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 9)
							{
								frame = 2;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (velocity.Y < 0f)
					{
						frameCounter = 0;
						frame = 1;
					}
					else if (velocity.Y > 0f)
					{
						frameCounter = 0;
						frame = 1;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 111)
				{
					if (velocity.Y == 0f)
					{
						if (flag15)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 7)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (velocity.Y < 0f)
					{
						frameCounter = 0;
						frame = 4;
					}
					else if (velocity.Y > 0f)
					{
						frameCounter = 0;
						frame = 6;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 112)
				{
					if (velocity.Y == 0f)
					{
						if (flag15)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 3)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (velocity.Y < 0f)
					{
						frameCounter = 0;
						frame = 2;
					}
					else if (velocity.Y > 0f)
					{
						frameCounter = 0;
						frame = 2;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 127)
				{
					if (velocity.Y == 0f)
					{
						if (flag15)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 5)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frame = 0;
						frameCounter = 0;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 200)
				{
					if (velocity.Y == 0f)
					{
						if (flag15)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 5)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						rotation = velocity.X * 0.1f;
						frameCounter++;
						if (velocity.Y < 0f)
						{
							frameCounter += 2;
						}
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 9)
						{
							frame = 6;
						}
						if (frame < 6)
						{
							frame = 6;
						}
					}
					velocity.Y += 0.1f;
					if (velocity.Y > 4f)
					{
						velocity.Y = 4f;
					}
				}
				else if (type == 208)
				{
					if (velocity.Y == 0f && flag15)
					{
						if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) < position.X + (float)(width / 2))
						{
							direction = -1;
						}
						else if (Main.player[owner].position.X + (float)(Main.player[owner].width / 2) > position.X + (float)(width / 2))
						{
							direction = 1;
						}
						rotation = 0f;
						frame = 0;
					}
					else
					{
						rotation = velocity.X * 0.075f;
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 4)
						{
							frame = 1;
						}
						if (frame < 1)
						{
							frame = 1;
						}
					}
					velocity.Y += 0.1f;
					if (velocity.Y > 4f)
					{
						velocity.Y = 4f;
					}
				}
				else if (type == 209)
				{
					if (alpha > 0)
					{
						alpha -= 5;
						if (alpha < 0)
						{
							alpha = 0;
						}
					}
					if (velocity.Y == 0f)
					{
						if (flag15)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 11)
							{
								frame = 2;
							}
							if (frame < 2)
							{
								frame = 2;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frame = 1;
						frameCounter = 0;
						rotation = 0f;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 324)
				{
					if (velocity.Y == 0f)
					{
						if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 5)
							{
								frame = 2;
							}
							if (frame < 2)
							{
								frame = 2;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						frameCounter = 0;
						frame = 1;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 14f)
					{
						velocity.Y = 14f;
					}
				}
				else if (type == 210)
				{
					if (velocity.Y == 0f)
					{
						if ((double)velocity.X < -0.1 || (double)velocity.X > 0.1)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame > 6)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else
					{
						rotation = velocity.X * 0.05f;
						frameCounter++;
						if (frameCounter > 6)
						{
							frame++;
							frameCounter = 0;
						}
						if (frame > 11)
						{
							frame = 7;
						}
						if (frame < 7)
						{
							frame = 7;
						}
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
				else if (type == 398)
				{
					if (velocity.Y == 0f)
					{
						if (flag15)
						{
							frame = 0;
							frameCounter = 0;
						}
						else if ((double)velocity.X < -0.8 || (double)velocity.X > 0.8)
						{
							frameCounter += (int)Math.Abs(velocity.X);
							frameCounter++;
							if (frameCounter > 6)
							{
								frame++;
								frameCounter = 0;
							}
							if (frame >= 5)
							{
								frame = 0;
							}
						}
						else
						{
							frame = 0;
							frameCounter = 0;
						}
					}
					else if (velocity.Y != 0f)
					{
						frameCounter = 0;
						frame = 5;
					}
					velocity.Y += 0.4f;
					if (velocity.Y > 10f)
					{
						velocity.Y = 10f;
					}
				}
			}
			if (type == 891)
			{
				_ = Main.player[owner];
				DelegateMethods.v3_1 = new Vector3(1f, 0.61f, 0.16f) * 1.5f;
				Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 20f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
			}
		}

		private bool Chester_IsAnyPlayerTrackingThisProjectile()
		{
			for (int i = 0; i < 255; i++)
			{
				Player player = Main.player[i];
				if (player.active && player.piggyBankProjTracker.IsTracking(this))
				{
					return true;
				}
			}
			return false;
		}

		private void AI_062()
		{
			float num = 0f;
			float num2 = 0f;
			float num3 = 20f;
			float num4 = 40f;
			float num5 = 0.69f;
			if (type == 963)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].abigailMinion = false;
				}
				if (Main.player[owner].abigailMinion)
				{
					timeLeft = 2;
				}
				originalDamage = Main.player[owner].highestAbigailCounterOriginalDamage;
				num2 = Main.player[owner].ownedProjectileCounts[970] - 1;
				num3 = Math.Max(4f, 18f - num2 * 1.75f);
				num = 1.4f;
				num4 = Math.Max(5f, num4 - num2 * 4f);
				num5 = Math.Min(1f, num5 + num2 * 0.03f);
			}
			if (type == 373)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].hornetMinion = false;
				}
				if (Main.player[owner].hornetMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 375)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].impMinion = false;
				}
				if (Main.player[owner].impMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 407)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].sharknadoMinion = false;
				}
				if (Main.player[owner].sharknadoMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 423)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].UFOMinion = false;
				}
				if (Main.player[owner].UFOMinion)
				{
					timeLeft = 2;
				}
			}
			if (type == 613)
			{
				if (Main.player[owner].dead)
				{
					Main.player[owner].stardustMinion = false;
				}
				if (Main.player[owner].stardustMinion)
				{
					timeLeft = 2;
				}
				Lighting.AddLight(base.Center, 0.2f, 0.6f, 0.7f);
				if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
			}
			if (type == 423)
			{
				if (ai[0] == 2f)
				{
					ai[1] -= 1f;
					tileCollide = false;
					if (ai[1] > 3f)
					{
						int num6 = Dust.NewDust(base.Center, 0, 0, 220 + Main.rand.Next(2), velocity.X, velocity.Y, 100);
						Main.dust[num6].scale = 0.5f + (float)Main.rand.NextDouble() * 0.3f;
						Main.dust[num6].velocity /= 2.5f;
						Main.dust[num6].noGravity = true;
						Main.dust[num6].noLight = true;
						Main.dust[num6].frame.Y = 80;
					}
					if (ai[1] != 0f)
					{
						return;
					}
					ai[1] = 30f;
					ai[0] = 0f;
					velocity /= 5f;
					velocity.Y = 0f;
					extraUpdates = 0;
					numUpdates = 0;
					netUpdate = true;
					extraUpdates = 0;
					numUpdates = 0;
				}
				if (extraUpdates > 1)
				{
					extraUpdates = 0;
				}
				if (numUpdates > 1)
				{
					numUpdates = 0;
				}
			}
			if (type == 613)
			{
				if (ai[0] == 2f)
				{
					ai[1] -= 1f;
					tileCollide = false;
					if (ai[1] > 3f)
					{
						if (numUpdates < 20)
						{
							for (int i = 0; i < 3; i++)
							{
								Dust obj = Main.dust[Dust.NewDust(position, width, height, 229)];
								obj.noGravity = true;
								obj.position = base.Center;
								obj.velocity *= 3f;
								obj.velocity += velocity * 3f;
								obj.fadeIn = 1f;
							}
						}
						float num7 = 2f - (float)numUpdates / 30f;
						if (scale > 0f)
						{
							float num8 = 2f;
							for (int j = 0; (float)j < num8; j++)
							{
								Dust obj2 = Main.dust[Dust.NewDust(position, width, height, 229)];
								obj2.noGravity = true;
								obj2.position = base.Center + Vector2.UnitY.RotatedBy((float)numUpdates * ((float)Math.PI / 30f) + (float)whoAmI * ((float)Math.PI / 4f) + (float)Math.PI / 2f) * (height / 2) - velocity * ((float)j / num8);
								obj2.velocity = velocity / 3f;
								obj2.fadeIn = num7 / 2f;
								obj2.scale = num7;
							}
						}
					}
					if (ai[1] != 0f)
					{
						return;
					}
					ai[1] = 30f;
					ai[0] = 0f;
					velocity /= 5f;
					velocity.Y = 0f;
					extraUpdates = 0;
					numUpdates = 0;
					netUpdate = true;
					float num9 = 15f;
					for (int k = 0; (float)k < num9; k++)
					{
						Dust dust = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust.noGravity = true;
						dust.position = base.Center - velocity * 5f;
						dust.velocity *= 3f;
						dust.velocity += velocity * 3f;
						dust.fadeIn = 1f;
						if (Main.rand.Next(3) != 0)
						{
							dust.fadeIn = 2f;
							dust.scale = 2f;
							dust.velocity /= 8f;
						}
					}
					for (int l = 0; (float)l < num9; l++)
					{
						Dust dust2 = Main.dust[Dust.NewDust(position, width, height, 229)];
						dust2.noGravity = true;
						dust2.position = base.Center;
						dust2.velocity *= 3f;
						dust2.velocity += velocity * 3f;
						dust2.fadeIn = 1f;
						if (Main.rand.Next(3) != 0)
						{
							dust2.fadeIn = 2f;
							dust2.scale = 2f;
							dust2.velocity /= 8f;
						}
					}
					extraUpdates = 0;
					numUpdates = 0;
				}
				if (extraUpdates > 1)
				{
					extraUpdates = 0;
				}
				if (numUpdates > 1)
				{
					numUpdates = 0;
				}
			}
			if (type == 423 && localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (type == 613 && localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			float num10 = 0.05f;
			float num11 = width;
			if (type == 407)
			{
				num10 = 0.1f;
				num11 *= 2f;
			}
			for (int m = 0; m < 1000; m++)
			{
				if (m != whoAmI && Main.projectile[m].active && Main.projectile[m].owner == owner && Main.projectile[m].type == type && Math.Abs(position.X - Main.projectile[m].position.X) + Math.Abs(position.Y - Main.projectile[m].position.Y) < num11)
				{
					if (position.X < Main.projectile[m].position.X)
					{
						velocity.X -= num10;
					}
					else
					{
						velocity.X += num10;
					}
					if (position.Y < Main.projectile[m].position.Y)
					{
						velocity.Y -= num10;
					}
					else
					{
						velocity.Y += num10;
					}
				}
			}
			Vector2 vector = position;
			float num12 = 400f;
			if (type == 423)
			{
				num12 = 300f;
			}
			if (type == 613)
			{
				num12 = 300f;
			}
			num12 = 2000f;
			if (type == 963)
			{
				num12 = 700f;
			}
			bool flag = false;
			int num13 = -1;
			tileCollide = true;
			if (type == 963)
			{
				tileCollide = false;
			}
			if (type == 407)
			{
				tileCollide = false;
				if (Collision.SolidCollision(position, width, height))
				{
					alpha += 20;
					if (alpha > 150)
					{
						alpha = 150;
					}
				}
				else
				{
					alpha -= 50;
					if (alpha < 60)
					{
						alpha = 60;
					}
				}
			}
			if (type == 407 || type == 613 || type == 423)
			{
				Vector2 center = Main.player[owner].Center;
				Vector2 vector2 = new Vector2(0.5f);
				if (type == 423)
				{
					vector2.Y = 0f;
				}
				NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
				{
					Vector2 vector3 = ownerMinionAttackTargetNPC.position + ownerMinionAttackTargetNPC.Size * vector2;
					float num14 = num12 * 3f;
					float num15 = Vector2.Distance(vector3, center);
					if (num15 < num14 && !flag && Collision.CanHitLine(position, width, height, ownerMinionAttackTargetNPC.position, ownerMinionAttackTargetNPC.width, ownerMinionAttackTargetNPC.height))
					{
						num12 = num15;
						vector = vector3;
						flag = true;
						num13 = ownerMinionAttackTargetNPC.whoAmI;
					}
				}
				if (!flag)
				{
					for (int n = 0; n < 200; n++)
					{
						NPC nPC = Main.npc[n];
						if (nPC.CanBeChasedBy(this))
						{
							Vector2 vector4 = nPC.position + nPC.Size * vector2;
							float num16 = Vector2.Distance(vector4, center);
							if (!(num16 >= num12) && Collision.CanHitLine(position, width, height, nPC.position, nPC.width, nPC.height))
							{
								num12 = num16;
								vector = vector4;
								flag = true;
								num13 = n;
							}
						}
					}
				}
			}
			else
			{
				NPC ownerMinionAttackTargetNPC2 = OwnerMinionAttackTargetNPC;
				if (ownerMinionAttackTargetNPC2 != null && ownerMinionAttackTargetNPC2.CanBeChasedBy(this))
				{
					float num17 = Vector2.Distance(ownerMinionAttackTargetNPC2.Center, base.Center);
					float num18 = num12 * 3f;
					if (num17 < num18 && !flag)
					{
						bool flag2 = false;
						if ((type != 963) ? Collision.CanHitLine(position, width, height, ownerMinionAttackTargetNPC2.position, ownerMinionAttackTargetNPC2.width, ownerMinionAttackTargetNPC2.height) : Collision.CanHit(base.Center, 1, 1, ownerMinionAttackTargetNPC2.Center, 1, 1))
						{
							num12 = num17;
							vector = ownerMinionAttackTargetNPC2.Center;
							flag = true;
							num13 = ownerMinionAttackTargetNPC2.whoAmI;
						}
					}
				}
				if (!flag)
				{
					for (int num19 = 0; num19 < 200; num19++)
					{
						NPC nPC2 = Main.npc[num19];
						if (!nPC2.CanBeChasedBy(this))
						{
							continue;
						}
						float num20 = Vector2.Distance(nPC2.Center, base.Center);
						if (!(num20 >= num12))
						{
							bool flag3 = false;
							if ((type != 963) ? Collision.CanHitLine(position, width, height, nPC2.position, nPC2.width, nPC2.height) : Collision.CanHit(base.Center, 1, 1, nPC2.Center, 1, 1))
							{
								num12 = num20;
								vector = nPC2.Center;
								flag = true;
								num13 = num19;
							}
						}
					}
				}
			}
			int num21 = 500;
			if (type == 963)
			{
				num21 = 800;
			}
			if (flag)
			{
				num21 = 1000;
			}
			if (flag && type == 423)
			{
				num21 = 1200;
			}
			if (flag && type == 613)
			{
				num21 = 1350;
			}
			Player player = Main.player[owner];
			if (Vector2.Distance(player.Center, base.Center) > (float)num21)
			{
				ai[0] = 1f;
				netUpdate = true;
			}
			if (ai[0] == 1f)
			{
				tileCollide = false;
			}
			bool flag4 = false;
			if (type == 963)
			{
				flag4 = true;
			}
			if (flag4)
			{
				if (ai[0] <= 1f && localAI[1] <= 0f)
				{
					localAI[1] = -1f;
				}
				else
				{
					localAI[1] = Utils.Clamp(localAI[1] + 0.05f, 0f, 1f);
					if (localAI[1] == 1f)
					{
						localAI[1] = -1f;
					}
				}
			}
			if (type == 963 && velocity.Length() > 0.1f && Main.rand.Next(1500) == 0)
			{
				SoundEngine.PlaySound(SoundID.AbigailCry, base.Center);
			}
			if (ai[0] >= 2f)
			{
				if (ai[0] == 2f && type == 963)
				{
					SoundEngine.PlaySound(SoundID.AbigailAttack, base.Center);
				}
				ai[0] += 1f;
				if (flag4)
				{
					localAI[1] = ai[0] / num4;
				}
				if (!flag)
				{
					ai[0] += 1f;
				}
				if (ai[0] > num4)
				{
					ai[0] = 0f;
					netUpdate = true;
					if (flag && type == 963 && (vector - base.Center).Length() < 50f)
					{
						ai[0] = 2f;
					}
				}
				velocity *= num5;
			}
			else if (flag && ai[0] == 0f)
			{
				Vector2 v = vector - base.Center;
				float num22 = v.Length();
				v = v.SafeNormalize(Vector2.Zero);
				if (type == 423)
				{
					v = vector - Vector2.UnitY * 80f;
					int num23 = (int)v.Y / 16;
					if (num23 < 0)
					{
						num23 = 0;
					}
					Tile tile = Main.tile[(int)v.X / 16, num23];
					if (tile != null && tile.active() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
					{
						v += Vector2.UnitY * 16f;
						tile = Main.tile[(int)v.X / 16, (int)v.Y / 16];
						if (tile != null && tile.active() && Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type])
						{
							v += Vector2.UnitY * 16f;
						}
					}
					v -= base.Center;
					num22 = v.Length();
					v = v.SafeNormalize(Vector2.Zero);
					if (num22 > 300f && num22 <= 800f && localAI[0] == 0f)
					{
						ai[0] = 2f;
						ai[1] = (int)(num22 / 10f);
						extraUpdates = (int)ai[1];
						velocity = v * 10f;
						localAI[0] = 60f;
						return;
					}
				}
				if (type == 613)
				{
					v = vector;
					Vector2 vector5 = base.Center - v;
					if (vector5 == Vector2.Zero)
					{
						vector5 = -Vector2.UnitY;
					}
					vector5 = vector5.SafeNormalize(Vector2.Zero);
					v += vector5 * 60f;
					int num24 = (int)v.Y / 16;
					if (num24 < 0)
					{
						num24 = 0;
					}
					Tile tile2 = Main.tile[(int)v.X / 16, num24];
					if (tile2 != null && tile2.active() && Main.tileSolid[tile2.type] && !Main.tileSolidTop[tile2.type])
					{
						v += Vector2.UnitY * 16f;
						tile2 = Main.tile[(int)v.X / 16, (int)v.Y / 16];
						if (tile2 != null && tile2.active() && Main.tileSolid[tile2.type] && !Main.tileSolidTop[tile2.type])
						{
							v += Vector2.UnitY * 16f;
						}
					}
					v -= base.Center;
					num22 = v.Length();
					v = v.SafeNormalize(Vector2.Zero);
					if (num22 > 400f && num22 <= 800f && localAI[0] == 0f)
					{
						ai[0] = 2f;
						ai[1] = (int)(num22 / 10f);
						extraUpdates = (int)ai[1];
						velocity = v * 10f;
						localAI[0] = 60f;
						return;
					}
				}
				if (type == 407)
				{
					if (num22 > 400f)
					{
						float num25 = 3f;
						v *= num25;
						velocity = (velocity * 20f + v) / 21f;
					}
					else
					{
						velocity *= 0.96f;
					}
				}
				if (num22 > 200f)
				{
					float num26 = 6f + num2 * num;
					v *= num26;
					float num27 = num3 * 2f;
					velocity.X = (velocity.X * num27 + v.X) / (num27 + 1f);
					velocity.Y = (velocity.Y * num27 + v.Y) / (num27 + 1f);
				}
				else if (type == 963)
				{
					if (num22 < 50f)
					{
						velocity *= 0.5f;
						ai[0] = 2f;
						netUpdate = true;
					}
					else
					{
						float num28 = 4f + num2 * num;
						v *= num28;
						velocity = (velocity * num3 + v) / (num3 + 1f);
					}
				}
				else if (type == 423 || type == 613)
				{
					if (num22 > 70f && num22 < 130f)
					{
						float num29 = 7f;
						if (num22 < 100f)
						{
							num29 = -3f;
						}
						v *= num29;
						velocity = (velocity * 20f + v) / 21f;
						if (Math.Abs(v.X) > Math.Abs(v.Y))
						{
							velocity.X = (velocity.X * 10f + v.X) / 11f;
						}
					}
					else
					{
						velocity *= 0.97f;
					}
				}
				else if (type == 375)
				{
					if (num22 < 150f)
					{
						float num30 = 4f;
						v *= 0f - num30;
						velocity.X = (velocity.X * 40f + v.X) / 41f;
						velocity.Y = (velocity.Y * 40f + v.Y) / 41f;
					}
					else
					{
						velocity *= 0.97f;
					}
				}
				else if (velocity.Y > -1f)
				{
					velocity.Y -= 0.1f;
				}
			}
			else
			{
				if (type != 963 && !Collision.CanHitLine(base.Center, 1, 1, Main.player[owner].Center, 1, 1))
				{
					ai[0] = 1f;
				}
				float num31 = 6f;
				if (ai[0] == 1f)
				{
					num31 = 15f;
				}
				if (type == 407)
				{
					num31 = 9f;
				}
				if (type == 963)
				{
					num31 *= 0.8f;
				}
				Vector2 center2 = base.Center;
				Vector2 vector6 = player.Center - center2 + new Vector2(0f, -60f);
				if (type == 407)
				{
					vector6 += new Vector2(0f, 40f);
				}
				if (type == 963)
				{
					vector6 += new Vector2(-40 * Main.player[owner].direction, 40f);
				}
				if (type == 375)
				{
					ai[1] = 3600f;
					netUpdate = true;
					vector6 = player.Center - center2;
					int num32 = 1;
					for (int num33 = 0; num33 < whoAmI; num33++)
					{
						if (Main.projectile[num33].active && Main.projectile[num33].owner == owner && Main.projectile[num33].type == type)
						{
							num32++;
						}
					}
					vector6.X -= 10 * Main.player[owner].direction;
					vector6.X -= num32 * 40 * Main.player[owner].direction;
					vector6.Y -= 10f;
				}
				float num34 = vector6.Length();
				if (num34 > 200f && num31 < 9f)
				{
					num31 = 9f;
				}
				if (type == 375)
				{
					num31 = (int)((double)num31 * 0.75);
				}
				if (num34 < 100f && ai[0] == 1f && !Collision.SolidCollision(position, width, height))
				{
					ai[0] = 0f;
					netUpdate = true;
				}
				if (num34 > 2000f)
				{
					position.X = Main.player[owner].Center.X - (float)(width / 2);
					position.Y = Main.player[owner].Center.Y - (float)(width / 2);
				}
				if (type == 375 || type == 963)
				{
					if (num34 > 10f)
					{
						vector6 = vector6.SafeNormalize(Vector2.Zero);
						if (num34 < 50f)
						{
							num31 /= 2f;
						}
						vector6 *= num31;
						velocity = (velocity * 20f + vector6) / 21f;
					}
					else
					{
						direction = Main.player[owner].direction;
						velocity *= 0.9f;
					}
				}
				else if (type == 407)
				{
					if (Math.Abs(vector6.X) > 40f || Math.Abs(vector6.Y) > 10f)
					{
						vector6 = vector6.SafeNormalize(Vector2.Zero);
						vector6 *= num31;
						vector6 *= new Vector2(1.25f, 0.65f);
						velocity = (velocity * 20f + vector6) / 21f;
					}
					else
					{
						if (velocity.X == 0f && velocity.Y == 0f)
						{
							velocity.X = -0.15f;
							velocity.Y = -0.05f;
						}
						velocity *= 1.01f;
					}
				}
				else if (num34 > 70f)
				{
					vector6 = vector6.SafeNormalize(Vector2.Zero);
					vector6 *= num31;
					velocity = (velocity * 20f + vector6) / 21f;
				}
				else
				{
					if (velocity.X == 0f && velocity.Y == 0f)
					{
						velocity.X = -0.15f;
						velocity.Y = -0.05f;
					}
					velocity *= 1.01f;
				}
			}
			rotation = velocity.X * 0.05f;
			frameCounter++;
			if (type == 373)
			{
				if (frameCounter > 1)
				{
					frame++;
					frameCounter = 0;
				}
				if (frame > 2)
				{
					frame = 0;
				}
			}
			if (type == 963)
			{
				if (ai[0] >= 2f)
				{
					int num35 = 12;
					if (frame < 8)
					{
						frameCounter = 0;
					}
					frameCounter++;
					frame = frameCounter / num35;
					if (frame > 6)
					{
						frameCounter = 0;
						frame = 5;
					}
					switch (frame)
					{
					case 0:
					case 1:
					case 2:
						frame = 8 + frame;
						break;
					case 3:
					case 5:
					case 7:
						frame = 11;
						break;
					default:
						frame = 12;
						break;
					}
					if (Main.rand.Next(2) == 0)
					{
						float num36 = 1.1f + Main.rand.NextFloat() * 0.3f;
						float num37 = 1.4f + Main.rand.NextFloat() * 0.4f;
						Vector2 vector7 = Main.rand.NextVector2CircularEdge((float)width * num36, (0f - (float)height) * 0.25f * num36);
						float num38 = vector7.ToRotation() + (float)Math.PI / 2f;
						int num39 = Dust.NewDust(base.Bottom + vector7, 1, 1, 303, 0f, 0f, 50, Color.GhostWhite, num37);
						Main.dust[num39].velocity = vector7 * 0.0125f + new Vector2(1f, 0f).RotatedBy(num38, Vector2.Zero);
						Main.dust[num39].noGravity = true;
					}
				}
				else
				{
					if (frame > 7)
					{
						frame = 0;
						frameCounter = 0;
					}
					if (frameCounter > 6)
					{
						frameCounter = 0;
						frame++;
						if (frame > 7)
						{
							frame = 0;
						}
					}
				}
			}
			if (type == 375)
			{
				if (frameCounter >= 16)
				{
					frameCounter = 0;
				}
				frame = frameCounter / 4;
				if (ai[1] > 0f && ai[1] < 16f)
				{
					frame += 4;
				}
				if (Main.rand.Next(6) == 0)
				{
					int num40 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num40].velocity *= 0.3f;
					Main.dust[num40].noGravity = true;
					Main.dust[num40].noLight = true;
				}
			}
			if (type == 407)
			{
				int num41 = 2;
				if (frameCounter >= 6 * num41)
				{
					frameCounter = 0;
				}
				frame = frameCounter / num41;
				if (Main.rand.Next(5) == 0)
				{
					int num42 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 217, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num42].velocity *= 0.3f;
					Main.dust[num42].noGravity = true;
					Main.dust[num42].noLight = true;
				}
			}
			if (type == 423 || type == 613)
			{
				int num43 = 3;
				if (frameCounter >= 4 * num43)
				{
					frameCounter = 0;
				}
				frame = frameCounter / num43;
			}
			if (velocity.X > 0f)
			{
				spriteDirection = (direction = -1);
			}
			else if (velocity.X < 0f)
			{
				spriteDirection = (direction = 1);
			}
			if (type == 963)
			{
				spriteDirection = (direction *= -1);
				if (!flag && Math.Abs(velocity.X) < 0.1f)
				{
					spriteDirection = ((Main.player[owner].Center.X > base.Center.X) ? 1 : (-1));
				}
			}
			if (type == 373)
			{
				if (ai[1] > 0f)
				{
					ai[1] += Main.rand.Next(1, 4);
				}
				if (ai[1] > 90f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			else if (type == 375)
			{
				if (ai[1] > 0f)
				{
					ai[1] += 1f;
					if (Main.rand.Next(3) == 0)
					{
						ai[1] += 1f;
					}
				}
				if (ai[1] > 90f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			else if (type == 407)
			{
				if (ai[1] > 0f)
				{
					ai[1] += 1f;
					if (Main.rand.Next(3) != 0)
					{
						ai[1] += 1f;
					}
				}
				if (ai[1] > 50f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			else if (type == 423)
			{
				if (ai[1] > 0f)
				{
					ai[1] += 1f;
					if (Main.rand.Next(3) != 0)
					{
						ai[1] += 1f;
					}
				}
				if (ai[1] > 33f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			else if (type == 613)
			{
				if (ai[1] > 0f)
				{
					ai[1] += 1f;
					if (Main.rand.Next(3) != 0)
					{
						ai[1] += 1f;
					}
				}
				if (ai[1] > 60f)
				{
					ai[1] = 0f;
					netUpdate = true;
				}
			}
			if (ai[0] != 0f)
			{
				return;
			}
			float num44 = 0f;
			int num45 = 0;
			if (type == 373)
			{
				num44 = 10f;
				num45 = 374;
			}
			else if (type == 375)
			{
				num44 = 11f;
				num45 = 376;
			}
			else if (type == 407)
			{
				num44 = 20f;
				num45 = 408;
			}
			else if (type == 423)
			{
				num44 = 4f;
				num45 = 433;
			}
			else if (type == 613)
			{
				num44 = 14f;
				num45 = 614;
			}
			if (!flag)
			{
				return;
			}
			if (type == 375)
			{
				if ((vector - base.Center).X > 0f)
				{
					spriteDirection = (direction = -1);
				}
				else if ((vector - base.Center).X < 0f)
				{
					spriteDirection = (direction = 1);
				}
			}
			if (type == 407 && Collision.SolidCollision(position, width, height))
			{
				return;
			}
			if (type == 423)
			{
				if (Math.Abs((vector - base.Center).ToRotation() - (float)Math.PI / 2f) > (float)Math.PI / 4f)
				{
					velocity += (vector - base.Center - Vector2.UnitY * 80f).SafeNormalize(Vector2.Zero);
				}
				else if (!((vector - base.Center).Length() > 400f) && ai[1] == 0f)
				{
					ai[1] += 1f;
					if (Main.myPlayer == owner)
					{
						Vector2 v2 = vector - base.Center;
						v2 = v2.SafeNormalize(Vector2.Zero);
						v2 *= num44;
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, v2.X, v2.Y, num45, damage, knockBack, Main.myPlayer);
						netUpdate = true;
					}
				}
			}
			else if (ai[1] == 0f && type == 613)
			{
				if ((vector - base.Center).Length() > 500f || ai[1] != 0f)
				{
					return;
				}
				ai[1] += 1f;
				if (Main.myPlayer == owner)
				{
					Vector2 v3 = vector - base.Center;
					v3 = v3.SafeNormalize(Vector2.Zero);
					v3 *= num44;
					int num46 = NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, v3.X, v3.Y, num45, damage, knockBack, Main.myPlayer, 0f, num13);
					Main.projectile[num46].timeLeft = 300;
					Main.projectile[num46].netUpdate = true;
					velocity -= v3 / 3f;
					netUpdate = true;
				}
				for (int num47 = 0; num47 < 5; num47++)
				{
					int num48 = width / 4;
					_ = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * Main.rand.Next(24, 41) / 8f;
					int num49 = Dust.NewDust(base.Center - Vector2.One * num48, num48 * 2, num48 * 2, 88);
					Dust dust3 = Main.dust[num49];
					Vector2 vector8 = (dust3.position - base.Center).SafeNormalize(Vector2.Zero);
					dust3.position = base.Center + vector8 * num48 * scale - new Vector2(4f);
					if (num47 < 30)
					{
						dust3.velocity = vector8 * dust3.velocity.Length() * 2f;
					}
					else
					{
						dust3.velocity = 2f * vector8 * Main.rand.Next(45, 91) / 10f;
					}
					dust3.noGravity = true;
					dust3.scale = 0.7f + Main.rand.NextFloat();
				}
			}
			else if (ai[1] == 0f)
			{
				Vector2 v4 = vector - base.Center;
				ai[1] += 1f;
				if (Main.myPlayer == owner)
				{
					v4 = v4.SafeNormalize(Vector2.Zero);
					v4 *= num44;
					int num50 = NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, v4.X, v4.Y, num45, damage, knockBack, Main.myPlayer);
					Main.projectile[num50].timeLeft = 300;
					Main.projectile[num50].netUpdate = true;
					netUpdate = true;
				}
			}
		}

		private void AI_075()
		{
			Player player = Main.player[owner];
			float num = (float)Math.PI / 2f;
			Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
			int num2 = 2;
			float num3 = 0f;
			if (type == 439)
			{
				ai[0] += 1f;
				int num4 = 0;
				if (ai[0] >= 40f)
				{
					num4++;
				}
				if (ai[0] >= 80f)
				{
					num4++;
				}
				if (ai[0] >= 120f)
				{
					num4++;
				}
				int num5 = 24;
				int num6 = 6;
				ai[1] += 1f;
				bool flag = false;
				if (ai[1] >= (float)(num5 - num6 * num4))
				{
					ai[1] = 0f;
					flag = true;
				}
				frameCounter += 1 + num4;
				if (frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
					if (frame >= 6)
					{
						frame = 0;
					}
				}
				if (soundDelay <= 0)
				{
					soundDelay = num5 - num6 * num4;
					if (ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item91, position);
					}
				}
				if (ai[1] == 1f && ai[0] != 1f)
				{
					Vector2 spinningpoint = Vector2.UnitX * 24f;
					spinningpoint = spinningpoint.RotatedBy(rotation - (float)Math.PI / 2f);
					Vector2 vector2 = base.Center + spinningpoint;
					for (int i = 0; i < 2; i++)
					{
						int num7 = Dust.NewDust(vector2 - Vector2.One * 8f, 16, 16, 135, velocity.X / 2f, velocity.Y / 2f, 100);
						Main.dust[num7].velocity *= 0.66f;
						Main.dust[num7].noGravity = true;
						Main.dust[num7].scale = 1.4f;
					}
				}
				if (flag && Main.myPlayer == owner)
				{
					if (player.channel && player.CheckMana(player.inventory[player.selectedItem].mana, pay: true) && !player.noItems && !player.CCed)
					{
						float num8 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 vector3 = vector;
						Vector2 value = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector3;
						if (player.gravDir == -1f)
						{
							value.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector3.Y;
						}
						Vector2 vector4 = Vector2.Normalize(value);
						if (float.IsNaN(vector4.X) || float.IsNaN(vector4.Y))
						{
							vector4 = -Vector2.UnitY;
						}
						vector4 *= num8;
						if (vector4.X != velocity.X || vector4.Y != velocity.Y)
						{
							netUpdate = true;
						}
						velocity = vector4;
						int num9 = 440;
						float num10 = 14f;
						int num11 = 7;
						for (int j = 0; j < 2; j++)
						{
							vector3 = base.Center + new Vector2(Main.rand.Next(-num11, num11 + 1), Main.rand.Next(-num11, num11 + 1));
							Vector2 spinningpoint2 = Vector2.Normalize(velocity) * num10;
							spinningpoint2 = spinningpoint2.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914);
							if (float.IsNaN(spinningpoint2.X) || float.IsNaN(spinningpoint2.Y))
							{
								spinningpoint2 = -Vector2.UnitY;
							}
							NewProjectile(GetProjectileSource_FromThis(), vector3.X, vector3.Y, spinningpoint2.X, spinningpoint2.Y, num9, damage, knockBack, owner);
						}
					}
					else
					{
						Kill();
					}
				}
			}
			if (type == 445)
			{
				if (soundDelay <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item132, position);
					soundDelay = 23;
				}
				localAI[0] += 1f;
				if (localAI[0] >= 60f)
				{
					localAI[0] = 0f;
				}
				if (Vector2.Distance(vector, base.Center) >= 5f)
				{
					float num12 = localAI[0] / 60f;
					if (num12 > 0.5f)
					{
						num12 = 1f - num12;
					}
					Vector3 value2 = new Vector3(0f, 1f, 0.7f);
					Vector3 value3 = new Vector3(0f, 0.7f, 1f);
					Vector3 vector5 = Vector3.Lerp(value2, value3, 1f - num12 * 2f) * 0.5f;
					if (Vector2.Distance(vector, base.Center) >= 30f)
					{
						Vector2 vector6 = base.Center - vector;
						vector6.Normalize();
						vector6 *= Vector2.Distance(vector, base.Center) - 30f;
						DelegateMethods.v3_1 = vector5 * 0.8f;
						Utils.PlotTileLine(base.Center - vector6, base.Center, 8f, DelegateMethods.CastLightOpen);
					}
					Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, vector5.X, vector5.Y, vector5.Z);
				}
				if (Main.myPlayer == owner)
				{
					if (localAI[1] > 0f)
					{
						localAI[1] -= 1f;
					}
					if (!player.channel || player.noItems || player.CCed)
					{
						Kill();
					}
					else if (localAI[1] == 0f)
					{
						Vector2 vector7 = vector;
						Vector2 vector8 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector7;
						if (player.gravDir == -1f)
						{
							vector8.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector7.Y;
						}
						if (Main.tile[Player.tileTargetX, Player.tileTargetY].active())
						{
							vector8 = new Vector2(Player.tileTargetX, Player.tileTargetY) * 16f + Vector2.One * 8f - vector7;
							localAI[1] = 2f;
						}
						vector8 = Vector2.Lerp(vector8, velocity, 0.7f);
						if (float.IsNaN(vector8.X) || float.IsNaN(vector8.Y))
						{
							vector8 = -Vector2.UnitY;
						}
						float num13 = 30f;
						if (vector8.Length() < num13)
						{
							vector8 = Vector2.Normalize(vector8) * num13;
						}
						int tileBoost = player.inventory[player.selectedItem].tileBoost;
						int num14 = -Player.tileRangeX - tileBoost + 1;
						int num15 = Player.tileRangeX + tileBoost - 1;
						int num16 = -Player.tileRangeY - tileBoost;
						int num17 = Player.tileRangeY + tileBoost - 1;
						int num18 = 12;
						bool flag2 = false;
						if (vector8.X < (float)(num14 * 16 - num18))
						{
							flag2 = true;
						}
						if (vector8.Y < (float)(num16 * 16 - num18))
						{
							flag2 = true;
						}
						if (vector8.X > (float)(num15 * 16 + num18))
						{
							flag2 = true;
						}
						if (vector8.Y > (float)(num17 * 16 + num18))
						{
							flag2 = true;
						}
						if (flag2)
						{
							Vector2 vector9 = Vector2.Normalize(vector8);
							float num19 = -1f;
							if (vector9.X < 0f && ((float)(num14 * 16 - num18) / vector9.X < num19 || num19 == -1f))
							{
								num19 = (float)(num14 * 16 - num18) / vector9.X;
							}
							if (vector9.X > 0f && ((float)(num15 * 16 + num18) / vector9.X < num19 || num19 == -1f))
							{
								num19 = (float)(num15 * 16 + num18) / vector9.X;
							}
							if (vector9.Y < 0f && ((float)(num16 * 16 - num18) / vector9.Y < num19 || num19 == -1f))
							{
								num19 = (float)(num16 * 16 - num18) / vector9.Y;
							}
							if (vector9.Y > 0f && ((float)(num17 * 16 + num18) / vector9.Y < num19 || num19 == -1f))
							{
								num19 = (float)(num17 * 16 + num18) / vector9.Y;
							}
							vector8 = vector9 * num19;
						}
						if (vector8.X != velocity.X || vector8.Y != velocity.Y)
						{
							netUpdate = true;
						}
						velocity = vector8;
					}
				}
			}
			if (type == 460)
			{
				ai[0] += 1f;
				int num20 = 0;
				if (ai[0] >= 80f)
				{
					num20++;
				}
				if (ai[0] >= 180f)
				{
					num20++;
				}
				bool flag3 = false;
				_ = ai[0];
				if (ai[0] == 80f || ai[0] == 180f || (ai[0] > 180f && ai[0] % 20f == 0f))
				{
					flag3 = true;
				}
				bool flag4 = ai[0] >= 180f;
				int num21 = 5;
				if (!flag4)
				{
					ai[1] += 1f;
				}
				bool flag5 = false;
				if (ai[0] == 1f)
				{
					flag5 = true;
				}
				if (flag4 && ai[0] % 20f == 0f)
				{
					flag5 = true;
				}
				if ((!flag4 && ai[1] >= (float)num21) || (flag4 && ai[0] % 5f == 0f))
				{
					if (!flag4)
					{
						ai[1] = 0f;
					}
					flag5 = true;
					float num22 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 vector10 = vector;
					Vector2 value4 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector10;
					if (player.gravDir == -1f)
					{
						value4.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector10.Y;
					}
					Vector2 vector11 = Vector2.Normalize(value4);
					if (float.IsNaN(vector11.X) || float.IsNaN(vector11.Y))
					{
						vector11 = -Vector2.UnitY;
					}
					vector11 *= num22;
					if (vector11.X != velocity.X || vector11.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = vector11;
				}
				if (soundDelay <= 0 && !flag4)
				{
					soundDelay = num21 - num20;
					soundDelay *= 2;
					if (ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item15, position);
					}
				}
				if (ai[0] > 10f && !flag4)
				{
					Vector2 spinningpoint3 = Vector2.UnitX * 18f;
					spinningpoint3 = spinningpoint3.RotatedBy(rotation - (float)Math.PI / 2f);
					Vector2 vector12 = base.Center + spinningpoint3;
					for (int k = 0; k < num20 + 1; k++)
					{
						int num23 = 226;
						float num24 = 0.4f;
						if (k % 2 == 1)
						{
							num23 = 226;
							num24 = 0.65f;
						}
						Vector2 vector13 = vector12 + ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2() * (12f - (float)(num20 * 2));
						int num25 = Dust.NewDust(vector13 - Vector2.One * 8f, 16, 16, num23, velocity.X / 2f, velocity.Y / 2f);
						Main.dust[num25].velocity = Vector2.Normalize(vector12 - vector13) * 1.5f * (10f - (float)num20 * 2f) / 10f;
						Main.dust[num25].noGravity = true;
						Main.dust[num25].scale = num24;
						Main.dust[num25].customData = player;
					}
				}
				if (flag4)
				{
					Vector2 spinningpoint4 = Vector2.UnitX * 14f;
					spinningpoint4 = spinningpoint4.RotatedBy(rotation - (float)Math.PI / 2f);
					Vector2 vector14 = base.Center + spinningpoint4;
					for (int l = 0; l < 2; l++)
					{
						int num26 = 226;
						float num27 = 0.35f;
						if (l % 2 == 1)
						{
							num26 = 226;
							num27 = 0.45f;
						}
						float num28 = Main.rand.NextFloatDirection();
						Vector2 vector15 = vector14 + (rotation + num28 * ((float)Math.PI / 4f) * 0.8f - (float)Math.PI / 2f).ToRotationVector2() * 6f;
						int num29 = 24;
						int num30 = Dust.NewDust(vector15 - Vector2.One * (num29 / 2), num29, num29, num26, velocity.X / 2f, velocity.Y / 2f);
						Main.dust[num30].velocity = (vector15 - vector14).SafeNormalize(Vector2.Zero) * MathHelper.Lerp(1.5f, 9f, Utils.GetLerpValue(1f, 0f, Math.Abs(num28), clamped: true));
						Main.dust[num30].noGravity = true;
						Main.dust[num30].scale = num27;
						Main.dust[num30].customData = player;
						Main.dust[num30].fadeIn = 0.5f;
					}
				}
				if (flag5 && Main.myPlayer == owner)
				{
					bool flag6 = false;
					flag6 = !flag3 || player.CheckMana(player.inventory[player.selectedItem].mana, pay: true);
					if (player.channel && flag6 && !player.noItems && !player.CCed)
					{
						if (ai[0] == 180f)
						{
							Vector2 center = base.Center;
							Vector2 vector16 = Vector2.Normalize(velocity);
							if (float.IsNaN(vector16.X) || float.IsNaN(vector16.Y))
							{
								vector16 = -Vector2.UnitY;
							}
							int num31 = (int)((float)damage * 1.5f);
							int num32 = NewProjectile(GetProjectileSource_FromThis(), center.X, center.Y, vector16.X, vector16.Y, 461, num31, knockBack, owner, 0f, whoAmI);
							ai[1] = num32;
							netUpdate = true;
						}
						else if (flag4)
						{
							Projectile projectile = Main.projectile[(int)ai[1]];
							if (!projectile.active || projectile.type != 461)
							{
								Kill();
								return;
							}
						}
						else
						{
							bool flag7 = false;
							if (ai[0] == 1f)
							{
								flag7 = true;
							}
							if (ai[0] <= 50f && ai[0] % 10f == 0f)
							{
								flag7 = true;
							}
							if (ai[0] >= 80f && ai[0] < 180f && ai[0] % 30f == 0f)
							{
								flag7 = true;
							}
							if (flag7)
							{
								Vector2 vector17 = vector;
								int num33 = 459;
								float num34 = 10f;
								vector17 = base.Center;
								Vector2 vector18 = Vector2.Normalize(velocity) * num34;
								if (float.IsNaN(vector18.X) || float.IsNaN(vector18.Y))
								{
									vector18 = -Vector2.UnitY;
								}
								float num35 = 0.7f + (float)num20 * 0.3f;
								int num36 = ((num35 < 1f) ? damage : ((int)((float)damage * 2.5f)));
								NewProjectile(GetProjectileSource_FromThis(), vector17.X, vector17.Y, vector18.X, vector18.Y, num33, num36, knockBack, owner, 0f, num35);
							}
						}
					}
					else
					{
						Kill();
					}
				}
			}
			if (type == 633)
			{
				float num37 = 30f;
				if (ai[0] > 90f)
				{
					num37 = 15f;
				}
				if (ai[0] > 120f)
				{
					num37 = 5f;
				}
				damage = (int)((float)player.inventory[player.selectedItem].damage * player.magicDamage);
				ai[0] += 1f;
				ai[1] += 1f;
				bool flag8 = false;
				if (ai[0] % num37 == 0f)
				{
					flag8 = true;
				}
				int num38 = 10;
				bool flag9 = false;
				if (ai[0] % num37 == 0f)
				{
					flag9 = true;
				}
				if (ai[1] >= 1f)
				{
					ai[1] = 0f;
					flag9 = true;
					if (Main.myPlayer == owner)
					{
						float num39 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 vector19 = vector;
						Vector2 value5 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector19;
						if (player.gravDir == -1f)
						{
							value5.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector19.Y;
						}
						Vector2 value6 = Vector2.Normalize(value5);
						if (float.IsNaN(value6.X) || float.IsNaN(value6.Y))
						{
							value6 = -Vector2.UnitY;
						}
						value6 = Vector2.Normalize(Vector2.Lerp(value6, Vector2.Normalize(velocity), 0.92f));
						value6 *= num39;
						if (value6.X != velocity.X || value6.Y != velocity.Y)
						{
							netUpdate = true;
						}
						velocity = value6;
					}
				}
				frameCounter++;
				int num40 = ((!(ai[0] < 120f)) ? 1 : 4);
				if (frameCounter >= num40)
				{
					frameCounter = 0;
					if (++frame >= 5)
					{
						frame = 0;
					}
				}
				if (soundDelay <= 0)
				{
					soundDelay = num38;
					soundDelay *= 2;
					if (ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item15, position);
					}
				}
				if (flag9 && Main.myPlayer == owner)
				{
					bool flag10 = false;
					flag10 = !flag8 || player.CheckMana(player.inventory[player.selectedItem].mana, pay: true);
					if (player.channel && flag10 && !player.noItems && !player.CCed)
					{
						if (ai[0] == 1f)
						{
							Vector2 center2 = base.Center;
							Vector2 vector20 = Vector2.Normalize(velocity);
							if (float.IsNaN(vector20.X) || float.IsNaN(vector20.Y))
							{
								vector20 = -Vector2.UnitY;
							}
							int num41 = damage;
							for (int m = 0; m < 6; m++)
							{
								NewProjectile(GetProjectileSource_FromThis(), center2.X, center2.Y, vector20.X, vector20.Y, 632, num41, knockBack, owner, m, whoAmI);
							}
							netUpdate = true;
						}
					}
					else
					{
						Kill();
					}
				}
			}
			if (type == 595)
			{
				num = 0f;
				if (spriteDirection == -1)
				{
					num = (float)Math.PI;
				}
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
				soundDelay--;
				if (soundDelay <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item1, base.Center);
					soundDelay = 12;
				}
				if (Main.myPlayer == owner)
				{
					if (player.channel && !player.noItems && !player.CCed)
					{
						float num42 = 1f;
						if (player.inventory[player.selectedItem].shoot == type)
						{
							num42 = player.inventory[player.selectedItem].shootSpeed * scale;
						}
						Vector2 vec = Main.MouseWorld - vector;
						vec.Normalize();
						if (vec.HasNaNs())
						{
							vec = Vector2.UnitX * player.direction;
						}
						vec *= num42;
						if (vec.X != velocity.X || vec.Y != velocity.Y)
						{
							netUpdate = true;
						}
						velocity = vec;
					}
					else
					{
						Kill();
					}
				}
				Vector2 vector21 = base.Center + velocity * 3f;
				Lighting.AddLight(vector21, 0.8f, 0.8f, 0.8f);
				if (Main.rand.Next(3) == 0)
				{
					int num43 = Dust.NewDust(vector21 - base.Size / 2f, width, height, 63, velocity.X, velocity.Y, 100, default(Color), 2f);
					Main.dust[num43].noGravity = true;
					Main.dust[num43].position -= velocity;
				}
			}
			if (type == 735)
			{
				num = 0f;
				if (spriteDirection == -1)
				{
					num = (float)Math.PI;
				}
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
				soundDelay--;
				if (soundDelay <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item1, base.Center);
					soundDelay = 12;
				}
				if (Main.myPlayer == owner)
				{
					if (player.channel && !player.noItems && !player.CCed)
					{
						float num44 = 1f;
						if (player.inventory[player.selectedItem].shoot == type)
						{
							num44 = player.inventory[player.selectedItem].shootSpeed * scale;
						}
						Vector2 vec2 = Main.MouseWorld - vector;
						vec2.Normalize();
						if (vec2.HasNaNs())
						{
							vec2 = Vector2.UnitX * player.direction;
						}
						vec2 *= num44;
						if (vec2.X != velocity.X || vec2.Y != velocity.Y)
						{
							netUpdate = true;
						}
						velocity = vec2;
					}
					else
					{
						Kill();
					}
				}
				Vector2 vector22 = base.Center + velocity * 3f;
				Lighting.AddLight(vector22, 0.8f, 0.8f, 0.8f);
				if (Main.rand.Next(3) == 0)
				{
					int num45 = Dust.NewDust(vector22 - base.Size / 2f, width, height, 302, velocity.X, velocity.Y, 100, default(Color), 2f);
					Main.dust[num45].noGravity = true;
					Main.dust[num45].position -= velocity;
				}
			}
			if (type == 927)
			{
				num = 0f;
				ai[0] += 1f;
				if (ai[0] >= 8f)
				{
					ai[0] = 0f;
				}
				num2 = 9;
				num3 = Main.rand.NextFloatDirection() * ((float)Math.PI * 2f) * 0.05f;
				soundDelay--;
				if (soundDelay <= 0)
				{
					SoundEngine.PlaySound(SoundID.Item1, base.Center);
					soundDelay = 6;
				}
				if (Main.myPlayer == owner)
				{
					if (player.channel && !player.noItems && !player.CCed)
					{
						float num46 = 1f;
						if (player.inventory[player.selectedItem].shoot == type)
						{
							num46 = player.inventory[player.selectedItem].shootSpeed * scale;
						}
						Vector2 vec3 = Main.MouseWorld - vector;
						vec3.Normalize();
						if (vec3.HasNaNs())
						{
							vec3 = Vector2.UnitX * player.direction;
						}
						vec3 *= num46;
						if (vec3.X != velocity.X || vec3.Y != velocity.Y)
						{
							netUpdate = true;
						}
						velocity = vec3;
					}
					else
					{
						Kill();
					}
				}
				DelegateMethods.v3_1 = new Vector3(0.5f, 0.5f, 0.5f);
				Utils.PlotTileLine(base.Center - velocity, base.Center + velocity.SafeNormalize(Vector2.Zero) * 80f, 16f, DelegateMethods.CastLightOpen);
			}
			if (type == 600)
			{
				_ = ai[0];
				_ = 0f;
				ai[0] += 1f;
				if (Main.myPlayer == owner && ai[0] == 1f)
				{
					float num47 = player.inventory[player.selectedItem].shootSpeed * scale;
					Vector2 vector23 = vector;
					Vector2 value7 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector23;
					if (player.gravDir == -1f)
					{
						value7.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector23.Y;
					}
					Vector2 vector24 = Vector2.Normalize(value7);
					if (float.IsNaN(vector24.X) || float.IsNaN(vector24.Y))
					{
						vector24 = -Vector2.UnitY;
					}
					vector24 *= num47;
					if (vector24.X != velocity.X || vector24.Y != velocity.Y)
					{
						netUpdate = true;
					}
					velocity = vector24;
					int num48 = 601;
					float num49 = 3f;
					vector23 = base.Center;
					Vector2 vector25 = Vector2.Normalize(velocity) * num49;
					if (float.IsNaN(vector25.X) || float.IsNaN(vector25.Y))
					{
						vector25 = -Vector2.UnitY;
					}
					NewProjectile(GetProjectileSource_FromThis(), vector23.X, vector23.Y, vector25.X, vector25.Y, num48, damage, knockBack, owner, ai[1]);
				}
				if (ai[0] >= 30f)
				{
					Kill();
				}
			}
			if (type == 611)
			{
				if (Main.netMode != 2 && localAI[0] == 0f)
				{
					SoundEngine.PlaySound(SoundID.Item116, base.Center);
				}
				if (localAI[1] > 0f)
				{
					localAI[1] -= 1f;
				}
				alpha -= 42;
				if (alpha < 0)
				{
					alpha = 0;
				}
				if (localAI[0] == 0f)
				{
					localAI[0] = velocity.ToRotation();
				}
				float num50 = ((localAI[0].ToRotationVector2().X >= 0f) ? 1 : (-1));
				if (ai[1] <= 0f)
				{
					num50 *= -1f;
				}
				Vector2 vector26 = (num50 * (ai[0] / 30f * ((float)Math.PI * 2f) - (float)Math.PI / 2f)).ToRotationVector2();
				vector26.Y *= (float)Math.Sin(ai[1]);
				if (ai[1] <= 0f)
				{
					vector26.Y *= -1f;
				}
				vector26 = vector26.RotatedBy(localAI[0]);
				ai[0] += 1f;
				if (ai[0] < 30f)
				{
					velocity += 48f * vector26;
				}
				else
				{
					Kill();
				}
			}
			if (type == 615)
			{
				num = 0f;
				if (spriteDirection == -1)
				{
					num = (float)Math.PI;
				}
				ai[0] += 1f;
				int num51 = 0;
				if (ai[0] >= 40f)
				{
					num51++;
				}
				if (ai[0] >= 80f)
				{
					num51++;
				}
				if (ai[0] >= 120f)
				{
					num51++;
				}
				int num52 = 5;
				int num53 = 0;
				ai[1] -= 1f;
				bool flag11 = false;
				int num54 = -1;
				if (ai[1] <= 0f)
				{
					ai[1] = num52 - num53 * num51;
					flag11 = true;
					if ((int)ai[0] / (num52 - num53 * num51) % 7 == 0)
					{
						num54 = 0;
					}
				}
				frameCounter += 1 + num51;
				if (frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (soundDelay <= 0)
				{
					soundDelay = num52 - num53 * num51;
					if (ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item36, position);
					}
				}
				if (flag11 && Main.myPlayer == owner)
				{
					bool canShoot = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
					int projToShoot = 14;
					float speed = 14f;
					int Damage = player.GetWeaponDamage(player.inventory[player.selectedItem]);
					float KnockBack = player.inventory[player.selectedItem].knockBack;
					if (canShoot)
					{
						player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot, ref speed, ref canShoot, ref Damage, ref KnockBack, out var usedAmmoItemId);
						IProjectileSource projectileSource_Item_WithPotentialAmmo = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId);
						KnockBack = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack);
						float num55 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 vector27 = vector;
						Vector2 value8 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector27;
						if (player.gravDir == -1f)
						{
							value8.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector27.Y;
						}
						Vector2 spinningpoint5 = Vector2.Normalize(value8);
						if (float.IsNaN(spinningpoint5.X) || float.IsNaN(spinningpoint5.Y))
						{
							spinningpoint5 = -Vector2.UnitY;
						}
						spinningpoint5 *= num55;
						spinningpoint5 = spinningpoint5.RotatedBy(Main.rand.NextDouble() * 0.13089969754219055 - 0.065449848771095276);
						if (spinningpoint5.X != velocity.X || spinningpoint5.Y != velocity.Y)
						{
							netUpdate = true;
						}
						velocity = spinningpoint5;
						for (int n = 0; n < 1; n++)
						{
							Vector2 spinningpoint6 = Vector2.Normalize(velocity) * speed;
							spinningpoint6 = spinningpoint6.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914);
							if (float.IsNaN(spinningpoint6.X) || float.IsNaN(spinningpoint6.Y))
							{
								spinningpoint6 = -Vector2.UnitY;
							}
							NewProjectile(projectileSource_Item_WithPotentialAmmo, vector27.X, vector27.Y, spinningpoint6.X, spinningpoint6.Y, projToShoot, Damage, KnockBack, owner);
						}
						if (num54 == 0)
						{
							projToShoot = 616;
							speed = 8f;
							for (int num56 = 0; num56 < 1; num56++)
							{
								Vector2 spinningpoint7 = Vector2.Normalize(velocity) * speed;
								spinningpoint7 = spinningpoint7.RotatedBy(Main.rand.NextDouble() * 0.39269909262657166 - 0.19634954631328583);
								if (float.IsNaN(spinningpoint7.X) || float.IsNaN(spinningpoint7.Y))
								{
									spinningpoint7 = -Vector2.UnitY;
								}
								NewProjectile(projectileSource_Item_WithPotentialAmmo, vector27.X, vector27.Y, spinningpoint7.X, spinningpoint7.Y, projToShoot, Damage + 20, KnockBack * 1.25f, owner);
							}
						}
					}
					else
					{
						Kill();
					}
				}
			}
			if (type == 714)
			{
				num = 0f;
				if (spriteDirection == -1)
				{
					num = (float)Math.PI;
				}
				ai[0] += 1f;
				int num57 = 0;
				int num58 = 8;
				int num59 = 0;
				ai[1] -= 1f;
				bool flag12 = false;
				int num60 = -1;
				if (ai[1] <= 0f)
				{
					ai[1] = num58 - num59 * num57;
					flag12 = true;
					int num61 = (int)ai[0] / (num58 - num59 * num57);
					if (num61 % 7 == 0)
					{
						num60 = 0;
					}
					num60 = num61 % 7;
				}
				_ = rotation;
				Vector2 center3 = base.Center;
				_ = direction;
				Vector2 v = velocity;
				frameCounter += 1 + num57;
				if (frameCounter >= 4)
				{
					frameCounter = 0;
					frame++;
					if (frame >= Main.projFrames[type])
					{
						frame = 0;
					}
				}
				if (soundDelay <= 0 && Main.player[owner].controlUseItem)
				{
					soundDelay = num58 - num59 * num57;
					if (ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item156, position);
					}
				}
				if (flag12 && Main.myPlayer == owner)
				{
					bool canShoot2 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
					int projToShoot2 = 134;
					float speed2 = 8f;
					int Damage2 = player.GetWeaponDamage(player.inventory[player.selectedItem]);
					float KnockBack2 = player.inventory[player.selectedItem].knockBack;
					if (num60 == 3)
					{
						speed2 += 1f;
					}
					if (canShoot2)
					{
						player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot2, ref speed2, ref canShoot2, ref Damage2, ref KnockBack2, out var usedAmmoItemId2);
						KnockBack2 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack2);
						IProjectileSource projectileSource_Item_WithPotentialAmmo2 = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId2);
						float num62 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 vector28 = vector;
						Vector2 value9 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector28;
						if (player.gravDir == -1f)
						{
							value9.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector28.Y;
						}
						Vector2 spinningpoint8 = Vector2.Normalize(value9);
						if (float.IsNaN(spinningpoint8.X) || float.IsNaN(spinningpoint8.Y))
						{
							spinningpoint8 = -Vector2.UnitY;
						}
						spinningpoint8 *= num62;
						spinningpoint8 = spinningpoint8.RotatedBy((Main.rand.NextDouble() * 0.13089969754219055 - 0.065449848771095276) * 0.5);
						if (spinningpoint8.X != velocity.X || spinningpoint8.Y != velocity.Y)
						{
							netUpdate = true;
						}
						velocity = spinningpoint8;
						for (int num63 = 0; num63 < 1; num63++)
						{
							Vector2 spinningpoint9 = Vector2.Normalize(velocity) * speed2;
							spinningpoint9 = spinningpoint9.RotatedBy(Main.rand.NextDouble() * 0.19634954631328583 - 0.098174773156642914);
							if (float.IsNaN(spinningpoint9.X) || float.IsNaN(spinningpoint9.Y))
							{
								spinningpoint9 = -Vector2.UnitY;
							}
							NewProjectile(projectileSource_Item_WithPotentialAmmo2, vector28.X, vector28.Y, spinningpoint9.X, spinningpoint9.Y, projToShoot2, Damage2, KnockBack2, owner, num60);
							if (num60 == 5)
							{
								for (float num64 = -1f; num64 <= 1f; num64 += 2f)
								{
									Vector2 vector29 = spinningpoint9.RotatedBy((float)Math.PI * 2f * num64 * 1f / 80f);
									if (float.IsNaN(spinningpoint9.X) || float.IsNaN(spinningpoint9.Y))
									{
										vector29 = -Vector2.UnitY;
									}
									NewProjectile(projectileSource_Item_WithPotentialAmmo2, vector28.X, vector28.Y, vector29.X, vector29.Y, projToShoot2, Damage2, KnockBack2, owner, num60);
								}
							}
							if (num60 == 4)
							{
								NewProjectile(projectileSource_Item_WithPotentialAmmo2, vector28.X, vector28.Y, spinningpoint9.X, spinningpoint9.Y, projToShoot2, Damage2, KnockBack2, owner, num60, 1f);
							}
						}
					}
					else
					{
						Kill();
					}
				}
				Vector2 vector30 = base.Center + velocity.ToRotation().ToRotationVector2() * 40f;
				Vector2 vector31 = center3 + v.ToRotation().ToRotationVector2() * 40f;
				Color color = Main.hslToRgb(ai[0] / 90f % 1f, 1f, 0.5f);
				color.A = 120;
				int num65 = 267;
				Dust dust = Dust.NewDustPerfect(vector30, num65, Vector2.Zero);
				dust.color = color;
				dust.scale = 0.6f;
				dust.fadeIn = 0.9f;
				dust.noGravity = true;
				Dust dust2 = Dust.NewDustPerfect(vector30, num65, Vector2.Zero);
				dust2.color = color;
				dust2.scale = 0.6f;
				dust2.fadeIn = 0.7f;
				dust2.noGravity = true;
				dust2.velocity = -velocity.RotatedBy(2.0943951606750488) / 10f;
				Dust dust3 = Dust.NewDustPerfect(vector30, num65, Vector2.Zero);
				dust3.color = color;
				dust3.scale = 0.6f;
				dust3.fadeIn = 0.7f;
				dust3.noGravity = true;
				dust3.velocity = -velocity.RotatedBy(-2.0943951606750488) / 10f;
				if (vector30 != vector31)
				{
					float num66 = -1f;
					Dust dust4 = Dust.NewDustPerfect(Vector2.Lerp(vector30, vector31, 0.8f), num65, Vector2.Zero);
					dust4.velocity = (vector30 - vector31).SafeNormalize(Vector2.Zero) * 2f;
					dust4.color = color;
					dust4.scale = 0.6f;
					dust4.fadeIn = 0.9f;
					dust4.velocity *= num66;
					dust4.noGravity = true;
					Dust dust5 = Dust.NewDustPerfect(Vector2.Lerp(vector30, vector31, 0.5f), num65, Vector2.Zero);
					dust5.velocity = (vector30 - vector31).SafeNormalize(Vector2.Zero) * 2f;
					dust5.color = color;
					dust5.scale = 0.6f;
					dust5.fadeIn = 0.9f;
					dust5.velocity *= num66;
					dust5.noGravity = true;
					Dust dust6 = Dust.NewDustPerfect(Vector2.Lerp(vector30, vector31, 0.2f), num65, Vector2.Zero);
					dust6.velocity = (vector30 - vector31).SafeNormalize(Vector2.Zero) * 2f;
					dust6.color = color;
					dust6.scale = 0.6f;
					dust6.fadeIn = 0.9f;
					dust6.velocity *= num66;
					dust6.noGravity = true;
				}
			}
			if (type == 630)
			{
				num = 0f;
				if (spriteDirection == -1)
				{
					num = (float)Math.PI;
				}
				ai[0] += 1f;
				int num67 = 0;
				if (ai[0] >= 40f)
				{
					num67++;
				}
				if (ai[0] >= 80f)
				{
					num67++;
				}
				if (ai[0] >= 120f)
				{
					num67++;
				}
				int num68 = 24;
				int num69 = 2;
				ai[1] -= 1f;
				bool flag13 = false;
				if (ai[1] <= 0f)
				{
					ai[1] = num68 - num69 * num67;
					flag13 = true;
					_ = (int)ai[0] / (num68 - num69 * num67);
				}
				bool canShoot3 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (soundDelay <= 0 && canShoot3)
				{
					soundDelay = num68 - num69 * num67;
					if (ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item5, position);
					}
					localAI[0] = 12f;
				}
				player.phantasmTime = 2;
				if (flag13 && Main.myPlayer == owner)
				{
					int projToShoot3 = 14;
					float speed3 = 14f;
					int Damage3 = player.GetWeaponDamage(player.inventory[player.selectedItem]);
					float KnockBack3 = player.inventory[player.selectedItem].knockBack;
					if (canShoot3)
					{
						player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot3, ref speed3, ref canShoot3, ref Damage3, ref KnockBack3, out var usedAmmoItemId3);
						IProjectileSource projectileSource_Item_WithPotentialAmmo3 = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId3);
						KnockBack3 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack3);
						float num70 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 vector32 = vector;
						Vector2 value10 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector32;
						if (player.gravDir == -1f)
						{
							value10.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector32.Y;
						}
						Vector2 vector33 = Vector2.Normalize(value10);
						if (float.IsNaN(vector33.X) || float.IsNaN(vector33.Y))
						{
							vector33 = -Vector2.UnitY;
						}
						vector33 *= num70;
						if (vector33.X != velocity.X || vector33.Y != velocity.Y)
						{
							netUpdate = true;
						}
						velocity = vector33 * 0.55f;
						for (int num71 = 0; num71 < 4; num71++)
						{
							Vector2 vector34 = Vector2.Normalize(velocity) * speed3 * (0.6f + Main.rand.NextFloat() * 0.8f);
							if (float.IsNaN(vector34.X) || float.IsNaN(vector34.Y))
							{
								vector34 = -Vector2.UnitY;
							}
							Vector2 vector35 = vector32 + Utils.RandomVector2(Main.rand, -15f, 15f);
							int num72 = NewProjectile(projectileSource_Item_WithPotentialAmmo3, vector35.X, vector35.Y, vector34.X, vector34.Y, projToShoot3, Damage3, KnockBack3, owner);
							Main.projectile[num72].noDropItem = true;
						}
					}
					else
					{
						Kill();
					}
				}
			}
			if (type == 705)
			{
				num = 0f;
				if (spriteDirection == -1)
				{
					num = (float)Math.PI;
				}
				ai[0] += 1f;
				int itemAnimationMax = player.itemAnimationMax;
				ai[1] -= 1f;
				bool flag14 = false;
				if (ai[1] <= 0f)
				{
					ai[1] = itemAnimationMax;
					flag14 = true;
				}
				bool canShoot4 = player.channel && player.HasAmmo(player.inventory[player.selectedItem], canUse: true) && !player.noItems && !player.CCed;
				if (localAI[0] > 0f)
				{
					localAI[0] -= 1f;
				}
				if (soundDelay <= 0 && canShoot4)
				{
					soundDelay = itemAnimationMax;
					if (ai[0] != 1f)
					{
						SoundEngine.PlaySound(SoundID.Item5, position);
					}
					localAI[0] = 12f;
				}
				if (flag14 && Main.myPlayer == owner)
				{
					int projToShoot4 = 14;
					float speed4 = 12f;
					int Damage4 = player.GetWeaponDamage(player.inventory[player.selectedItem]);
					float KnockBack4 = player.inventory[player.selectedItem].knockBack;
					int num73 = 2;
					float num74 = 1.5f;
					if (canShoot4)
					{
						player.PickAmmo(player.inventory[player.selectedItem], ref projToShoot4, ref speed4, ref canShoot4, ref Damage4, ref KnockBack4, out var usedAmmoItemId4);
						IProjectileSource projectileSource_Item_WithPotentialAmmo4 = player.GetProjectileSource_Item_WithPotentialAmmo(player.HeldItem, usedAmmoItemId4);
						KnockBack4 = player.GetWeaponKnockback(player.inventory[player.selectedItem], KnockBack4);
						if (projToShoot4 == 1)
						{
							projToShoot4 = 2;
						}
						if (++player.phantomPhoneixCounter >= 3)
						{
							player.phantomPhoneixCounter = 0;
							num73 = 1;
							Damage4 *= 2;
							num74 = 0f;
							ai[1] *= 1.5f;
							projToShoot4 = 706;
							speed4 = 16f;
						}
						float num75 = player.inventory[player.selectedItem].shootSpeed * scale;
						Vector2 vector36 = vector;
						Vector2 value11 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - vector36;
						if (player.gravDir == -1f)
						{
							value11.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector36.Y;
						}
						Vector2 vector37 = Vector2.Normalize(value11);
						if (float.IsNaN(vector37.X) || float.IsNaN(vector37.Y))
						{
							vector37 = -Vector2.UnitY;
						}
						vector37 *= num75;
						if (vector37.X != velocity.X || vector37.Y != velocity.Y)
						{
							netUpdate = true;
						}
						velocity = vector37 * 0.55f;
						for (int num76 = 0; num76 < num73; num76++)
						{
							Vector2 vector38 = Vector2.Normalize(velocity) * speed4;
							vector38 += Main.rand.NextVector2Square(0f - num74, num74);
							if (float.IsNaN(vector38.X) || float.IsNaN(vector38.Y))
							{
								vector38 = -Vector2.UnitY;
							}
							Vector2 vector39 = vector36;
							int num77 = NewProjectile(projectileSource_Item_WithPotentialAmmo4, vector39.X, vector39.Y, vector38.X, vector38.Y, projToShoot4, Damage4, KnockBack4, owner);
							Main.projectile[num77].noDropItem = true;
						}
					}
					else
					{
						Kill();
					}
				}
			}
			position = player.RotatedRelativePoint(player.MountedCenter, reverseRotation: false, addGfxOffY: false) - base.Size / 2f;
			rotation = velocity.ToRotation() + num;
			spriteDirection = direction;
			timeLeft = 2;
			player.ChangeDir(direction);
			player.heldProj = whoAmI;
			player.SetDummyItemTime(num2);
			player.itemRotation = MathHelper.WrapAngle((float)Math.Atan2(velocity.Y * (float)direction, velocity.X * (float)direction) + num3);
			if (type == 460 || type == 611)
			{
				Vector2 vector40 = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
				if (player.direction != 1)
				{
					vector40.X = (float)player.bodyFrame.Width - vector40.X;
				}
				if (player.gravDir != 1f)
				{
					vector40.Y = (float)player.bodyFrame.Height - vector40.Y;
				}
				vector40 -= new Vector2(player.bodyFrame.Width - player.width, player.bodyFrame.Height - 42) / 2f;
				base.Center = player.RotatedRelativePoint(player.MountedCenter - new Vector2(20f, 42f) / 2f + vector40, reverseRotation: false, addGfxOffY: false) - velocity;
			}
			if (type == 615)
			{
				position.Y += player.gravDir * 2f;
			}
			if (type == 714)
			{
				position.Y += player.gravDir * 2f;
			}
			if (type == 611 && alpha == 0)
			{
				for (int num78 = 0; num78 < 2; num78++)
				{
					Dust obj = Main.dust[Dust.NewDust(position + velocity * 2f, width, height, 6, 0f, 0f, 100, Color.Transparent, 2f)];
					obj.noGravity = true;
					obj.velocity *= 2f;
					obj.velocity += localAI[0].ToRotationVector2();
					obj.fadeIn = 1.5f;
				}
				float num79 = 18f;
				for (int num80 = 0; (float)num80 < num79; num80++)
				{
					if (Main.rand.Next(4) == 0)
					{
						Vector2 vector41 = position + velocity + velocity * ((float)num80 / num79);
						Dust obj2 = Main.dust[Dust.NewDust(vector41, width, height, 6, 0f, 0f, 100, Color.Transparent)];
						obj2.noGravity = true;
						obj2.fadeIn = 0.5f;
						obj2.velocity += localAI[0].ToRotationVector2();
						obj2.noLight = true;
					}
				}
			}
			if (type == 927)
			{
				player.itemAnimation = num2 - (int)ai[0];
			}
		}

		private void AI_099_1()
		{
			timeLeft = 6;
			bool flag = true;
			float num = 250f;
			float num2 = 0.1f;
			float num3 = 15f;
			float num4 = 12f;
			num *= 0.5f;
			num3 *= 0.8f;
			num4 *= 1.5f;
			if (owner == Main.myPlayer)
			{
				bool flag2 = false;
				for (int i = 0; i < 1000; i++)
				{
					if (Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].aiStyle == 99 && (Main.projectile[i].type < 556 || Main.projectile[i].type > 561))
					{
						flag2 = true;
					}
				}
				if (!flag2)
				{
					ai[0] = -1f;
					netUpdate = true;
				}
			}
			if (Main.player[owner].yoyoString)
			{
				num += num * 0.25f + 10f;
			}
			rotation += 0.5f;
			if (Main.player[owner].dead)
			{
				Kill();
				return;
			}
			if (!flag)
			{
				Main.player[owner].heldProj = whoAmI;
				Main.player[owner].SetDummyItemTime(2);
				if (position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
				{
					Main.player[owner].ChangeDir(1);
					direction = 1;
				}
				else
				{
					Main.player[owner].ChangeDir(-1);
					direction = -1;
				}
			}
			if (ai[0] == 0f || ai[0] == 1f)
			{
				if (ai[0] == 1f)
				{
					num *= 0.75f;
				}
				num4 *= 0.5f;
				bool flag3 = false;
				Vector2 vector = Main.player[owner].Center - base.Center;
				if ((double)vector.Length() > (double)num * 0.9)
				{
					flag3 = true;
				}
				if (vector.Length() > num)
				{
					float num5 = vector.Length() - num;
					Vector2 vector2 = default(Vector2);
					vector2.X = vector.Y;
					vector2.Y = vector.X;
					vector.Normalize();
					vector *= num;
					position = Main.player[owner].Center - vector;
					position.X -= width / 2;
					position.Y -= height / 2;
					float num6 = velocity.Length();
					velocity.Normalize();
					if (num5 > num6 - 1f)
					{
						num5 = num6 - 1f;
					}
					velocity *= num6 - num5;
					num6 = velocity.Length();
					Vector2 vector3 = new Vector2(base.Center.X, base.Center.Y);
					Vector2 vector4 = new Vector2(Main.player[owner].Center.X, Main.player[owner].Center.Y);
					if (vector3.Y < vector4.Y)
					{
						vector2.Y = Math.Abs(vector2.Y);
					}
					else if (vector3.Y > vector4.Y)
					{
						vector2.Y = 0f - Math.Abs(vector2.Y);
					}
					if (vector3.X < vector4.X)
					{
						vector2.X = Math.Abs(vector2.X);
					}
					else if (vector3.X > vector4.X)
					{
						vector2.X = 0f - Math.Abs(vector2.X);
					}
					vector2.Normalize();
					vector2 *= velocity.Length();
					new Vector2(vector2.X, vector2.Y);
					if (Math.Abs(velocity.X) > Math.Abs(velocity.Y))
					{
						Vector2 vector5 = velocity;
						vector5.Y += vector2.Y;
						vector5.Normalize();
						vector5 *= velocity.Length();
						if ((double)Math.Abs(vector2.X) < 0.1 || (double)Math.Abs(vector2.Y) < 0.1)
						{
							velocity = vector5;
						}
						else
						{
							velocity = (vector5 + velocity * 2f) / 3f;
						}
					}
					else
					{
						Vector2 vector6 = velocity;
						vector6.X += vector2.X;
						vector6.Normalize();
						vector6 *= velocity.Length();
						if ((double)Math.Abs(vector2.X) < 0.2 || (double)Math.Abs(vector2.Y) < 0.2)
						{
							velocity = vector6;
						}
						else
						{
							velocity = (vector6 + velocity * 2f) / 3f;
						}
					}
				}
				if (Main.myPlayer == owner)
				{
					if (Main.player[owner].channel)
					{
						Vector2 vector7 = new Vector2(Main.mouseX - Main.lastMouseX, Main.mouseY - Main.lastMouseY);
						if (velocity.X != 0f || velocity.Y != 0f)
						{
							if (flag)
							{
								vector7 *= -1f;
							}
							if (flag3)
							{
								if (base.Center.X < Main.player[owner].Center.X && vector7.X < 0f)
								{
									vector7.X = 0f;
								}
								if (base.Center.X > Main.player[owner].Center.X && vector7.X > 0f)
								{
									vector7.X = 0f;
								}
								if (base.Center.Y < Main.player[owner].Center.Y && vector7.Y < 0f)
								{
									vector7.Y = 0f;
								}
								if (base.Center.Y > Main.player[owner].Center.Y && vector7.Y > 0f)
								{
									vector7.Y = 0f;
								}
							}
							velocity += vector7 * num2;
							netUpdate = true;
						}
					}
					else
					{
						ai[0] = 10f;
						netUpdate = true;
					}
				}
				if (flag || type == 562 || type == 547 || type == 555 || type == 564 || type == 552 || type == 563 || type == 549 || type == 550 || type == 554 || type == 553 || type == 603)
				{
					float num7 = 800f;
					Vector2 vector8 = default(Vector2);
					bool flag4 = false;
					if (type == 549)
					{
						num7 = 200f;
					}
					if (type == 554)
					{
						num7 = 400f;
					}
					if (type == 553)
					{
						num7 = 250f;
					}
					if (type == 603)
					{
						num7 = 320f;
					}
					for (int j = 0; j < 200; j++)
					{
						if (Main.npc[j].CanBeChasedBy(this))
						{
							float num8 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
							float num9 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
							float num10 = Math.Abs(position.X + (float)(width / 2) - num8) + Math.Abs(position.Y + (float)(height / 2) - num9);
							if (num10 < num7 && (type != 563 || !(num10 < 200f)) && Collision.CanHit(position, width, height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height) && (double)(Main.npc[j].Center - Main.player[owner].Center).Length() < (double)num * 0.9)
							{
								num7 = num10;
								vector8.X = num8;
								vector8.Y = num9;
								flag4 = true;
							}
						}
					}
					if (flag4)
					{
						vector8 -= base.Center;
						vector8.Normalize();
						if (type == 563)
						{
							vector8 *= 4f;
							velocity = (velocity * 14f + vector8) / 15f;
						}
						else if (type == 553)
						{
							vector8 *= 5f;
							velocity = (velocity * 12f + vector8) / 13f;
						}
						else if (type == 603)
						{
							vector8 *= 16f;
							velocity = (velocity * 9f + vector8) / 10f;
						}
						else if (type == 554)
						{
							vector8 *= 8f;
							velocity = (velocity * 6f + vector8) / 7f;
						}
						else
						{
							vector8 *= 6f;
							velocity = (velocity * 7f + vector8) / 8f;
						}
					}
				}
				if (velocity.Length() > num3)
				{
					velocity.Normalize();
					velocity *= num3;
				}
				if (velocity.Length() < num4)
				{
					velocity.Normalize();
					velocity *= num4;
				}
				return;
			}
			tileCollide = false;
			Vector2 vector9 = Main.player[owner].Center - base.Center;
			float num11 = vector9.Length();
			if (num11 < 40f || vector9.HasNaNs() || num11 > 2000f)
			{
				Kill();
				return;
			}
			float num12 = num3 * 1.5f;
			if (type == 546)
			{
				num12 *= 1.5f;
			}
			if (type == 554)
			{
				num12 *= 1.25f;
			}
			if (type == 555)
			{
				num12 *= 1.35f;
			}
			if (type == 562)
			{
				num12 *= 1.25f;
			}
			float num13 = 12f;
			vector9.Normalize();
			vector9 *= num12;
			velocity = (velocity * (num13 - 1f) + vector9) / num13;
		}

		private void AI_099_2()
		{
			bool flag = false;
			for (int i = 0; i < whoAmI; i++)
			{
				if (Main.projectile[i].active && Main.projectile[i].owner == owner && Main.projectile[i].type == type)
				{
					flag = true;
				}
			}
			if (owner == Main.myPlayer)
			{
				localAI[0] += 1f;
				if (flag)
				{
					localAI[0] += (float)Main.rand.Next(10, 31) * 0.1f;
				}
				float num = localAI[0] / 60f;
				num /= (1f + Main.player[owner].meleeSpeed) / 2f;
				float num2 = ProjectileID.Sets.YoyosLifeTimeMultiplier[type];
				if (num2 != -1f && num > num2)
				{
					ai[0] = -1f;
				}
			}
			if (type == 603 && owner == Main.myPlayer)
			{
				localAI[1] += 1f;
				if (localAI[1] >= 6f)
				{
					float num3 = 400f;
					Vector2 vector = velocity;
					Vector2 vector2 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					vector2.Normalize();
					vector2 *= (float)Main.rand.Next(10, 41) * 0.1f;
					if (Main.rand.Next(3) == 0)
					{
						vector2 *= 2f;
					}
					vector *= 0.25f;
					vector += vector2;
					for (int j = 0; j < 200; j++)
					{
						if (Main.npc[j].CanBeChasedBy(this))
						{
							float num4 = Main.npc[j].position.X + (float)(Main.npc[j].width / 2);
							float num5 = Main.npc[j].position.Y + (float)(Main.npc[j].height / 2);
							float num6 = Math.Abs(position.X + (float)(width / 2) - num4) + Math.Abs(position.Y + (float)(height / 2) - num5);
							if (num6 < num3 && Collision.CanHit(position, width, height, Main.npc[j].position, Main.npc[j].width, Main.npc[j].height))
							{
								num3 = num6;
								vector.X = num4;
								vector.Y = num5;
								vector -= base.Center;
								vector.Normalize();
								vector *= 8f;
							}
						}
					}
					vector *= 0.8f;
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X - vector.X, base.Center.Y - vector.Y, vector.X, vector.Y, 604, damage, knockBack, owner);
					localAI[1] = 0f;
				}
			}
			bool flag2 = false;
			if (type >= 556 && type <= 561)
			{
				flag2 = true;
			}
			if (Main.player[owner].dead)
			{
				Kill();
				return;
			}
			if (!flag2 && !flag)
			{
				Main.player[owner].heldProj = whoAmI;
				Main.player[owner].SetDummyItemTime(2);
				if (position.X + (float)(width / 2) > Main.player[owner].position.X + (float)(Main.player[owner].width / 2))
				{
					Main.player[owner].ChangeDir(1);
					direction = 1;
				}
				else
				{
					Main.player[owner].ChangeDir(-1);
					direction = -1;
				}
			}
			if (velocity.HasNaNs())
			{
				Kill();
			}
			timeLeft = 6;
			float num7 = 10f;
			float num8 = 10f;
			float num9 = 3f;
			float num10 = 200f;
			num10 = ProjectileID.Sets.YoyosMaximumRange[type];
			num8 = ProjectileID.Sets.YoyosTopSpeed[type];
			if (type == 545)
			{
				if (Main.rand.Next(6) == 0)
				{
					int num11 = Dust.NewDust(position, width, height, 6);
					Main.dust[num11].noGravity = true;
				}
			}
			else if (type == 553 && Main.rand.Next(2) == 0)
			{
				int num12 = Dust.NewDust(position, width, height, 6);
				Main.dust[num12].noGravity = true;
				Main.dust[num12].scale = 1.6f;
			}
			if (Main.player[owner].yoyoString)
			{
				num10 = num10 * 1.25f + 30f;
			}
			num10 /= (1f + Main.player[owner].meleeSpeed * 3f) / 4f;
			num8 /= (1f + Main.player[owner].meleeSpeed * 3f) / 4f;
			num7 = 14f - num8 / 2f;
			if (num7 < 1f)
			{
				num7 = 1f;
			}
			num9 = 5f + num8 / 2f;
			if (flag)
			{
				num9 += 20f;
			}
			if (ai[0] >= 0f)
			{
				if (velocity.Length() > num8)
				{
					velocity *= 0.98f;
				}
				bool flag3 = false;
				bool flag4 = false;
				Vector2 vector3 = Main.player[owner].Center - base.Center;
				if (vector3.Length() > num10)
				{
					flag3 = true;
					if ((double)vector3.Length() > (double)num10 * 1.3)
					{
						flag4 = true;
					}
				}
				if (owner == Main.myPlayer)
				{
					if (!Main.player[owner].channel || Main.player[owner].stoned || Main.player[owner].frozen)
					{
						ai[0] = -1f;
						ai[1] = 0f;
						netUpdate = true;
					}
					else
					{
						Vector2 vector4 = Main.ReverseGravitySupport(Main.MouseScreen) + Main.screenPosition;
						float x = vector4.X;
						float y = vector4.Y;
						Vector2 vector5 = new Vector2(x, y) - Main.player[owner].Center;
						if (vector5.Length() > num10)
						{
							vector5.Normalize();
							vector5 *= num10;
							vector5 = Main.player[owner].Center + vector5;
							x = vector5.X;
							y = vector5.Y;
						}
						if (ai[0] != x || ai[1] != y)
						{
							Vector2 vector6 = new Vector2(x, y) - Main.player[owner].Center;
							if (vector6.Length() > num10 - 1f)
							{
								vector6.Normalize();
								vector6 *= num10 - 1f;
								Vector2 vector7 = Main.player[owner].Center + vector6;
								x = vector7.X;
								y = vector7.Y;
							}
							ai[0] = x;
							ai[1] = y;
							netUpdate = true;
						}
					}
				}
				if (flag4 && owner == Main.myPlayer)
				{
					ai[0] = -1f;
					netUpdate = true;
				}
				if (ai[0] >= 0f)
				{
					if (flag3)
					{
						num7 /= 2f;
						num8 *= 2f;
						if (base.Center.X > Main.player[owner].Center.X && velocity.X > 0f)
						{
							velocity.X *= 0.5f;
						}
						if (base.Center.Y > Main.player[owner].Center.Y && velocity.Y > 0f)
						{
							velocity.Y *= 0.5f;
						}
						if (base.Center.X < Main.player[owner].Center.X && velocity.X < 0f)
						{
							velocity.X *= 0.5f;
						}
						if (base.Center.Y < Main.player[owner].Center.Y && velocity.Y < 0f)
						{
							velocity.Y *= 0.5f;
						}
					}
					Vector2 vector8 = new Vector2(ai[0], ai[1]) - base.Center;
					if (flag3)
					{
						num7 = 1f;
					}
					velocity.Length();
					float num13 = vector8.Length();
					if (num13 > num9)
					{
						vector8.Normalize();
						float num14 = Math.Min(num13 / 2f, num8);
						if (flag3)
						{
							num14 = Math.Min(num14, num8 / 2f);
						}
						vector8 *= num14;
						velocity = (velocity * (num7 - 1f) + vector8) / num7;
					}
					else if (flag)
					{
						if ((double)velocity.Length() < (double)num8 * 0.6)
						{
							vector8 = velocity;
							vector8.Normalize();
							vector8 *= num8 * 0.6f;
							velocity = (velocity * (num7 - 1f) + vector8) / num7;
						}
					}
					else
					{
						velocity *= 0.8f;
					}
					if (flag && !flag3 && (double)velocity.Length() < (double)num8 * 0.6)
					{
						velocity.Normalize();
						velocity *= num8 * 0.6f;
					}
				}
			}
			else
			{
				num7 = (int)((double)num7 * 0.8);
				num8 *= 1.5f;
				tileCollide = false;
				Vector2 vector9 = Main.player[owner].Center - base.Center;
				float num15 = vector9.Length();
				if (num15 < num8 + 10f || num15 == 0f || num15 > 2000f)
				{
					Kill();
				}
				else
				{
					vector9.Normalize();
					vector9 *= num8;
					velocity = (velocity * (num7 - 1f) + vector9) / num7;
				}
			}
			rotation += 0.45f;
		}

		private void AI_130_FlameBurstTower()
		{
			float num = 900f;
			float angleRatioMax = 1f;
			Vector2 vector = base.Center;
			int num2 = 664;
			int num3 = 12;
			float num4 = 12f;
			int num5 = 1;
			int num6 = 6;
			int num7 = 4;
			int num8 = 80;
			switch (type)
			{
			case 663:
			{
				Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f));
				Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f));
				vector = base.Bottom + new Vector2(direction * 6, -40f);
				if ((localAI[0] += 1f) >= 300f)
				{
					localAI[0] = 0f;
				}
				Rectangle r3 = new Rectangle((int)position.X + width / 4, (int)position.Y + height - 16, width / 4 * 3, 6);
				if (direction == 1)
				{
					r3.X -= width / 4;
				}
				for (int m = 0; m < 1; m++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Dust dust5 = Dust.NewDustDirect(r3.TopLeft() + new Vector2(-2f, -2f), r3.Width + 4, r3.Height + 4, 270, -direction * 2, -2f, 200, new Color(255, 255, 255, 0));
						dust5.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
						dust5.scale = 0.4f;
						dust5.noGravity = true;
						dust5.noLight = true;
						dust5.velocity = Vector2.Zero;
						dust5.velocity.X = (float)(-direction) * Main.rand.NextFloat() * dust5.fadeIn;
					}
				}
				r3 = new Rectangle((int)base.Center.X, (int)base.Bottom.Y, width / 4, 10);
				if (direction == -1)
				{
					r3.X -= r3.Width;
				}
				r3.X += direction * 4;
				r3.Y -= height - 10;
				for (int n = 0; n < 1; n++)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust6 = Dust.NewDustDirect(r3.TopLeft(), r3.Width, r3.Height, 6);
						dust6.fadeIn = 1f;
						dust6.scale = 1f;
						dust6.noGravity = true;
						dust6.noLight = true;
						dust6.velocity *= 2f;
					}
				}
				break;
			}
			case 665:
			{
				Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
				Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
				num8 = 70;
				num4 += 3f;
				num6 = 8;
				num2 = 666;
				vector = base.Bottom + new Vector2(direction * 6, -44f);
				if ((localAI[0] += 1f) >= 300f)
				{
					localAI[0] = 0f;
				}
				Rectangle r2 = new Rectangle((int)position.X + width / 4, (int)position.Y + height - 16, width / 4 * 2, 6);
				if (direction == 1)
				{
					r2.X -= width / 4;
				}
				for (int k = 0; k < 1; k++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Dust dust3 = Dust.NewDustDirect(r2.TopLeft() + new Vector2(-2f, -2f), r2.Width + 4, r2.Height + 4, 270, -direction * 2, -2f, 200, new Color(255, 255, 255, 0));
						dust3.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
						dust3.scale = 0.4f;
						dust3.noGravity = true;
						dust3.noLight = true;
						dust3.velocity = Vector2.Zero;
						dust3.velocity.X = (float)(-direction) * Main.rand.NextFloat() * dust3.fadeIn;
					}
				}
				r2 = new Rectangle((int)base.Center.X, (int)base.Bottom.Y, width / 4, 10);
				if (direction == -1)
				{
					r2.X -= r2.Width;
				}
				r2.X += direction * 4;
				r2.Y -= height - 10;
				for (int l = 0; l < 2; l++)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust4 = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, 6);
						dust4.fadeIn = 1f;
						dust4.scale = 1f;
						dust4.noGravity = true;
						dust4.noLight = true;
						dust4.velocity *= 2f;
					}
				}
				break;
			}
			case 667:
			{
				Lighting.AddLight(base.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
				Lighting.AddLight(base.Bottom + new Vector2(0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
				num8 = 60;
				num4 += 6f;
				num6 = 8;
				num2 = 668;
				vector = base.Bottom + new Vector2(direction * 6, -46f);
				if ((localAI[0] += 1f) >= 300f)
				{
					localAI[0] = 0f;
				}
				Rectangle r = new Rectangle((int)position.X + width / 4, (int)position.Y + height - 16, width / 4 * 2, 6);
				if (direction == 1)
				{
					r.X -= width / 4;
				}
				for (int i = 0; i < 1; i++)
				{
					if (Main.rand.Next(2) == 0)
					{
						Dust dust = Dust.NewDustDirect(r.TopLeft() + new Vector2(-2f, -2f), r.Width + 4, r.Height + 4, 270, -direction * 2, -2f, 200, new Color(255, 255, 255, 0));
						dust.fadeIn = 0.6f + Main.rand.NextFloat() * 0.6f;
						dust.scale = 0.4f;
						dust.noGravity = true;
						dust.noLight = true;
						dust.velocity = Vector2.Zero;
						dust.velocity.X = (float)(-direction) * Main.rand.NextFloat() * dust.fadeIn;
					}
				}
				r = new Rectangle((int)base.Center.X, (int)base.Bottom.Y, width / 4, 10);
				if (direction == -1)
				{
					r.X -= r.Width;
				}
				r.X += direction * 4;
				r.Y -= height - 10;
				for (int j = 0; j < 3; j++)
				{
					if (Main.rand.Next(5) == 0)
					{
						Dust dust2 = Dust.NewDustDirect(r.TopLeft(), r.Width, r.Height, 6);
						dust2.fadeIn = 1.1f;
						dust2.scale = 1f;
						dust2.noGravity = true;
						dust2.noLight = true;
						dust2.velocity *= 2.4f;
					}
				}
				break;
			}
			}
			if (Main.player[owner].setApprenticeT2)
			{
				angleRatioMax = 0.1f;
				num *= 1.5f;
				num4 *= 1.4f;
			}
			if (ai[0] == 0f)
			{
				direction = (spriteDirection = Main.player[owner].direction);
				ai[0] = 1f;
				ai[1] = 0f;
				netUpdate = true;
			}
			if (ai[0] == 1f)
			{
				frame = 0;
				bool flag = false;
				if (ai[1] > 0f)
				{
					ai[1] -= 1f;
				}
				else
				{
					flag = true;
				}
				if (flag && owner == Main.myPlayer)
				{
					int num9 = AI_130_FlameBurstTower_FindTarget(num, angleRatioMax, vector);
					if (num9 != -1)
					{
						direction = Math.Sign(DirectionTo(Main.npc[num9].Center).X);
						ai[0] = 2f;
						ai[1] = 0f;
						netUpdate = true;
					}
				}
			}
			else if (ai[0] == 2f)
			{
				frame = num5 + (int)(ai[1] / (float)num7);
				if (ai[1] == (float)num3)
				{
					Vector2 vector2 = new Vector2(direction, 0f);
					int num10 = AI_130_FlameBurstTower_FindTarget(num, angleRatioMax, vector, canChangeDirection: false);
					if (num10 != -1)
					{
						vector2 = (Main.npc[num10].Center - vector).SafeNormalize(Vector2.UnitX * direction);
					}
					Vector2 vector3 = vector2 * num4;
					if (owner == Main.myPlayer)
					{
						NewProjectile(GetProjectileSource_FromThis(), vector, vector3, num2, damage, knockBack, owner);
					}
				}
				if ((ai[1] += 1f) >= (float)(num6 * num7))
				{
					ai[0] = 1f;
					ai[1] = num8;
				}
			}
			spriteDirection = direction;
			tileCollide = true;
			velocity.Y += 0.2f;
		}

		private int AI_130_FlameBurstTower_FindTarget(float shot_range, float angleRatioMax, Vector2 shootingSpot, bool canChangeDirection = true)
		{
			int num = -1;
			NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
			{
				for (int i = 0; i < 1; i++)
				{
					if (!ownerMinionAttackTargetNPC.CanBeChasedBy(this))
					{
						continue;
					}
					float num2 = Vector2.Distance(shootingSpot, ownerMinionAttackTargetNPC.Center);
					if (!(num2 > shot_range))
					{
						Vector2 vector = (ownerMinionAttackTargetNPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
						if (!(Math.Abs(vector.X) < Math.Abs(vector.Y) * angleRatioMax) && (canChangeDirection || !((float)direction * vector.X < 0f)) && (num == -1 || num2 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, ownerMinionAttackTargetNPC.Center, 0, 0))
						{
							num = ownerMinionAttackTargetNPC.whoAmI;
						}
					}
				}
				if (num != -1)
				{
					return num;
				}
			}
			for (int j = 0; j < 200; j++)
			{
				NPC nPC = Main.npc[j];
				if (!nPC.CanBeChasedBy(this))
				{
					continue;
				}
				float num3 = Vector2.Distance(shootingSpot, nPC.Center);
				if (!(num3 > shot_range))
				{
					Vector2 vector2 = (nPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
					if (!(Math.Abs(vector2.X) < Math.Abs(vector2.Y) * angleRatioMax) && (canChangeDirection || !((float)direction * vector2.X < 0f)) && (num == -1 || num3 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, nPC.Center, 0, 0))
					{
						num = j;
					}
				}
			}
			return num;
		}

		private int AI_134_Ballista_FindTarget(float shot_range, float deadBottomAngle, Vector2 shootingSpot)
		{
			int num = -1;
			NPC ownerMinionAttackTargetNPC = OwnerMinionAttackTargetNPC;
			if (ownerMinionAttackTargetNPC != null && ownerMinionAttackTargetNPC.CanBeChasedBy(this))
			{
				for (int i = 0; i < 1; i++)
				{
					if (!ownerMinionAttackTargetNPC.CanBeChasedBy(this))
					{
						continue;
					}
					float num2 = Vector2.Distance(shootingSpot, ownerMinionAttackTargetNPC.Center);
					if (!(num2 > shot_range))
					{
						Vector2 vector = (ownerMinionAttackTargetNPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
						if ((!(Math.Abs(vector.X) < Math.Abs(vector.Y) * deadBottomAngle) || !(vector.Y > 0f)) && (num == -1 || num2 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, ownerMinionAttackTargetNPC.Center, 0, 0))
						{
							num = ownerMinionAttackTargetNPC.whoAmI;
						}
					}
				}
				if (num != -1)
				{
					return num;
				}
			}
			for (int j = 0; j < 200; j++)
			{
				NPC nPC = Main.npc[j];
				if (!nPC.CanBeChasedBy(this))
				{
					continue;
				}
				float num3 = Vector2.Distance(shootingSpot, nPC.Center);
				if (!(num3 > shot_range))
				{
					Vector2 vector2 = (nPC.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
					if ((!(Math.Abs(vector2.X) < Math.Abs(vector2.Y) * deadBottomAngle) || !(vector2.Y > 0f)) && (num == -1 || num3 < Vector2.Distance(shootingSpot, Main.npc[num].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, nPC.Center, 0, 0))
					{
						num = j;
					}
				}
			}
			return num;
		}

		private void AI_131_FlameBurstShot()
		{
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			if (type != 664 && type != 666 && type != 668)
			{
				return;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				SoundEngine.PlayTrackedSound(SoundID.DD2_FlameburstTowerShot, base.Center);
			}
			if (alpha > 0)
			{
				alpha -= 25;
				if (alpha < 0)
				{
					alpha = 0;
				}
			}
			int num = 1;
			if (type == 666)
			{
				num = 2;
			}
			if (type == 668)
			{
				num = 3;
			}
			for (int i = 0; i < num; i++)
			{
				if (Main.rand.Next(2) != 0)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 6, velocity.X * 0.2f, velocity.Y * 0.2f, 100, default(Color), 2f);
					dust.noGravity = true;
					dust.velocity *= 0.3f;
					if (Main.rand.Next(1) == 0)
					{
						dust.velocity.Y += (float)Math.Sign(dust.velocity.Y) * 1.2f;
						dust.fadeIn += 0.5f;
					}
				}
			}
			rotation = velocity.ToRotation() + (float)Math.PI / 2f;
		}

		private void AI_134_Ballista()
		{
			//IL_0325: Unknown result type (might be due to invalid IL or missing references)
			float shot_range = 900f;
			float deadBottomAngle = 0.75f;
			Vector2 center = base.Center;
			int num = 680;
			int num2 = 12;
			float num3 = 16f;
			int num4 = 1;
			int num5 = 5;
			int num6 = 5;
			int num7 = 180;
			if (Main.player[owner].setSquireT2)
			{
				num3 = 21f;
			}
			if (Main.player[owner].setSquireT3)
			{
				num7 = 100;
			}
			if (Main.player[owner].ballistaPanic)
			{
				num7 = 60;
			}
			if (Main.player[owner].ballistaPanic && Main.player[owner].setSquireT3)
			{
				num7 = 30;
			}
			num2 = num6;
			if (type == 677)
			{
				center.Y -= 4f;
			}
			if (ai[0] == 0f)
			{
				direction = (spriteDirection = Main.player[owner].direction);
				ai[0] = 1f;
				ai[1] = 0f;
				netUpdate = true;
				if (direction == -1)
				{
					rotation = (float)Math.PI;
				}
			}
			if (ai[0] == 1f)
			{
				frame = 0;
				bool flag = false;
				if (Main.player[owner].ballistaPanic && ai[1] > 60f)
				{
					ai[1] = 60f;
				}
				if (Main.player[owner].ballistaPanic && Main.player[owner].setSquireT3 && ai[1] > 30f)
				{
					ai[1] = 30f;
				}
				if (ai[1] > 0f)
				{
					ai[1] -= 1f;
				}
				else
				{
					flag = true;
				}
				int num8 = AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
				if (num8 != -1)
				{
					Vector2 vector = (vector = (Main.npc[num8].Center - center).SafeNormalize(Vector2.UnitY));
					rotation = rotation.AngleLerp(vector.ToRotation(), 0.08f);
					if (rotation > (float)Math.PI / 2f || rotation < -(float)Math.PI / 2f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					if (flag && owner == Main.myPlayer)
					{
						direction = Math.Sign(vector.X);
						ai[0] = 2f;
						ai[1] = 0f;
						netUpdate = true;
					}
				}
				else
				{
					float targetAngle = 0f;
					if (direction == -1)
					{
						targetAngle = (float)Math.PI;
					}
					rotation = rotation.AngleLerp(targetAngle, 0.05f);
				}
			}
			else if (ai[0] == 2f)
			{
				frame = num4 + (int)(ai[1] / (float)num6);
				if (ai[1] == (float)num2)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_BallistaTowerShot, base.Center);
					Vector2 vector2 = new Vector2(direction, 0f);
					int num9 = AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
					if (num9 != -1)
					{
						vector2 = (Main.npc[num9].Center - center).SafeNormalize(Vector2.UnitX * direction);
					}
					rotation = vector2.ToRotation();
					if (rotation > (float)Math.PI / 2f || rotation < -(float)Math.PI / 2f)
					{
						direction = -1;
					}
					else
					{
						direction = 1;
					}
					Vector2 vector3 = vector2 * num3;
					if (owner == Main.myPlayer)
					{
						NewProjectile(GetProjectileSource_FromThis(), center, vector3, num, damage, knockBack, owner);
					}
				}
				if ((ai[1] += 1f) >= (float)(num5 * num6))
				{
					ai[0] = 1f;
					ai[1] = num7;
				}
			}
			spriteDirection = direction;
			tileCollide = true;
			velocity.Y += 0.2f;
		}

		private void AI_135_OgreStomp()
		{
			float num = 40f;
			if (type == 922)
			{
				num = 30f;
			}
			ai[0] += 1f;
			if (ai[0] > 9f)
			{
				Kill();
				return;
			}
			velocity = Vector2.Zero;
			position = base.Center;
			base.Size = new Vector2(16f, 16f) * MathHelper.Lerp(5f, num, Utils.GetLerpValue(0f, 9f, ai[0]));
			base.Center = position;
			Point point = base.TopLeft.ToTileCoordinates();
			Point point2 = base.BottomRight.ToTileCoordinates();
			int num2 = point.X / 2 + point2.X / 2;
			int num3 = width / 2;
			if ((int)ai[0] % 3 != 0)
			{
				return;
			}
			int num4 = (int)ai[0] / 3;
			for (int i = point.X; i <= point2.X; i++)
			{
				for (int j = point.Y; j <= point2.Y; j++)
				{
					if (Vector2.Distance(base.Center, new Vector2(i * 16, j * 16)) > (float)num3)
					{
						continue;
					}
					Tile tileSafely = Framing.GetTileSafely(i, j);
					if (!tileSafely.active() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type] || Main.tileFrameImportant[tileSafely.type])
					{
						continue;
					}
					Tile tileSafely2 = Framing.GetTileSafely(i, j - 1);
					if (tileSafely2.active() && Main.tileSolid[tileSafely2.type] && !Main.tileSolidTop[tileSafely2.type])
					{
						continue;
					}
					int num5 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely);
					for (int k = 0; k < num5; k++)
					{
						Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
						obj.velocity.Y -= 3f + (float)num4 * 1.5f;
						obj.velocity.Y *= Main.rand.NextFloat();
						obj.velocity.Y *= 0.75f;
						obj.scale += (float)num4 * 0.03f;
					}
					if (num4 >= 2)
					{
						if (type == 922)
						{
							Color newColor = NPC.AI_121_QueenSlime_GetDustColor();
							newColor.A = 150;
							for (int l = 0; l < num5 - 1; l++)
							{
								int num6 = Dust.NewDust(position, 12, 12, 4, 0f, 0f, 50, newColor, 1.5f);
								Main.dust[num6].velocity.Y -= 0.1f + (float)num4 * 0.5f;
								Main.dust[num6].velocity.Y *= Main.rand.NextFloat();
								Main.dust[num6].velocity.X *= Main.rand.NextFloatDirection() * 3f;
								Main.dust[num6].position = new Vector2(i * 16 + Main.rand.Next(16), j * 16 + Main.rand.Next(16));
								if (Main.rand.Next(3) != 0)
								{
									Main.dust[num6].velocity *= 0.5f;
									Main.dust[num6].noGravity = true;
								}
							}
						}
						else
						{
							for (int m = 0; m < num5 - 1; m++)
							{
								Dust obj2 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
								obj2.velocity.Y -= 1f + (float)num4;
								obj2.velocity.Y *= Main.rand.NextFloat();
								obj2.velocity.Y *= 0.75f;
							}
						}
					}
					if (num5 <= 0 || Main.rand.Next(3) == 0)
					{
						continue;
					}
					float num7 = (float)Math.Abs(num2 - i) / (num / 2f);
					if (type == 922)
					{
						Color newColor2 = NPC.AI_121_QueenSlime_GetDustColor();
						newColor2.A = 150;
						for (int n = 0; n < 3; n++)
						{
							int num8 = Dust.NewDust(position, width, height, 31, 0f, 0f, 50, newColor2, 2f - (float)num4 * 0.15f + num7 * 0.5f);
							Main.dust[num8].velocity.Y -= 0.1f + (float)num4 * 0.5f + num7 * (float)num4 * 1f;
							Main.dust[num8].velocity.Y *= Main.rand.NextFloat();
							Main.dust[num8].velocity.X *= Main.rand.NextFloatDirection() * 3f;
							Main.dust[num8].position = new Vector2(i * 16 + 20, j * 16 + 20);
							if (Main.rand.Next(3) != 0)
							{
								Main.dust[num8].velocity *= 0.5f;
								Main.dust[num8].noGravity = true;
							}
						}
					}
					else
					{
						Gore gore = Gore.NewGoreDirect(position, Vector2.Zero, 61 + Main.rand.Next(3), 1f - (float)num4 * 0.15f + num7 * 0.5f);
						gore.velocity.Y -= 0.1f + (float)num4 * 0.5f + num7 * (float)num4 * 1f;
						gore.velocity.Y *= Main.rand.NextFloat();
						gore.position = new Vector2(i * 16 + 20, j * 16 + 20);
					}
				}
			}
		}

		private void AI_136_BetsyBreath()
		{
			if (ai[1] < 0f || ai[1] > 200f)
			{
				Kill();
				return;
			}
			NPC nPC = Main.npc[(int)ai[1]];
			float num = -8f;
			Vector2 vector2 = (base.Center = nPC.Center + new Vector2((110f + num) * (float)nPC.spriteDirection, 30f).RotatedBy(nPC.rotation));
			rotation = nPC.DirectionTo(base.Center).ToRotation();
			DelegateMethods.v3_1 = new Vector3(1.2f, 1f, 0.3f);
			float num2 = ai[0] / 40f;
			if (num2 > 1f)
			{
				num2 = 1f;
			}
			float num3 = (ai[0] - 38f) / 40f;
			if (num3 < 0f)
			{
				num3 = 0f;
			}
			Utils.PlotTileLine(base.Center + rotation.ToRotationVector2() * 400f * num3, base.Center + rotation.ToRotationVector2() * 400f * num2, 16f, DelegateMethods.CastLight);
			Utils.PlotTileLine(base.Center + rotation.ToRotationVector2().RotatedBy(0.19634954631328583) * 400f * num3, base.Center + rotation.ToRotationVector2().RotatedBy(0.19634954631328583) * 400f * num2, 16f, DelegateMethods.CastLight);
			Utils.PlotTileLine(base.Center + rotation.ToRotationVector2().RotatedBy(-0.19634954631328583) * 400f * num3, base.Center + rotation.ToRotationVector2().RotatedBy(-0.19634954631328583) * 400f * num2, 16f, DelegateMethods.CastLight);
			if (num3 == 0f && num2 > 0.1f)
			{
				for (int i = 0; i < 3; i++)
				{
					Dust dust = Dust.NewDustDirect(position, width, height, 6);
					dust.fadeIn = 1.5f;
					dust.velocity = rotation.ToRotationVector2().RotatedBy(Main.rand.NextFloatDirection() * ((float)Math.PI / 12f)) * (0.5f + Main.rand.NextFloat() * 2.5f) * 15f;
					dust.velocity += nPC.velocity * 2f;
					dust.noLight = true;
					dust.noGravity = true;
					dust.alpha = 200;
				}
			}
			if (Main.rand.Next(5) == 0 && ai[0] >= 15f)
			{
				Gore gore = Gore.NewGoreDirect(base.Center + rotation.ToRotationVector2() * 300f - Utils.RandomVector2(Main.rand, -20f, 20f), Vector2.Zero, 61 + Main.rand.Next(3), 0.5f);
				gore.velocity *= 0.3f;
				gore.velocity += rotation.ToRotationVector2() * 4f;
			}
			for (int j = 0; j < 1; j++)
			{
				Dust dust2 = Dust.NewDustDirect(position, width, height, 31);
				dust2.fadeIn = 1.5f;
				dust2.scale = 0.4f;
				dust2.velocity = rotation.ToRotationVector2().RotatedBy(Main.rand.NextFloatDirection() * ((float)Math.PI / 12f)) * (0.5f + Main.rand.NextFloat() * 2.5f) * 15f;
				dust2.velocity += nPC.velocity * 2f;
				dust2.velocity *= 0.3f;
				dust2.noLight = true;
				dust2.noGravity = true;
				float num4 = Main.rand.NextFloat();
				dust2.position = Vector2.Lerp(base.Center + rotation.ToRotationVector2() * 400f * num3, base.Center + rotation.ToRotationVector2() * 400f * num2, num4);
				dust2.position += rotation.ToRotationVector2().RotatedBy(1.5707963705062866) * (20f + 100f * (num4 - 0.5f));
			}
			frameCounter++;
			ai[0] += 1f;
			if (ai[0] >= 78f)
			{
				Kill();
			}
		}

		private void AI_137_LightningAura()
		{
			//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
			int num = 10;
			int num2 = 999;
			int num3 = 30;
			int num4 = 40;
			int num5 = 4;
			knockBack = 0f;
			if (Main.player[owner].setMonkT2)
			{
				num3 -= 5;
			}
			if (Main.player[owner].setMonkT3)
			{
				num = 14;
				num5 = 8;
			}
			ai[0] += 1f;
			if (ai[0] >= (float)num3)
			{
				ai[0] = 0f;
			}
			if (ai[0] == 0f)
			{
				bool flag = false;
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (nPC.CanBeChasedBy(this) && nPC.Hitbox.Distance(base.Center) < (float)(width / 2) && Colliding(base.Hitbox, nPC.Hitbox))
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_LightningAuraZap, base.Center);
				}
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
				velocity = Vector2.Zero;
				Point origin = base.Center.ToTileCoordinates();
				bool flag2 = true;
				if (!WorldUtils.Find(origin, Searches.Chain(new Searches.Down(500), _cachedConditions_notNull, _cachedConditions_solid), out var result))
				{
					flag2 = false;
					position.Y += 16f;
					return;
				}
				if (!WorldUtils.Find(new Point(result.X, result.Y - 1), Searches.Chain(new Searches.Up(num), _cachedConditions_notNull, _cachedConditions_solid), out var result2))
				{
					result2 = new Point(origin.X, origin.Y - num - 1);
				}
				int num6 = 0;
				if (flag2 && Main.tile[result.X, result.Y] != null && Main.tile[result.X, result.Y].blockType() == 1)
				{
					num6 += 8;
				}
				Vector2 center = result.ToWorldCoordinates(8f, num6);
				Vector2 vector = result2.ToWorldCoordinates(8f, 0f);
				base.Size = new Vector2(1f, center.Y - vector.Y);
				if (height > num * 16)
				{
					height = num * 16;
				}
				if (height < num5 * 16)
				{
					height = num5 * 16;
				}
				height *= 2;
				width = (int)((float)height * 1f);
				if (width > num2)
				{
					width = num2;
				}
				base.Center = center;
			}
			if (++frameCounter >= 8)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			DelegateMethods.v3_1 = new Vector3(0.2f, 0.7f, 1f);
			Utils.PlotTileLine(base.Center + Vector2.UnitX * -40f, base.Center + Vector2.UnitX * 40f, 80f, DelegateMethods.CastLightOpen);
			Vector2 vector2 = new Vector2(base.Top.X, position.Y + (float)num4);
			for (int j = 0; j < 4; j++)
			{
				if (Main.rand.Next(6) != 0)
				{
					continue;
				}
				Vector2 vector3 = Main.rand.NextVector2Unit();
				if (!(Math.Abs(vector3.X) < 0.12f))
				{
					Vector2 targetPosition = base.Center + vector3 * new Vector2((height - num4) / 2);
					if (!WorldGen.SolidTile((int)targetPosition.X / 16, (int)targetPosition.Y / 16) && AI_137_CanHit(targetPosition))
					{
						Dust dust = Dust.NewDustDirect(targetPosition, 0, 0, 226, 0f, 0f, 100);
						dust.position = targetPosition;
						dust.velocity = (vector2 - dust.position).SafeNormalize(Vector2.Zero);
						dust.scale = 0.7f;
						dust.fadeIn = 1f;
						dust.noGravity = true;
						dust.noLight = true;
					}
				}
			}
			for (int k = 0; k < 0; k++)
			{
				if (Main.rand.Next(10) != 0)
				{
					continue;
				}
				Vector2 vector4 = Main.rand.NextVector2Unit();
				if (!(Math.Abs(vector4.X) < 0.12f))
				{
					Vector2 targetPosition2 = base.Center + vector4 * new Vector2((height - num4) / 2) * Main.rand.NextFloat();
					if (!WorldGen.SolidTile((int)targetPosition2.X / 16, (int)targetPosition2.Y / 16) && AI_137_CanHit(targetPosition2))
					{
						Dust dust2 = Dust.NewDustDirect(targetPosition2, 0, 0, 226, 0f, 0f, 100);
						dust2.velocity *= 0.6f;
						dust2.velocity += Vector2.UnitY * -2f;
						dust2.noGravity = true;
						dust2.noLight = true;
					}
				}
			}
			for (int l = 0; l < 4; l++)
			{
				if (Main.rand.Next(10) == 0)
				{
					Dust dust3 = Dust.NewDustDirect(vector2 - new Vector2(8f, 0f), 16, height / 2 - 40, 226, 0f, 0f, 100);
					dust3.velocity *= 0.6f;
					dust3.velocity += Vector2.UnitY * -2f;
					dust3.scale = 0.7f;
					dust3.noGravity = true;
					dust3.noLight = true;
				}
			}
			tileCollide = true;
			velocity.Y += 0.2f;
		}

		private void AI_138_ExplosiveTrap()
		{
			//IL_0190: Unknown result type (might be due to invalid IL or missing references)
			spriteDirection = (direction = 1);
			int num = 90;
			int num2 = 694;
			int num3 = 48;
			if (Main.player[owner].setHuntressT2)
			{
				num = 60;
			}
			if (Main.player[owner].setHuntressT3)
			{
				num = 30;
			}
			switch (type)
			{
			case 692:
				num2 = 695;
				break;
			case 693:
				num2 = 696;
				break;
			}
			Lighting.AddLight(base.Center, 0.6f, 0.5f, 0.3f);
			if (++frameCounter >= 12)
			{
				frameCounter = 0;
				if (++frame >= Main.projFrames[type])
				{
					frame = 0;
				}
			}
			if (localAI[0] > 0f)
			{
				localAI[0] -= 1f;
			}
			if (localAI[0] <= 0f && owner == Main.myPlayer)
			{
				localAI[0] = 3f;
				bool flag = false;
				Rectangle rectangle = Utils.CenteredRectangle(base.Center + new Vector2(0f, -num3), new Vector2(num3 * 3));
				for (int i = 0; i < 200; i++)
				{
					NPC nPC = Main.npc[i];
					if (nPC.CanBeChasedBy(this) && rectangle.Intersects(nPC.Hitbox))
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					SoundEngine.PlayTrackedSound(SoundID.DD2_ExplosiveTrapExplode);
					localAI[0] = num;
					NewProjectile(GetProjectileSource_FromThis(), base.Center + new Vector2(0f, -num3), Vector2.Zero, num2, damage, knockBack, owner);
				}
			}
			tileCollide = true;
			velocity.Y += 0.2f;
		}

		private void AI_139_ExplosiveTrapExplosion()
		{
			int num = Main.projFrames[type];
			int num2 = 3;
			alpha -= 25;
			if (alpha < 0)
			{
				alpha = 0;
			}
			if (localAI[0] == 0f)
			{
				localAI[0] = 1f;
			}
			if (++frameCounter >= num2)
			{
				frameCounter = 0;
				if (++frame >= num)
				{
					Kill();
					return;
				}
			}
			DelegateMethods.v3_1 = new Vector3(1.3f, 0.9f, 0.2f);
			Utils.PlotTileLine(base.Top, base.Bottom, 2f, DelegateMethods.CastLightOpen);
		}

		private void AI_140_MonkStaffT1()
		{
			//IL_0500: Unknown result type (might be due to invalid IL or missing references)
			//IL_0513: Unknown result type (might be due to invalid IL or missing references)
			float num = 50f;
			float num2 = 2f;
			float num3 = 20f;
			Player player = Main.player[owner];
			float num4 = -(float)Math.PI / 4f;
			Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
			Vector2 vector2 = Vector2.Zero;
			if (player.dead)
			{
				Kill();
				return;
			}
			if (type == 697)
			{
				int num5 = damage * 3;
				int num6 = Math.Sign(velocity.X);
				velocity = new Vector2(num6, 0f);
				if (ai[0] == 0f)
				{
					rotation = new Vector2(num6, 0f - player.gravDir).ToRotation() + num4 + (float)Math.PI;
					if (velocity.X < 0f)
					{
						rotation -= (float)Math.PI / 2f;
					}
				}
				alpha -= 128;
				if (alpha < 0)
				{
					alpha = 0;
				}
				float num7 = ai[0] / num;
				float num8 = 1f;
				ai[0] += num8;
				rotation += (float)Math.PI * 2f * num2 / num * (float)num6;
				bool flag = ai[0] == (float)(int)(num / 2f);
				if (ai[0] >= num || (flag && !player.controlUseItem))
				{
					Kill();
					player.reuseDelay = 10;
				}
				else if (flag)
				{
					Vector2 mouseWorld = Main.MouseWorld;
					int num9 = ((player.DirectionTo(mouseWorld).X > 0f) ? 1 : (-1));
					if ((float)num9 != velocity.X)
					{
						player.ChangeDir(num9);
						velocity = new Vector2(num9, 0f);
						netUpdate = true;
						rotation -= (float)Math.PI;
					}
				}
				float num10 = rotation - (float)Math.PI / 4f * (float)num6;
				vector2 = (num10 + ((num6 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * (ai[0] / num) * num3;
				Vector2 vector3 = base.Center + (num10 + ((num6 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * 30f;
				if (Main.rand.Next(2) == 0)
				{
					Dust dust = Dust.NewDustDirect(vector3 - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150);
					dust.velocity = DirectionTo(dust.position) * 0.1f + dust.velocity * 0.1f;
				}
				if (num7 >= 0.75f)
				{
					Dust dust2 = Dust.NewDustDirect(vector3 - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50);
					dust2.velocity = DirectionTo(dust2.position) * 0.1f + dust2.velocity * 0.1f;
					dust2.noGravity = true;
					dust2.color = new Color(20, 255, 100, 160);
				}
				if (ai[0] >= num - 8f && ai[0] < num - 2f)
				{
					for (int i = 0; i < 5; i++)
					{
						Dust dust3 = Dust.NewDustDirect(vector3 - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50);
						dust3.velocity *= 1.2f;
						dust3.noGravity = true;
						dust3.scale += 0.1f;
						dust3.color = new Color(20, 255, 100, 160);
					}
				}
				if (ai[0] == num - 3f && owner == Main.myPlayer)
				{
					if (localAI[1] == 1f || WorldUtils.Find(vector3.ToTileCoordinates(), Searches.Chain(new Searches.Down(4), _cachedConditions_notNull, _cachedConditions_solid), out var _))
					{
						NewProjectile(GetProjectileSource_FromThis(), vector3 + new Vector2(num6 * 20, -60f), Vector2.Zero, 698, num5, 0f, owner);
						SoundEngine.PlayTrackedSound(SoundID.DD2_MonkStaffGroundImpact, base.Center);
					}
					else
					{
						SoundEngine.PlayTrackedSound(SoundID.DD2_MonkStaffGroundMiss, base.Center);
					}
				}
			}
			if (type == 707)
			{
				Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
				int num11 = Math.Sign(velocity.X);
				velocity = new Vector2(num11, 0f);
				if (ai[0] == 0f)
				{
					rotation = new Vector2(num11, 0f - player.gravDir).ToRotation() + num4 + (float)Math.PI;
					if (velocity.X < 0f)
					{
						rotation -= (float)Math.PI / 2f;
					}
				}
				alpha -= 128;
				if (alpha < 0)
				{
					alpha = 0;
				}
				_ = ai[0] / num;
				float num12 = 1f;
				ai[0] += num12;
				rotation += (float)Math.PI * 2f * num2 / num * (float)num11;
				bool flag2 = ai[0] == (float)(int)(num / 2f);
				if (ai[0] >= num || (flag2 && !player.controlUseItem))
				{
					Kill();
					player.reuseDelay = 2;
				}
				else if (flag2)
				{
					Vector2 mouseWorld2 = Main.MouseWorld;
					int num13 = ((player.DirectionTo(mouseWorld2).X > 0f) ? 1 : (-1));
					if ((float)num13 != velocity.X)
					{
						player.ChangeDir(num13);
						velocity = new Vector2(num13, 0f);
						netUpdate = true;
						rotation -= (float)Math.PI;
					}
				}
				if ((ai[0] == num12 || (ai[0] == (float)(int)(num / 2f) && active)) && owner == Main.myPlayer)
				{
					Vector2 mouseWorld3 = Main.MouseWorld;
					_ = player.DirectionTo(mouseWorld3) * 0f;
				}
				float num14 = rotation - (float)Math.PI / 4f * (float)num11;
				vector2 = (num14 + ((num11 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * (ai[0] / num) * num3;
				Vector2 vector4 = base.Center + (num14 + ((num11 == -1) ? ((float)Math.PI) : 0f)).ToRotationVector2() * 30f;
				Vector2 vector5 = num14.ToRotationVector2();
				Vector2 vector6 = vector5.RotatedBy((float)Math.PI / 2f * (float)spriteDirection);
				if (Main.rand.Next(2) == 0)
				{
					Dust dust4 = Dust.NewDustDirect(vector4 - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150);
					dust4.velocity = DirectionTo(dust4.position) * 0.1f + dust4.velocity * 0.1f;
				}
				for (int j = 0; j < 4; j++)
				{
					float num15 = 1f;
					float num16 = 1f;
					switch (j)
					{
					case 1:
						num16 = -1f;
						break;
					case 2:
						num16 = 1.25f;
						num15 = 0.5f;
						break;
					case 3:
						num16 = -1.25f;
						num15 = 0.5f;
						break;
					}
					if (Main.rand.Next(6) != 0)
					{
						Dust dust5 = Dust.NewDustDirect(position, 0, 0, 226, 0f, 0f, 100);
						dust5.position = base.Center + vector5 * (60f + Main.rand.NextFloat() * 20f) * num16;
						dust5.velocity = vector6 * (4f + 4f * Main.rand.NextFloat()) * num16 * num15;
						dust5.noGravity = true;
						dust5.noLight = true;
						dust5.scale = 0.5f;
						dust5.customData = this;
						if (Main.rand.Next(4) == 0)
						{
							dust5.noGravity = false;
						}
					}
				}
			}
			position = vector - base.Size / 2f;
			position += vector2;
			spriteDirection = direction;
			timeLeft = 2;
			player.ChangeDir(direction);
			player.heldProj = whoAmI;
			player.SetDummyItemTime(2);
			player.itemRotation = MathHelper.WrapAngle(rotation);
		}

		private void AI_141_MonkStaffT1Explosion()
		{
			Point scanAreaStart = base.TopLeft.ToTileCoordinates();
			Point scanAreaEnd = base.BottomRight.ToTileCoordinates();
			_ = scanAreaStart.X / 2;
			_ = scanAreaEnd.X / 2;
			int explosionRange = width;
			ai[0] += 1f;
			if (ai[0] > 20f)
			{
				Kill();
			}
			else if (ai[0] == 1f)
			{
				CreateImpactExplosion(6, base.Bottom, ref scanAreaStart, ref scanAreaEnd, explosionRange, out var causedShockwaves);
				CreateImpactExplosion2_SleepyOctopod(base.Bottom, causedShockwaves);
			}
		}

		private void CreateImpactExplosion(int dustAmountMultiplier, Vector2 explosionOrigin, ref Point scanAreaStart, ref Point scanAreaEnd, int explosionRange, out bool causedShockwaves)
		{
			causedShockwaves = false;
			int num = 4;
			for (int i = scanAreaStart.X; i <= scanAreaEnd.X; i++)
			{
				for (int j = scanAreaStart.Y; j <= scanAreaEnd.Y; j++)
				{
					if (Vector2.Distance(explosionOrigin, new Vector2(i * 16, j * 16)) > (float)explosionRange)
					{
						continue;
					}
					Tile tileSafely = Framing.GetTileSafely(i, j);
					if (!tileSafely.active() || !Main.tileSolid[tileSafely.type] || Main.tileSolidTop[tileSafely.type] || Main.tileFrameImportant[tileSafely.type])
					{
						continue;
					}
					Tile tileSafely2 = Framing.GetTileSafely(i, j - 1);
					if (tileSafely2.active() && Main.tileSolid[tileSafely2.type] && !Main.tileSolidTop[tileSafely2.type])
					{
						continue;
					}
					int num2 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely) * dustAmountMultiplier;
					for (int k = 0; k < num2; k++)
					{
						Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
						obj.velocity.Y -= 3f + (float)num * 1.5f;
						obj.velocity.Y *= Main.rand.NextFloat();
						obj.scale += (float)num * 0.03f;
					}
					if (num >= 2)
					{
						for (int l = 0; l < num2 - 1; l++)
						{
							Dust obj2 = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
							obj2.velocity.Y -= 1f + (float)num;
							obj2.velocity.Y *= Main.rand.NextFloat();
						}
					}
					if (num2 > 0)
					{
						causedShockwaves = true;
					}
				}
			}
		}

		private void CreateImpactExplosion2_SleepyOctopod(Vector2 explosionOrigin, bool causedShockwaves)
		{
			Vector2 spinningpoint = new Vector2(7f, 0f);
			Vector2 vector = new Vector2(1f, 0.7f);
			Color color = new Color(20, 255, 100, 200);
			for (float num = 0f; num < 25f; num += 1f)
			{
				Vector2 vector2 = spinningpoint.RotatedBy(num * ((float)Math.PI * 2f) / 25f) * vector;
				Dust dust = Dust.NewDustDirect(position, width, height, 55);
				dust.alpha = 0;
				if (!causedShockwaves)
				{
					dust.alpha = 50;
				}
				dust.color = color;
				dust.position = explosionOrigin + vector2;
				dust.velocity.Y -= 3f;
				dust.velocity.X *= 0.5f;
				dust.fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
				dust.noLight = true;
			}
			if (!causedShockwaves)
			{
				for (float num2 = 0f; num2 < 25f; num2 += 1f)
				{
					Vector2 vector3 = spinningpoint.RotatedBy(num2 * ((float)Math.PI * 2f) / 25f) * vector;
					Dust dust2 = Dust.NewDustDirect(position, width, height, 55);
					dust2.alpha = 100;
					dust2.color = color;
					dust2.position = explosionOrigin + vector3;
					dust2.velocity.Y -= 5f;
					dust2.velocity.X *= 0.8f;
					dust2.fadeIn = 0.5f + Main.rand.NextFloat() * 0.5f;
					dust2.noLight = true;
				}
			}
		}

		private void CreateImpactExplosion2_FlailTileCollision(Vector2 explosionOrigin, bool causedShockwaves, Vector2 velocityBeforeCollision)
		{
			Vector2 spinningpoint = new Vector2(7f, 0f);
			Vector2 vector = new Vector2(1f, 0.7f);
			Color color = Color.White * 0.5f;
			Vector2 vector2 = velocityBeforeCollision.SafeNormalize(Vector2.Zero);
			for (float num = 0f; num < 8f; num += 1f)
			{
				Vector2 vector3 = spinningpoint.RotatedBy(num * ((float)Math.PI * 2f) / 8f) * vector;
				Dust dust = Dust.NewDustDirect(position, width, height, 31);
				dust.alpha = 0;
				if (!causedShockwaves)
				{
					dust.alpha = 50;
				}
				dust.color = color;
				dust.position = explosionOrigin + vector3;
				dust.velocity.Y -= 0.8f;
				dust.velocity.X *= 0.8f;
				dust.fadeIn = 0.3f + Main.rand.NextFloat() * 0.4f;
				dust.scale = 0.4f;
				dust.noLight = true;
				dust.velocity += vector2 * 2f;
			}
			if (!causedShockwaves)
			{
				for (float num2 = 0f; num2 < 8f; num2 += 1f)
				{
					Vector2 vector4 = spinningpoint.RotatedBy(num2 * ((float)Math.PI * 2f) / 8f) * vector;
					Dust dust2 = Dust.NewDustDirect(position, width, height, 31);
					dust2.alpha = 100;
					dust2.color = color;
					dust2.position = explosionOrigin + vector4;
					dust2.velocity.Y -= 1f;
					dust2.velocity.X *= 0.4f;
					dust2.fadeIn = 0.3f + Main.rand.NextFloat() * 0.4f;
					dust2.scale = 0.4f;
					dust2.noLight = true;
					dust2.velocity += vector2 * 1.5f;
				}
			}
		}

		private void AI_142_MonkStaffT2And3()
		{
			Player player = Main.player[owner];
			Vector2 vector = player.RotatedRelativePoint(player.MountedCenter);
			direction = player.direction;
			player.heldProj = whoAmI;
			base.Center = vector;
			if (player.dead)
			{
				Kill();
				return;
			}
			if (!player.frozen)
			{
				if (type == 699)
				{
					spriteDirection = (direction = player.direction);
					Vector2 vector2 = vector;
					alpha -= 127;
					if (alpha < 0)
					{
						alpha = 0;
					}
					if (localAI[0] > 0f)
					{
						localAI[0] -= 1f;
					}
					float num = (float)player.itemAnimation / (float)player.itemAnimationMax;
					float num2 = 1f - num;
					float num3 = velocity.ToRotation();
					float num4 = velocity.Length();
					float num5 = 22f;
					Vector2 spinningpoint = new Vector2(1f, 0f).RotatedBy((float)Math.PI + num2 * ((float)Math.PI * 2f)) * new Vector2(num4, ai[0]);
					position += spinningpoint.RotatedBy(num3) + new Vector2(num4 + num5, 0f).RotatedBy(num3);
					Vector2 target = vector2 + spinningpoint.RotatedBy(num3) + new Vector2(num4 + num5 + 40f, 0f).RotatedBy(num3);
					rotation = vector2.AngleTo(target) + (float)Math.PI / 4f * (float)player.direction;
					if (spriteDirection == -1)
					{
						rotation += (float)Math.PI;
					}
					vector2.DirectionTo(base.Center);
					Vector2 vector3 = vector2.DirectionTo(target);
					Vector2 vector4 = velocity.SafeNormalize(Vector2.UnitY);
					float num6 = 2f;
					for (int i = 0; (float)i < num6; i++)
					{
						Dust dust = Dust.NewDustDirect(base.Center, 14, 14, 228, 0f, 0f, 110);
						dust.velocity = vector2.DirectionTo(dust.position) * 2f;
						dust.position = base.Center + vector4.RotatedBy(num2 * ((float)Math.PI * 2f) * 2f + (float)i / num6 * ((float)Math.PI * 2f)) * 10f;
						dust.scale = 1f + 0.6f * Main.rand.NextFloat();
						dust.velocity += vector4 * 3f;
						dust.noGravity = true;
					}
					for (int j = 0; j < 1; j++)
					{
						if (Main.rand.Next(3) == 0)
						{
							Dust dust2 = Dust.NewDustDirect(base.Center, 20, 20, 228, 0f, 0f, 110);
							dust2.velocity = vector2.DirectionTo(dust2.position) * 2f;
							dust2.position = base.Center + vector3 * -110f;
							dust2.scale = 0.45f + 0.4f * Main.rand.NextFloat();
							dust2.fadeIn = 0.7f + 0.4f * Main.rand.NextFloat();
							dust2.noGravity = true;
							dust2.noLight = true;
						}
					}
				}
				else if (type == 708)
				{
					Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
					spriteDirection = (direction = player.direction);
					alpha -= 127;
					if (alpha < 0)
					{
						alpha = 0;
					}
					float num7 = (float)player.itemAnimation / (float)player.itemAnimationMax;
					float num8 = 1f - num7;
					float num9 = velocity.ToRotation();
					float num10 = velocity.Length();
					float num11 = 22f;
					Vector2 spinningpoint2 = new Vector2(1f, 0f).RotatedBy((float)Math.PI + num8 * ((float)Math.PI * 2f)) * new Vector2(num10, ai[0]);
					position += spinningpoint2.RotatedBy(num9) + new Vector2(num10 + num11, 0f).RotatedBy(num9);
					Vector2 vector5 = vector + spinningpoint2.RotatedBy(num9) + new Vector2(num10 + num11 + 40f, 0f).RotatedBy(num9);
					rotation = (vector5 - vector).SafeNormalize(Vector2.UnitX).ToRotation() + (float)Math.PI / 4f * (float)player.direction;
					if (spriteDirection == -1)
					{
						rotation += (float)Math.PI;
					}
					(base.Center - vector).SafeNormalize(Vector2.Zero);
					(vector5 - vector).SafeNormalize(Vector2.Zero);
					Vector2 vector6 = velocity.SafeNormalize(Vector2.UnitY);
					if ((player.itemAnimation == 2 || player.itemAnimation == 6 || player.itemAnimation == 10) && owner == Main.myPlayer)
					{
						Vector2 vector7 = vector6 + Main.rand.NextVector2Square(-0.2f, 0.2f);
						vector7 *= 12f;
						switch (player.itemAnimation)
						{
						case 2:
							vector7 = vector6.RotatedBy(0.38397246599197388);
							break;
						case 6:
							vector7 = vector6.RotatedBy(-0.38397246599197388);
							break;
						case 10:
							vector7 = vector6.RotatedBy(0.0);
							break;
						}
						vector7 *= 10f + (float)Main.rand.Next(4);
						NewProjectile(GetProjectileSource_FromThis(), base.Center, vector7, 709, damage, 0f, owner);
					}
					for (int k = 0; k < 3; k += 2)
					{
						float num12 = 1f;
						float num13 = 1f;
						switch (k)
						{
						case 1:
							num13 = -1f;
							break;
						case 2:
							num13 = 1.25f;
							num12 = 0.5f;
							break;
						case 3:
							num13 = -1.25f;
							num12 = 0.5f;
							break;
						}
						if (Main.rand.Next(6) != 0)
						{
							num13 *= 1.2f;
							Dust dust3 = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 100);
							dust3.velocity = vector6 * (4f + 4f * Main.rand.NextFloat()) * num13 * num12;
							dust3.noGravity = true;
							dust3.noLight = true;
							dust3.scale = 0.75f;
							dust3.fadeIn = 0.8f;
							dust3.customData = this;
							if (Main.rand.Next(3) == 0)
							{
								dust3.noGravity = false;
								dust3.fadeIn = 0f;
							}
						}
					}
				}
			}
			if (player.itemAnimation == 2)
			{
				Kill();
				player.reuseDelay = 2;
			}
		}

		private void AI_143_MonkStaffT2Ghast()
		{
			//IL_0021: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			SlotId val;
			if (ai[0] == 0f)
			{
				float[] array = localAI;
				val = SoundEngine.PlayTrackedSound(SoundID.DD2_GhastlyGlaiveImpactGhost, base.Center);
				array[1] = ((SlotId)(val)).ToFloat();
			}
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
			if (activeSound == null)
			{
				float[] array2 = localAI;
				val = SlotId.Invalid;
				array2[1] = ((SlotId)(val)).ToFloat();
			}
			else
			{
				activeSound.Position = base.Center;
			}
			ai[0] += 1f;
			if (ai[0] > 50f)
			{
				alpha += 25;
				if (alpha > 255)
				{
					alpha = 255;
				}
			}
			else
			{
				alpha -= 25;
				if (alpha < 100)
				{
					alpha = 100;
				}
			}
			velocity *= 0.98f;
			if (++frameCounter >= 5)
			{
				frameCounter = 0;
				if (++frame >= 4)
				{
					frame = 0;
				}
			}
			if (ai[0] >= 60f)
			{
				Kill();
			}
			direction = (spriteDirection = ((velocity.X > 0f) ? 1 : (-1)));
			rotation = velocity.ToRotation();
			if (spriteDirection == -1)
			{
				rotation += (float)Math.PI;
			}
			if (ai[0] >= 10f && ai[0] < 34f)
			{
				Vector2 vector = velocity.SafeNormalize(Vector2.UnitY);
				float num = ai[0] / 60f;
				float num2 = 2f;
				for (int i = 0; (float)i < num2; i++)
				{
					Dust dust = Dust.NewDustDirect(base.Center, 14, 14, 228, 0f, 0f, 110);
					dust.velocity = vector * 2f;
					dust.position = base.Center + vector.RotatedBy(num * ((float)Math.PI * 2f) * 2f + (float)i / num2 * ((float)Math.PI * 2f)) * 7f;
					dust.scale = 1f + 0.6f * Main.rand.NextFloat();
					dust.velocity += vector * 3f;
					dust.noGravity = true;
				}
			}
		}

		private void AI_144_DD2Pet()
		{
			Player player = Main.player[owner];
			float num = 4f;
			int num2 = 6;
			int num3 = 4;
			int num4 = Main.projFrames[type];
			int num5 = 0;
			float num6 = 0.08f;
			bool flag = false;
			float num7 = 0.1f;
			Vector2 vector = new Vector2(player.direction * 30, -20f);
			if (player.dead)
			{
				Kill();
				return;
			}
			bool flag2 = true;
			switch (type)
			{
			case 702:
			{
				if (player.petFlagDD2Ghost)
				{
					timeLeft = 2;
				}
				vector.Y += (float)Math.Cos(localAI[0] * ((float)Math.PI / 60f)) * 2f;
				num3 = 4;
				num2 = 10;
				flag2 = false;
				num = 6f;
				Vector2 vector3 = new Vector2((spriteDirection == -1) ? (-6) : (-2), -26f).RotatedBy(rotation);
				if (Main.rand.Next(24) == 0)
				{
					Dust dust2 = Dust.NewDustDirect(base.Center + vector3, 4, 4, 135, 0f, 0f, 100);
					if (Main.rand.Next(3) != 0)
					{
						dust2.noGravity = true;
						dust2.velocity.Y -= 3f;
						dust2.noLight = true;
					}
					else if (Main.rand.Next(2) != 0)
					{
						dust2.noLight = true;
					}
					dust2.velocity *= 0.5f;
					dust2.velocity.Y -= 0.9f;
					dust2.scale += 0.1f + Main.rand.NextFloat() * 0.6f;
				}
				DelegateMethods.v3_1 = new Vector3(0.3f, 0.5f, 1f);
				Utils.PlotTileLine(base.Center, base.Center + velocity * 6f, 20f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(base.Left, base.Right, 20f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(player.Center, player.Center + player.velocity * 6f, 40f, DelegateMethods.CastLightOpen);
				Utils.PlotTileLine(player.Left, player.Right, 40f, DelegateMethods.CastLightOpen);
				break;
			}
			case 703:
				if (player.petFlagDD2Gato)
				{
					timeLeft = 2;
				}
				vector.Y += (float)Math.Cos(localAI[0] * ((float)Math.PI / 30f)) * 2f;
				num2 = 4;
				num3 = 2;
				num = 3f;
				num4 = 4;
				break;
			case 701:
				if (player.petFlagDD2Dragon)
				{
					timeLeft = 2;
				}
				break;
			case 764:
			{
				num7 = 0.025f;
				num6 = 0.04f;
				flag = true;
				localAI[0] += 1f;
				if (localAI[0] > 120f)
				{
					localAI[0] = 0f;
				}
				localAI[1] += velocity.X * 0.01f;
				localAI[1] += 0.008333334f;
				if (localAI[1] < (float)Math.PI * -2f)
				{
					localAI[1] += (float)Math.PI * 2f;
				}
				if (localAI[1] > (float)Math.PI * 2f)
				{
					localAI[1] -= (float)Math.PI * 2f;
				}
				if (velocity.Length() < 4f)
				{
					localAI[1] *= 0.9f;
					if (velocity.Length() > 0.1f && Main.rand.Next(30) == 0)
					{
						Dust dust = Dust.NewDustDirect(position - velocity, width, height, 292, velocity.X * 0.5f, velocity.Y * 0.5f, 150);
						dust.velocity *= 0.3f;
						dust.noLightEmittence = true;
					}
				}
				else
				{
					Vector2 vector2 = new Vector2(Main.screenWidth, Main.screenHeight);
					base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector2 / 2f, vector2 + new Vector2(400f)));
					if (Main.rand.Next(15) == 0)
					{
						Dust.NewDustDirect(position - velocity, width, height, 292, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 0.9f).noLightEmittence = true;
					}
				}
				float num8 = localAI[0] / 120f * 2f;
				if (num8 > 1f)
				{
					num8 = 2f - num8;
				}
				Opacity = MathHelper.Lerp(0.4f, 0.75f, num8);
				vector.Y += (float)Math.Cos(localAI[0] / 120f * ((float)Math.PI * 2f)) * 2f;
				if (player.petFlagUpbeatStar)
				{
					timeLeft = 2;
				}
				break;
			}
			}
			if (flag2 && (player.suspiciouslookingTentacle || player.petFlagDD2Ghost))
			{
				vector.X += -player.direction * 64;
			}
			direction = (spriteDirection = player.direction);
			Vector2 vector4 = player.MountedCenter + vector;
			float num9 = Vector2.Distance(base.Center, vector4);
			if (num9 > 1000f)
			{
				base.Center = player.Center + vector;
			}
			Vector2 vector5 = vector4 - base.Center;
			if (num9 < num)
			{
				velocity *= 0.25f;
			}
			if (vector5 != Vector2.Zero)
			{
				if (vector5.Length() < num * 0.5f)
				{
					velocity = vector5;
				}
				else
				{
					velocity = vector5 * num7;
				}
			}
			if (velocity.Length() > 6f)
			{
				float num10 = velocity.X * num6 + velocity.Y * (float)spriteDirection * 0.02f;
				if (Math.Abs(rotation - num10) >= (float)Math.PI)
				{
					if (num10 < rotation)
					{
						rotation -= (float)Math.PI * 2f;
					}
					else
					{
						rotation += (float)Math.PI * 2f;
					}
				}
				float num11 = 12f;
				rotation = (rotation * (num11 - 1f) + num10) / num11;
				if (++frameCounter >= num3)
				{
					frameCounter = 0;
					if (++frame >= num4)
					{
						frame = num5;
					}
				}
			}
			else
			{
				if (rotation > (float)Math.PI)
				{
					rotation -= (float)Math.PI * 2f;
				}
				if (rotation > -0.005f && rotation < 0.005f)
				{
					rotation = 0f;
				}
				else
				{
					rotation *= 0.96f;
				}
				if (++frameCounter >= num2)
				{
					frameCounter = 0;
					if (++frame >= num4)
					{
						frame = num5;
					}
				}
			}
			if (!flag)
			{
				localAI[0] += 1f;
				if (localAI[0] > 120f)
				{
					localAI[0] = 0f;
				}
			}
		}

		private void AI_145_BookStaffStorm()
		{
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_003e: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0092: Unknown result type (might be due to invalid IL or missing references)
			float num = 300f;
			SlotId val;
			if (soundDelay == 0)
			{
				soundDelay = -1;
				float[] array = localAI;
				val = SoundEngine.PlayTrackedSound(SoundID.DD2_BookStaffTwisterLoop, base.Center);
				array[1] = ((SlotId)(val)).ToFloat();
			}
			ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
			if (activeSound != null)
			{
				activeSound.Position = base.Center;
				activeSound.Volume = 1f - Math.Max(ai[0] - (num - 15f), 0f) / 15f;
			}
			else
			{
				float[] array2 = localAI;
				val = SlotId.Invalid;
				array2[1] = ((SlotId)(val)).ToFloat();
			}
			if (localAI[0] >= 16f && ai[0] < num - 15f)
			{
				ai[0] = num - 15f;
			}
			ai[0] += 1f;
			if (ai[0] >= num)
			{
				Kill();
			}
			Vector2 top = base.Top;
			Vector2 bottom = base.Bottom;
			Vector2 vector = Vector2.Lerp(top, bottom, 0.5f);
			Vector2 vector2 = new Vector2(0f, bottom.Y - top.Y);
			vector2.X = vector2.Y * 0.2f;
			int num2 = 16;
			int num3 = 160;
			for (int i = 0; i < 1; i++)
			{
				Vector2 vector3 = new Vector2(base.Center.X - (float)(num2 / 2), position.Y + (float)height - (float)num3);
				if (Collision.SolidCollision(vector3, num2, num3) || Collision.WetCollision(vector3, num2, num3))
				{
					if (velocity.Y > 0f)
					{
						velocity.Y = 0f;
					}
					if (velocity.Y > -4f)
					{
						velocity.Y -= 2f;
					}
					else
					{
						velocity.Y -= 4f;
						localAI[0] += 2f;
					}
					if (velocity.Y < -16f)
					{
						velocity.Y = -16f;
					}
					continue;
				}
				localAI[0] -= 1f;
				if (localAI[0] < 0f)
				{
					localAI[0] = 0f;
				}
				if (velocity.Y < 0f)
				{
					velocity.Y = 0f;
				}
				if (velocity.Y < 4f)
				{
					velocity.Y += 2f;
				}
				else
				{
					velocity.Y += 4f;
				}
				if (velocity.Y > 16f)
				{
					velocity.Y = 16f;
				}
			}
			if (ai[0] < num - 30f)
			{
				for (int j = 0; j < 1; j++)
				{
					float value = -1f;
					float value2 = 0.9f;
					float amount = Main.rand.NextFloat();
					Vector2 vector4 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(value, value2, amount));
					vector4.X *= MathHelper.Lerp(2.2f, 0.6f, amount);
					vector4.X *= -1f;
					Vector2 vector5 = new Vector2(6f, 10f);
					Vector2 vector6 = vector + vector2 * vector4 * 0.5f + vector5;
					Dust dust = Main.dust[Dust.NewDust(vector6, 0, 0, 274)];
					dust.position = vector6;
					dust.fadeIn = 1.3f;
					dust.scale = 0.87f;
					dust.alpha = 211;
					if (vector4.X > -1.2f)
					{
						dust.velocity.X = 1f + Main.rand.NextFloat();
					}
					dust.noGravity = true;
					dust.velocity.Y = Main.rand.NextFloat() * -0.5f - 1.3f;
					dust.velocity.X += velocity.X * 2.1f;
					dust.noLight = true;
				}
			}
			Vector2 vector7 = base.Bottom + new Vector2(-25f, -25f);
			for (int k = 0; k < 4; k++)
			{
				Dust dust2 = Dust.NewDustDirect(vector7, 50, 25, 31, velocity.X, -2f, 100);
				dust2.fadeIn = 1.1f;
				dust2.noGravity = true;
			}
			for (int l = 0; l < 1; l++)
			{
				if (Main.rand.Next(5) == 0)
				{
					Gore gore = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(velocity.X * 1.5f, (0f - Main.rand.NextFloat()) * 16f), Utils.SelectRandom<int>(Main.rand, 1007, 1008, 1008));
					gore.timeLeft = 60;
					gore.alpha = 50;
					gore.velocity.X += velocity.X;
				}
			}
			for (int m = 0; m < 1; m++)
			{
				if (Main.rand.Next(7) == 0)
				{
					Gore gore2 = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(velocity.X * 1.5f, (0f - Main.rand.NextFloat()) * 16f), Utils.SelectRandom<int>(Main.rand, 1007, 1008, 1008));
					gore2.timeLeft = 0;
					gore2.alpha = 80;
				}
			}
			for (int n = 0; n < 1; n++)
			{
				if (Main.rand.Next(7) == 0)
				{
					Gore gore3 = Gore.NewGoreDirect(base.TopLeft + Main.rand.NextVector2Square(0f, 1f) * base.Size, new Vector2(velocity.X * 1.5f, (0f - Main.rand.NextFloat()) * 16f), Utils.SelectRandom<int>(Main.rand, 1007, 1008, 1008));
					gore3.timeLeft = 0;
					gore3.alpha = 80;
				}
			}
		}

		public bool AI_137_CanHit(Vector2 targetPosition)
		{
			if (WorldGen.SolidTile((int)targetPosition.X / 16, (int)targetPosition.Y / 16))
			{
				return false;
			}
			Vector2 vector = base.Top + Vector2.UnitY * 20f;
			bool flag = Collision.CanHitLine(vector, 0, 0, targetPosition, 0, 0);
			if (!flag)
			{
				Vector2 v = targetPosition - vector;
				Vector2 spinningpoint = v.SafeNormalize(Vector2.UnitY);
				Vector2 vector2 = Vector2.Lerp(vector, targetPosition, 0.5f);
				Vector2 vector3 = vector2 + spinningpoint.RotatedBy(1.5707963705062866) * v.Length() * 0.2f;
				if (Collision.CanHitLine(vector, 0, 0, vector3, 0, 0) && Collision.CanHitLine(vector3, 0, 0, targetPosition, 0, 0))
				{
					flag = true;
				}
				if (!flag)
				{
					Vector2 vector4 = vector2 + spinningpoint.RotatedBy(-1.5707963705062866) * v.Length() * 0.2f;
					if (Collision.CanHitLine(vector, 0, 0, vector4, 0, 0) && Collision.CanHitLine(vector4, 0, 0, targetPosition, 0, 0))
					{
						flag = true;
					}
				}
			}
			return flag;
		}

		private Point GetScarabBombDigDirectionSnap8()
		{
			Player player = Main.player[owner];
			Vector2 vector = DirectionTo(player.Center);
			Point result = new Point((!(vector.X > 0f)) ? 1 : (-1), (!(vector.Y > 0f)) ? 1 : (-1));
			if (Math.Abs(vector.X) > Math.Abs(vector.Y) * 2f)
			{
				result.Y = 0;
			}
			else if (Math.Abs(vector.Y) > Math.Abs(vector.X) * 2f)
			{
				result.X = 0;
			}
			return result;
		}

		public Color GetFirstFractalColor()
		{
			return Main.hslToRgb(ai[1], 1f, 0.5f);
		}

		public void Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(Point pt, float size, Utils.TileActionAttempt plot)
		{
			Tile tile = Main.tile[pt.X, pt.Y];
			if (tile != null && tile.active() && tile.halfBrick())
			{
				int num = pt.Y - 1;
				if (num >= 0)
				{
					tile = Main.tile[pt.X, num];
					if (!WorldGen.SolidOrSlopedTile(tile))
					{
						pt.Y--;
					}
				}
			}
			DelegateMethods.v2_1 = pt.ToVector2();
			DelegateMethods.f_1 = size;
			Utils.PlotTileArea(pt.X, pt.Y, plot);
		}

		public bool IsAttachedTo(NPC npc)
		{
			if (aiStyle == 113 && ai[0] == 1f && ai[1] == (float)npc.whoAmI)
			{
				return true;
			}
			return false;
		}

		public void Kill()
		{
			//IL_21fd: Unknown result type (might be due to invalid IL or missing references)
			//IL_221d: Unknown result type (might be due to invalid IL or missing references)
			//IL_223a: Unknown result type (might be due to invalid IL or missing references)
			//IL_c267: Unknown result type (might be due to invalid IL or missing references)
			//IL_c26c: Unknown result type (might be due to invalid IL or missing references)
			//IL_148e2: Unknown result type (might be due to invalid IL or missing references)
			if (!active)
			{
				return;
			}
			Main.projectileIdentity[owner, identity] = -1;
			int num = timeLeft;
			timeLeft = 0;
			ParticleOrchestraSettings settings;
			if (type == 949)
			{
				SoundEngine.PlaySound(SoundID.Item10, base.Center);
				int num2 = (int)ai[0];
				float num3 = 20f;
				for (float num4 = 0f; num4 < num3; num4++)
				{
					Vector2 vector = position;
					int num5 = Dust.NewDust(vector, 4, 4, num2, 0f, 0f, 100);
					if (Main.rand.Next(3) != 0)
					{
						Main.dust[num5].noGravity = true;
					}
					Dust dust = Main.dust[num5];
					dust.velocity *= 0.8f;
					if (num2 == 66)
					{
						Main.dust[num5].color = new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB);
						Main.dust[num5].noGravity = true;
					}
				}
			}
			else if (type == 756)
			{
				for (float num6 = 0f; num6 < 1f; num6 += 0.025f)
				{
					Dust dust2 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f) * scale + velocity.SafeNormalize(Vector2.UnitY) * num6 * 200f * scale, 5, Main.rand.NextVector2Circular(3f, 3f));
					dust2.velocity.Y += -0.3f;
					Dust dust = dust2;
					dust.velocity += velocity * 0.2f;
					dust2.scale = 1f;
					dust2.alpha = 100;
				}
			}
			else if (type == 961)
			{
				for (float num7 = 0f; num7 < 1f; num7 += 0.25f)
				{
					Dust dust3 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f) * scale + velocity.SafeNormalize(Vector2.UnitY) * num7 * 200f * scale, 16, Main.rand.NextVector2Circular(3f, 3f));
					dust3.velocity.Y += -0.3f;
					Dust dust = dust3;
					dust.velocity += velocity * 0.2f;
					dust3.scale = 1f;
					dust3.alpha = 100;
				}
			}
			else if (type == 962)
			{
				for (int i = 0; i < 20; i++)
				{
					Dust dust4 = Dust.NewDustPerfect(base.Center + Main.rand.NextVector2Circular(16f, 16f) * scale, 16, Main.rand.NextVector2Circular(2f, 2f));
					Dust dust = dust4;
					dust.velocity += velocity * 0.1f;
					dust4.scale = 1f;
					dust4.alpha = 100;
				}
			}
			else if (type == 932)
			{
				Color fairyQueenWeaponsColor = GetFairyQueenWeaponsColor();
				SoundEngine.PlaySound(SoundID.Item10, base.Center);
				Vector2 target = base.Center;
				Main.rand.NextFloat();
				int num8 = 10;
				for (int j = 0; j < num8; j++)
				{
					Vector2 vector2 = position - velocity * j;
					int num9 = Main.rand.Next(1, 3);
					float num10 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(num8, 0f, j, clamped: true));
					if ((float)j >= (float)oldPos.Length * 0.3f)
					{
						num9--;
					}
					if ((float)j >= (float)oldPos.Length * 0.75f)
					{
						num9 -= 2;
					}
					vector2.DirectionTo(target).SafeNormalize(Vector2.Zero);
					target = vector2;
					for (float num11 = 0f; num11 < (float)num9; num11++)
					{
						int num12 = Dust.NewDust(vector2, width, height, 267, 0f, 0f, 0, fairyQueenWeaponsColor);
						Dust dust = Main.dust[num12];
						dust.velocity *= Main.rand.NextFloat() * 0.8f;
						Main.dust[num12].noGravity = true;
						Main.dust[num12].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
						Main.dust[num12].fadeIn = Main.rand.NextFloat() * 1.2f * num10;
						dust = Main.dust[num12];
						dust.scale *= num10;
						if (num12 != 6000)
						{
							Dust dust5 = Dust.CloneDust(num12);
							dust = dust5;
							dust.scale /= 2f;
							dust = dust5;
							dust.fadeIn *= 0.85f;
							dust5.color = new Color(255, 255, 255, 255);
						}
					}
				}
			}
			else if (type == 931)
			{
				Color fairyQueenWeaponsColor2 = GetFairyQueenWeaponsColor();
				SoundEngine.PlaySound(SoundID.Item10, base.Center);
				Vector2 target2 = base.Center;
				Main.rand.NextFloat();
				for (int k = 0; k < oldPos.Length; k++)
				{
					Vector2 vector3 = oldPos[k];
					if (vector3 == Vector2.Zero)
					{
						break;
					}
					int num13 = Main.rand.Next(1, 3);
					float num14 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(oldPos.Length, 0f, k, clamped: true));
					if ((float)k >= (float)oldPos.Length * 0.3f)
					{
						num13--;
					}
					if ((float)k >= (float)oldPos.Length * 0.75f)
					{
						num13 -= 2;
					}
					vector3.DirectionTo(target2).SafeNormalize(Vector2.Zero);
					target2 = vector3;
					for (float num15 = 0f; num15 < (float)num13; num15++)
					{
						int num16 = Dust.NewDust(vector3, width, height, 267, 0f, 0f, 0, fairyQueenWeaponsColor2);
						Dust dust = Main.dust[num16];
						dust.velocity *= Main.rand.NextFloat() * 0.8f;
						Main.dust[num16].noGravity = true;
						Main.dust[num16].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
						Main.dust[num16].fadeIn = Main.rand.NextFloat() * 1.2f * num14;
						dust = Main.dust[num16];
						dust.scale *= num14;
						if (num16 != 6000)
						{
							Dust dust6 = Dust.CloneDust(num16);
							dust = dust6;
							dust.scale /= 2f;
							dust = dust6;
							dust.fadeIn *= 0.85f;
							dust6.color = new Color(255, 255, 255, 255);
						}
					}
				}
			}
			else if (type == 79)
			{
				int newWidth = width;
				int newHeight = height;
				Resize(128, 128);
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				Resize(newWidth, newHeight);
				SoundEngine.PlaySound(SoundID.Item10, base.Center);
				Vector2 target3 = base.Center;
				float num17 = Main.rand.NextFloat();
				for (int l = 0; l < oldPos.Length; l++)
				{
					Vector2 vector4 = oldPos[l];
					if (vector4 == Vector2.Zero)
					{
						break;
					}
					Color newColor = Main.hslToRgb((num17 + Utils.GetLerpValue(oldPos.Length, 0f, l, clamped: true)) % 1f, 1f, 0.65f);
					int num18 = Main.rand.Next(1, 4);
					float lerpValue = Utils.GetLerpValue(oldPos.Length, 0f, l, clamped: true);
					float num19 = MathHelper.Lerp(0.3f, 1f, lerpValue);
					if ((float)l >= (float)oldPos.Length * 0.3f)
					{
						num18--;
					}
					if ((float)l >= (float)oldPos.Length * 0.65f)
					{
						num18 -= 2;
					}
					if ((float)l >= (float)oldPos.Length * 0.85f)
					{
						num18 -= 3;
					}
					Vector2 vector5 = vector4.DirectionTo(target3).SafeNormalize(Vector2.Zero);
					target3 = vector4;
					Vector2 vector6 = base.Size / 2f;
					for (float num20 = 0f; num20 < (float)num18; num20++)
					{
						int num21 = Dust.NewDust(vector4, width, height, 267, 0f, 0f, 0, newColor);
						Dust dust = Main.dust[num21];
						dust.velocity *= Main.rand.NextFloat() * 0.8f;
						Main.dust[num21].noGravity = true;
						Main.dust[num21].scale = 0.9f + Main.rand.NextFloat() * 1.2f;
						Main.dust[num21].fadeIn = Main.rand.NextFloat() * 1.2f * num19;
						dust = Main.dust[num21];
						dust.velocity += vector5 * 6f;
						dust = Main.dust[num21];
						dust.scale *= num19;
						Main.dust[num21].position = Vector2.Lerp(vector4 + vector6, Main.dust[num21].position, lerpValue);
						if (num21 != 6000)
						{
							Dust dust7 = Dust.CloneDust(num21);
							dust = dust7;
							dust.scale /= 2f;
							dust = dust7;
							dust.fadeIn *= 0.85f;
							dust7.color = new Color(255, 255, 255, 255);
						}
					}
				}
				for (float num22 = 0f; num22 < 0.5f; num22 += 0.25f)
				{
					settings = new ParticleOrchestraSettings
					{
						PositionInWorld = base.Center,
						MovementVector = Vector2.UnitX.RotatedBy(num22 * ((float)Math.PI * 2f)) * 16f
					};
					ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.RainbowRodHit, settings, owner);
				}
				for (int m = 0; m < 14; m++)
				{
					int num23 = Dust.NewDust(position, width, height, 66, 0f, 0f, 100, Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f), 1.7f);
					Main.dust[num23].noGravity = true;
					Dust dust = Main.dust[num23];
					dust.velocity *= 3f;
				}
			}
			else if (type == 16)
			{
				int newWidth2 = width;
				int newHeight2 = height;
				Resize(128, 128);
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				Resize(newWidth2, newHeight2);
				SoundEngine.PlaySound(SoundID.Item10, base.Center);
				Vector2 target4 = base.Center;
				for (int n = 0; n < oldPos.Length; n++)
				{
					Vector2 vector7 = oldPos[n];
					if (vector7 == Vector2.Zero)
					{
						break;
					}
					Color newColor2 = Main.hslToRgb(4f / 9f + Main.rand.NextFloat() * (2f / 9f), 1f, 0.65f);
					int num24 = Main.rand.Next(1, 4);
					float num25 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(oldPos.Length, 0f, n, clamped: true));
					if ((float)n >= (float)oldPos.Length * 0.3f)
					{
						num24--;
					}
					if ((float)n >= (float)oldPos.Length * 0.75f)
					{
						num24 -= 2;
					}
					Vector2 vector8 = vector7.DirectionTo(target4).SafeNormalize(Vector2.Zero);
					target4 = vector7;
					for (float num26 = 0f; num26 < (float)num24; num26++)
					{
						if (Main.rand.Next(3) == 0)
						{
							int num27 = Dust.NewDust(vector7, width, height, 267, 0f, 0f, 0, newColor2);
							Dust dust = Main.dust[num27];
							dust.velocity *= Main.rand.NextFloat() * 0.8f;
							Main.dust[num27].noGravity = true;
							Main.dust[num27].scale = Main.rand.NextFloat() * 0.8f;
							Main.dust[num27].fadeIn = Main.rand.NextFloat() * 1.2f * num25;
							dust = Main.dust[num27];
							dust.velocity += vector8 * 6f;
							dust = Main.dust[num27];
							dust.scale *= num25;
							if (num27 != 6000)
							{
								Dust dust8 = Dust.CloneDust(num27);
								dust = dust8;
								dust.scale /= 2f;
								dust = dust8;
								dust.fadeIn /= 2f;
								dust8.color = new Color(255, 255, 255, 255);
							}
						}
						else
						{
							Dust dust9 = Dust.NewDustDirect(vector7, width, height, 15, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
							Main.rand.Next(2);
							dust9.noGravity = true;
							Dust dust = dust9;
							dust.velocity *= 2f;
							dust = dust9;
							dust.velocity += vector8 * 9f;
							dust = dust9;
							dust.scale *= num25;
							dust9.fadeIn = (0.6f + Main.rand.NextFloat() * 0.4f) * num25;
							dust9.noLightEmittence = (dust9.noLight = true);
						}
					}
				}
				for (int num28 = 0; num28 < 20; num28++)
				{
					Dust dust10 = Dust.NewDustDirect(position, width, height, 15);
					dust10.noGravity = true;
					dust10.velocity = Main.rand.NextVector2Circular(1f, 1f) * 1.5f;
					dust10.scale = 1.2f + Main.rand.NextFloat() * 0.5f;
					dust10.noLightEmittence = (dust10.noLight = true);
					Dust dust = dust10;
					dust.velocity += velocity * 0.01f;
					dust = dust10;
					dust.position += dust10.velocity * Main.rand.Next(1, 16);
					dust10 = Dust.NewDustDirect(position, width, height, 15, 0f, 0f, 100);
					dust = dust10;
					dust.velocity *= 1.2f;
					dust10.noLightEmittence = (dust10.noLight = true);
					dust = dust10;
					dust.velocity += velocity * 0.01f;
					dust = dust10;
					dust.scale *= 0.8f + Main.rand.NextFloat() * 0.2f;
					dust = dust10;
					dust.position += dust10.velocity * Main.rand.Next(1, 16);
				}
			}
			else if (type == 34)
			{
				int newWidth3 = width;
				int newHeight3 = height;
				Resize(96, 96);
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				Resize(newWidth3, newHeight3);
				SoundEngine.PlaySound(SoundID.Item10, position);
				Vector2 target5 = base.Center;
				for (int num29 = 0; num29 < oldPos.Length; num29++)
				{
					Vector2 vector9 = oldPos[num29];
					if (vector9 == Vector2.Zero)
					{
						break;
					}
					Color newColor3 = Main.hslToRgb(Main.rand.NextFloat() * 0.111111112f, 1f, 0.5f);
					int num30 = Main.rand.Next(1, 5);
					float num31 = MathHelper.Lerp(0.3f, 1f, Utils.GetLerpValue(oldPos.Length, 0f, num29, clamped: true));
					if ((float)num29 >= (float)oldPos.Length * 0.3f)
					{
						num30--;
					}
					if ((float)num29 >= (float)oldPos.Length * 0.75f)
					{
						num30 -= 2;
					}
					Vector2 vector10 = vector9.DirectionTo(target5).SafeNormalize(Vector2.Zero);
					target5 = vector9;
					for (float num32 = 0f; num32 < (float)num30; num32++)
					{
						if (Main.rand.Next(3) == 0)
						{
							int num33 = Dust.NewDust(vector9, width, height, 267, 0f, 0f, 0, newColor3);
							Dust dust = Main.dust[num33];
							dust.velocity *= Main.rand.NextFloat() * 0.8f;
							Main.dust[num33].noGravity = true;
							Main.dust[num33].scale = Main.rand.NextFloat() * 1f;
							Main.dust[num33].fadeIn = Main.rand.NextFloat() * 2f;
							dust = Main.dust[num33];
							dust.velocity += vector10 * 8f;
							dust = Main.dust[num33];
							dust.scale *= num31;
							if (num33 != 6000)
							{
								Dust dust11 = Dust.CloneDust(num33);
								dust = dust11;
								dust.scale /= 2f;
								dust = dust11;
								dust.fadeIn /= 2f;
								dust11.color = new Color(255, 255, 255, 255);
							}
						}
						else
						{
							Dust dust12 = Dust.NewDustDirect(vector9, width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
							Dust dust;
							if (Main.rand.Next(2) == 0)
							{
								dust12.noGravity = true;
								dust = dust12;
								dust.scale *= 2.5f;
							}
							dust = dust12;
							dust.velocity *= 2f;
							dust = dust12;
							dust.velocity += vector10 * 6f;
							dust = dust12;
							dust.scale *= num31;
							dust12.noLightEmittence = (dust12.noLight = true);
						}
					}
				}
				for (int num34 = 0; num34 < 20; num34++)
				{
					Dust dust13 = Dust.NewDustDirect(position, width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
					dust13.noGravity = true;
					dust13.velocity = Main.rand.NextVector2Circular(1f, 1f) * 6f;
					dust13.scale = 1.6f;
					dust13.fadeIn = 1.3f + Main.rand.NextFloat() * 1f;
					dust13.noLightEmittence = (dust13.noLight = true);
					Dust dust = dust13;
					dust.velocity += velocity * 0.1f;
					dust13 = Dust.NewDustDirect(position, width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
					dust = dust13;
					dust.velocity *= 2f;
					dust13.noLightEmittence = (dust13.noLight = true);
					dust = dust13;
					dust.velocity += velocity * 0.1f;
				}
			}
			if (type == 873)
			{
				int num35 = 20;
				float num36 = (float)Math.PI * 2f / (float)num35;
				float num37 = velocity.ToRotation();
				Color value = AI_171_GetColor();
				for (int num38 = 0; num38 < num35; num38++)
				{
					Dust dust14 = Dust.NewDustPerfect(base.Center, 267);
					dust14.fadeIn = 1f;
					dust14.noGravity = true;
					dust14.alpha = 100;
					dust14.color = Color.Lerp(value, Color.White, Main.rand.NextFloat() * 0.4f);
					if (num38 % 4 == 0)
					{
						dust14.velocity = num37.ToRotationVector2() * 3.2f;
						dust14.scale = 2.3f;
					}
					else if (num38 % 2 == 0)
					{
						dust14.velocity = num37.ToRotationVector2() * 1.8f;
						dust14.scale = 1.9f;
					}
					else
					{
						dust14.velocity = num37.ToRotationVector2();
						dust14.scale = 1.6f;
					}
					num37 += num36;
					Dust dust = dust14;
					dust.velocity += velocity * Main.rand.NextFloat() * 0.5f;
				}
			}
			_ = type;
			_ = 857;
			if (type == 920)
			{
				for (int num39 = 0; num39 < 6; num39++)
				{
					Vector2 vector11 = Vector2.UnitY.RotatedBy((float)num39 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (2f + Main.rand.NextFloat() * 0.5f);
					int num40 = Dust.NewDust(position + base.Size * Main.rand.NextVector2Square(0f, 1f), 4, 4, 4, vector11.X, vector11.Y, 80, new Color(78, 136, 255, 150), 1.5f);
					Main.dust[num40].noGravity = true;
				}
			}
			if (type == 921)
			{
				for (int num41 = 0; num41 < 12; num41++)
				{
					Vector2 vector12 = Vector2.UnitY.RotatedBy((float)num41 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (3f + Main.rand.NextFloat() * 0.5f);
					int num42 = Dust.NewDust(position + base.Size * Main.rand.NextVector2Square(0f, 1f), 6, 6, 243, vector12.X, vector12.Y, 80, default(Color), 1.5f);
					Main.dust[num42].noGravity = true;
				}
			}
			if (type == 926)
			{
				for (int num43 = 0; num43 < 22; num43++)
				{
					Vector2 vector13 = Vector2.UnitY.RotatedBy((float)num43 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (3f + Main.rand.NextFloat() * 0.5f);
					int num44 = Dust.NewDust(position - new Vector2(8f, 8f), width + 16, height + 16, 31, vector13.X, vector13.Y, 40, NPC.AI_121_QueenSlime_GetDustColor(), 1.5f);
					Main.dust[num44].noGravity = true;
				}
			}
			if (type == 937)
			{
				for (int num45 = 0; num45 < 12; num45++)
				{
					Vector2 vector14 = Vector2.UnitY.RotatedBy((float)num45 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (3f + Main.rand.NextFloat() * 0.5f);
					int num46 = Dust.NewDust(position - new Vector2(8f, 8f), width + 16, height + 16, 31, vector14.X, vector14.Y, 40, NPC.AI_121_QueenSlime_GetDustColor(), 1.5f);
					Main.dust[num46].noGravity = true;
				}
			}
			if (type == 818)
			{
				for (float num47 = 0f; num47 < 1f; num47 += 0.34f)
				{
					Dust.NewDustPerfect(position + base.Size * Main.rand.NextVector2Square(0f, 1f), 278, Vector2.UnitY.RotatedBy(num47 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (2f + Main.rand.NextFloat() * 0.5f), 150, Color.Lerp(Color.White, Color.Gold, Main.rand.NextFloat()), 0.4f).noGravity = true;
				}
				for (float num48 = 0f; num48 < 1f; num48 += 0.34f)
				{
					Dust.NewDustPerfect(position + base.Size * Main.rand.NextVector2Square(0f, 1f), 278, Vector2.UnitY.RotatedBy(num48 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (1f + Main.rand.NextFloat() * 0.5f), 150, Color.Lerp(Color.White, Main.OurFavoriteColor, Main.rand.NextFloat()), 0.7f).noGravity = true;
				}
			}
			if (type == 856)
			{
				for (int num49 = 0; num49 < 6; num49++)
				{
					Dust.NewDust(position, width, height, 58, 0f, 0f, 150, default(Color), 0.8f);
				}
				for (float num50 = 0f; num50 < 1f; num50 += 0.34f)
				{
					Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num50 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (4f + Main.rand.NextFloat() * 2f), 150, Color.Lerp(Color.White, Color.HotPink, Main.rand.NextFloat() * 0.5f + 0.5f)).noGravity = true;
				}
				for (float num51 = 0f; num51 < 1f; num51 += 0.34f)
				{
					Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num51 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * ((float)Math.PI * 2f) * 0.5f) * (2f + Main.rand.NextFloat() * 1f), 150, Color.Lerp(Color.White, Color.Orange, Main.rand.NextFloat() * 0.5f + 0.5f)).noGravity = true;
				}
				Vector2 vector15 = new Vector2(Main.screenWidth, Main.screenHeight);
				if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector15 / 2f, vector15 + new Vector2(400f))))
				{
					for (int num52 = 0; num52 < 1; num52++)
					{
						Gore.NewGore(position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * 3f, Utils.SelectRandom<int>(Main.rand, 16));
					}
				}
				settings = new ParticleOrchestraSettings
				{
					PositionInWorld = base.Center
				};
				ParticleOrchestrator.RequestParticleSpawn(clientOnly: true, ParticleOrchestraType.StellarTune, settings, owner);
				position = base.Center;
				width = (height = 128);
				base.Center = position;
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
			}
			if (type == 818)
			{
				Damage();
			}
			if (type == 686)
			{
				SoundEngine.PlayTrackedSound(SoundID.DD2_BetsyFireballImpact, base.Center);
			}
			else if (type == 711)
			{
				SoundEngine.PlayTrackedSound(SoundID.DD2_BetsysWrathImpact, base.Center);
			}
			else if (type == 704)
			{
				ActiveSound activeSound = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
				if (activeSound != null)
				{
					activeSound.Volume = 0f;
					activeSound.Stop();
				}
			}
			if (type == 710)
			{
				ai[1] = -1f;
				position = base.Center;
				width = (height = 40);
				base.Center = position;
				Damage();
				SoundEngine.PlaySound(SoundID.Item14, position);
				for (int num53 = 0; num53 < 2; num53++)
				{
					int num54 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num54].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				}
				for (int num55 = 0; num55 < 10; num55++)
				{
					int num56 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num56].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num56].noGravity = true;
					Dust dust = Main.dust[num56];
					dust.velocity *= 2f;
				}
				for (int num57 = 0; num57 < 5; num57++)
				{
					int num58 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num58].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num58].noGravity = true;
					Dust dust = Main.dust[num58];
					dust.velocity *= 2f;
				}
			}
			else if (type == 711)
			{
				Rectangle hitbox = base.Hitbox;
				for (int num59 = 0; num59 < oldPos.Length / 2; num59 += 2)
				{
					hitbox.X = (int)oldPos[num59].X;
					hitbox.Y = (int)oldPos[num59].Y;
					for (int num60 = 0; num60 < 2; num60++)
					{
						int num61 = Utils.SelectRandom<int>(Main.rand, 6, 55, 158);
						int num62 = Dust.NewDust(hitbox.TopLeft(), width, height, num61, direction, -2.5f);
						Main.dust[num62].alpha = 200;
						Dust dust = Main.dust[num62];
						dust.velocity *= 2.4f;
						dust = Main.dust[num62];
						dust.scale += Main.rand.NextFloat();
						dust = Main.dust[num62];
						dust.scale -= 0.5f;
						if (Main.dust[num62].type == 55)
						{
							Main.dust[num62].color = Color.Lerp(new Color(128, 0, 180, 128), Color.Gold, Main.rand.NextFloat());
						}
						Main.dust[num62].noLight = true;
					}
				}
				for (int num63 = 10; num63 < oldPos.Length; num63 += 2)
				{
					hitbox.X = (int)oldPos[num63].X;
					hitbox.Y = (int)oldPos[num63].Y;
					for (int num64 = 0; num64 < 2; num64++)
					{
						if (Main.rand.Next(3) != 0)
						{
							int num65 = Utils.SelectRandom<int>(Main.rand, 55);
							int num66 = Dust.NewDust(hitbox.TopLeft(), width, height, num65, direction, -2.5f);
							Main.dust[num66].alpha = 120;
							Dust dust = Main.dust[num66];
							dust.velocity *= 2.4f;
							dust = Main.dust[num66];
							dust.scale += Main.rand.NextFloat() * 0.7f;
							dust = Main.dust[num66];
							dust.scale -= 0.5f;
							if (Main.dust[num66].type == 55)
							{
								Main.dust[num66].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
							}
							Main.dust[num66].noLight = true;
						}
					}
				}
				for (int num67 = 5; num67 < oldPos.Length; num67++)
				{
					hitbox.X = (int)oldPos[num67].X;
					hitbox.Y = (int)oldPos[num67].Y;
					for (int num68 = 0; num68 < 1; num68++)
					{
						if (Main.rand.Next(3) != 0)
						{
							int num69 = Utils.SelectRandom<int>(Main.rand, 55);
							int num70 = Dust.NewDust(hitbox.TopLeft(), width, height, num69, direction, -2.5f);
							Main.dust[num70].alpha = 80;
							Dust dust = Main.dust[num70];
							dust.velocity *= 0.3f;
							dust = Main.dust[num70];
							dust.velocity += velocity * 0.5f;
							dust = Main.dust[num70];
							dust.scale += Main.rand.NextFloat() * 0.7f;
							dust = Main.dust[num70];
							dust.scale -= 0.5f;
							if (Main.dust[num70].type == 55)
							{
								Main.dust[num70].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
							}
							Main.dust[num70].noLight = true;
						}
					}
				}
				for (int num71 = 0; num71 < 20; num71++)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num72 = 228;
						Dust dust15 = Main.dust[Dust.NewDust(position, width, height, num72)];
						dust15.noGravity = true;
						dust15.scale = 1.25f + Main.rand.NextFloat();
						dust15.fadeIn = 1.5f;
						Dust dust = dust15;
						dust.velocity *= 6f;
						dust15.noLight = true;
					}
				}
				for (int num73 = 0; num73 < 20; num73++)
				{
					if (Main.rand.Next(3) != 0)
					{
						int num74 = 55;
						Dust dust16 = Main.dust[Dust.NewDust(position, width, height, num74)];
						dust16.noGravity = true;
						dust16.scale = 1.25f + Main.rand.NextFloat();
						dust16.fadeIn = 1.5f;
						Dust dust = dust16;
						dust.velocity *= 6f;
						dust16.noLight = true;
						dust16.color = new Color(0, 0, 220, 128);
					}
				}
				if (owner == Main.myPlayer)
				{
					position = base.Center;
					base.Size = new Vector2(140f);
					base.Center = position;
					penetrate = -1;
					usesLocalNPCImmunity = true;
					localNPCHitCooldown = -1;
					Damage();
				}
			}
			else if (type == 662 || type == 685)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				Vector2 vector16 = oldVelocity.SafeNormalize(Vector2.Zero);
				Vector2 vector17 = position + vector16 * 16f;
				for (int num75 = 0; num75 < 16; num75++)
				{
					if (Main.rand.Next(2) == 0)
					{
						vector17 -= vector16 * 8f;
						continue;
					}
					Dust dust17 = Dust.NewDustDirect(vector17, width, height, 11);
					dust17.position = (dust17.position + base.Center) / 2f;
					Dust dust = dust17;
					dust.velocity += oldVelocity * 0.4f;
					dust = dust17;
					dust.velocity *= 0.5f;
					dust17.noGravity = true;
					vector17 -= vector16 * 8f;
				}
			}
			if (type == 680)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				Vector2 vector18 = oldVelocity.SafeNormalize(Vector2.Zero);
				Vector2 vector19 = position + vector18 * 16f;
				for (int num76 = 0; num76 < 16; num76++)
				{
					if (Main.rand.Next(2) == 0)
					{
						vector19 -= vector18 * 8f;
						continue;
					}
					Dust dust18 = Dust.NewDustDirect(vector19, width, height, 11);
					dust18.position = (dust18.position + base.Center) / 2f;
					Dust dust = dust18;
					dust.velocity += oldVelocity * 0.4f;
					dust = dust18;
					dust.velocity *= 0.5f;
					dust18.noGravity = true;
					vector19 -= vector18 * 8f;
				}
				Dust.NewDustDirect(position, width, height, 11, 0f, 0f, 0, Color.Red, 1.6f).noGravity = true;
			}
			if (type == 664 || type == 666 || type == 668 || type == 706)
			{
				int num77 = 4;
				int num78 = 20;
				int num79 = 10;
				int num80 = 20;
				int num81 = 20;
				int num82 = 4;
				float num83 = 1.5f;
				int num84 = 6;
				int num85 = 6;
				if (Main.player[owner].setApprenticeT3)
				{
					num77 += 4;
					num81 += 10;
					num78 += 20;
					num80 += 30;
					num79 /= 2;
					num82 += 4;
					num83 += 0.5f;
					num84 += 7;
					num85 = 270;
				}
				position = base.Center;
				width = (height = 16 * num84);
				base.Center = position;
				Damage();
				SoundEngine.PlaySound(SoundID.Item100, position);
				for (int num86 = 0; num86 < num77; num86++)
				{
					int num87 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num87].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				}
				for (int num88 = 0; num88 < num78; num88++)
				{
					Dust dust19 = Dust.NewDustDirect(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 2.5f);
					dust19.position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 10f;
					Dust dust = dust19;
					dust.velocity *= 16f;
					if (dust19.velocity.Y > -2f)
					{
						dust19.velocity.Y *= -0.4f;
					}
					dust19.noLight = true;
					dust19.noGravity = true;
				}
				for (int num89 = 0; num89 < num80; num89++)
				{
					Dust dust20 = Dust.NewDustDirect(new Vector2(position.X, position.Y), width, height, num85, 0f, 0f, 100, default(Color), 1.5f);
					dust20.position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Dust dust = dust20;
					dust.velocity *= 2f;
					dust20.noGravity = true;
					dust20.fadeIn = num83;
				}
				for (int num90 = 0; num90 < num79; num90++)
				{
					int num91 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num91].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num91].noGravity = true;
					Dust dust = Main.dust[num91];
					dust.velocity *= 3f;
				}
				for (int num92 = 0; num92 < num81; num92++)
				{
					int num93 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num93].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num93].noGravity = true;
					Dust dust = Main.dust[num93];
					dust.velocity *= 3f;
				}
				for (int num94 = 0; num94 < num82; num94++)
				{
					int num95 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num95].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Gore gore = Main.gore[num95];
					gore.position -= Vector2.One * 16f;
					if (Main.rand.Next(2) == 0)
					{
						Main.gore[num95].position.Y -= 30f;
					}
					gore = Main.gore[num95];
					gore.velocity *= 0.3f;
					Main.gore[num95].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num95].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			else if (type == 681)
			{
				position.X += width / 2;
				position.Y += height / 2;
				SoundEngine.PlaySound(SoundID.DD2_GoblinBomb, position);
				width = 22;
				height = 22;
				position.X -= width / 2;
				position.Y -= height / 2;
				for (int num96 = 0; num96 < 10; num96++)
				{
					int num97 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num97];
					dust.velocity *= 1.4f;
					num97 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num97];
					dust.velocity *= 1.4f;
					Main.dust[num97].noGravity = true;
					Main.dust[num97].fadeIn = 2f;
				}
				for (int num98 = 0; num98 < 10; num98++)
				{
					int num99 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num99].noGravity = true;
					Dust dust = Main.dust[num99];
					dust.velocity *= 5f;
					num99 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num99];
					dust.velocity *= 3f;
				}
				int num100 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
				Gore gore = Main.gore[num100];
				gore.velocity *= 0.4f;
				Main.gore[num100].velocity.X += 1f;
				Main.gore[num100].velocity.Y += 1f;
				num100 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
				gore = Main.gore[num100];
				gore.velocity *= 0.4f;
				Main.gore[num100].velocity.X -= 1f;
				Main.gore[num100].velocity.Y += 1f;
				num100 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
				gore = Main.gore[num100];
				gore.velocity *= 0.4f;
				Main.gore[num100].velocity.X += 1f;
				Main.gore[num100].velocity.Y -= 1f;
				num100 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
				gore = Main.gore[num100];
				gore.velocity *= 0.4f;
				Main.gore[num100].velocity.X -= 1f;
				Main.gore[num100].velocity.Y -= 1f;
				position.X += width / 2;
				position.Y += height / 2;
				width = 80;
				height = 80;
				position.X -= width / 2;
				position.Y -= height / 2;
				Damage();
			}
			if (type == 669)
			{
				SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
				Vector2 vector20 = new Vector2(20f, 20f);
				for (int num101 = 0; num101 < 10; num101++)
				{
					Dust dust21 = Dust.NewDustDirect(base.Center - vector20 / 2f, (int)vector20.X, (int)vector20.Y, 4, 0f, 0f, 100, new Color(255, 255, 255, 110), 1.1f);
					Dust dust = dust21;
					dust.velocity *= 1.4f;
				}
				for (int num102 = 0; num102 < 40; num102++)
				{
					Dust dust22 = Dust.NewDustDirect(base.Center - vector20 / 2f, (int)vector20.X, (int)vector20.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 1.2f);
					dust22.noGravity = true;
					Dust dust = dust22;
					dust.velocity *= 4f;
					dust22 = Dust.NewDustDirect(base.Center - vector20 / 2f, (int)vector20.X, (int)vector20.Y, 4, 0f, 0f, 50, new Color(245, 200, 30, 155), 0.8f);
					dust = dust22;
					dust.velocity *= 2f;
				}
			}
			if (Main.myPlayer == owner && bobber)
			{
				PopupText.ClearSonarText();
				if (ai[1] > 0f && ai[1] < 5125f)
				{
					AI_061_FishingBobber_GiveItemToPlayer(Main.player[owner], (int)ai[1]);
				}
				ai[1] = 0f;
			}
			if (type == 634 || type == 635)
			{
				int num103 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, 255);
				int num104 = 255;
				int num105 = 255;
				int num106 = 50;
				float num107 = 1.7f;
				float num108 = 0.8f;
				float num109 = 2f;
				Vector2 vector21 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
				Vector2 vector22 = vector21 * velocity.Length() * MaxUpdates;
				if (type == 635)
				{
					num104 = 88;
					num105 = 88;
					num103 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
					num107 = 3.7f;
					num108 = 1.5f;
					num109 = 2.2f;
					vector22 *= 0.5f;
				}
				SoundEngine.PlaySound(SoundID.Item14, position);
				position = base.Center;
				width = (height = num106);
				base.Center = position;
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				for (int num110 = 0; num110 < 40; num110++)
				{
					num103 = Utils.SelectRandom<int>(Main.rand, 242, 73, 72, 71, 255);
					if (type == 635)
					{
						num103 = Utils.SelectRandom<int>(Main.rand, 242, 59, 88);
					}
					int num111 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num103, 0f, 0f, 200, default(Color), num107);
					Main.dust[num111].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num111].noGravity = true;
					Dust dust = Main.dust[num111];
					dust.velocity *= 3f;
					dust = Main.dust[num111];
					dust.velocity += vector22 * Main.rand.NextFloat();
					num111 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num104, 0f, 0f, 100, default(Color), num108);
					Main.dust[num111].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					dust = Main.dust[num111];
					dust.velocity *= 2f;
					Main.dust[num111].noGravity = true;
					Main.dust[num111].fadeIn = 1f;
					Main.dust[num111].color = Color.Crimson * 0.5f;
					dust = Main.dust[num111];
					dust.velocity += vector22 * Main.rand.NextFloat();
				}
				for (int num112 = 0; num112 < 20; num112++)
				{
					int num113 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num105, 0f, 0f, 0, default(Color), num109);
					Main.dust[num113].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 3f;
					Main.dust[num113].noGravity = true;
					Dust dust = Main.dust[num113];
					dust.velocity *= 0.5f;
					dust = Main.dust[num113];
					dust.velocity += vector22 * (0.6f + 0.6f * Main.rand.NextFloat());
				}
			}
			else if (type == 651)
			{
				if (localAI[0] == 1f && owner == Main.myPlayer)
				{
					Player master = Main.player[owner];
					Point ps = new Vector2(ai[0], ai[1]).ToPoint();
					Point pe = base.Center.ToTileCoordinates();
					if (Main.netMode == 1)
					{
						NetMessage.SendData(109, -1, -1, null, ps.X, ps.Y, pe.X, pe.Y, (int)WiresUI.Settings.ToolMode);
					}
					else
					{
						Wiring.MassWireOperation(ps, pe, master);
					}
				}
			}
			else if (type == 641)
			{
				if (owner == Main.myPlayer)
				{
					for (int num114 = 0; num114 < 1000; num114++)
					{
						if (Main.projectile[num114].active && Main.projectile[num114].owner == owner && Main.projectile[num114].type == 642)
						{
							Main.projectile[num114].Kill();
						}
					}
				}
			}
			else if (type == 643)
			{
				if (owner == Main.myPlayer)
				{
					for (int num115 = 0; num115 < 1000; num115++)
					{
						if (Main.projectile[num115].active && Main.projectile[num115].owner == owner && Main.projectile[num115].type == 644)
						{
							Main.projectile[num115].Kill();
						}
					}
				}
			}
			else if (type == 645)
			{
				bool flag = WorldGen.SolidTile(Framing.GetTileSafely((int)position.X / 16, (int)position.Y / 16));
				for (int num116 = 0; num116 < 4; num116++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num117 = 0; num117 < 4; num117++)
				{
					int num118 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num118].noGravity = true;
					Dust dust = Main.dust[num118];
					dust.velocity *= 3f;
					if (flag)
					{
						Main.dust[num118].noLight = true;
					}
					num118 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num118];
					dust.velocity *= 2f;
					Main.dust[num118].noGravity = true;
					if (flag)
					{
						Main.dust[num118].noLight = true;
					}
				}
				for (int num119 = 0; num119 < 1; num119++)
				{
					int num120 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num120];
					gore.velocity *= 0.3f;
					Main.gore[num120].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num120].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			else if (type == 636)
			{
				Rectangle hitbox2 = base.Hitbox;
				for (int num121 = 0; num121 < 6; num121 += 3)
				{
					hitbox2.X = (int)oldPos[num121].X;
					hitbox2.Y = (int)oldPos[num121].Y;
					for (int num122 = 0; num122 < 5; num122++)
					{
						int num123 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
						int num124 = Dust.NewDust(hitbox2.TopLeft(), width, height, num123, 2.5f * (float)direction, -2.5f);
						Main.dust[num124].alpha = 200;
						Dust dust = Main.dust[num124];
						dust.velocity *= 2.4f;
						dust = Main.dust[num124];
						dust.scale += Main.rand.NextFloat();
					}
				}
				if (Main.myPlayer == owner)
				{
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 953, damage, 10f, owner, 0f, 0.85f + Main.rand.NextFloat() * 1.15f);
				}
			}
			else if (type == 614)
			{
				for (int num125 = 0; num125 < 10; num125++)
				{
					Dust dust23 = Main.dust[Dust.NewDust(position, width, height, 229)];
					dust23.noGravity = true;
					Dust dust = dust23;
					dust.velocity *= 3f;
				}
			}
			if (type == 644)
			{
				DoRainbowCrystalStaffExplosion();
				if (Main.myPlayer == owner)
				{
					friendly = true;
					int num126 = width;
					int num127 = height;
					int num128 = penetrate;
					position = base.Center;
					width = (height = 60);
					base.Center = position;
					penetrate = -1;
					maxPenetrate = -1;
					Damage();
					penetrate = num128;
					position = base.Center;
					width = num126;
					height = num127;
					base.Center = position;
				}
			}
			if (type == 608)
			{
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				SoundEngine.PlaySound(SoundID.Item14, position);
				for (int num129 = 0; num129 < 4; num129++)
				{
					int num130 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num130].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				}
				for (int num131 = 0; num131 < 30; num131++)
				{
					int num132 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num132].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num132].noGravity = true;
					Dust dust = Main.dust[num132];
					dust.velocity *= 3f;
					Main.dust[num132].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].ArmorSetDye(), Main.player[owner]);
					num132 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num132].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					dust = Main.dust[num132];
					dust.velocity *= 2f;
					Main.dust[num132].noGravity = true;
					Main.dust[num132].fadeIn = 2.5f;
					Main.dust[num132].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].ArmorSetDye(), Main.player[owner]);
				}
				for (int num133 = 0; num133 < 10; num133++)
				{
					int num134 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num134].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num134].noGravity = true;
					Dust dust = Main.dust[num134];
					dust.velocity *= 3f;
					Main.dust[num134].shader = GameShaders.Armor.GetSecondaryShader(Main.player[owner].ArmorSetDye(), Main.player[owner]);
				}
				for (int num135 = 0; num135 < 10; num135++)
				{
					int num136 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num136].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num136].noGravity = true;
					Dust dust = Main.dust[num136];
					dust.velocity *= 3f;
				}
				for (int num137 = 0; num137 < 2; num137++)
				{
					int num138 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num138].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Gore gore = Main.gore[num138];
					gore.velocity *= 0.3f;
					Main.gore[num138].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num138].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			else if (type == 661)
			{
				position = base.Center;
				width = (height = 160);
				base.Center = position;
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				SoundEngine.PlaySound(SoundID.Item14, position);
				Vector2 vector23 = base.Center + Vector2.One * -20f;
				int num139 = 40;
				int num140 = num139;
				for (int num141 = 0; num141 < 4; num141++)
				{
					int num142 = Dust.NewDust(vector23, num139, num140, 240, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num142].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * num139 / 2f;
				}
				for (int num143 = 0; num143 < 20; num143++)
				{
					int num144 = Dust.NewDust(vector23, num139, num140, 62, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num144].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * num139 / 2f;
					Main.dust[num144].noGravity = true;
					Main.dust[num144].noLight = true;
					Dust dust = Main.dust[num144];
					dust.velocity *= 3f;
					dust = Main.dust[num144];
					dust.velocity += DirectionTo(Main.dust[num144].position) * (2f + Main.rand.NextFloat() * 4f);
					num144 = Dust.NewDust(vector23, num139, num140, 62, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num144].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * num139 / 2f;
					dust = Main.dust[num144];
					dust.velocity *= 2f;
					Main.dust[num144].noGravity = true;
					Main.dust[num144].fadeIn = 1f;
					Main.dust[num144].color = Color.Crimson * 0.5f;
					Main.dust[num144].noLight = true;
					dust = Main.dust[num144];
					dust.velocity += DirectionTo(Main.dust[num144].position) * 8f;
				}
				for (int num145 = 0; num145 < 20; num145++)
				{
					int num146 = Dust.NewDust(vector23, num139, num140, 62, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num146].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * num139 / 2f;
					Main.dust[num146].noGravity = true;
					Main.dust[num146].noLight = true;
					Dust dust = Main.dust[num146];
					dust.velocity *= 3f;
					dust = Main.dust[num146];
					dust.velocity += DirectionTo(Main.dust[num146].position) * 2f;
				}
				for (int num147 = 0; num147 < 70; num147++)
				{
					int num148 = Dust.NewDust(vector23, num139, num140, 240, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num148].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * num139 / 2f;
					Main.dust[num148].noGravity = true;
					Dust dust = Main.dust[num148];
					dust.velocity *= 3f;
					dust = Main.dust[num148];
					dust.velocity += DirectionTo(Main.dust[num148].position) * 3f;
				}
			}
			else if (type == 617)
			{
				position = base.Center;
				width = (height = 176);
				base.Center = position;
				maxPenetrate = -1;
				penetrate = -1;
				Damage();
				SoundEngine.PlaySound(SoundID.Item14, position);
				for (int num149 = 0; num149 < 4; num149++)
				{
					int num150 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 240, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num150].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				}
				for (int num151 = 0; num151 < 30; num151++)
				{
					int num152 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 62, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num152].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num152].noGravity = true;
					Dust dust = Main.dust[num152];
					dust.velocity *= 3f;
					num152 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 90, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num152].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					dust = Main.dust[num152];
					dust.velocity *= 2f;
					Main.dust[num152].noGravity = true;
					Main.dust[num152].fadeIn = 1f;
					Main.dust[num152].color = Color.Crimson * 0.5f;
				}
				for (int num153 = 0; num153 < 10; num153++)
				{
					int num154 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 62, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num154].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num154].noGravity = true;
					Dust dust = Main.dust[num154];
					dust.velocity *= 3f;
				}
				for (int num155 = 0; num155 < 10; num155++)
				{
					int num156 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 240, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num156].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num156].noGravity = true;
					Dust dust = Main.dust[num156];
					dust.velocity *= 3f;
				}
				for (int num157 = 0; num157 < 2; num157++)
				{
					int num158 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num158].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Gore gore = Main.gore[num158];
					gore.velocity *= 0.3f;
					Main.gore[num158].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num158].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				if (Main.myPlayer == owner)
				{
					for (int num159 = 0; num159 < 1000; num159++)
					{
						if (Main.projectile[num159].active && Main.projectile[num159].type == 618 && Main.projectile[num159].ai[1] == (float)whoAmI)
						{
							Main.projectile[num159].Kill();
						}
					}
					int num160 = Main.rand.Next(5, 9);
					int num161 = Main.rand.Next(5, 9);
					int num162 = Utils.SelectRandom<int>(Main.rand, 86, 90);
					int num163 = ((num162 == 86) ? 90 : 86);
					for (int num164 = 0; num164 < num160; num164++)
					{
						Vector2 vector24 = base.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
						Vector2 vector25 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						while (vector25.X == 0f && vector25.Y == 0f)
						{
							vector25 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						}
						vector25.Normalize();
						if (vector25.Y > 0.2f)
						{
							vector25.Y *= -1f;
						}
						vector25 *= (float)Main.rand.Next(70, 101) * 0.1f;
						NewProjectile(GetProjectileSource_FromThis(), vector24.X, vector24.Y, vector25.X, vector25.Y, 620, (int)((double)damage * 0.65), knockBack * 0.8f, owner, num162);
					}
					for (int num165 = 0; num165 < num161; num165++)
					{
						Vector2 vector26 = base.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
						Vector2 vector27 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						while (vector27.X == 0f && vector27.Y == 0f)
						{
							vector27 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						}
						vector27.Normalize();
						if (vector27.Y > 0.4f)
						{
							vector27.Y *= -1f;
						}
						vector27 *= (float)Main.rand.Next(40, 81) * 0.1f;
						NewProjectile(GetProjectileSource_FromThis(), vector26.X, vector26.Y, vector27.X, vector27.Y, 620, (int)((double)damage * 0.65), knockBack * 0.8f, owner, num163);
					}
				}
			}
			else if (type == 658)
			{
				for (int num166 = 0; num166 < 10; num166++)
				{
					int num167 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 269, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num167].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num167].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
						dust = Main.dust[num167];
						dust.type++;
					}
					else
					{
						Main.dust[num167].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num167].noGravity = true;
					dust = Main.dust[num167];
					dust.velocity *= 1.25f;
					dust = Main.dust[num167];
					dust.velocity -= oldVelocity / 10f;
				}
			}
			else if (type == 620 || type == 618)
			{
				if (type == 618)
				{
					ai[0] = 86f;
				}
				for (int num168 = 0; num168 < 10; num168++)
				{
					int num169 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, (int)ai[0], velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num169].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num169].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
						dust = Main.dust[num169];
						dust.type++;
					}
					else
					{
						Main.dust[num169].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num169].noGravity = true;
					dust = Main.dust[num169];
					dust.velocity *= 1.25f;
					dust = Main.dust[num169];
					dust.velocity -= oldVelocity / 10f;
				}
			}
			else if (type == 619)
			{
				SoundEngine.PlaySound(SoundID.Item50, position);
				for (int num170 = 0; num170 < 20; num170++)
				{
					int num171 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, (int)ai[0], velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num171].fadeIn = 1.1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num171].scale = 0.35f + (float)Main.rand.Next(-10, 11) * 0.01f;
						dust = Main.dust[num171];
						dust.type++;
					}
					else
					{
						Main.dust[num171].scale = 1.2f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num171].noGravity = true;
					dust = Main.dust[num171];
					dust.velocity *= 2.5f;
					dust = Main.dust[num171];
					dust.velocity -= oldVelocity / 10f;
				}
				if (Main.myPlayer == owner)
				{
					int num172 = Main.rand.Next(3, 6);
					for (int num173 = 0; num173 < num172; num173++)
					{
						Vector2 vector28 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						while (vector28.X == 0f && vector28.Y == 0f)
						{
							vector28 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						}
						vector28.Normalize();
						vector28 *= (float)Main.rand.Next(70, 101) * 0.1f;
						NewProjectile(GetProjectileSource_FromThis(), oldPosition.X + (float)(width / 2), oldPosition.Y + (float)(height / 2), vector28.X, vector28.Y, 620, (int)((double)damage * 0.8), knockBack * 0.8f, owner, ai[0]);
					}
				}
			}
			if (type == 601)
			{
				Color portalColor = PortalHelper.GetPortalColor(owner, (int)ai[0]);
				Color color = portalColor;
				color.A = byte.MaxValue;
				for (int num174 = 0; num174 < 6; num174++)
				{
					Vector2 vector29 = Vector2.UnitY.RotatedByRandom(6.2831854820251465) * (3f * Main.rand.NextFloat());
					Dust dust24 = Main.dust[Dust.NewDust(base.Center, 0, 0, 263)];
					dust24.position = base.Center;
					dust24.velocity = vector29 + velocity / 5f;
					dust24.color = color;
					dust24.scale = 2f;
					dust24.noLight = true;
					dust24.noGravity = true;
				}
			}
			if (type == 596)
			{
				position = base.Center;
				width = (height = 60);
				base.Center = position;
				int num175 = 40;
				if (Main.expertMode)
				{
					num175 = 30;
				}
				damage = num175;
				Damage();
				SoundEngine.PlaySound(SoundID.Item14, position);
				for (int num176 = 0; num176 < 4; num176++)
				{
					int num177 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num177].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				}
				for (int num178 = 0; num178 < 20; num178++)
				{
					int num179 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num179].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num179].noGravity = true;
					Dust dust = Main.dust[num179];
					dust.velocity *= 2f;
				}
				for (int num180 = 0; num180 < 10; num180++)
				{
					int num181 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num181].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num181].noGravity = true;
					Dust dust = Main.dust[num181];
					dust.velocity *= 2f;
				}
			}
			if (type == 659)
			{
				if (ai[0] >= 0f)
				{
					position = base.Center;
					width = (height = 40);
					base.Center = position;
					Damage();
					SoundEngine.PlaySound(SoundID.Item14, position);
					for (int num182 = 0; num182 < 2; num182++)
					{
						int num183 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num183].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					}
					for (int num184 = 0; num184 < 10; num184++)
					{
						int num185 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 0, default(Color), 2.5f);
						Main.dust[num185].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
						Main.dust[num185].noGravity = true;
						Dust dust = Main.dust[num185];
						dust.velocity *= 2f;
					}
					for (int num186 = 0; num186 < 5; num186++)
					{
						int num187 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num187].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
						Main.dust[num187].noGravity = true;
						Dust dust = Main.dust[num187];
						dust.velocity *= 2f;
					}
				}
			}
			else if (type >= 625 && type <= 628)
			{
				for (int num188 = 0; num188 < 6; num188++)
				{
					int num189 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num189].noGravity = true;
					Main.dust[num189].noLight = true;
				}
			}
			if (type == 631)
			{
				int num190 = Main.rand.Next(5, 10);
				for (int num191 = 0; num191 < num190; num191++)
				{
					int num192 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
					Dust dust = Main.dust[num192];
					dust.velocity *= 1.6f;
					Main.dust[num192].velocity.Y -= 1f;
					dust = Main.dust[num192];
					dust.position -= Vector2.One * 4f;
					Main.dust[num192].position = Vector2.Lerp(Main.dust[num192].position, base.Center, 0.5f);
					Main.dust[num192].noGravity = true;
				}
			}
			if (type == 539)
			{
				position = base.Center;
				width = (height = 80);
				base.Center = position;
				Damage();
				SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 7);
				for (int num193 = 0; num193 < 4; num193++)
				{
					int num194 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num194].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				}
				for (int num195 = 0; num195 < 20; num195++)
				{
					int num196 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 176, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num196].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num196].noGravity = true;
					Dust dust = Main.dust[num196];
					dust.velocity *= 3f;
				}
				for (int num197 = 0; num197 < 20; num197++)
				{
					int num198 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 180, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num198].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num198].noGravity = true;
					Dust dust = Main.dust[num198];
					dust.velocity *= 3f;
				}
				for (int num199 = 0; num199 < 10; num199++)
				{
					int num200 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num200].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num200].noGravity = true;
					Dust dust = Main.dust[num200];
					dust.velocity *= 3f;
				}
			}
			else if (type == 585)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y, 27);
				for (int num201 = 0; num201 < 20; num201++)
				{
					int num202 = Dust.NewDust(position, width, height, 26, 0f, 0f, 100);
					Main.dust[num202].noGravity = true;
					Dust dust = Main.dust[num202];
					dust.velocity *= 1.2f;
					Main.dust[num202].scale = 1.3f;
					dust = Main.dust[num202];
					dust.velocity -= oldVelocity * 0.3f;
					num202 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 27, 0f, 0f, 100, default(Color), 2f);
					Main.dust[num202].noGravity = true;
					dust = Main.dust[num202];
					dust.velocity *= 3f;
				}
			}
			else if (type == 590)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y, 27);
				for (int num203 = 0; num203 < 10; num203++)
				{
					int num204 = Dust.NewDust(position, width, height, 165, 0f, 0f, 50, default(Color), 1.5f);
					Dust dust = Main.dust[num204];
					dust.velocity *= 2f;
					Main.dust[num204].noGravity = true;
				}
				float num205 = 0.6f + Main.rand.NextFloat() * 0.4f;
				int num206 = Gore.NewGore(position, Vector2.Zero, 375, num205);
				Gore gore = Main.gore[num206];
				gore.velocity *= 0.3f;
				num206 = Gore.NewGore(position, Vector2.Zero, 376, num205);
				gore = Main.gore[num206];
				gore.velocity *= 0.3f;
				num206 = Gore.NewGore(position, Vector2.Zero, 377, num205);
				gore = Main.gore[num206];
				gore.velocity *= 0.3f;
			}
			else if (type == 587)
			{
				Color newColor4 = Main.hslToRgb(ai[1], 1f, 0.5f);
				newColor4.A = 200;
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num207 = 0; num207 < 10; num207++)
				{
					int num208 = Dust.NewDust(position, width, height, 76, 0f, 0f, 0, newColor4);
					Main.dust[num208].noGravity = true;
					Dust dust = Main.dust[num208];
					dust.velocity *= 1.2f;
					Main.dust[num208].scale = 0.9f;
					dust = Main.dust[num208];
					dust.velocity -= oldVelocity * 0.3f;
					num208 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 76, 0f, 0f, 0, newColor4, 1.1f);
					Main.dust[num208].noGravity = true;
					dust = Main.dust[num208];
					dust.velocity *= 2f;
				}
			}
			else if (type == 572)
			{
				for (int num209 = 0; num209 < 15; num209++)
				{
					int num210 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 40, velocity.X * 0.1f, velocity.Y * 0.1f, 100);
					Dust dust = Main.dust[num210];
					dust.velocity *= 3f;
					Main.dust[num210].noGravity = true;
					Main.dust[num210].scale = 1.25f;
					Main.dust[num210].position = (base.Center + position) / 2f;
				}
			}
			else if (type == 581)
			{
				for (int num211 = 0; num211 < 30; num211++)
				{
					int num212 = Utils.SelectRandom<int>(Main.rand, 229, 229, 161);
					Dust dust25 = Main.dust[Dust.NewDust(position, width, height, num212)];
					dust25.noGravity = true;
					dust25.scale = 1.25f + Main.rand.NextFloat();
					dust25.fadeIn = 0.25f;
					Dust dust = dust25;
					dust.velocity *= 2f;
					dust25.noLight = true;
				}
			}
			else if (type == 671)
			{
				for (int num213 = 0; num213 < 30; num213++)
				{
					int num214 = Utils.SelectRandom<int>(Main.rand, 27, 27, 62);
					Dust dust26 = Main.dust[Dust.NewDust(position, width, height, num214)];
					dust26.noGravity = true;
					dust26.scale = 1.25f + Main.rand.NextFloat();
					dust26.fadeIn = 0.25f;
					Dust dust = dust26;
					dust.velocity *= 2f;
					dust26.noLight = true;
				}
			}
			else if (type == 811 || type == 814)
			{
				for (int num215 = 0; num215 < 30; num215++)
				{
					Dust dust27 = Main.dust[Dust.NewDust(position, width, height, 5)];
					dust27.scale = 1.25f + Main.rand.NextFloat();
					Dust dust = dust27;
					dust.velocity *= 2f;
				}
			}
			else if (type == 819)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num216 = 0; num216 < 20; num216++)
				{
					Dust dust28 = Main.dust[Dust.NewDust(position, width, height, 5)];
					dust28.scale = 1f + Main.rand.NextFloat() * 0.5f;
					Dust dust = dust28;
					dust.velocity *= 1.5f;
				}
			}
			else if (type == 675)
			{
				for (int num217 = 0; num217 < 40; num217++)
				{
					int num218 = Utils.SelectRandom<int>(Main.rand, 27, 242, 73, 72, 71, 255, 255, 255);
					Dust dust29 = Main.dust[Dust.NewDust(position, width, height, num218)];
					dust29.noGravity = true;
					dust29.scale = 1.25f + Main.rand.NextFloat();
					dust29.fadeIn = 0.25f;
					Dust dust = dust29;
					dust.velocity *= 3f;
					dust29.noLight = true;
				}
			}
			else if (type == 676)
			{
				for (int num219 = 0; num219 < 120; num219++)
				{
					int num220 = Utils.SelectRandom<int>(Main.rand, 4, 256);
					Dust dust30 = Main.dust[Dust.NewDust(position, width, height, num220, 0f, 0f, 100)];
					dust30.scale = 0.8f + Main.rand.NextFloat() * 0.6f;
					dust30.fadeIn = 0.5f;
					Dust dust = dust30;
					dust.velocity *= 4.5f;
					dust30.noLight = true;
					if (dust30.velocity.Y > 0f)
					{
						dust = dust30;
						dust.velocity *= -0.5f;
					}
					if (dust30.type == 4)
					{
						dust30.color = new Color(80, 170, 40, 120);
					}
				}
				for (int num221 = 0; num221 < 10; num221++)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 5f), 1024);
				}
				for (int num222 = 0; num222 < 10; num222++)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 5f), 1025);
				}
				for (int num223 = 0; num223 < 10; num223++)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 5f), 1026);
				}
				for (int num224 = 0; num224 < 20; num224++)
				{
					Gore.NewGoreDirect(base.Center, new Vector2(MathHelper.Lerp(-0.5f, 0.5f, Main.rand.NextFloat()), (0f - Main.rand.NextFloat()) * 2f), 1026);
				}
				if (Main.netMode != 2)
				{
					Player player = Main.player[Main.myPlayer];
					if (!player.dead && player.active && (player.Center - base.Center).Length() < 300f && !player.creativeGodMode)
					{
						player.AddBuff(197, 900, quiet: false);
					}
				}
			}
			else if (type == 686)
			{
				Rectangle hitbox3 = base.Hitbox;
				for (int num225 = 0; num225 < oldPos.Length / 2; num225 += 2)
				{
					hitbox3.X = (int)oldPos[num225].X;
					hitbox3.Y = (int)oldPos[num225].Y;
					for (int num226 = 0; num226 < 3; num226++)
					{
						int num227 = Utils.SelectRandom<int>(Main.rand, 6, 55, 158);
						int num228 = Dust.NewDust(hitbox3.TopLeft(), width, height, num227, direction, -2.5f);
						Main.dust[num228].alpha = 200;
						Dust dust = Main.dust[num228];
						dust.velocity *= 2.4f;
						dust = Main.dust[num228];
						dust.scale += Main.rand.NextFloat();
						dust = Main.dust[num228];
						dust.scale -= 0.5f;
						if (Main.dust[num228].type == 55)
						{
							Main.dust[num228].color = Color.Lerp(Color.Red, Color.Gold, Main.rand.NextFloat());
						}
						Main.dust[num228].noLight = true;
					}
				}
				for (int num229 = 10; num229 < oldPos.Length; num229 += 2)
				{
					hitbox3.X = (int)oldPos[num229].X;
					hitbox3.Y = (int)oldPos[num229].Y;
					for (int num230 = 0; num230 < 2; num230++)
					{
						int num231 = Utils.SelectRandom<int>(Main.rand, 55);
						int num232 = Dust.NewDust(hitbox3.TopLeft(), width, height, num231, direction, -2.5f);
						Main.dust[num232].alpha = 120;
						Dust dust = Main.dust[num232];
						dust.velocity *= 2.4f;
						dust = Main.dust[num232];
						dust.scale += Main.rand.NextFloat() * 0.7f;
						dust = Main.dust[num232];
						dust.scale -= 0.5f;
						if (Main.dust[num232].type == 55)
						{
							Main.dust[num232].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
						}
						Main.dust[num232].noLight = true;
					}
				}
				for (int num233 = 5; num233 < oldPos.Length; num233++)
				{
					hitbox3.X = (int)oldPos[num233].X;
					hitbox3.Y = (int)oldPos[num233].Y;
					for (int num234 = 0; num234 < 1; num234++)
					{
						int num235 = Utils.SelectRandom<int>(Main.rand, 55);
						int num236 = Dust.NewDust(hitbox3.TopLeft(), width, height, num235, direction, -2.5f);
						Main.dust[num236].alpha = 80;
						Dust dust = Main.dust[num236];
						dust.velocity *= 0.3f;
						dust = Main.dust[num236];
						dust.velocity += velocity * 0.5f;
						dust = Main.dust[num236];
						dust.scale += Main.rand.NextFloat() * 0.7f;
						dust = Main.dust[num236];
						dust.scale -= 0.5f;
						if (Main.dust[num236].type == 55)
						{
							Main.dust[num236].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
						}
						Main.dust[num236].noLight = true;
					}
				}
				for (int num237 = 0; num237 < 30; num237++)
				{
					int num238 = 228;
					Dust dust31 = Main.dust[Dust.NewDust(position, width, height, num238)];
					dust31.noGravity = true;
					dust31.scale = 1.25f + Main.rand.NextFloat();
					dust31.fadeIn = 1.5f;
					Dust dust = dust31;
					dust.velocity *= 6f;
					dust31.noLight = true;
				}
			}
			if (type == 405)
			{
				SoundEngine.PlaySound(SoundID.Item54, position);
				_ = base.Center;
				for (int num239 = 0; num239 < 20; num239++)
				{
					int num240 = 10;
					int num241 = Dust.NewDust(base.Center - Vector2.One * num240, num240 * 2, num240 * 2, 212);
					Dust dust32 = Main.dust[num241];
					Vector2 vector30 = Vector2.Normalize(dust32.position - base.Center);
					dust32.position = base.Center + vector30 * num240 * scale;
					if (num239 < 30)
					{
						dust32.velocity = vector30 * dust32.velocity.Length();
					}
					else
					{
						dust32.velocity = vector30 * Main.rand.Next(45, 91) / 10f;
					}
					dust32.color = Main.hslToRgb((float)(0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
					dust32.color = Color.Lerp(dust32.color, Color.White, 0.3f);
					dust32.noGravity = true;
					dust32.scale = 0.7f;
				}
			}
			if (type == 501)
			{
				SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
				int num242 = 20;
				position.X -= num242;
				position.Y -= num242;
				width += num242 * 2;
				height += num242 * 2;
				num242 += 20;
				for (int num243 = 0; num243 < 20; num243++)
				{
					int num244 = Dust.NewDust(position, width, height, 188, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num244];
					dust.velocity *= 0.5f;
				}
				for (int num245 = 0; num245 < 5; num245++)
				{
					int num246 = Gore.NewGore(new Vector2(position.X + (float)Main.rand.Next(width), position.Y + (float)Main.rand.Next(height)), default(Vector2), Main.rand.Next(435, 438));
					Gore gore = Main.gore[num246];
					gore.velocity *= 0.5f;
					switch (num245)
					{
					case 0:
						Main.gore[num246].velocity.X += 1f;
						Main.gore[num246].velocity.Y += 1f;
						break;
					case 1:
						Main.gore[num246].velocity.X -= 1f;
						Main.gore[num246].velocity.Y += 1f;
						break;
					case 2:
						Main.gore[num246].velocity.X += 1f;
						Main.gore[num246].velocity.Y -= 1f;
						break;
					default:
						Main.gore[num246].velocity.X -= 1f;
						Main.gore[num246].velocity.Y -= 1f;
						break;
					}
					gore = Main.gore[num246];
					gore.velocity *= 0.5f;
				}
				position.X -= num242;
				position.Y -= num242;
				width += num242 * 2;
				height += num242 * 2;
				Damage();
			}
			if (type == 410)
			{
				SoundEngine.PlaySound(SoundID.Item54, position);
				_ = base.Center;
				for (int num247 = 0; num247 < 10; num247++)
				{
					int num248 = (int)(10f * ai[1]);
					int num249 = Dust.NewDust(base.Center - Vector2.One * num248, num248 * 2, num248 * 2, 212);
					Dust dust33 = Main.dust[num249];
					Vector2 vector31 = Vector2.Normalize(dust33.position - base.Center);
					dust33.position = base.Center + vector31 * num248 * scale;
					if (num247 < 30)
					{
						dust33.velocity = vector31 * dust33.velocity.Length();
					}
					else
					{
						dust33.velocity = vector31 * Main.rand.Next(45, 91) / 10f;
					}
					dust33.color = Main.hslToRgb((float)(0.40000000596046448 + Main.rand.NextDouble() * 0.20000000298023224), 0.9f, 0.5f);
					dust33.color = Color.Lerp(dust33.color, Color.White, 0.3f);
					dust33.noGravity = true;
					dust33.scale = 0.7f;
				}
			}
			if (type == 629 && Main.netMode != 1)
			{
				switch (Main.npc[(int)ai[0]].type)
				{
				case 517:
					if (NPC.ShieldStrengthTowerSolar != 0)
					{
						Main.npc[(int)ai[0]].ai[3] = 1f;
					}
					NPC.ShieldStrengthTowerSolar = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerSolar - 1, 0f, NPC.ShieldStrengthTowerMax);
					break;
				case 422:
					if (NPC.ShieldStrengthTowerVortex != 0)
					{
						Main.npc[(int)ai[0]].ai[3] = 1f;
					}
					NPC.ShieldStrengthTowerVortex = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerVortex - 1, 0f, NPC.ShieldStrengthTowerMax);
					break;
				case 507:
					if (NPC.ShieldStrengthTowerNebula != 0)
					{
						Main.npc[(int)ai[0]].ai[3] = 1f;
					}
					NPC.ShieldStrengthTowerNebula = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerNebula - 1, 0f, NPC.ShieldStrengthTowerMax);
					break;
				case 493:
					if (NPC.ShieldStrengthTowerStardust != 0)
					{
						Main.npc[(int)ai[0]].ai[3] = 1f;
					}
					NPC.ShieldStrengthTowerStardust = (int)MathHelper.Clamp(NPC.ShieldStrengthTowerStardust - 1, 0f, NPC.ShieldStrengthTowerMax);
					break;
				}
				Main.npc[(int)ai[0]].netUpdate = true;
				NetMessage.SendData(101);
			}
			if (aiStyle == 105 && owner == Main.myPlayer && ai[1] == 0f)
			{
				Vector2 vector32 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
				vector32.Normalize();
				vector32 *= 0.3f;
				NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector32.X, vector32.Y, Main.rand.Next(569, 572), damage, 0f, owner);
			}
			if (type == 452)
			{
				SoundEngine.PlaySound(29, (int)position.X, (int)position.Y, 103);
				position = base.Center;
				width = (height = 144);
				position.X -= width / 2;
				position.Y -= height / 2;
				for (int num250 = 0; num250 < 4; num250++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num251 = 0; num251 < 40; num251++)
				{
					int num252 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num252].noGravity = true;
					Dust dust = Main.dust[num252];
					dust.velocity *= 3f;
					num252 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num252];
					dust.velocity *= 2f;
					Main.dust[num252].noGravity = true;
				}
				for (int num253 = 0; num253 < 1; num253++)
				{
					int num254 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num254];
					gore.velocity *= 0.3f;
					Main.gore[num254].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num254].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				Damage();
			}
			if (type == 454)
			{
				SoundEngine.PlaySound(4, (int)position.X, (int)position.Y, 6);
				position = base.Center;
				width = (height = 208);
				position.X -= width / 2;
				position.Y -= height / 2;
				for (int num255 = 0; num255 < 7; num255++)
				{
					int num256 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num256].position = new Vector2(width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
				}
				for (int num257 = 0; num257 < 60; num257++)
				{
					int num258 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num258].position = new Vector2(width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
					Main.dust[num258].noGravity = true;
					Dust dust = Main.dust[num258];
					dust.velocity *= 1f;
					num258 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num258].position = new Vector2(width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
					dust = Main.dust[num258];
					dust.velocity *= 1f;
					Main.dust[num258].noGravity = true;
				}
				for (int num259 = 0; num259 < 3; num259++)
				{
					int num260 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num260];
					gore.velocity *= 0.3f;
					Main.gore[num260].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num260].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				Damage();
			}
			if (type == 467)
			{
				position = base.Center;
				width = (height = 176);
				base.Center = position;
				Damage();
				SoundEngine.PlaySound(SoundID.Item14, position);
				for (int num261 = 0; num261 < 4; num261++)
				{
					int num262 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num262].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				}
				for (int num263 = 0; num263 < 30; num263++)
				{
					int num264 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num264].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num264].noGravity = true;
					Dust dust = Main.dust[num264];
					dust.velocity *= 3f;
					num264 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num264].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					dust = Main.dust[num264];
					dust.velocity *= 2f;
					Main.dust[num264].noGravity = true;
					Main.dust[num264].fadeIn = 2.5f;
				}
				for (int num265 = 0; num265 < 10; num265++)
				{
					int num266 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num266].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num266].noGravity = true;
					Dust dust = Main.dust[num266];
					dust.velocity *= 3f;
				}
				for (int num267 = 0; num267 < 10; num267++)
				{
					int num268 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num268].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num268].noGravity = true;
					Dust dust = Main.dust[num268];
					dust.velocity *= 3f;
				}
				for (int num269 = 0; num269 < 2; num269++)
				{
					int num270 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num270].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Gore gore = Main.gore[num270];
					gore.velocity *= 0.3f;
					Main.gore[num270].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num270].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			if (type == 468)
			{
				position = base.Center;
				width = (height = 176);
				base.Center = position;
				Damage();
				SoundEngine.PlaySound(SoundID.Item14, position);
				for (int num271 = 0; num271 < 4; num271++)
				{
					int num272 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num272].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
				}
				for (int num273 = 0; num273 < 20; num273++)
				{
					int num274 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 200, default(Color), 3.7f);
					Main.dust[num274].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Main.dust[num274].noGravity = true;
					Dust dust = Main.dust[num274];
					dust.velocity *= 3f;
					num274 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num274].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					dust = Main.dust[num274];
					dust.velocity *= 2f;
					Main.dust[num274].noGravity = true;
					Main.dust[num274].fadeIn = 2.5f;
				}
				for (int num275 = 0; num275 < 10; num275++)
				{
					int num276 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, 0f, 0f, 0, default(Color), 2.7f);
					Main.dust[num276].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num276].noGravity = true;
					Dust dust = Main.dust[num276];
					dust.velocity *= 3f;
				}
				for (int num277 = 0; num277 < 10; num277++)
				{
					int num278 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num278].position = base.Center + Vector2.UnitX.RotatedByRandom(3.1415927410125732).RotatedBy(velocity.ToRotation()) * width / 2f;
					Main.dust[num278].noGravity = true;
					Dust dust = Main.dust[num278];
					dust.velocity *= 3f;
				}
				for (int num279 = 0; num279 < 2; num279++)
				{
					int num280 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Main.gore[num280].position = base.Center + Vector2.UnitY.RotatedByRandom(3.1415927410125732) * (float)Main.rand.NextDouble() * width / 2f;
					Gore gore = Main.gore[num280];
					gore.velocity *= 0.3f;
					Main.gore[num280].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num280].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
			}
			if (type == 485)
			{
				for (int num281 = 0; num281 < 15; num281++)
				{
					int num282 = Dust.NewDust(position, width, height, 6);
					Main.dust[num282].noGravity = true;
					Dust dust = Main.dust[num282];
					dust.velocity -= oldVelocity * Main.rand.Next(20, 60) * 0.01f;
				}
			}
			else if (type == 484)
			{
				for (int num283 = 0; num283 < 5; num283++)
				{
					int num284 = Dust.NewDust(position, width, height, 78);
					Main.dust[num284].noGravity = true;
					Dust dust = Main.dust[num284];
					dust.velocity -= oldVelocity / 5f;
					Main.dust[num284].scale = 0.85f;
				}
			}
			else if (type == 483)
			{
				SoundEngine.PlaySound(SoundID.Item14, position);
				if (owner == Main.myPlayer)
				{
					int num285 = Main.rand.Next(4, 8);
					int[] array = new int[num285];
					int num286 = 0;
					for (int num287 = 0; num287 < 200; num287++)
					{
						if (!Main.npc[num287].CanBeChasedBy(this, ignoreDontTakeDamage: true))
						{
							continue;
						}
						float num288 = Distance(Main.npc[num287].Center);
						if (!(num288 > 2000f) && Collision.CanHitLine(position, width, height, Main.npc[num287].position, Main.npc[num287].width, Main.npc[num287].height))
						{
							array[num286] = num287;
							num286++;
							if (num286 == num285)
							{
								break;
							}
						}
					}
					if (num286 > 1)
					{
						for (int num289 = 0; num289 < 100; num289++)
						{
							int num290 = Main.rand.Next(num286);
							int num291;
							for (num291 = num290; num291 == num290; num291 = Main.rand.Next(num286))
							{
							}
							int num292 = array[num290];
							array[num290] = array[num291];
							array[num291] = num292;
						}
					}
					Vector2 vector33 = new Vector2(-1f, -1f);
					for (int num293 = 0; num293 < num286; num293++)
					{
						Vector2 vector34 = Main.npc[array[num293]].Center - base.Center;
						vector34.Normalize();
						vector33 += vector34;
					}
					vector33.Normalize();
					for (int num294 = 0; num294 < num285; num294++)
					{
						float num295 = Main.rand.Next(8, 15);
						Vector2 vector35 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						vector35.Normalize();
						if (num286 > 0)
						{
							vector35 += vector33;
							vector35.Normalize();
						}
						vector35 *= num295;
						if (num286 > 0)
						{
							num286--;
							vector35 = Main.npc[array[num286]].Center - base.Center;
							vector35.Normalize();
							vector35 *= num295;
						}
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector35.X, vector35.Y, 484, (int)((double)damage * 0.7), knockBack * 0.7f, owner);
					}
				}
				for (int num296 = 0; num296 < 20; num296++)
				{
					int num297 = Dust.NewDust(position, width, height, 78);
					Main.dust[num297].noGravity = true;
					Dust dust = Main.dust[num297];
					dust.velocity *= 4f;
				}
				for (int num298 = 0; num298 < 7; num298++)
				{
					int num299 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num299];
					dust.velocity *= 0.9f;
					Main.dust[num299].scale = 0.9f;
				}
				for (int num300 = 0; num300 < 3; num300++)
				{
					int num301 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num301].noGravity = true;
					Dust dust = Main.dust[num301];
					dust.velocity *= 3f;
					num301 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num301];
					dust.velocity *= 2f;
				}
				int num302 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
				Gore gore = Main.gore[num302];
				gore.velocity *= 0.3f;
				Main.gore[num302].velocity.X += Main.rand.Next(-1, 2);
				Main.gore[num302].velocity.Y += Main.rand.Next(-1, 2);
				if (owner == Main.myPlayer)
				{
					int num303 = 100;
					position.X -= num303 / 2;
					position.Y -= num303 / 2;
					width += num303;
					height++;
					penetrate = -1;
					Damage();
				}
			}
			if (type == 523)
			{
				SoundEngine.PlaySound(SoundID.Item54, position);
				for (int num304 = 0; num304 < 25; num304++)
				{
					int num305 = Dust.NewDust(position, width, height, 256);
					Main.dust[num305].noGravity = true;
					Main.dust[num305].position = (Main.dust[num305].position + position) / 2f;
					Main.dust[num305].velocity = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
					Main.dust[num305].velocity.Normalize();
					Dust dust = Main.dust[num305];
					dust.velocity *= (float)Main.rand.Next(1, 30) * 0.1f;
					Main.dust[num305].alpha = alpha;
				}
			}
			else if (type == 522)
			{
				SoundEngine.PlaySound(SoundID.Item118, position);
				for (int num306 = 0; num306 < 10; num306++)
				{
					int num307 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 254, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num307].fadeIn = 0.75f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num307].scale = 0.25f + (float)Main.rand.Next(-10, 11) * 0.005f;
						dust = Main.dust[num307];
						dust.type++;
					}
					else
					{
						Main.dust[num307].scale = 1f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num307].noGravity = true;
					dust = Main.dust[num307];
					dust.velocity *= 1.25f;
					dust = Main.dust[num307];
					dust.velocity -= oldVelocity / 10f;
				}
			}
			else if (type == 521)
			{
				SoundEngine.PlaySound(SoundID.Item110, position);
				for (int num308 = 0; num308 < 20; num308++)
				{
					int num309 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 254, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.5f);
					Dust dust;
					if (Main.rand.Next(3) == 0)
					{
						Main.dust[num309].fadeIn = 1.1f + (float)Main.rand.Next(-10, 11) * 0.01f;
						Main.dust[num309].scale = 0.35f + (float)Main.rand.Next(-10, 11) * 0.01f;
						dust = Main.dust[num309];
						dust.type++;
					}
					else
					{
						Main.dust[num309].scale = 1.2f + (float)Main.rand.Next(-10, 11) * 0.01f;
					}
					Main.dust[num309].noGravity = true;
					dust = Main.dust[num309];
					dust.velocity *= 2.5f;
					dust = Main.dust[num309];
					dust.velocity -= oldVelocity / 10f;
				}
				if (Main.myPlayer == owner)
				{
					int num310 = Main.rand.Next(3, 6);
					for (int num311 = 0; num311 < num310; num311++)
					{
						Vector2 vector36 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						while (vector36.X == 0f && vector36.Y == 0f)
						{
							vector36 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						}
						vector36.Normalize();
						vector36 *= (float)Main.rand.Next(70, 101) * 0.1f;
						NewProjectile(GetProjectileSource_FromThis(), oldPosition.X + (float)(width / 2), oldPosition.Y + (float)(height / 2), vector36.X, vector36.Y, 522, (int)((double)damage * 0.8), knockBack * 0.8f, owner);
					}
				}
			}
			if (type == 520)
			{
				SoundEngine.PlaySound(SoundID.Item50, position);
				for (int num312 = 0; num312 < 10; num312++)
				{
					int num313 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 252, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.75f);
					Main.dust[num313].noGravity = true;
					Dust dust = Main.dust[num313];
					dust.velocity -= oldVelocity / 3f;
				}
			}
			if (type == 459 || type == 709)
			{
				int num314 = 3;
				int num315 = 10;
				int num316 = 0;
				if (scale >= 1f)
				{
					position = base.Center;
					width = (height = 144);
					base.Center = position;
					num314 = 7;
					num315 = 30;
					num316 = 2;
					Damage();
				}
				for (int num317 = 0; num317 < num314; num317++)
				{
					int num318 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
					Main.dust[num318].position = new Vector2(width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
				}
				for (int num319 = 0; num319 < num315; num319++)
				{
					int num320 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 226, 0f, 0f, 0, default(Color), 1.5f);
					Main.dust[num320].position = new Vector2(width / 2, 0f).RotatedBy(6.2831854820251465 * Main.rand.NextDouble()) * (float)Main.rand.NextDouble() + base.Center;
					Main.dust[num320].noGravity = true;
					Dust dust = Main.dust[num320];
					dust.velocity *= 1f;
				}
				for (int num321 = 0; num321 < num316; num321++)
				{
					int num322 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num322];
					gore.velocity *= 0.3f;
					Main.gore[num322].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num322].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				if (type == 709 && Main.myPlayer == owner)
				{
					Rectangle value2 = new Rectangle((int)base.Center.X - 40, (int)base.Center.Y - 40, 80, 80);
					for (int num323 = 0; num323 < 1000; num323++)
					{
						if (num323 != whoAmI && Main.projectile[num323].active && Main.projectile[num323].owner == owner && Main.projectile[num323].type == 443 && Main.projectile[num323].getRect().Intersects(value2))
						{
							Main.projectile[num323].ai[1] = 1f;
							Main.projectile[num323].velocity = (base.Center - Main.projectile[num323].Center) / 5f;
							Main.projectile[num323].netUpdate = true;
						}
					}
					int num324 = NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 443, damage, 0f, owner);
					Main.projectile[num324].timeLeft = 30 * Main.rand.Next(2, 6);
					float[] array2 = Main.projectile[num324].localAI;
					SlotId val = SoundEngine.PlayTrackedSound(SoundID.DD2_SkyDragonsFuryCircle, base.Center);
					array2[0] = ((SlotId)(val)).ToFloat();
				}
			}
			if (owner != Main.myPlayer && type == 453 && Main.player[owner].mount.AbilityActive)
			{
				Main.player[owner].mount.UseAbility(Main.player[owner], position, toggleOn: false);
			}
			if (type == 441)
			{
				Main.player[owner].mount.StopAbilityCharge();
			}
			if (type == 444)
			{
				SoundEngine.PlaySound(SoundID.Item96, position);
				int num325 = Main.rand.Next(5, 9);
				for (int num326 = 0; num326 < num325; num326++)
				{
					int num327 = Dust.NewDust(base.Center, 0, 0, 171, 0f, 0f, 100, default(Color), 1.4f);
					Dust dust = Main.dust[num327];
					dust.velocity *= 0.8f;
					Main.dust[num327].position = Vector2.Lerp(Main.dust[num327].position, base.Center, 0.5f);
					Main.dust[num327].noGravity = true;
				}
				if (owner == Main.myPlayer)
				{
					Vector2 vector37 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY);
					if (Main.player[owner].gravDir == -1f)
					{
						vector37.Y = (float)(Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
					}
					Vector2 vector38 = Vector2.Normalize(vector37 - base.Center);
					vector38 *= localAI[1];
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector38.X, vector38.Y, (int)localAI[0], damage, knockBack, owner);
				}
			}
			if (type == 472)
			{
				for (int num328 = 0; num328 < 20; num328++)
				{
					int num329 = Dust.NewDust(position, width, height, 30);
					Main.dust[num329].noGravity = true;
					Dust dust = Main.dust[num329];
					dust.velocity *= 0.45f;
					dust = Main.dust[num329];
					dust.velocity += velocity * 0.9f;
				}
			}
			if (type == 639 || type == 640)
			{
				int num330 = Main.rand.Next(5, 10);
				for (int num331 = 0; num331 < num330; num331++)
				{
					int num332 = Dust.NewDust(base.Center, 0, 0, 220, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust = Main.dust[num332];
					dust.velocity *= 1.6f;
					Main.dust[num332].velocity.Y -= 1f;
					Main.dust[num332].position = Vector2.Lerp(Main.dust[num332].position, base.Center, 0.5f);
					Main.dust[num332].noGravity = true;
				}
				if (owner == Main.myPlayer && type == 639)
				{
					int num333 = num + 1;
					int nextSlot = GetNextSlot();
					if (Main.ProjectileUpdateLoopIndex < nextSlot && Main.ProjectileUpdateLoopIndex != -1)
					{
						num333++;
					}
					Vector2 vector39 = new Vector2(ai[0], ai[1]);
					NewProjectile(GetProjectileSource_FromThis(), localAI[0], localAI[1], vector39.X, vector39.Y, 640, damage, knockBack, owner, 0f, num333);
				}
			}
			if (type == 684)
			{
				int num334 = Main.rand.Next(15, 25);
				for (int num335 = 0; num335 < num334; num335++)
				{
					int num336 = Dust.NewDust(base.Center, 0, 0, 60, 0f, 0f, 100, new Color(255, 255, 255, 0), 1.3f);
					Dust dust = Main.dust[num336];
					dust.velocity *= 8f * (0.3f + 0.7f * Main.rand.NextFloat());
					Main.dust[num336].fadeIn = 1.3f + Main.rand.NextFloat() * 0.2f;
					Main.dust[num336].noLight = true;
					Main.dust[num336].noGravity = true;
					dust = Main.dust[num336];
					dust.position += Main.dust[num336].velocity * 4f;
				}
			}
			if (type == 435)
			{
				int num337 = Main.rand.Next(5, 10);
				for (int num338 = 0; num338 < num337; num338++)
				{
					int num339 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust = Main.dust[num339];
					dust.velocity *= 1.6f;
					Main.dust[num339].velocity.Y -= 1f;
					Main.dust[num339].position = Vector2.Lerp(Main.dust[num339].position, base.Center, 0.5f);
					Main.dust[num339].noGravity = true;
				}
			}
			if (type == 732)
			{
				int num340 = Main.rand.Next(5, 10);
				for (int num341 = 0; num341 < num340; num341++)
				{
					int num342 = Dust.NewDust(base.Center, 0, 0, 226, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust = Main.dust[num342];
					dust.velocity *= 1.6f;
					Main.dust[num342].velocity.Y -= 1f;
					Main.dust[num342].velocity = Main.dust[num342].velocity * 0.5f + velocity * ((float)num341 / (float)num340) * 0.7f;
					Main.dust[num342].position = Vector2.Lerp(Main.dust[num342].position, base.Center, 0.5f);
					Main.dust[num342].noGravity = true;
				}
			}
			if (type == 682)
			{
				int num343 = 22;
				for (int num344 = 0; num344 < num343; num344++)
				{
					int num345 = Dust.NewDust(base.Center, 0, 0, 272, 0f, 0f, 0, default(Color), 0.5f);
					Dust dust = Main.dust[num345];
					dust.velocity *= 1.6f;
					Main.dust[num345].velocity.Y -= 1f;
					Main.dust[num345].position = Vector2.Lerp(Main.dust[num345].position, base.Center, 0.5f);
				}
			}
			if (type == 436)
			{
				int num346 = Main.rand.Next(5, 10);
				for (int num347 = 0; num347 < num346; num347++)
				{
					int num348 = Dust.NewDust(base.Center, 0, 0, 220, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust = Main.dust[num348];
					dust.velocity *= 1.6f;
					Main.dust[num348].velocity.Y -= 1f;
					Main.dust[num348].position = Vector2.Lerp(Main.dust[num348].position, base.Center, 0.5f);
					Main.dust[num348].noGravity = true;
				}
			}
			if (type == 462)
			{
				int num349 = Main.rand.Next(5, 10);
				for (int num350 = 0; num350 < num349; num350++)
				{
					int num351 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100, default(Color), 0.5f);
					Dust dust = Main.dust[num351];
					dust.velocity *= 1.6f;
					Main.dust[num351].velocity.Y -= 1f;
					dust = Main.dust[num351];
					dust.position -= Vector2.One * 4f;
					Main.dust[num351].position = Vector2.Lerp(Main.dust[num351].position, base.Center, 0.5f);
					Main.dust[num351].noGravity = true;
				}
			}
			if (type == 442)
			{
				SoundEngine.PlaySound(SoundID.Item94, position);
				int num352 = Main.rand.Next(3, 7);
				for (int num353 = 0; num353 < num352; num353++)
				{
					int num354 = Dust.NewDust(position, width, height, 135, 0f, 0f, 100, default(Color), 2.1f);
					Dust dust = Main.dust[num354];
					dust.velocity *= 2f;
					Main.dust[num354].noGravity = true;
				}
				if (Main.myPlayer == owner)
				{
					Rectangle value3 = new Rectangle((int)base.Center.X - 40, (int)base.Center.Y - 40, 80, 80);
					for (int num355 = 0; num355 < 1000; num355++)
					{
						if (num355 != whoAmI && Main.projectile[num355].active && Main.projectile[num355].owner == owner && Main.projectile[num355].type == 443 && Main.projectile[num355].getRect().Intersects(value3))
						{
							Main.projectile[num355].ai[1] = 1f;
							Main.projectile[num355].velocity = (base.Center - Main.projectile[num355].Center) / 5f;
							Main.projectile[num355].netUpdate = true;
						}
					}
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 443, damage, 0f, owner);
				}
			}
			if (type == 440)
			{
				int num356 = Main.rand.Next(3, 7);
				for (int num357 = 0; num357 < num356; num357++)
				{
					int num358 = Dust.NewDust(base.Center - velocity / 2f, 0, 0, 135, 0f, 0f, 100, default(Color), 2.1f);
					Dust dust = Main.dust[num358];
					dust.velocity *= 2f;
					Main.dust[num358].noGravity = true;
				}
			}
			if (type == 606)
			{
				int num359 = Main.rand.Next(3, 7);
				for (int num360 = 0; num360 < num359; num360++)
				{
					int num361 = Dust.NewDust(base.Center - velocity / 2f, 0, 0, 182, 0f, 0f, 100, default(Color), 1.6f);
					Dust dust = Main.dust[num361];
					dust.velocity *= 1.5f;
					Main.dust[num361].noGravity = true;
				}
			}
			if (type == 449)
			{
				int num362 = Main.rand.Next(3, 7);
				for (int num363 = 0; num363 < num362; num363++)
				{
					int num364 = Dust.NewDust(base.Center - velocity / 2f, 0, 0, 228, 0f, 0f, 100, default(Color), 2.1f);
					Dust dust = Main.dust[num364];
					dust.velocity *= 2f;
					Main.dust[num364].noGravity = true;
				}
			}
			if (type == 495)
			{
				for (int num365 = 0; num365 < 15; num365++)
				{
					int num366 = Dust.NewDust(base.Center, 10, 10, 27);
					Main.dust[num366].noGravity = true;
					Dust dust = Main.dust[num366];
					dust.velocity -= oldVelocity * 0.3f;
				}
			}
			if (type == 497)
			{
				for (int num367 = 0; num367 < 15; num367++)
				{
					int num368 = Dust.NewDust(base.Center, 10, 10, 27);
					Main.dust[num368].noGravity = true;
					Dust dust = Main.dust[num368];
					dust.velocity *= 2f;
					dust = Main.dust[num368];
					dust.velocity -= oldVelocity * 0.3f;
					dust = Main.dust[num368];
					dust.scale += (float)Main.rand.Next(150) * 0.001f;
				}
			}
			if (type == 448)
			{
				SoundEngine.PlaySound(SoundID.Item14, position);
				position = base.Center;
				width = (height = 112);
				position.X -= width / 2;
				position.Y -= height / 2;
				for (int num369 = 0; num369 < 4; num369++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num370 = 0; num370 < 40; num370++)
				{
					int num371 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 0, default(Color), 2.5f);
					Main.dust[num371].noGravity = true;
					Dust dust = Main.dust[num371];
					dust.velocity *= 3f;
					num371 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 228, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num371];
					dust.velocity *= 2f;
					Main.dust[num371].noGravity = true;
				}
				for (int num372 = 0; num372 < 1; num372++)
				{
					int num373 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num373];
					gore.velocity *= 0.3f;
					Main.gore[num373].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num373].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				Damage();
			}
			else if (type == 715 || type == 716 || type == 717 || type == 718)
			{
				SoundEngine.PlaySound(SoundID.Item14, position);
				position = base.Center;
				width = (height = 128);
				if (type == 717 || type == 718)
				{
					width = (height = 240);
				}
				position.X -= width / 2;
				position.Y -= height / 2;
				Damage();
				AI_147_Explosion();
			}
			if (type == 616)
			{
				SoundEngine.PlaySound(SoundID.Item14, position);
				position = base.Center;
				width = (height = 80);
				position.X -= width / 2;
				position.Y -= height / 2;
				for (int num374 = 0; num374 < 4; num374++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num375 = 0; num375 < 40; num375++)
				{
					int num376 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 200, default(Color), 2.5f);
					Main.dust[num376].noGravity = true;
					Dust dust = Main.dust[num376];
					dust.velocity *= 2f;
					num376 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 229, 0f, 0f, 200, default(Color), 1.5f);
					dust = Main.dust[num376];
					dust.velocity *= 1.2f;
					Main.dust[num376].noGravity = true;
				}
				for (int num377 = 0; num377 < 1; num377++)
				{
					int num378 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num378];
					gore.velocity *= 0.3f;
					Main.gore[num378].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num378].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				Damage();
			}
			if (type == 502)
			{
				Vector2 vector40 = new Vector2(width, height) / 2f;
				for (int num379 = 0; num379 < oldPos.Length; num379++)
				{
					if (!(oldPos[num379] == Vector2.Zero))
					{
						int num380 = Dust.NewDust(oldPos[num379] + vector40, 0, 0, 66, 0f, 0f, 150, Color.Transparent, 0.7f);
						Main.dust[num380].color = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);
						Main.dust[num380].noGravity = true;
					}
				}
			}
			if (type == 510)
			{
				SoundEngine.PlaySound(SoundID.Item107, position);
				Gore.NewGore(base.Center, -oldVelocity * 0.2f, 704);
				Gore.NewGore(base.Center, -oldVelocity * 0.2f, 705);
				if (owner == Main.myPlayer)
				{
					int num381 = Main.rand.Next(20, 31);
					for (int num382 = 0; num382 < num381; num382++)
					{
						Vector2 vector41 = new Vector2(Main.rand.Next(-100, 101), Main.rand.Next(-100, 101));
						vector41.Normalize();
						vector41 *= (float)Main.rand.Next(10, 201) * 0.01f;
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, vector41.X, vector41.Y, 511 + Main.rand.Next(3), damage, 1f, owner, 0f, Main.rand.Next(-45, 1));
					}
				}
			}
			if (type == 868 || type == 869)
			{
				SoundEngine.PlaySound(SoundID.Item107, position);
				for (int num383 = 0; num383 < 15; num383++)
				{
					Dust.NewDust(position, width, height, 13, 0f, -2f, 0, default(Color), 1.5f);
				}
				if (Main.netMode != 1 && type == 868)
				{
					WorldGen.TreeTops.RandomizeTreeStyleBasedOnWorldPosition(Main.rand, base.Center);
					NetMessage.SendData(7);
				}
				if (Main.netMode != 1 && type == 869)
				{
					WorldGen.RandomizeBackgroundBasedOnPlayer(Main.rand, Main.player[owner]);
					NetMessage.SendData(7);
				}
			}
			else if (type == 836)
			{
				for (int num384 = 0; num384 < 3; num384++)
				{
					int num385 = Dust.NewDust(position, width, height, 31, 0f, 0f, 50, Color.White, 0.8f);
					Dust dust = Main.dust[num385];
					dust.velocity *= 0.5f;
					Main.dust[num385].noGravity = true;
				}
			}
			if (type == 408)
			{
				for (int num386 = 0; num386 < 15; num386++)
				{
					int num387 = Dust.NewDust(base.Center - Vector2.One * 10f, 50, 50, 5, 0f, -2f);
					Dust dust = Main.dust[num387];
					dust.velocity /= 2f;
				}
				int num388 = 0;
				int num389 = 10;
				num388 = Gore.NewGore(base.Center, velocity * 0.8f, 584);
				Gore gore = Main.gore[num388];
				gore.timeLeft /= num389;
				num388 = Gore.NewGore(base.Center, velocity * 0.9f, 585);
				gore = Main.gore[num388];
				gore.timeLeft /= num389;
				num388 = Gore.NewGore(base.Center, velocity * 1f, 586);
				gore = Main.gore[num388];
				gore.timeLeft /= num389;
			}
			if (type == 385)
			{
				SoundEngine.PlaySound(4, (int)base.Center.X, (int)base.Center.Y, 19);
				int num390 = 36;
				for (int num391 = 0; num391 < num390; num391++)
				{
					Vector2 spinningpoint = Vector2.Normalize(velocity) * new Vector2((float)width / 2f, height) * 0.75f;
					spinningpoint = spinningpoint.RotatedBy((float)(num391 - (num390 / 2 - 1)) * ((float)Math.PI * 2f) / (float)num390) + base.Center;
					Vector2 vector42 = spinningpoint - base.Center;
					int num392 = Dust.NewDust(spinningpoint + vector42, 0, 0, 172, vector42.X * 2f, vector42.Y * 2f, 100, default(Color), 1.4f);
					Main.dust[num392].noGravity = true;
					Main.dust[num392].noLight = true;
					Main.dust[num392].velocity = vector42;
				}
				if (owner == Main.myPlayer)
				{
					if (ai[1] < 1f)
					{
						int num393 = (Main.expertMode ? 25 : 40);
						int num394 = NewProjectile(GetProjectileSource_FromThis(), base.Center.X - (float)(direction * 30), base.Center.Y - 4f, (float)(-direction) * 0.01f, 0f, 384, num393, 4f, owner, 16f, 15f);
						Main.projectile[num394].netUpdate = true;
					}
					else
					{
						int num395 = (int)(base.Center.Y / 16f);
						int num396 = (int)(base.Center.X / 16f);
						int num397 = 100;
						if (num396 < 10)
						{
							num396 = 10;
						}
						if (num396 > Main.maxTilesX - 10)
						{
							num396 = Main.maxTilesX - 10;
						}
						if (num395 < 10)
						{
							num395 = 10;
						}
						if (num395 > Main.maxTilesY - num397 - 10)
						{
							num395 = Main.maxTilesY - num397 - 10;
						}
						for (int num398 = num395; num398 < num395 + num397; num398++)
						{
							Tile tile = Main.tile[num396, num398];
							if (tile.active() && (Main.tileSolid[tile.type] || tile.liquid != 0))
							{
								num395 = num398;
								break;
							}
						}
						int num399 = (Main.expertMode ? 50 : 80);
						int num400 = NewProjectile(GetProjectileSource_FromThis(), num396 * 16 + 8, num395 * 16 - 24, 0f, 0f, 386, num399, 4f, Main.myPlayer, 16f, 24f);
						Main.projectile[num400].netUpdate = true;
					}
				}
			}
			else if (type >= 424 && type <= 426)
			{
				SoundEngine.PlaySound(SoundID.Item89, position);
				position.X += width / 2;
				position.Y += height / 2;
				width = (int)(128f * scale);
				height = (int)(128f * scale);
				position.X -= width / 2;
				position.Y -= height / 2;
				for (int num401 = 0; num401 < 8; num401++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
				}
				for (int num402 = 0; num402 < 32; num402++)
				{
					int num403 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num403].noGravity = true;
					Dust dust = Main.dust[num403];
					dust.velocity *= 3f;
					num403 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num403];
					dust.velocity *= 2f;
					Main.dust[num403].noGravity = true;
				}
				for (int num404 = 0; num404 < 2; num404++)
				{
					int num405 = Gore.NewGore(position + new Vector2((float)(width * Main.rand.Next(100)) / 100f, (float)(height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num405];
					gore.velocity *= 0.3f;
					Main.gore[num405].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
					Main.gore[num405].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
				}
				if (owner == Main.myPlayer)
				{
					localAI[1] = -1f;
					maxPenetrate = 0;
					Damage();
				}
				for (int num406 = 0; num406 < 5; num406++)
				{
					int num407 = Utils.SelectRandom<int>(Main.rand, 6, 259, 158);
					int num408 = Dust.NewDust(position, width, height, num407, 2.5f * (float)direction, -2.5f);
					Main.dust[num408].alpha = 200;
					Dust dust = Main.dust[num408];
					dust.velocity *= 2.4f;
					dust = Main.dust[num408];
					dust.scale += Main.rand.NextFloat();
				}
			}
			if (type == 399)
			{
				SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
				Vector2 vector43 = new Vector2(20f, 20f);
				for (int num409 = 0; num409 < 5; num409++)
				{
					Dust.NewDust(base.Center - vector43 / 2f, (int)vector43.X, (int)vector43.Y, 12, 0f, 0f, 0, Color.Red);
				}
				for (int num410 = 0; num410 < 10; num410++)
				{
					int num411 = Dust.NewDust(base.Center - vector43 / 2f, (int)vector43.X, (int)vector43.Y, 31, 0f, 0f, 100, default(Color), 1.5f);
					Dust dust = Main.dust[num411];
					dust.velocity *= 1.4f;
				}
				for (int num412 = 0; num412 < 20; num412++)
				{
					int num413 = Dust.NewDust(base.Center - vector43 / 2f, (int)vector43.X, (int)vector43.Y, 6, 0f, 0f, 100, default(Color), 2.5f);
					Main.dust[num413].noGravity = true;
					Dust dust = Main.dust[num413];
					dust.velocity *= 5f;
					num413 = Dust.NewDust(base.Center - vector43 / 2f, (int)vector43.X, (int)vector43.Y, 6, 0f, 0f, 100, default(Color), 1.5f);
					dust = Main.dust[num413];
					dust.velocity *= 3f;
				}
				if (Main.myPlayer == owner)
				{
					for (int num414 = 0; num414 < 6; num414++)
					{
						float num415 = (0f - velocity.X) * (float)Main.rand.Next(20, 50) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
						float num416 = (0f - Math.Abs(velocity.Y)) * (float)Main.rand.Next(30, 50) * 0.01f + (float)Main.rand.Next(-20, 5) * 0.4f;
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X + num415, base.Center.Y + num416, num415, num416, 400 + Main.rand.Next(3), (int)((double)damage * 0.5), 0f, owner);
					}
				}
			}
			if (type == 384 || type == 386)
			{
				for (int num417 = 0; num417 < 20; num417++)
				{
					int num418 = Dust.NewDust(position, width, height, 212, direction * 2, 0f, 100, default(Color), 1.4f);
					Dust dust34 = Main.dust[num418];
					dust34.color = Color.CornflowerBlue;
					dust34.color = Color.Lerp(dust34.color, Color.White, 0.3f);
					dust34.noGravity = true;
				}
			}
			if (type == 507 || type == 508)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				Vector2 vector44 = position;
				Vector2 vector45 = oldVelocity;
				vector45.Normalize();
				vector44 += vector45 * 16f;
				for (int num419 = 0; num419 < 20; num419++)
				{
					int num420 = Dust.NewDust(vector44, width, height, 81);
					Main.dust[num420].position = (Main.dust[num420].position + base.Center) / 2f;
					Dust dust = Main.dust[num420];
					dust.velocity += oldVelocity * 0.4f;
					dust = Main.dust[num420];
					dust.velocity *= 0.5f;
					Main.dust[num420].noGravity = true;
					vector44 -= vector45 * 8f;
				}
			}
			if (type == 598)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				Vector2 vector46 = position;
				Vector2 vector47 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
				vector46 += vector47 * 16f;
				for (int num421 = 0; num421 < 20; num421++)
				{
					int num422 = Dust.NewDust(vector46, width, height, 81);
					Main.dust[num422].position = (Main.dust[num422].position + base.Center) / 2f;
					Dust dust = Main.dust[num422];
					dust.velocity += vector47 * 2f;
					dust = Main.dust[num422];
					dust.velocity *= 0.5f;
					Main.dust[num422].noGravity = true;
					vector46 -= vector47 * 8f;
				}
			}
			if (type == 971)
			{
				Vector2 vector48 = position;
				Vector2 vector49 = (rotation - (float)Math.PI / 2f).ToRotationVector2();
				vector48 += vector49 * 8f;
				for (int num423 = 0; num423 < 6; num423++)
				{
					int num424 = Dust.NewDust(vector48, width, height, 4);
					Main.dust[num424].color = new Color(10, 10, 10, 150);
					Main.dust[num424].position = (Main.dust[num424].position + base.Center) / 2f;
					Dust dust = Main.dust[num424];
					dust.velocity += vector49;
					dust = Main.dust[num424];
					dust.velocity *= 0.5f;
					Main.dust[num424].noGravity = true;
					vector48 -= vector49 * 4f;
				}
			}
			if (type == 1 || type == 81 || type == 98)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num425 = 0; num425 < 10; num425++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 7);
				}
			}
			if (type == 336 || type == 345)
			{
				for (int num426 = 0; num426 < 6; num426++)
				{
					int num427 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 196);
					Main.dust[num427].noGravity = true;
					Main.dust[num427].scale = scale;
				}
			}
			if (type == 358)
			{
				velocity = oldVelocity * 0.2f;
				for (int num428 = 0; num428 < 100; num428++)
				{
					int num429 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 211, 0f, 0f, 75, default(Color), 1.2f);
					Dust dust;
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num429];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num429];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num429];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num429].scale = 0.6f;
					}
					else
					{
						Main.dust[num429].noGravity = true;
					}
					dust = Main.dust[num429];
					dust.velocity *= 0.3f;
					dust = Main.dust[num429];
					dust.velocity += velocity;
					dust = Main.dust[num429];
					dust.velocity *= 1f + (float)Main.rand.Next(-100, 101) * 0.01f;
					Main.dust[num429].velocity.X += (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num429].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num429].position = base.Center;
				}
			}
			if (type == 406)
			{
				int num430 = 175;
				Color newColor5 = new Color(0, 80, 255, 100);
				velocity = oldVelocity * 0.2f;
				for (int num431 = 0; num431 < 40; num431++)
				{
					int num432 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 4, 0f, 0f, num430, newColor5, 1.6f);
					Dust dust;
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num432];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num432];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						dust = Main.dust[num432];
						dust.alpha += 25;
					}
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num432].scale = 0.6f;
					}
					else
					{
						Main.dust[num432].noGravity = true;
					}
					dust = Main.dust[num432];
					dust.velocity *= 0.3f;
					dust = Main.dust[num432];
					dust.velocity += velocity;
					dust = Main.dust[num432];
					dust.velocity *= 1f + (float)Main.rand.Next(-100, 101) * 0.01f;
					Main.dust[num432].velocity.X += (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num432].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.015f;
					Main.dust[num432].position = base.Center;
				}
			}
			if (type == 344)
			{
				for (int num433 = 0; num433 < 3; num433++)
				{
					int num434 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 197);
					Main.dust[num434].noGravity = true;
					Main.dust[num434].scale = scale;
				}
			}
			else if (type == 343)
			{
				SoundEngine.PlaySound(SoundID.Item27, position);
				for (int num435 = 4; num435 < 31; num435++)
				{
					float num436 = oldVelocity.X * (30f / (float)num435);
					float num437 = oldVelocity.Y * (30f / (float)num435);
					int num438 = Dust.NewDust(new Vector2(oldPosition.X - num436, oldPosition.Y - num437), 8, 8, 197, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.2f);
					Main.dust[num438].noGravity = true;
					Dust dust = Main.dust[num438];
					dust.velocity *= 0.5f;
				}
			}
			else if (type == 349)
			{
				SoundEngine.PlaySound(SoundID.Item27, position);
				for (int num439 = 0; num439 < 3; num439++)
				{
					int num440 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 76);
					Main.dust[num440].noGravity = true;
					Main.dust[num440].noLight = true;
					Main.dust[num440].scale = 0.7f;
				}
			}
			if (type == 323)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num441 = 0; num441 < 20; num441++)
				{
					int num442 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 7);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num442].noGravity = true;
						Main.dust[num442].scale = 1.3f;
						Dust dust = Main.dust[num442];
						dust.velocity *= 1.5f;
						dust = Main.dust[num442];
						dust.velocity -= oldVelocity * 0.5f;
						dust = Main.dust[num442];
						dust.velocity *= 1.5f;
					}
					else
					{
						Dust dust = Main.dust[num442];
						dust.velocity *= 0.75f;
						dust = Main.dust[num442];
						dust.velocity -= oldVelocity * 0.25f;
						Main.dust[num442].scale = 0.8f;
					}
				}
			}
			if (type == 589)
			{
				SoundEngine.PlaySound(SoundID.Item27, position);
				Color newColor6 = Color.Red;
				if (ai[1] == 1f)
				{
					newColor6 = Color.Green;
				}
				if (ai[1] == 2f)
				{
					newColor6 = Color.Purple;
				}
				if (ai[1] == 3f)
				{
					newColor6 = Color.Gold;
				}
				if (ai[1] == 4f)
				{
					newColor6 = Color.White;
				}
				newColor6.A = 100;
				for (int num443 = 0; num443 < 30; num443++)
				{
					int num444 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 11, 0f, 0f, 0, newColor6);
					Dust dust = Main.dust[num444];
					dust.velocity *= 1f + Main.rand.NextFloat() * 1f;
					if (num443 < 10)
					{
						Main.dust[num444].noGravity = true;
						dust = Main.dust[num444];
						dust.velocity *= 0.5f;
					}
				}
			}
			if (type == 346)
			{
				SoundEngine.PlaySound(SoundID.Item27, position);
				for (int num445 = 0; num445 < 20; num445++)
				{
					int num446 = 10;
					if (ai[1] == 1f)
					{
						num446 = 4;
					}
					int num447 = Dust.NewDust(position, width, height, num446);
					Main.dust[num447].noGravity = true;
				}
			}
			if (type == 335)
			{
				SoundEngine.PlaySound(SoundID.Item27, position);
				for (int num448 = 0; num448 < 20; num448++)
				{
					int num449 = 90 - (int)ai[1];
					int num450 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num449);
					Main.dust[num450].noLight = true;
					Main.dust[num450].scale = 0.8f;
				}
			}
			if (type == 318)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num451 = 0; num451 < 10; num451++)
				{
					int num452 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 30);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num452].noGravity = true;
					}
				}
			}
			if (type == 378)
			{
				for (int num453 = 0; num453 < 10; num453++)
				{
					int num454 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 30);
					if (Main.rand.Next(2) == 0)
					{
						Main.dust[num454].noGravity = true;
					}
				}
			}
			else if (type == 311)
			{
				for (int num455 = 0; num455 < 5; num455++)
				{
					int num456 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 189);
					Main.dust[num456].scale = 0.85f;
					Main.dust[num456].noGravity = true;
					Dust dust = Main.dust[num456];
					dust.velocity += velocity * 0.5f;
				}
			}
			else if (type == 316)
			{
				for (int num457 = 0; num457 < 5; num457++)
				{
					int num458 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 195);
					Main.dust[num458].scale = 0.85f;
					Main.dust[num458].noGravity = true;
					Dust dust = Main.dust[num458];
					dust.velocity += velocity * 0.5f;
				}
			}
			else if (type == 184 || type == 195)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num459 = 0; num459 < 5; num459++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 7);
				}
			}
			else if (type == 275 || type == 276)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num460 = 0; num460 < 5; num460++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 7);
				}
			}
			else if (type == 291)
			{
				if (owner == Main.myPlayer)
				{
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 292, damage, knockBack, owner);
				}
			}
			else if (type == 295)
			{
				if (owner == Main.myPlayer)
				{
					NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 296, (int)((double)damage * 0.65), knockBack, owner);
				}
			}
			else if (type == 270 || type == 837)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y, 27);
				if (type == 270)
				{
					for (int num461 = 0; num461 < 20; num461++)
					{
						int num462 = Dust.NewDust(position, width, height, 26, 0f, 0f, 100);
						Main.dust[num462].noGravity = true;
						Dust dust = Main.dust[num462];
						dust.velocity *= 1.2f;
						Main.dust[num462].scale = 1.3f;
						dust = Main.dust[num462];
						dust.velocity -= oldVelocity * 0.3f;
						num462 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 5, 0f, 0f, 100, default(Color), 1.5f);
						Main.dust[num462].noGravity = true;
						dust = Main.dust[num462];
						dust.velocity *= 3f;
					}
				}
				else
				{
					for (int num463 = 0; num463 < 20; num463++)
					{
						int num464 = Dust.NewDust(position, width, height, 26, 0f, 0f, 100);
						Main.dust[num464].noGravity = true;
						Dust dust = Main.dust[num464];
						dust.velocity *= 1.2f;
						Main.dust[num464].scale = 1.3f;
						dust = Main.dust[num464];
						dust.velocity -= oldVelocity * 0.3f;
						num464 = Dust.NewDust(new Vector2(position.X + 4f, position.Y + 4f), width - 8, height - 8, 6, 0f, 0f, 100, default(Color), 2f);
						Main.dust[num464].noGravity = true;
						dust = Main.dust[num464];
						dust.velocity *= 3f;
					}
				}
			}
			else if (type == 265)
			{
				for (int num465 = 0; num465 < 15; num465++)
				{
					int num466 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 163, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num466].noGravity = true;
					Dust dust = Main.dust[num466];
					dust.velocity *= 1.2f;
					dust = Main.dust[num466];
					dust.velocity -= oldVelocity * 0.3f;
				}
			}
			else if (type == 355)
			{
				for (int num467 = 0; num467 < 15; num467++)
				{
					int num468 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 205, 0f, 0f, 100, default(Color), 1.2f);
					Main.dust[num468].noGravity = true;
					Dust dust = Main.dust[num468];
					dust.velocity *= 1.2f;
					dust = Main.dust[num468];
					dust.velocity -= oldVelocity * 0.3f;
				}
			}
			else if (type == 304)
			{
				for (int num469 = 0; num469 < 3; num469++)
				{
					int num470 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 182, 0f, 0f, 100, default(Color), 0.8f);
					Main.dust[num470].noGravity = true;
					Dust dust = Main.dust[num470];
					dust.velocity *= 1.2f;
					dust = Main.dust[num470];
					dust.velocity -= oldVelocity * 0.3f;
				}
			}
			else if (type == 263)
			{
				SoundEngine.PlaySound(SoundID.Item27, position);
				for (int num471 = 0; num471 < 15; num471++)
				{
					int num472 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 92, velocity.X, velocity.Y, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(40) * 0.01f);
					Main.dust[num472].noGravity = true;
					Dust dust = Main.dust[num472];
					dust.velocity *= 2f;
				}
			}
			else if (type == 261)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num473 = 0; num473 < 15; num473++)
				{
					Dust dust35 = Dust.NewDustDirect(new Vector2(position.X, position.Y), width, height, 148);
					Dust dust = dust35;
					dust.velocity *= 2f;
					dust35.velocity.Y -= 0.4f;
				}
				for (int num474 = 0; num474 < 3; num474++)
				{
					Dust dust36 = Dust.NewDustDirect(new Vector2(position.X, position.Y), width, height, 228);
					Dust dust = dust36;
					dust.velocity *= 2f;
					dust36.noLight = true;
					dust = dust36;
					dust.scale *= 0.8f;
					dust36.velocity.Y -= 0.3f;
				}
			}
			else if (type == 928)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num475 = 0; num475 < 25; num475++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 5, velocity.X, velocity.Y, 0, Color.White, 1.3f);
				}
			}
			else if (type == 229)
			{
				for (int num476 = 0; num476 < 25; num476++)
				{
					int num477 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 157);
					Main.dust[num477].noGravity = true;
					Dust dust = Main.dust[num477];
					dust.velocity *= 1.5f;
					Main.dust[num477].scale = 1.5f;
				}
			}
			else if (type == 239)
			{
				int num478 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), 2, 2, 154);
				Main.dust[num478].position.X -= 2f;
				Main.dust[num478].alpha = 38;
				Dust dust = Main.dust[num478];
				dust.velocity *= 0.1f;
				dust = Main.dust[num478];
				dust.velocity += -oldVelocity * 0.25f;
				Main.dust[num478].scale = 0.95f;
			}
			else if (type == 245)
			{
				int num479 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), 2, 2, 114);
				Main.dust[num479].noGravity = true;
				Main.dust[num479].position.X -= 2f;
				Main.dust[num479].alpha = 38;
				Dust dust = Main.dust[num479];
				dust.velocity *= 0.1f;
				dust = Main.dust[num479];
				dust.velocity += -oldVelocity * 0.25f;
				Main.dust[num479].scale = 0.95f;
			}
			else if (type == 264)
			{
				int num480 = Dust.NewDust(new Vector2(position.X, position.Y + (float)height - 2f), 2, 2, 54);
				Main.dust[num480].noGravity = true;
				Main.dust[num480].position.X -= 2f;
				Main.dust[num480].alpha = 38;
				Dust dust = Main.dust[num480];
				dust.velocity *= 0.1f;
				dust = Main.dust[num480];
				dust.velocity += -oldVelocity * 0.25f;
				Main.dust[num480].scale = 0.95f;
			}
			else if (type == 206 || type == 225)
			{
				SoundEngine.PlaySound(6, (int)position.X, (int)position.Y);
				for (int num481 = 0; num481 < 5; num481++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 40);
				}
			}
			else if (type == 227)
			{
				SoundEngine.PlaySound(6, (int)position.X, (int)position.Y);
				for (int num482 = 0; num482 < 15; num482++)
				{
					int num483 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 157);
					Main.dust[num483].noGravity = true;
					Dust dust = Main.dust[num483];
					dust.velocity += oldVelocity;
					Main.dust[num483].scale = 1.5f;
				}
			}
			else if (type == 237 && owner == Main.myPlayer)
			{
				NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 238, damage, knockBack, owner);
			}
			else if (type == 243 && owner == Main.myPlayer)
			{
				NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 244, damage, knockBack, owner);
			}
			else if (type == 120)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num484 = 0; num484 < 10; num484++)
				{
					int num485 = Dust.NewDust(new Vector2(position.X - velocity.X, position.Y - velocity.Y), width, height, 67, velocity.X, velocity.Y, 100);
					if (num484 < 5)
					{
						Main.dust[num485].noGravity = true;
					}
					Dust dust = Main.dust[num485];
					dust.velocity *= 0.2f;
				}
			}
			else if (type == 181 || type == 189 || type == 566)
			{
				for (int num486 = 0; num486 < 6; num486++)
				{
					int num487 = Dust.NewDust(position, width, height, 150, velocity.X, velocity.Y, 50);
					Main.dust[num487].noGravity = true;
					Main.dust[num487].scale = 1f;
				}
			}
			else if (type == 178)
			{
				for (int num488 = 0; num488 < 85; num488++)
				{
					int num489 = Main.rand.Next(139, 143);
					int num490 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num489, velocity.X, velocity.Y, 0, default(Color), 1.2f);
					Main.dust[num490].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num490].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num490].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num490].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num490].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num490].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
					Dust dust = Main.dust[num490];
					dust.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
				}
				for (int num491 = 0; num491 < 40; num491++)
				{
					int num492 = Main.rand.Next(276, 283);
					int num493 = Gore.NewGore(position, velocity, num492);
					Main.gore[num493].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num493].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num493].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num493].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Gore gore = Main.gore[num493];
					gore.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					Main.gore[num493].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.gore[num493].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				}
			}
			else if (type == 289)
			{
				for (int num494 = 0; num494 < 30; num494++)
				{
					int num495 = Main.rand.Next(139, 143);
					int num496 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num495, velocity.X, velocity.Y, 0, default(Color), 1.2f);
					Main.dust[num496].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num496].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num496].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num496].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.dust[num496].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.dust[num496].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
					Dust dust = Main.dust[num496];
					dust.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
				}
				for (int num497 = 0; num497 < 15; num497++)
				{
					int num498 = Main.rand.Next(276, 283);
					int num499 = Gore.NewGore(position, velocity, num498);
					Main.gore[num499].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num499].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num499].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Main.gore[num499].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
					Gore gore = Main.gore[num499];
					gore.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
					Main.gore[num499].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
					Main.gore[num499].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
				}
			}
			else if (type == 475 || type == 505 || type == 506)
			{
				if (ai[1] == 0f)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				}
				if (ai[1] < 10f)
				{
					Vector2 vector50 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num500 = 0f - velocity.X;
					float num501 = 0f - velocity.Y;
					float num502 = 1f;
					if (ai[0] <= 17f)
					{
						num502 = ai[0] / 17f;
					}
					int num503 = (int)(30f * num502);
					float num504 = 1f;
					if (ai[0] <= 30f)
					{
						num504 = ai[0] / 30f;
					}
					float num505 = 0.4f * num504;
					float num506 = num505;
					num501 += num506;
					for (int num507 = 0; num507 < num503; num507++)
					{
						float num508 = (float)Math.Sqrt(num500 * num500 + num501 * num501);
						float num509 = 5.6f;
						if (Math.Abs(num500) + Math.Abs(num501) < 1f)
						{
							num509 *= Math.Abs(num500) + Math.Abs(num501) / 1f;
						}
						num508 = num509 / num508;
						num500 *= num508;
						num501 *= num508;
						Math.Atan2(num501, num500);
						int num510 = 3;
						if (type == 506)
						{
							num510 = 30;
						}
						if (type == 505)
						{
							num510 = 239;
						}
						if ((float)num507 > ai[1])
						{
							for (int num511 = 0; num511 < 4; num511++)
							{
								int num512 = Dust.NewDust(vector50, width, height, num510);
								Main.dust[num512].noGravity = true;
								Dust dust = Main.dust[num512];
								dust.velocity *= 0.3f;
							}
						}
						vector50.X += num500;
						vector50.Y += num501;
						num500 = 0f - velocity.X;
						num501 = 0f - velocity.Y;
						num506 += num505;
						num501 += num506;
					}
				}
			}
			else if (type == 171)
			{
				if (ai[1] == 0f)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				}
				if (ai[1] < 10f)
				{
					Vector2 vector51 = new Vector2(position.X + (float)width * 0.5f, position.Y + (float)height * 0.5f);
					float num513 = 0f - velocity.X;
					float num514 = 0f - velocity.Y;
					float num515 = 1f;
					if (ai[0] <= 17f)
					{
						num515 = ai[0] / 17f;
					}
					int num516 = (int)(30f * num515);
					float num517 = 1f;
					if (ai[0] <= 30f)
					{
						num517 = ai[0] / 30f;
					}
					float num518 = 0.4f * num517;
					float num519 = num518;
					num514 += num519;
					for (int num520 = 0; num520 < num516; num520++)
					{
						float num521 = (float)Math.Sqrt(num513 * num513 + num514 * num514);
						float num522 = 5.6f;
						if (Math.Abs(num513) + Math.Abs(num514) < 1f)
						{
							num522 *= Math.Abs(num513) + Math.Abs(num514) / 1f;
						}
						num521 = num522 / num521;
						num513 *= num521;
						num514 *= num521;
						Math.Atan2(num514, num513);
						if ((float)num520 > ai[1])
						{
							for (int num523 = 0; num523 < 4; num523++)
							{
								int num524 = Dust.NewDust(vector51, width, height, 129);
								Main.dust[num524].noGravity = true;
								Dust dust = Main.dust[num524];
								dust.velocity *= 0.3f;
							}
						}
						vector51.X += num513;
						vector51.Y += num514;
						num513 = 0f - velocity.X;
						num514 = 0f - velocity.Y;
						num519 += num518;
						num514 += num519;
					}
				}
			}
			else if (type == 117)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num525 = 0; num525 < 10; num525++)
				{
					Dust.NewDust(new Vector2(position.X, position.Y), width, height, 26);
				}
			}
			else if (type == 166)
			{
				SoundEngine.PlaySound(SoundID.Item51, position);
				for (int num526 = 0; num526 < 10; num526++)
				{
					int num527 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 76);
					Main.dust[num527].noGravity = true;
					Dust dust = Main.dust[num527];
					dust.velocity -= oldVelocity * 0.25f;
				}
			}
			else if (type == 158)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num528 = 0; num528 < 10; num528++)
				{
					int num529 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 9);
					Main.dust[num529].noGravity = true;
					Dust dust = Main.dust[num529];
					dust.velocity -= velocity * 0.5f;
				}
			}
			else if (type == 159)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num530 = 0; num530 < 10; num530++)
				{
					int num531 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 11);
					Main.dust[num531].noGravity = true;
					Dust dust = Main.dust[num531];
					dust.velocity -= velocity * 0.5f;
				}
			}
			else if (type == 160)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num532 = 0; num532 < 10; num532++)
				{
					int num533 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 19);
					Main.dust[num533].noGravity = true;
					Dust dust = Main.dust[num533];
					dust.velocity -= velocity * 0.5f;
				}
			}
			else if (type == 161)
			{
				SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
				for (int num534 = 0; num534 < 10; num534++)
				{
					int num535 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 11);
					Main.dust[num535].noGravity = true;
					Dust dust = Main.dust[num535];
					dust.velocity -= velocity * 0.5f;
				}
			}
			else if (type >= 191 && type <= 194)
			{
				int num536 = Gore.NewGore(new Vector2(position.X - (float)(width / 2), position.Y - (float)(height / 2)), new Vector2(0f, 0f), Main.rand.Next(61, 64), scale);
				Gore gore = Main.gore[num536];
				gore.velocity *= 0.1f;
			}
			else if (!Main.projPet[type])
			{
				if (type == 93)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num537 = 0; num537 < 10; num537++)
					{
						int num538 = Dust.NewDust(position, width, height, 57, 0f, 0f, 100, default(Color), 0.5f);
						Main.dust[num538].velocity.X *= 2f;
						Main.dust[num538].velocity.Y *= 2f;
					}
				}
				else if (type == 99 || type == 727)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num539 = 0; num539 < 30; num539++)
					{
						int num540 = Dust.NewDust(position, width, height, (type == 99) ? 1 : 40);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num540];
							dust.scale *= 1.4f;
						}
						velocity *= 1.9f;
					}
				}
				else if (type == 772)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num541 = 0; num541 < 6; num541++)
					{
						Dust.NewDust(position, width, height, 1);
						velocity *= 1.9f;
					}
					for (int num542 = 0; num542 < 20; num542++)
					{
						Dust dust37 = Dust.NewDustDirect(position, width, height, Main.rand.NextFromList<int>(86, 87, 88, 89, 90), 0f, 0f, 0, default(Color), 0.7f);
						dust37.noGravity = true;
						Dust dust = dust37;
						dust.velocity *= 2.9f;
						dust37.velocity.Y *= 0.8f;
						dust37.fadeIn = 1.1f;
					}
					for (int num543 = 0; num543 < 7; num543++)
					{
						Dust dust38 = Dust.NewDustDirect(position, width, height, Main.rand.NextFromList<int>(86, 87, 88, 89, 90), 0f, 0f, 0, default(Color), 0.7f);
						dust38.noGravity = true;
						Dust dust = dust38;
						dust.velocity *= 2.9f;
						dust38.velocity.Y *= 0.8f;
						dust38.fadeIn = 1.1f;
						dust38.noLight = true;
					}
					if (owner == Main.myPlayer)
					{
						List<int> list = new List<int>();
						list.Add(181);
						list.Add(182);
						list.Add(180);
						list.Add(178);
						list.Add(179);
						list.Add(177);
						list.Add(999);
						List<int> list2 = list;
						int item = list2[Main.rand.Next(list2.Count)];
						list2.Remove(item);
						int stack = Main.rand.Next(3, 7);
						int item2 = list2[Main.rand.Next(list2.Count)];
						list2.Remove(item2);
						int stack2 = Main.rand.Next(3, 7);
						int num544 = Item.NewItem(position, base.Size, item, stack);
						Main.item[num544].noGrabDelay = 0;
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, num544, 1f);
						}
						num544 = Item.NewItem(position, base.Size, item2, stack2);
						Main.item[num544].noGrabDelay = 0;
						if (Main.netMode == 1)
						{
							NetMessage.SendData(21, -1, -1, null, num544, 1f);
						}
					}
				}
				else if (type == 763)
				{
					for (int num545 = 0; num545 < 4; num545++)
					{
						int num546 = Dust.NewDust(position, width, height, 40);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num546];
							dust.scale *= 0.8f;
						}
						Main.dust[num546].noGravity = true;
						velocity *= 1.9f;
					}
				}
				else if (type == 655)
				{
					SoundEngine.PlaySound(4, (int)position.X, (int)position.Y);
					for (int num547 = 0; num547 < 30; num547++)
					{
						int num548 = Dust.NewDust(position, width, height, 147);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num548];
							dust.scale *= 1.4f;
						}
						velocity *= 1.9f;
					}
					if (Main.netMode != 1 && !wet)
					{
						int num549 = 2;
						if (Main.rand.Next(3) == 0)
						{
							num549++;
						}
						if (Main.rand.Next(3) == 0)
						{
							num549++;
						}
						if (Main.rand.Next(3) == 0)
						{
							num549++;
						}
						int availableAmountOfNPCsToSpawnFromTraps = NPC.GetAvailableAmountOfNPCsToSpawnFromTraps(num549);
						for (int num550 = 0; num550 < availableAmountOfNPCsToSpawnFromTraps; num550++)
						{
							int num551 = Main.rand.Next(210, 212);
							int num552 = NPC.NewNPC((int)base.Center.X, (int)base.Center.Y, num551, 1);
							Main.npc[num552].velocity.X = (float)Main.rand.Next(-200, 201) * 0.002f;
							Main.npc[num552].velocity.Y = (float)Main.rand.Next(-200, 201) * 0.002f;
							Main.npc[num552].netUpdate = true;
						}
					}
				}
				else if (type == 728)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num553 = 0; num553 < 7; num553++)
					{
						Dust.NewDust(position, width, height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 0.8f);
					}
					for (float num554 = 0f; num554 < 1f; num554 += 0.125f)
					{
						Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num554 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f) * (4f + Main.rand.NextFloat() * 4f), 150, Color.CornflowerBlue).noGravity = true;
					}
					for (float num555 = 0f; num555 < 1f; num555 += 0.25f)
					{
						Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num555 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f) * (2f + Main.rand.NextFloat() * 3f), 150, Color.Gold).noGravity = true;
					}
					Vector2 vector52 = new Vector2(Main.screenWidth, Main.screenHeight);
					if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector52 / 2f, vector52 + new Vector2(400f))))
					{
						for (int num556 = 0; num556 < 7; num556++)
						{
							Gore.NewGore(position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * velocity.Length(), Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17, 17, 17, 17, 17));
						}
					}
				}
				else if (type == 729)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num557 = 0; num557 < 10; num557++)
					{
						Dust dust39 = Dust.NewDustDirect(position, width, height, 279, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
						dust39.noGravity = true;
						dust39.velocity.X *= 2f;
					}
				}
				else if (type == 723 || type == 724 || type == 725 || type == 726 || type == 907)
				{
					if (type == 723)
					{
						SoundEngine.PlaySound(SoundID.Item10, position);
						for (int num558 = 0; num558 < 10; num558++)
						{
							Dust dust40 = Dust.NewDustDirect(position, width, height, 88, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
							dust40.noGravity = true;
							dust40.velocity.X *= 2f;
						}
						for (int num559 = 0; num559 < 3; num559++)
						{
							Gore gore2 = Gore.NewGoreDirect(position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), Utils.SelectRandom<int>(Main.rand, 16, 17, 17));
							Gore gore = gore2;
							gore.velocity *= 2f;
						}
						if (owner == Main.myPlayer && Main.player[owner].starCloakCooldown == 0)
						{
							Main.player[owner].starCloakCooldown = 60;
							int number = Item.NewItem((int)position.X, (int)position.Y, width, height, 4143);
							if (Main.netMode == 1)
							{
								NetMessage.SendData(21, -1, -1, null, number, 1f);
							}
						}
					}
					else
					{
						if (type == 907)
						{
							SoundEngine.PlaySound(SoundID.Item27, position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item10, position);
						}
						for (int num560 = 0; num560 < 10; num560++)
						{
							Dust dust41 = Main.dust[Dust.NewDust(position, width, height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f)];
							if (type == 907)
							{
								Dust dust = dust41;
								dust.velocity *= 0.75f;
							}
						}
						for (int num561 = 0; num561 < 3; num561++)
						{
							Gore gore3 = Main.gore[Gore.NewGore(position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), Main.rand.Next(16, 18))];
							if (type == 907)
							{
								Gore gore = gore3;
								gore.velocity *= 0.5f;
							}
						}
					}
				}
				else if (type == 91 || type == 92)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num562 = 0; num562 < 10; num562++)
					{
						Dust.NewDust(position, width, height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
					}
					for (int num563 = 0; num563 < 3; num563++)
					{
						Gore.NewGore(position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), Main.rand.Next(16, 18));
					}
					if ((type == 91 || (type == 92 && ai[0] > 0f)) && owner == Main.myPlayer)
					{
						float x = position.X + (float)Main.rand.Next(-400, 400);
						float y = position.Y - (float)Main.rand.Next(600, 900);
						Vector2 vector53 = new Vector2(x, y);
						float num564 = position.X + (float)(width / 2) - vector53.X;
						float num565 = position.Y + (float)(height / 2) - vector53.Y;
						int num566 = 22;
						float num567 = (float)Math.Sqrt(num564 * num564 + num565 * num565);
						num567 = (float)num566 / num567;
						num564 *= num567;
						num565 *= num567;
						int num568 = damage;
						if (type == 91)
						{
							num568 /= 2;
						}
						int num569 = NewProjectile(GetProjectileSource_FromThis(), x, y, num564, num565, 92, num568, knockBack, owner);
						if (type == 91)
						{
							Main.projectile[num569].ai[1] = position.Y;
							Main.projectile[num569].ai[0] = 1f;
						}
						else
						{
							Main.projectile[num569].ai[1] = position.Y;
						}
					}
				}
				else if (type == 89)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num570 = 0; num570 < 5; num570++)
					{
						int num571 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 68);
						Main.dust[num571].noGravity = true;
						Dust dust = Main.dust[num571];
						dust.velocity *= 1.5f;
						dust = Main.dust[num571];
						dust.scale *= 0.9f;
					}
					if (type == 89 && owner == Main.myPlayer)
					{
						for (int num572 = 0; num572 < 2; num572++)
						{
							float num573 = (0f - velocity.X) * (float)Main.rand.Next(40, 70) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
							float num574 = (0f - velocity.Y) * (float)Main.rand.Next(40, 70) * 0.01f + (float)Main.rand.Next(-20, 21) * 0.4f;
							NewProjectile(GetProjectileSource_FromThis(), position.X + num573, position.Y + num574, num573, num574, 90, (int)((double)damage * 0.5), 0f, owner);
						}
					}
				}
				else if (type == 967)
				{
					SoundEngine.PlaySound(SoundID.Item45, position);
					for (int num575 = 0; num575 < 20; num575++)
					{
						int num576 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 219, velocity.X, velocity.Y, 0, default(Color), 0.5f + (float)Main.rand.Next(-20, 40) * 0.01f);
						Main.dust[num576].noGravity = true;
						Main.dust[num576].velocity = Main.rand.NextVector2Circular(6f, 6f);
					}
				}
				else if (type == 969)
				{
					ActiveSound activeSound2 = SoundEngine.GetActiveSound(SlotId.FromFloat(localAI[1]));
					if (activeSound2 != null)
					{
						activeSound2.Volume = 0f;
						activeSound2.Stop();
					}
				}
				else if (type == 177)
				{
					for (int num577 = 0; num577 < 20; num577++)
					{
						int num578 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 137, 0f, 0f, Main.rand.Next(0, 101), default(Color), 1f + (float)Main.rand.Next(-20, 40) * 0.01f);
						Dust dust = Main.dust[num578];
						dust.velocity -= oldVelocity * 0.2f;
						if (Main.rand.Next(3) == 0)
						{
							dust = Main.dust[num578];
							dust.scale *= 0.8f;
							dust = Main.dust[num578];
							dust.velocity *= 0.5f;
						}
						else
						{
							Main.dust[num578].noGravity = true;
						}
					}
				}
				else if (type == 119 || type == 118 || type == 128 || type == 359)
				{
					int num579 = 10;
					if (type == 119 || type == 359)
					{
						num579 = 20;
					}
					SoundEngine.PlaySound(SoundID.Item27, position);
					for (int num580 = 0; num580 < num579; num580++)
					{
						int num581 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 92);
						if (Main.rand.Next(3) != 0)
						{
							Dust dust = Main.dust[num581];
							dust.velocity *= 2f;
							Main.dust[num581].noGravity = true;
							dust = Main.dust[num581];
							dust.scale *= 1.75f;
						}
						else
						{
							Dust dust = Main.dust[num581];
							dust.scale *= 0.5f;
						}
					}
				}
				else if (type == 309)
				{
					int num582 = 10;
					SoundEngine.PlaySound(SoundID.Item27, position);
					for (int num583 = 0; num583 < num582; num583++)
					{
						int num584 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 185);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num584];
							dust.velocity *= 2f;
							Main.dust[num584].noGravity = true;
							dust = Main.dust[num584];
							dust.scale *= 1.75f;
						}
					}
				}
				else if (type == 308)
				{
					int num585 = 80;
					SoundEngine.PlaySound(SoundID.Item27, position);
					for (int num586 = 0; num586 < num585; num586++)
					{
						int num587 = Dust.NewDust(new Vector2(position.X, position.Y + 16f), width, height - 16, 185);
						Dust dust = Main.dust[num587];
						dust.velocity *= 2f;
						Main.dust[num587].noGravity = true;
						dust = Main.dust[num587];
						dust.scale *= 1.15f;
					}
				}
				else if (aiStyle == 29 && type <= 126)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					int num588 = type - 121 + 86;
					for (int num589 = 0; num589 < 15; num589++)
					{
						int num590 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num588, oldVelocity.X, oldVelocity.Y, 50, default(Color), 1.2f);
						Main.dust[num590].noGravity = true;
						Dust dust = Main.dust[num590];
						dust.scale *= 1.25f;
						dust = Main.dust[num590];
						dust.velocity *= 0.5f;
					}
				}
				else if (type == 597)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num591 = 0; num591 < 15; num591++)
					{
						int num592 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 262, oldVelocity.X, oldVelocity.Y, 50, default(Color), 1.2f);
						Main.dust[num592].noGravity = true;
						Dust dust = Main.dust[num592];
						dust.scale *= 1.25f;
						dust = Main.dust[num592];
						dust.velocity *= 0.5f;
					}
				}
				else if (type == 731)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num593 = 0; num593 < 15; num593++)
					{
						Dust dust42 = Dust.NewDustDirect(position, width, height, 226, oldVelocity.X * 0.5f, oldVelocity.Y * 0.5f, 50, default(Color), 0.5f);
						if (Main.rand.Next(3) != 0)
						{
							dust42.noGravity = true;
							Dust dust = dust42;
							dust.scale *= 1.5f;
							dust = dust42;
							dust.velocity *= 0.5f;
						}
					}
				}
				else if (type == 337)
				{
					SoundEngine.PlaySound(SoundID.Item27, position);
					for (int num594 = 0; num594 < 10; num594++)
					{
						int num595 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 197);
						Main.dust[num595].noGravity = true;
					}
				}
				else if (type == 379 || type == 377)
				{
					for (int num596 = 0; num596 < 5; num596++)
					{
						int num597 = Dust.NewDust(position, width, height, 171, 0f, 0f, 100);
						Main.dust[num597].scale = (float)Main.rand.Next(1, 10) * 0.1f;
						Main.dust[num597].noGravity = true;
						Main.dust[num597].fadeIn = 1.5f;
						Dust dust = Main.dust[num597];
						dust.velocity *= 0.75f;
					}
				}
				else if (type == 80)
				{
					if (ai[0] >= 0f)
					{
						SoundEngine.PlaySound(SoundID.Item27, position);
						for (int num598 = 0; num598 < 10; num598++)
						{
							Dust.NewDust(new Vector2(position.X, position.Y), width, height, 67);
						}
					}
					int num599 = (int)position.X / 16;
					int num600 = (int)position.Y / 16;
					if (Main.tile[num599, num600] == null)
					{
						Main.tile[num599, num600] = new Tile();
					}
					if (Main.tile[num599, num600].type == 127 && Main.tile[num599, num600].active())
					{
						WorldGen.KillTile(num599, num600);
					}
				}
				else if (type == 76 || type == 77 || type == 78)
				{
					for (int num601 = 0; num601 < 5; num601++)
					{
						int num602 = Dust.NewDust(position, width, height, 27, 0f, 0f, 80, default(Color), 1.5f);
						Main.dust[num602].noGravity = true;
					}
				}
				else if (type == 55 || type == 719)
				{
					for (int num603 = 0; num603 < 5; num603++)
					{
						int num604 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 18, 0f, 0f, 0, default(Color), 1.5f);
						Main.dust[num604].noGravity = true;
					}
				}
				else if (type == 51 || type == 267)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num605 = 0; num605 < 5; num605++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 0, 0f, 0f, 0, default(Color), 0.7f);
					}
				}
				else if (type == 478)
				{
					if (owner == Main.myPlayer)
					{
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, 0f, 0f, 480, (int)((double)damage * 0.8), knockBack * 0.5f, owner);
					}
				}
				else if (type == 477 || type == 479)
				{
					for (int num606 = 0; num606 < 5; num606++)
					{
					}
					Collision.HitTiles(position, velocity, width, height);
				}
				else if (type == 2 || type == 82)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num607 = 0; num607 < 10; num607++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100);
					}
				}
				else if (type == 474)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num608 = 0; num608 < 20; num608++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 26, 0f, 0f, 0, default(Color), 0.9f);
					}
				}
				else if (type == 172)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num609 = 0; num609 < 20; num609++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, 0f, 0f, 100);
					}
				}
				else if (type == 103)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num610 = 0; num610 < 20; num610++)
					{
						int num611 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 75, 0f, 0f, 100);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num611];
							dust.scale *= 2.5f;
							Main.dust[num611].noGravity = true;
							dust = Main.dust[num611];
							dust.velocity *= 5f;
						}
					}
				}
				else if (type == 278)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num612 = 0; num612 < 20; num612++)
					{
						int num613 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 169, 0f, 0f, 100);
						if (Main.rand.Next(2) == 0)
						{
							Dust dust = Main.dust[num613];
							dust.scale *= 1.5f;
							Main.dust[num613].noGravity = true;
							dust = Main.dust[num613];
							dust.velocity *= 5f;
						}
					}
				}
				else if (type == 3 || type == 48 || type == 54 || type == 599 || type == 909)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num614 = 0; num614 < 10; num614++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 1, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.75f);
					}
				}
				else if (type == 330)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num615 = 0; num615 < 10; num615++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 0, velocity.X * 0.4f, velocity.Y * 0.4f, 0, default(Color), 0.75f);
					}
				}
				else if (type == 4)
				{
					SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
					for (int num616 = 0; num616 < 10; num616++)
					{
						Dust.NewDust(new Vector2(position.X, position.Y), width, height, 14, 0f, 0f, 150, default(Color), 1.1f);
					}
				}
				else if (type == 5)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					for (int num617 = 0; num617 < 60; num617++)
					{
						int num618;
						switch (Main.rand.Next(3))
						{
						case 0:
							num618 = 15;
							break;
						case 1:
							num618 = 57;
							break;
						default:
							num618 = 58;
							break;
						}
						Dust.NewDust(position, width, height, num618, velocity.X * 0.5f, velocity.Y * 0.5f, 150, default(Color), 1.5f);
					}
				}
				else if (type == 9 || type == 12 || type == 503 || type == 955)
				{
					SoundEngine.PlaySound(SoundID.Item10, position);
					if (type == 12 || type == 955)
					{
						Color newColor7 = Color.CornflowerBlue;
						if (Main.tenthAnniversaryWorld && (type == 12 || type == 955))
						{
							newColor7 = Color.HotPink;
							newColor7.A /= 2;
						}
						for (int num619 = 0; num619 < 7; num619++)
						{
							Dust.NewDust(position, width, height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 0.8f);
						}
						for (float num620 = 0f; num620 < 1f; num620 += 0.125f)
						{
							Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num620 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f) * (4f + Main.rand.NextFloat() * 4f), 150, newColor7).noGravity = true;
						}
						for (float num621 = 0f; num621 < 1f; num621 += 0.25f)
						{
							Dust.NewDustPerfect(base.Center, 278, Vector2.UnitY.RotatedBy(num621 * ((float)Math.PI * 2f) + Main.rand.NextFloat() * 0.5f) * (2f + Main.rand.NextFloat() * 3f), 150, Color.Gold).noGravity = true;
						}
						Vector2 vector54 = new Vector2(Main.screenWidth, Main.screenHeight);
						if (base.Hitbox.Intersects(Utils.CenteredRectangle(Main.screenPosition + vector54 / 2f, vector54 + new Vector2(400f))))
						{
							for (int num622 = 0; num622 < 7; num622++)
							{
								Gore.NewGore(position, Main.rand.NextVector2CircularEdge(0.5f, 0.5f) * velocity.Length(), Utils.SelectRandom<int>(Main.rand, 16, 17, 17, 17, 17, 17, 17, 17));
							}
						}
					}
					else
					{
						int num623 = 10;
						int num624 = 3;
						if (type == 503)
						{
							num623 = 40;
							num624 = 2;
							velocity /= 2f;
						}
						for (int num625 = 0; num625 < num623; num625++)
						{
							Dust.NewDust(position, width, height, 58, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
						}
						for (int num626 = 0; num626 < num624; num626++)
						{
							int num627 = Main.rand.Next(16, 18);
							if (type == 503)
							{
								num627 = 16;
							}
							Gore.NewGore(position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), num627);
						}
						if (type == 12 && damage < 100)
						{
							for (int num628 = 0; num628 < 10; num628++)
							{
								Dust.NewDust(position, width, height, 57, velocity.X * 0.1f, velocity.Y * 0.1f, 150, default(Color), 1.2f);
							}
							for (int num629 = 0; num629 < 3; num629++)
							{
								Gore.NewGore(position, new Vector2(velocity.X * 0.05f, velocity.Y * 0.05f), Main.rand.Next(16, 18));
							}
						}
					}
				}
				else if (type == 281)
				{
					if (ai[0] != -3f)
					{
						SoundEngine.PlaySound(4, (int)position.X, (int)position.Y);
						int num630 = Gore.NewGore(position, new Vector2((float)Main.rand.Next(-20, 21) * 0.2f, (float)Main.rand.Next(-20, 21) * 0.2f), 76);
						Gore gore = Main.gore[num630];
						gore.velocity -= velocity * 0.5f;
						num630 = Gore.NewGore(new Vector2(position.X, position.Y), new Vector2((float)Main.rand.Next(-20, 21) * 0.2f, (float)Main.rand.Next(-20, 21) * 0.2f), 77);
						gore = Main.gore[num630];
						gore.velocity -= velocity * 0.5f;
						SoundEngine.PlaySound(SoundID.Item14, position);
						for (int num631 = 0; num631 < 20; num631++)
						{
							int num632 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num632];
							dust.velocity *= 1.4f;
						}
						for (int num633 = 0; num633 < 10; num633++)
						{
							int num634 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num634].noGravity = true;
							Dust dust = Main.dust[num634];
							dust.velocity *= 5f;
							num634 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num634];
							dust.velocity *= 3f;
						}
						num630 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num630];
						gore.velocity *= 0.4f;
						Main.gore[num630].velocity.X += 1f;
						Main.gore[num630].velocity.Y += 1f;
						num630 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num630];
						gore.velocity *= 0.4f;
						Main.gore[num630].velocity.X -= 1f;
						Main.gore[num630].velocity.Y += 1f;
						num630 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num630];
						gore.velocity *= 0.4f;
						Main.gore[num630].velocity.X += 1f;
						Main.gore[num630].velocity.Y -= 1f;
						num630 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num630];
						gore.velocity *= 0.4f;
						Main.gore[num630].velocity.X -= 1f;
						Main.gore[num630].velocity.Y -= 1f;
						if (damage > 0)
						{
							position.X += width / 2;
							position.Y += height / 2;
							width = 128;
							height = 128;
							position.X -= width / 2;
							position.Y -= height / 2;
							if (ai[0] == -2f)
							{
								hostile = true;
							}
							Damage();
						}
					}
				}
				else if (type == 162)
				{
					SoundEngine.PlaySound(SoundID.Item14, position);
					for (int num635 = 0; num635 < 20; num635++)
					{
						int num636 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num636];
						dust.velocity *= 1.4f;
					}
					for (int num637 = 0; num637 < 10; num637++)
					{
						int num638 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num638].noGravity = true;
						Dust dust = Main.dust[num638];
						dust.velocity *= 5f;
						num638 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num638];
						dust.velocity *= 3f;
					}
					int num639 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num639];
					gore.velocity *= 0.4f;
					Main.gore[num639].velocity.X += 1f;
					Main.gore[num639].velocity.Y += 1f;
					num639 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num639];
					gore.velocity *= 0.4f;
					Main.gore[num639].velocity.X -= 1f;
					Main.gore[num639].velocity.Y += 1f;
					num639 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num639];
					gore.velocity *= 0.4f;
					Main.gore[num639].velocity.X += 1f;
					Main.gore[num639].velocity.Y -= 1f;
					num639 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num639];
					gore.velocity *= 0.4f;
					Main.gore[num639].velocity.X -= 1f;
					Main.gore[num639].velocity.Y -= 1f;
					position.X += width / 2;
					position.Y += height / 2;
					width = 128;
					height = 128;
					position.X -= width / 2;
					position.Y -= height / 2;
					Damage();
				}
				else if (type == 240)
				{
					SoundEngine.PlaySound(SoundID.Item14, position);
					for (int num640 = 0; num640 < 20; num640++)
					{
						int num641 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						Dust dust = Main.dust[num641];
						dust.velocity *= 1.4f;
					}
					for (int num642 = 0; num642 < 10; num642++)
					{
						int num643 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
						Main.dust[num643].noGravity = true;
						Dust dust = Main.dust[num643];
						dust.velocity *= 5f;
						num643 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
						dust = Main.dust[num643];
						dust.velocity *= 3f;
					}
					int num644 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					Gore gore = Main.gore[num644];
					gore.velocity *= 0.4f;
					Main.gore[num644].velocity.X += 1f;
					Main.gore[num644].velocity.Y += 1f;
					num644 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num644];
					gore.velocity *= 0.4f;
					Main.gore[num644].velocity.X -= 1f;
					Main.gore[num644].velocity.Y += 1f;
					num644 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num644];
					gore.velocity *= 0.4f;
					Main.gore[num644].velocity.X += 1f;
					Main.gore[num644].velocity.Y -= 1f;
					num644 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
					gore = Main.gore[num644];
					gore.velocity *= 0.4f;
					Main.gore[num644].velocity.X -= 1f;
					Main.gore[num644].velocity.Y -= 1f;
					position.X += width / 2;
					position.Y += height / 2;
					width = 96;
					height = 96;
					position.X -= width / 2;
					position.Y -= height / 2;
					Damage();
				}
				else
				{
					_ = type;
					_ = 162;
					if (type == 283 || type == 282)
					{
						SoundEngine.PlaySound(SoundID.Item10, position);
						for (int num645 = 0; num645 < 10; num645++)
						{
							int num646 = Dust.NewDust(position, width, height, 171, 0f, 0f, 100);
							Main.dust[num646].scale = (float)Main.rand.Next(1, 10) * 0.1f;
							Main.dust[num646].noGravity = true;
							Main.dust[num646].fadeIn = 1.5f;
							Dust dust = Main.dust[num646];
							dust.velocity *= 0.75f;
						}
					}
					else if (type == 284)
					{
						for (int num647 = 0; num647 < 10; num647++)
						{
							int num648 = Main.rand.Next(139, 143);
							int num649 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num648, (0f - velocity.X) * 0.3f, (0f - velocity.Y) * 0.3f, 0, default(Color), 1.2f);
							Main.dust[num649].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
							Main.dust[num649].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
							Main.dust[num649].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
							Main.dust[num649].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
							Main.dust[num649].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
							Main.dust[num649].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
							Dust dust = Main.dust[num649];
							dust.scale *= 1f + (float)Main.rand.Next(-30, 31) * 0.01f;
						}
						for (int num650 = 0; num650 < 5; num650++)
						{
							int num651 = Main.rand.Next(276, 283);
							int num652 = Gore.NewGore(position, -velocity * 0.3f, num651);
							Main.gore[num652].velocity.X += (float)Main.rand.Next(-50, 51) * 0.01f;
							Main.gore[num652].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.01f;
							Main.gore[num652].velocity.X *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
							Main.gore[num652].velocity.Y *= 1f + (float)Main.rand.Next(-50, 51) * 0.01f;
							Gore gore = Main.gore[num652];
							gore.scale *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
							Main.gore[num652].velocity.X += (float)Main.rand.Next(-50, 51) * 0.05f;
							Main.gore[num652].velocity.Y += (float)Main.rand.Next(-50, 51) * 0.05f;
						}
					}
					else if (type == 286)
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
						for (int num653 = 0; num653 < 7; num653++)
						{
							int num654 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						}
						for (int num655 = 0; num655 < 3; num655++)
						{
							int num656 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num656].noGravity = true;
							Dust dust = Main.dust[num656];
							dust.velocity *= 3f;
							num656 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num656];
							dust.velocity *= 2f;
						}
						int num657 = Gore.NewGore(new Vector2(position.X - 10f, position.Y - 10f), default(Vector2), Main.rand.Next(61, 64));
						Gore gore = Main.gore[num657];
						gore.velocity *= 0.3f;
						Main.gore[num657].velocity.X += (float)Main.rand.Next(-10, 11) * 0.05f;
						Main.gore[num657].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.05f;
						if (owner == Main.myPlayer)
						{
							localAI[1] = -1f;
							maxPenetrate = 0;
							position.X += width / 2;
							position.Y += height / 2;
							width = 80;
							height = 80;
							position.X -= width / 2;
							position.Y -= height / 2;
							Damage();
						}
					}
					else if (type == 14 || type == 20 || type == 36 || type == 83 || type == 84 || type == 389 || type == 104 || type == 279 || type == 100 || type == 110 || type == 180 || type == 207 || type == 357 || type == 242 || type == 302 || type == 257 || type == 259 || type == 285 || type == 287 || type == 576 || type == 577 || type == 876 || type == 968)
					{
						Collision.HitTiles(position, velocity, width, height);
						SoundEngine.PlaySound(SoundID.Item10, position);
					}
					else if (type == 660)
					{
						Collision.HitTiles(position, velocity, width, height);
						SoundEngine.PlaySound(SoundID.Item10, position);
						int num658 = Main.rand.Next(4, 10);
						for (int num659 = 0; num659 < num658; num659++)
						{
							int num660 = Dust.NewDust(base.Center, 0, 0, 180, 0f, 0f, 100);
							Dust dust = Main.dust[num660];
							dust.velocity *= 1.6f;
							Main.dust[num660].velocity.Y -= 1f;
							dust = Main.dust[num660];
							dust.velocity += -velocity * (Main.rand.NextFloat() * 2f - 1f) * 0.5f;
							Main.dust[num660].scale = 2f;
							Main.dust[num660].fadeIn = 0.5f;
							Main.dust[num660].noGravity = true;
						}
					}
					else if (type == 761 || type == 762)
					{
						SoundEngine.PlaySound(SoundID.Item10, position);
						if (owner == Main.myPlayer && !noDropItem)
						{
							int num661 = 4343;
							if (type == 762)
							{
								num661 = 4344;
							}
							int num662 = Item.NewItem((int)position.X, (int)position.Y, width, height, num661);
							Main.item[num662].noGrabDelay = 0;
							if (Main.netMode == 1 && num662 >= 0)
							{
								NetMessage.SendData(21, -1, -1, null, num662, 1f);
							}
						}
					}
					else if (type == 712)
					{
						Collision.HitTiles(position, velocity, width, height);
						SoundEngine.PlaySound(SoundID.Item10, position);
						int num663 = Main.rand.Next(6, 12);
						for (int num664 = 0; num664 < num663; num664++)
						{
							int num665 = Dust.NewDust(base.Center, 0, 0, 15, 0f, 0f, 100);
							Dust dust = Main.dust[num665];
							dust.velocity *= 1.6f;
							Main.dust[num665].velocity.Y -= 1f;
							dust = Main.dust[num665];
							dust.velocity += -velocity * (Main.rand.NextFloat() * 2f - 1f) * 0.5f;
							Main.dust[num665].scale = 1f;
							Main.dust[num665].fadeIn = 1.5f;
							Main.dust[num665].noGravity = true;
							Main.dust[num665].color = new Color(255, 255, 255, 0) * 0.3f;
							dust = Main.dust[num665];
							dust.velocity *= 0.7f;
							dust = Main.dust[num665];
							dust.position += Main.dust[num665].velocity * 5f;
						}
						for (int num666 = 0; num666 < 3; num666++)
						{
							Gore gore4 = Gore.NewGoreDirect(position, Vector2.Zero, 1008, 1f + Main.rand.NextFloatDirection() * 0.2f);
							Gore gore = gore4;
							gore.velocity *= 4f;
						}
					}
					else if (type == 638)
					{
						Collision.HitTiles(position, velocity, width, height);
						SoundEngine.PlaySound(SoundID.Item10, position);
						int num667 = Main.rand.Next(2, 5);
						for (int num668 = 0; num668 < num667; num668++)
						{
							int num669 = Dust.NewDust(base.Center, 0, 0, 229, 0f, 0f, 100);
							Dust dust = Main.dust[num669];
							dust.velocity *= 1.6f;
							Main.dust[num669].velocity.Y -= 1f;
							dust = Main.dust[num669];
							dust.position -= Vector2.One * 4f;
							Main.dust[num669].position = Vector2.Lerp(Main.dust[num669].position, base.Center, 0.5f);
							Main.dust[num669].noGravity = true;
						}
					}
					else if (type == 15 || type == 321)
					{
						SoundEngine.PlaySound(SoundID.Item10, position);
						for (int num670 = 0; num670 < 20; num670++)
						{
							int num671 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f);
							Main.dust[num671].noGravity = true;
							Dust dust = Main.dust[num671];
							dust.velocity *= 2f;
							num671 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
							dust = Main.dust[num671];
							dust.velocity *= 2f;
						}
					}
					else if (type == 253)
					{
						SoundEngine.PlaySound(SoundID.Item10, position);
						for (int num672 = 0; num672 < 20; num672++)
						{
							int num673 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f);
							Main.dust[num673].noGravity = true;
							Dust dust = Main.dust[num673];
							dust.velocity *= 2f;
							num673 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 135, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100);
							dust = Main.dust[num673];
							dust.velocity *= 2f;
						}
					}
					else if (type == 95 || type == 96)
					{
						SoundEngine.PlaySound(SoundID.Item10, position);
						for (int num674 = 0; num674 < 20; num674++)
						{
							int num675 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 75, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 2f * scale);
							Main.dust[num675].noGravity = true;
							Dust dust = Main.dust[num675];
							dust.velocity *= 2f;
							num675 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 75, (0f - velocity.X) * 0.2f, (0f - velocity.Y) * 0.2f, 100, default(Color), 1f * scale);
							dust = Main.dust[num675];
							dust.velocity *= 2f;
						}
					}
					else if (type == 17)
					{
						SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
						for (int num676 = 0; num676 < 5; num676++)
						{
							Dust.NewDust(new Vector2(position.X, position.Y), width, height, 0);
						}
					}
					else if (type == 31 || type == 42)
					{
						SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
						for (int num677 = 0; num677 < 5; num677++)
						{
							int num678 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 32);
							Dust dust = Main.dust[num678];
							dust.velocity *= 0.6f;
						}
					}
					else if (type >= 411 && type <= 414)
					{
						int num679 = 9;
						if (type == 412 || type == 414)
						{
							num679 = 11;
						}
						if (type == 413)
						{
							num679 = 19;
						}
						for (int num680 = 0; num680 < 5; num680++)
						{
							int num681 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, num679, 0f, velocity.Y / 2f);
							Main.dust[num681].noGravity = true;
							Dust dust = Main.dust[num681];
							dust.velocity -= velocity * 0.5f;
						}
					}
					else if (type == 109)
					{
						SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
						for (int num682 = 0; num682 < 5; num682++)
						{
							int num683 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 51, 0f, 0f, 0, default(Color), 0.6f);
							Dust dust = Main.dust[num683];
							dust.velocity *= 0.6f;
						}
					}
					else if (type == 39)
					{
						SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
						for (int num684 = 0; num684 < 5; num684++)
						{
							int num685 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 38);
							Dust dust = Main.dust[num685];
							dust.velocity *= 0.6f;
						}
					}
					else if (type == 71)
					{
						SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
						for (int num686 = 0; num686 < 5; num686++)
						{
							int num687 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 53);
							Dust dust = Main.dust[num687];
							dust.velocity *= 0.6f;
						}
					}
					else if (type == 40)
					{
						SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
						for (int num688 = 0; num688 < 5; num688++)
						{
							int num689 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 36);
							Dust dust = Main.dust[num689];
							dust.velocity *= 0.6f;
						}
					}
					else if (type == 21 || type == 471 || type == 532)
					{
						SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
						for (int num690 = 0; num690 < 10; num690++)
						{
							Dust.NewDust(new Vector2(position.X, position.Y), width, height, 26, 0f, 0f, 0, default(Color), 0.8f);
						}
					}
					else if (type == 583)
					{
						SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
						for (int num691 = 0; num691 < 10; num691++)
						{
							Dust.NewDust(new Vector2(position.X, position.Y), width, height, 4, 0f, 0f, 100, new Color(20, 250, 20, 240), 0.8f);
						}
					}
					else if (type == 584)
					{
						SoundEngine.PlaySound(0, (int)position.X, (int)position.Y);
						for (int num692 = 0; num692 < 10; num692++)
						{
							Dust.NewDust(new Vector2(position.X, position.Y), width, height, 4, 0f, 0f, 100, new Color(250, 20, 120, 240), 0.8f);
						}
					}
					else if (type == 24)
					{
						for (int num693 = 0; num693 < 10; num693++)
						{
							Dust.NewDust(new Vector2(position.X, position.Y), width, height, 1, velocity.X * 0.1f, velocity.Y * 0.1f, 0, default(Color), 0.75f);
						}
					}
					else if (type == 27)
					{
						SoundEngine.PlaySound(SoundID.Item10, position);
						for (int num694 = 0; num694 < 30; num694++)
						{
							int num695 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 172, velocity.X * 0.1f, velocity.Y * 0.1f, 100);
							Main.dust[num695].noGravity = true;
							Dust.NewDust(new Vector2(position.X, position.Y), width, height, 172, velocity.X * 0.1f, velocity.Y * 0.1f, 100, default(Color), 0.5f);
						}
					}
					else if (type == 38)
					{
						for (int num696 = 0; num696 < 10; num696++)
						{
							Dust.NewDust(new Vector2(position.X, position.Y), width, height, 42, velocity.X * 0.1f, velocity.Y * 0.1f);
						}
					}
					else if (type == 44 || type == 45)
					{
						SoundEngine.PlaySound(SoundID.Item10, position);
						for (int num697 = 0; num697 < 30; num697++)
						{
							int num698 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, velocity.X, velocity.Y, 100, default(Color), 1.7f);
							Main.dust[num698].noGravity = true;
							Dust.NewDust(new Vector2(position.X, position.Y), width, height, 27, velocity.X, velocity.Y, 100);
						}
					}
					else if (type == 41)
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
						for (int num699 = 0; num699 < 10; num699++)
						{
							int num700 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
						}
						for (int num701 = 0; num701 < 5; num701++)
						{
							int num702 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num702].noGravity = true;
							Dust dust = Main.dust[num702];
							dust.velocity *= 3f;
							num702 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num702];
							dust.velocity *= 2f;
						}
						int num703 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Gore gore = Main.gore[num703];
						gore.velocity *= 0.4f;
						Main.gore[num703].velocity.X += (float)Main.rand.Next(-10, 11) * 0.1f;
						Main.gore[num703].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.1f;
						num703 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num703];
						gore.velocity *= 0.4f;
						Main.gore[num703].velocity.X += (float)Main.rand.Next(-10, 11) * 0.1f;
						Main.gore[num703].velocity.Y += (float)Main.rand.Next(-10, 11) * 0.1f;
						if (owner == Main.myPlayer)
						{
							penetrate = -1;
							position.X += width / 2;
							position.Y += height / 2;
							width = 64;
							height = 64;
							position.X -= width / 2;
							position.Y -= height / 2;
							Damage();
						}
					}
					else if (type == 514)
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
						for (int num704 = 0; num704 < 10; num704++)
						{
							int num705 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.3f);
							Dust dust = Main.dust[num705];
							dust.velocity *= 1.4f;
						}
						for (int num706 = 0; num706 < 6; num706++)
						{
							int num707 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.1f);
							Main.dust[num707].noGravity = true;
							Dust dust = Main.dust[num707];
							dust.velocity *= 4.6f;
							num707 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.3f);
							dust = Main.dust[num707];
							dust.velocity *= 3.3f;
							if (Main.rand.Next(2) == 0)
							{
								num707 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.1f);
								dust = Main.dust[num707];
								dust.velocity *= 2.7f;
							}
						}
						if (owner == Main.myPlayer)
						{
							penetrate = -1;
							position.X += width / 2;
							position.Y += height / 2;
							width = 112;
							height = 112;
							position.X -= width / 2;
							position.Y -= height / 2;
							ai[0] = 2f;
							Damage();
						}
					}
					else if (type == 306)
					{
						SoundEngine.PlaySound(3, (int)position.X, (int)position.Y);
						for (int num708 = 0; num708 < 20; num708++)
						{
							int num709 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 184);
							Dust dust = Main.dust[num709];
							dust.scale *= 1.1f;
							Main.dust[num709].noGravity = true;
						}
						for (int num710 = 0; num710 < 30; num710++)
						{
							int num711 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 184);
							Dust dust = Main.dust[num711];
							dust.velocity *= 2.5f;
							dust = Main.dust[num711];
							dust.scale *= 0.8f;
							Main.dust[num711].noGravity = true;
						}
						if (owner == Main.myPlayer)
						{
							int num712 = 2;
							if (Main.rand.Next(3) == 0)
							{
								num712++;
							}
							if (Main.rand.Next(3) == 0)
							{
								num712++;
							}
							for (int num713 = 0; num713 < num712; num713++)
							{
								float num714 = (float)Main.rand.Next(-35, 36) * 0.02f;
								float num715 = (float)Main.rand.Next(-35, 36) * 0.02f;
								num714 *= 10f;
								num715 *= 10f;
								NewProjectile(GetProjectileSource_FromThis(), position.X, position.Y, num714, num715, 307, (int)((double)damage * 0.75), (int)((double)knockBack * 0.35), Main.myPlayer);
							}
						}
					}
					else if (type == 469)
					{
						if (owner == Main.myPlayer)
						{
							int num716 = 6;
							for (int num717 = 0; num717 < num716; num717++)
							{
								if (num717 % 2 != 1 || Main.rand.Next(3) == 0)
								{
									Vector2 vector55 = position;
									Vector2 vector56 = oldVelocity;
									vector56.Normalize();
									vector56 *= 8f;
									float num718 = (float)Main.rand.Next(-35, 36) * 0.01f;
									float num719 = (float)Main.rand.Next(-35, 36) * 0.01f;
									vector55 -= vector56 * num717;
									num718 += oldVelocity.X / 6f;
									num719 += oldVelocity.Y / 6f;
									int num720 = NewProjectile(GetProjectileSource_FromThis(), vector55.X, vector55.Y, num718, num719, Main.player[owner].beeType(), Main.player[owner].beeDamage(damage / 3), Main.player[owner].beeKB(0f), Main.myPlayer);
									Main.projectile[num720].magic = false;
									Main.projectile[num720].ranged = true;
									Main.projectile[num720].penetrate = 2;
								}
							}
						}
					}
					else if (type == 183)
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
						for (int num721 = 0; num721 < 20; num721++)
						{
							int num722 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num722];
							dust.velocity *= 1f;
						}
						int num723 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num723].velocity.X += 1f;
						Main.gore[num723].velocity.Y += 1f;
						Gore gore = Main.gore[num723];
						gore.velocity *= 0.3f;
						num723 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num723].velocity.X -= 1f;
						Main.gore[num723].velocity.Y += 1f;
						gore = Main.gore[num723];
						gore.velocity *= 0.3f;
						num723 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num723].velocity.X += 1f;
						Main.gore[num723].velocity.Y -= 1f;
						gore = Main.gore[num723];
						gore.velocity *= 0.3f;
						num723 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Main.gore[num723].velocity.X -= 1f;
						Main.gore[num723].velocity.Y -= 1f;
						gore = Main.gore[num723];
						gore.velocity *= 0.3f;
						if (owner == Main.myPlayer)
						{
							int num724 = Main.rand.Next(15, 25);
							for (int num725 = 0; num725 < num724; num725++)
							{
								float speedX = (float)Main.rand.Next(-35, 36) * 0.02f;
								float speedY = (float)Main.rand.Next(-35, 36) * 0.02f;
								NewProjectile(GetProjectileSource_FromThis(), position.X, position.Y, speedX, speedY, Main.player[owner].beeType(), Main.player[owner].beeDamage(damage), Main.player[owner].beeKB(0f), Main.myPlayer);
							}
						}
					}
					else if (aiStyle == 34)
					{
						if (owner != Main.myPlayer)
						{
							timeLeft = 60;
						}
						SoundEngine.PlaySound(SoundID.Item14, position);
						if (type == 167)
						{
							for (int num726 = 0; num726 < 400; num726++)
							{
								float num727 = 16f;
								if (num726 < 300)
								{
									num727 = 12f;
								}
								if (num726 < 200)
								{
									num727 = 8f;
								}
								if (num726 < 100)
								{
									num727 = 4f;
								}
								int num728 = 130;
								int num729 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num728, 0f, 0f, 100);
								float num730 = Main.dust[num729].velocity.X;
								float y2 = Main.dust[num729].velocity.Y;
								if (num730 == 0f && y2 == 0f)
								{
									num730 = 1f;
								}
								float num731 = (float)Math.Sqrt(num730 * num730 + y2 * y2);
								num731 = num727 / num731;
								num730 *= num731;
								y2 *= num731;
								Dust dust = Main.dust[num729];
								dust.velocity *= 0.5f;
								Main.dust[num729].velocity.X += num730;
								Main.dust[num729].velocity.Y += y2;
								Main.dust[num729].scale = 1.3f;
								Main.dust[num729].noGravity = true;
							}
						}
						if (type == 168)
						{
							for (int num732 = 0; num732 < 400; num732++)
							{
								float num733 = 2f * ((float)num732 / 100f);
								if (num732 > 100)
								{
									num733 = 10f;
								}
								if (num732 > 250)
								{
									num733 = 13f;
								}
								int num734 = 131;
								int num735 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num734, 0f, 0f, 100);
								float num736 = Main.dust[num735].velocity.X;
								float y3 = Main.dust[num735].velocity.Y;
								if (num736 == 0f && y3 == 0f)
								{
									num736 = 1f;
								}
								float num737 = (float)Math.Sqrt(num736 * num736 + y3 * y3);
								num737 = num733 / num737;
								if (num732 <= 200)
								{
									num736 *= num737;
									y3 *= num737;
								}
								else
								{
									num736 = num736 * num737 * 1.25f;
									y3 = y3 * num737 * 0.75f;
								}
								Dust dust = Main.dust[num735];
								dust.velocity *= 0.5f;
								Main.dust[num735].velocity.X += num736;
								Main.dust[num735].velocity.Y += y3;
								if (num732 > 100)
								{
									Main.dust[num735].scale = 1.3f;
									Main.dust[num735].noGravity = true;
								}
							}
						}
						if (type == 169)
						{
							Vector2 vector57 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
							float num738 = Main.rand.Next(5, 9);
							float num739 = Main.rand.Next(12, 17);
							float value4 = Main.rand.Next(3, 7);
							float num740 = 20f;
							for (float num741 = 0f; num741 < num738; num741++)
							{
								for (int num742 = 0; num742 < 2; num742++)
								{
									Vector2 value5 = vector57.RotatedBy(((num742 == 0) ? 1f : (-1f)) * ((float)Math.PI * 2f) / (num738 * 2f));
									for (float num743 = 0f; num743 < num740; num743++)
									{
										Vector2 vector58 = Vector2.Lerp(vector57, value5, num743 / num740);
										float num744 = MathHelper.Lerp(num739, value4, num743 / num740);
										int num745 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, 133, 0f, 0f, 100, default(Color), 1.3f);
										Dust dust = Main.dust[num745];
										dust.velocity *= 0.1f;
										Main.dust[num745].noGravity = true;
										dust = Main.dust[num745];
										dust.velocity += vector58 * num744;
									}
								}
								vector57 = vector57.RotatedBy((float)Math.PI * 2f / num738);
							}
							for (float num746 = 0f; num746 < num738; num746++)
							{
								for (int num747 = 0; num747 < 2; num747++)
								{
									Vector2 value6 = vector57.RotatedBy(((num747 == 0) ? 1f : (-1f)) * ((float)Math.PI * 2f) / (num738 * 2f));
									for (float num748 = 0f; num748 < num740; num748++)
									{
										Vector2 vector59 = Vector2.Lerp(vector57, value6, num748 / num740);
										float num749 = MathHelper.Lerp(num739, value4, num748 / num740) / 2f;
										int num750 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, 133, 0f, 0f, 100, default(Color), 1.3f);
										Dust dust = Main.dust[num750];
										dust.velocity *= 0.1f;
										Main.dust[num750].noGravity = true;
										dust = Main.dust[num750];
										dust.velocity += vector59 * num749;
									}
								}
								vector57 = vector57.RotatedBy((float)Math.PI * 2f / num738);
							}
							for (int num751 = 0; num751 < 100; num751++)
							{
								float num752 = num739;
								int num753 = 132;
								int num754 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num753, 0f, 0f, 100);
								float num755 = Main.dust[num754].velocity.X;
								float y4 = Main.dust[num754].velocity.Y;
								if (num755 == 0f && y4 == 0f)
								{
									num755 = 1f;
								}
								float num756 = (float)Math.Sqrt(num755 * num755 + y4 * y4);
								num756 = num752 / num756;
								num755 *= num756;
								y4 *= num756;
								Dust dust = Main.dust[num754];
								dust.velocity *= 0.5f;
								Main.dust[num754].velocity.X += num755;
								Main.dust[num754].velocity.Y += y4;
								Main.dust[num754].scale = 1.3f;
								Main.dust[num754].noGravity = true;
							}
						}
						if (type == 170)
						{
							for (int num757 = 0; num757 < 400; num757++)
							{
								int num758 = 133;
								float num759 = 16f;
								if (num757 > 100)
								{
									num759 = 11f;
								}
								if (num757 > 100)
								{
									num758 = 134;
								}
								if (num757 > 200)
								{
									num759 = 8f;
								}
								if (num757 > 200)
								{
									num758 = 133;
								}
								if (num757 > 300)
								{
									num759 = 5f;
								}
								if (num757 > 300)
								{
									num758 = 134;
								}
								int num760 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num758, 0f, 0f, 100);
								float num761 = Main.dust[num760].velocity.X;
								float y5 = Main.dust[num760].velocity.Y;
								if (num761 == 0f && y5 == 0f)
								{
									num761 = 1f;
								}
								float num762 = (float)Math.Sqrt(num761 * num761 + y5 * y5);
								num762 = num759 / num762;
								if (num757 > 300)
								{
									num761 = num761 * num762 * 0.7f;
									y5 *= num762;
								}
								else if (num757 > 200)
								{
									num761 *= num762;
									y5 = y5 * num762 * 0.7f;
								}
								else if (num757 > 100)
								{
									num761 = num761 * num762 * 0.7f;
									y5 *= num762;
								}
								else
								{
									num761 *= num762;
									y5 = y5 * num762 * 0.7f;
								}
								Dust dust = Main.dust[num760];
								dust.velocity *= 0.5f;
								Main.dust[num760].velocity.X += num761;
								Main.dust[num760].velocity.Y += y5;
								if (Main.rand.Next(3) != 0)
								{
									Main.dust[num760].scale = 1.3f;
									Main.dust[num760].noGravity = true;
								}
							}
						}
						if (type == 415)
						{
							Vector2 vector60 = (vector60 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2());
							float num763 = Main.rand.Next(5, 9);
							float num764 = (float)Main.rand.Next(10, 15) * 0.66f;
							float num765 = (float)Main.rand.Next(4, 7) / 2f;
							int num766 = 30;
							for (int num767 = 0; (float)num767 < (float)num766 * num763; num767++)
							{
								if (num767 % num766 == 0)
								{
									vector60 = vector60.RotatedBy((float)Math.PI * 2f / num763);
								}
								float num768 = MathHelper.Lerp(num765, num764, (float)(num767 % num766) / (float)num766);
								int num769 = 130;
								int num770 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num769, 0f, 0f, 100);
								Dust dust = Main.dust[num770];
								dust.velocity *= 0.1f;
								dust = Main.dust[num770];
								dust.velocity += vector60 * num768;
								Main.dust[num770].scale = 1.3f;
								Main.dust[num770].noGravity = true;
							}
							for (int num771 = 0; num771 < 100; num771++)
							{
								float num772 = num764;
								if (num771 < 30)
								{
									num772 = (num765 + num764) / 2f;
								}
								int num773 = 130;
								int num774 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num773, 0f, 0f, 100);
								float num775 = Main.dust[num774].velocity.X;
								float y6 = Main.dust[num774].velocity.Y;
								if (num775 == 0f && y6 == 0f)
								{
									num775 = 1f;
								}
								float num776 = (float)Math.Sqrt(num775 * num775 + y6 * y6);
								num776 = num772 / num776;
								num775 *= num776;
								y6 *= num776;
								Dust dust = Main.dust[num774];
								dust.velocity *= 0.5f;
								Main.dust[num774].velocity.X += num775;
								Main.dust[num774].velocity.Y += y6;
								Main.dust[num774].scale = 1.3f;
								Main.dust[num774].noGravity = true;
							}
						}
						if (type == 416)
						{
							Vector2 vector61 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
							Vector2 vector62 = vector61;
							float num777 = Main.rand.Next(3, 6) * 2;
							int num778 = 20;
							float num779 = ((Main.rand.Next(2) == 0) ? 1f : (-1f));
							bool flag2 = true;
							for (int num780 = 0; (float)num780 < (float)num778 * num777; num780++)
							{
								if (num780 % num778 == 0)
								{
									vector62 = vector62.RotatedBy(num779 * ((float)Math.PI * 2f / num777));
									vector61 = vector62;
									flag2 = !flag2;
								}
								else
								{
									float num781 = (float)Math.PI * 2f / ((float)num778 * num777);
									vector61 = vector61.RotatedBy(num781 * num779 * 3f);
								}
								float num782 = MathHelper.Lerp(1f, 8f, (float)(num780 % num778) / (float)num778);
								int num783 = 131;
								int num784 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num783, 0f, 0f, 100, default(Color), 1.4f);
								Dust dust = Main.dust[num784];
								dust.velocity *= 0.1f;
								dust = Main.dust[num784];
								dust.velocity += vector61 * num782;
								if (flag2)
								{
									Main.dust[num784].scale = 0.9f;
								}
								Main.dust[num784].noGravity = true;
							}
						}
						if (type == 417)
						{
							float num785 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
							float num786 = (float)Main.rand.NextDouble() * ((float)Math.PI * 2f);
							float num787 = 4f + (float)Main.rand.NextDouble() * 3f;
							float num788 = 4f + (float)Main.rand.NextDouble() * 3f;
							float num789 = num787;
							if (num788 > num789)
							{
								num789 = num788;
							}
							for (int num790 = 0; num790 < 150; num790++)
							{
								int num791 = 132;
								float num792 = num789;
								if (num790 > 50)
								{
									num792 = num788;
								}
								if (num790 > 50)
								{
									num791 = 133;
								}
								if (num790 > 100)
								{
									num792 = num787;
								}
								if (num790 > 100)
								{
									num791 = 132;
								}
								int num793 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num791, 0f, 0f, 100);
								Vector2 vector63 = Main.dust[num793].velocity;
								vector63.Normalize();
								vector63 *= num792;
								if (num790 > 100)
								{
									vector63.X *= 0.5f;
									vector63 = vector63.RotatedBy(num785);
								}
								else if (num790 > 50)
								{
									vector63.Y *= 0.5f;
									vector63 = vector63.RotatedBy(num786);
								}
								Dust dust = Main.dust[num793];
								dust.velocity *= 0.2f;
								dust = Main.dust[num793];
								dust.velocity += vector63;
								if (num790 <= 200)
								{
									Main.dust[num793].scale = 1.3f;
									Main.dust[num793].noGravity = true;
								}
							}
						}
						if (type == 418)
						{
							Vector2 vector64 = ((float)Main.rand.NextDouble() * ((float)Math.PI * 2f)).ToRotationVector2();
							float num794 = Main.rand.Next(5, 12);
							float num795 = (float)Main.rand.Next(9, 14) * 0.66f;
							float num796 = (float)Main.rand.Next(2, 4) * 0.66f;
							float num797 = 15f;
							for (float num798 = 0f; num798 < num794; num798++)
							{
								for (int num799 = 0; num799 < 2; num799++)
								{
									Vector2 value7 = vector64.RotatedBy(((num799 == 0) ? 1f : (-1f)) * ((float)Math.PI * 2f) / (num794 * 2f));
									for (float num800 = 0f; num800 < num797; num800++)
									{
										Vector2 vector65 = Vector2.SmoothStep(vector64, value7, num800 / num797);
										float num801 = MathHelper.SmoothStep(num795, num796, num800 / num797);
										int num802 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, 134, 0f, 0f, 100, default(Color), 1.3f);
										Dust dust = Main.dust[num802];
										dust.velocity *= 0.1f;
										Main.dust[num802].noGravity = true;
										dust = Main.dust[num802];
										dust.velocity += vector65 * num801;
									}
								}
								vector64 = vector64.RotatedBy((float)Math.PI * 2f / num794);
							}
							for (int num803 = 0; num803 < 120; num803++)
							{
								float num804 = num795;
								int num805 = 133;
								if (num803 < 80)
								{
									num804 = num796 - 0.5f;
								}
								else
								{
									num805 = 131;
								}
								int num806 = Dust.NewDust(new Vector2(position.X, position.Y), 6, 6, num805, 0f, 0f, 100);
								float num807 = Main.dust[num806].velocity.X;
								float y7 = Main.dust[num806].velocity.Y;
								if (num807 == 0f && y7 == 0f)
								{
									num807 = 1f;
								}
								float num808 = (float)Math.Sqrt(num807 * num807 + y7 * y7);
								num808 = num804 / num808;
								num807 *= num808;
								y7 *= num808;
								Dust dust = Main.dust[num806];
								dust.velocity *= 0.2f;
								Main.dust[num806].velocity.X += num807;
								Main.dust[num806].velocity.Y += y7;
								Main.dust[num806].scale = 1.3f;
								Main.dust[num806].noGravity = true;
							}
						}
						position.X += width / 2;
						position.Y += height / 2;
						width = 192;
						height = 192;
						position.X -= width / 2;
						position.Y -= height / 2;
						penetrate = -1;
						Damage();
					}
					else if (type == 312)
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
						position.X += width / 2;
						position.Y += height / 2;
						width = 22;
						height = 22;
						position.X -= width / 2;
						position.Y -= height / 2;
						for (int num809 = 0; num809 < 30; num809++)
						{
							int num810 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num810];
							dust.velocity *= 1.4f;
						}
						for (int num811 = 0; num811 < 20; num811++)
						{
							int num812 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 3.5f);
							Main.dust[num812].noGravity = true;
							Dust dust = Main.dust[num812];
							dust.velocity *= 7f;
							num812 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num812];
							dust.velocity *= 3f;
						}
						for (int num813 = 0; num813 < 2; num813++)
						{
							float num814 = 0.4f;
							if (num813 == 1)
							{
								num814 = 0.8f;
							}
							int num815 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
							Gore gore = Main.gore[num815];
							gore.velocity *= num814;
							Main.gore[num815].velocity.X += 1f;
							Main.gore[num815].velocity.Y += 1f;
							num815 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num815];
							gore.velocity *= num814;
							Main.gore[num815].velocity.X -= 1f;
							Main.gore[num815].velocity.Y += 1f;
							num815 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num815];
							gore.velocity *= num814;
							Main.gore[num815].velocity.X += 1f;
							Main.gore[num815].velocity.Y -= 1f;
							num815 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num815];
							gore.velocity *= num814;
							Main.gore[num815].velocity.X -= 1f;
							Main.gore[num815].velocity.Y -= 1f;
						}
						position.X += width / 2;
						position.Y += height / 2;
						width = 128;
						height = 128;
						position.X -= width / 2;
						position.Y -= height / 2;
						Damage();
					}
					else if (type == 910 || type == 911)
					{
						Resize(22, 22);
						SoundEngine.PlaySound(SoundID.Item14, position);
						Color transparent = Color.Transparent;
						int num816 = 0;
						for (int num817 = 0; num817 < 30; num817++)
						{
							Dust dust43 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent, 1.5f);
							Dust dust = dust43;
							dust.velocity *= 1.4f;
						}
						for (int num818 = 0; num818 < 80; num818++)
						{
							Dust dust44 = Dust.NewDustDirect(position, width, height, num816, 0f, 0f, 100, transparent, 2.2f);
							dust44.noGravity = true;
							dust44.velocity.Y -= 1.2f;
							Dust dust = dust44;
							dust.velocity *= 4f;
							dust44 = Dust.NewDustDirect(position, width, height, num816, 0f, 0f, 100, transparent, 1.3f);
							dust44.velocity.Y -= 1.2f;
							dust = dust44;
							dust.velocity *= 2f;
						}
						for (int num819 = 1; num819 <= 2; num819++)
						{
							for (int num820 = -1; num820 <= 1; num820 += 2)
							{
								for (int num821 = -1; num821 <= 1; num821 += 2)
								{
									Gore gore5 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore5;
									gore.velocity *= ((num819 == 1) ? 0.4f : 0.8f);
									gore = gore5;
									gore.velocity += new Vector2(num820, num821);
								}
							}
						}
						if (Main.netMode != 1)
						{
							Point pt = base.Center.ToTileCoordinates();
							Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt, 4.2f, DelegateMethods.SpreadDirt);
						}
					}
					else if (type == 784 || type == 785 || type == 786 || type == 805 || type == 903)
					{
						Resize(22, 22);
						if (type == 785)
						{
							SoundEngine.PlaySound(SoundID.Item62, position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, position);
						}
						Color transparent2 = Color.Transparent;
						int num822 = Dust.dustWater();
						for (int num823 = 0; num823 < 30; num823++)
						{
							Dust dust45 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent2, 1.5f);
							Dust dust = dust45;
							dust.velocity *= 1.4f;
						}
						for (int num824 = 0; num824 < 80; num824++)
						{
							Dust dust46 = Dust.NewDustDirect(position, width, height, num822, 0f, 0f, 100, transparent2, 2.2f);
							dust46.noGravity = true;
							dust46.velocity.Y -= 1.2f;
							Dust dust = dust46;
							dust.velocity *= 7f;
							dust46 = Dust.NewDustDirect(position, width, height, num822, 0f, 0f, 100, transparent2, 1.3f);
							dust46.velocity.Y -= 1.2f;
							dust = dust46;
							dust.velocity *= 4f;
						}
						for (int num825 = 1; num825 <= 2; num825++)
						{
							for (int num826 = -1; num826 <= 1; num826 += 2)
							{
								for (int num827 = -1; num827 <= 1; num827 += 2)
								{
									Gore gore6 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore6;
									gore.velocity *= ((num825 == 1) ? 0.4f : 0.8f);
									gore = gore6;
									gore.velocity += new Vector2(num826, num827);
								}
							}
						}
						if (Main.netMode != 1)
						{
							Point pt2 = base.Center.ToTileCoordinates();
							Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt2, 3f, DelegateMethods.SpreadWater);
						}
					}
					else if (type == 787 || type == 788 || type == 789 || type == 806 || type == 904)
					{
						Resize(22, 22);
						if (type == 788)
						{
							SoundEngine.PlaySound(SoundID.Item62, position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, position);
						}
						Color transparent3 = Color.Transparent;
						int num828 = 35;
						for (int num829 = 0; num829 < 30; num829++)
						{
							Dust dust47 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent3, 1.5f);
							Dust dust = dust47;
							dust.velocity *= 1.4f;
						}
						for (int num830 = 0; num830 < 80; num830++)
						{
							Dust dust48 = Dust.NewDustDirect(position, width, height, num828, 0f, 0f, 100, transparent3, 1.2f);
							Dust dust = dust48;
							dust.velocity *= 7f;
							dust48 = Dust.NewDustDirect(position, width, height, num828, 0f, 0f, 100, transparent3, 0.3f);
							dust = dust48;
							dust.velocity *= 4f;
						}
						for (int num831 = 1; num831 <= 2; num831++)
						{
							for (int num832 = -1; num832 <= 1; num832 += 2)
							{
								for (int num833 = -1; num833 <= 1; num833 += 2)
								{
									Gore gore7 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore7;
									gore.velocity *= ((num831 == 1) ? 0.4f : 0.8f);
									gore = gore7;
									gore.velocity += new Vector2(num832, num833);
								}
							}
						}
						if (Main.netMode != 1)
						{
							Point pt3 = base.Center.ToTileCoordinates();
							Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt3, 3f, DelegateMethods.SpreadLava);
						}
					}
					else if (type == 790 || type == 791 || type == 792 || type == 807 || type == 905)
					{
						Resize(22, 22);
						if (type == 791)
						{
							SoundEngine.PlaySound(SoundID.Item62, position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, position);
						}
						Color transparent4 = Color.Transparent;
						int num834 = 152;
						for (int num835 = 0; num835 < 30; num835++)
						{
							Dust dust49 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent4, 1.5f);
							Dust dust = dust49;
							dust.velocity *= 1.4f;
						}
						for (int num836 = 0; num836 < 80; num836++)
						{
							Dust dust50 = Dust.NewDustDirect(position, width, height, num834, 0f, 0f, 100, transparent4, 2.2f);
							Dust dust = dust50;
							dust.velocity *= 7f;
							dust50 = Dust.NewDustDirect(position, width, height, num834, 0f, 0f, 100, transparent4, 1.3f);
							dust = dust50;
							dust.velocity *= 4f;
						}
						for (int num837 = 1; num837 <= 2; num837++)
						{
							for (int num838 = -1; num838 <= 1; num838 += 2)
							{
								for (int num839 = -1; num839 <= 1; num839 += 2)
								{
									Gore gore8 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore8;
									gore.velocity *= ((num837 == 1) ? 0.4f : 0.8f);
									gore = gore8;
									gore.velocity += new Vector2(num838, num839);
								}
							}
						}
						if (Main.netMode != 1)
						{
							Point pt4 = base.Center.ToTileCoordinates();
							Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt4, 3f, DelegateMethods.SpreadHoney);
						}
					}
					else if (type == 799 || type == 800 || type == 801 || type == 810 || type == 906)
					{
						Resize(22, 22);
						if (type == 800)
						{
							SoundEngine.PlaySound(SoundID.Item62, position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, position);
						}
						Color transparent5 = Color.Transparent;
						int num840 = 31;
						for (int num841 = 0; num841 < 30; num841++)
						{
							Dust dust51 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent5, 1.5f);
							Dust dust = dust51;
							dust.velocity *= 1.4f;
						}
						for (int num842 = 0; num842 < 80; num842++)
						{
							Dust dust52 = Dust.NewDustDirect(position, width, height, num840, 0f, 0f, 100, transparent5, 1.2f);
							Dust dust = dust52;
							dust.velocity *= 7f;
							dust52 = Dust.NewDustDirect(position, width, height, num840, 0f, 0f, 100, transparent5, 0.3f);
							dust = dust52;
							dust.velocity *= 4f;
						}
						for (int num843 = 1; num843 <= 2; num843++)
						{
							for (int num844 = -1; num844 <= 1; num844 += 2)
							{
								for (int num845 = -1; num845 <= 1; num845 += 2)
								{
									Gore gore9 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore9;
									gore.velocity *= ((num843 == 1) ? 0.4f : 0.8f);
									gore = gore9;
									gore.velocity += new Vector2(num844, num845);
								}
							}
						}
						if (Main.netMode != 1)
						{
							Point pt5 = base.Center.ToTileCoordinates();
							Kill_DirtAndFluidProjectiles_RunDelegateMethodPushUpForHalfBricks(pt5, 3.5f, DelegateMethods.SpreadDry);
						}
					}
					else if (type == 793 || type == 796 || type == 794 || type == 797 || type == 795 || type == 798 || type == 808 || type == 809)
					{
						if (type == 794 || type == 797)
						{
							SoundEngine.PlaySound(SoundID.Item62, base.Center);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, base.Center);
						}
						Resize(50, 50);
						float num846 = 3f;
						for (int num847 = 0; num847 < 50; num847++)
						{
							Dust dust53 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, default(Color), 2f);
							dust53.velocity = (dust53.position - base.Center).SafeNormalize(Vector2.Zero);
							Dust dust = dust53;
							dust.velocity *= 2f + (float)Main.rand.Next(5) * 0.1f;
							dust53.velocity.Y -= num846 * 0.5f;
							dust53.color = Color.Black * 0.9f;
							if (Main.rand.Next(2) == 0)
							{
								dust53.scale = 0.5f;
								dust53.fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
								dust53.color = Color.Black * 0.8f;
							}
						}
						for (int num848 = 0; num848 < 30; num848++)
						{
							Dust dust54 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100);
							dust54.noGravity = true;
							dust54.fadeIn = 1.4f;
							dust54.velocity = (dust54.position - base.Center).SafeNormalize(Vector2.Zero);
							Dust dust = dust54;
							dust.velocity *= 5.5f + (float)Main.rand.Next(61) * 0.1f;
							dust54.velocity.Y -= num846 * 0.5f;
							dust54 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100);
							dust54.velocity = (dust54.position - base.Center).SafeNormalize(Vector2.Zero);
							dust54.velocity.Y -= num846 * 0.25f;
							dust = dust54;
							dust.velocity *= 1.5f + (float)Main.rand.Next(5) * 0.1f;
							dust54.fadeIn = 0f;
							dust54.scale = 0.6f;
							dust54 = Dust.NewDustDirect(position, width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust54.noGravity = num848 % 2 == 0;
							dust54.velocity = (dust54.position - base.Center).SafeNormalize(Vector2.Zero);
							dust = dust54;
							dust.velocity *= 3f + (float)Main.rand.Next(21) * 0.2f;
							dust54.velocity.Y -= num846 * 0.5f;
							dust54.fadeIn = 1.2f;
							if (!dust54.noGravity)
							{
								dust54.scale = 0.4f;
								dust54.fadeIn = 0f;
							}
							else
							{
								dust = dust54;
								dust.velocity *= 2f + (float)Main.rand.Next(5) * 0.2f;
								dust54.velocity.Y -= num846 * 0.5f;
							}
						}
						int num849 = 0;
						for (int num850 = 1; num850 <= 3; num850++)
						{
							float num851 = (float)Math.PI * 2f * Main.rand.NextFloat();
							for (float num852 = 0f; num852 < 1f; num852 += 0.09090909f)
							{
								float f = (float)Math.PI * 2f * num852 + num851;
								Vector2 spinningpoint2 = f.ToRotationVector2();
								spinningpoint2 *= new Vector2(1f, 0.4f);
								spinningpoint2 = spinningpoint2.RotatedBy((float)num849 - (float)Math.PI);
								Vector2 vector66 = ((float)num849 - (float)Math.PI / 2f).ToRotationVector2();
								Vector2 vector67 = base.Center + vector66 * 16f * 0f;
								Dust dust55 = Dust.NewDustPerfect(vector67, 6, spinningpoint2);
								dust55.fadeIn = 1.8f;
								dust55.noGravity = true;
								Dust dust = dust55;
								dust.velocity *= (float)num850 * (Main.rand.NextFloat() * 2f + 0.2f);
								dust = dust55;
								dust.velocity += vector66 * 0.8f * num850;
								dust = dust55;
								dust.velocity *= 2f;
							}
						}
						for (int num853 = 1; num853 <= 3; num853++)
						{
							for (int num854 = -1; num854 <= 1; num854 += 2)
							{
								for (int num855 = -1; num855 <= 1; num855 += 2)
								{
									Gore gore10 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore10;
									gore.velocity *= (float)num853 / 3f;
									gore = gore10;
									gore.velocity += new Vector2(num854, num855);
								}
							}
						}
						Resize(10, 10);
					}
					else if (type == 779 || type == 783 || type == 862 || type == 863)
					{
						Resize(22, 22);
						SoundEngine.PlaySound(SoundID.Item62, position);
						Color transparent6 = Color.Transparent;
						for (int num856 = 0; num856 < 15; num856++)
						{
							Dust dust56 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent6, 0.8f);
							dust56.fadeIn = 0f;
							Dust dust = dust56;
							dust.velocity *= 0.5f;
						}
						for (int num857 = 0; num857 < 5; num857++)
						{
							Dust dust57 = Dust.NewDustDirect(position, width, height, 228, 0f, 0f, 100, transparent6, 2.5f);
							dust57.noGravity = true;
							Dust dust = dust57;
							dust.velocity *= 2.5f;
							dust57 = Dust.NewDustDirect(position, width, height, 228, 0f, 0f, 100, transparent6, 1.1f);
							dust = dust57;
							dust.velocity *= 2f;
							dust57.noGravity = true;
						}
						for (int num858 = 0; num858 < 3; num858++)
						{
							Dust dust58 = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 100, transparent6, 1.1f);
							Dust dust = dust58;
							dust.velocity *= 2f;
							dust58.noGravity = true;
						}
						for (int num859 = -1; num859 <= 1; num859 += 2)
						{
							for (int num860 = -1; num860 <= 1; num860 += 2)
							{
								if (Main.rand.Next(5) == 0)
								{
									Gore gore11 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore11;
									gore.velocity *= 0.2f;
									gore = gore11;
									gore.scale *= 0.65f;
									gore = gore11;
									gore.velocity += new Vector2(num859, num860) * 0.5f;
								}
							}
						}
					}
					else if (type == 776 || type == 780 || type == 777 || type == 781 || type == 778 || type == 782 || type == 803 || type == 804)
					{
						Resize(22, 22);
						if (type == 777 || type == 781)
						{
							SoundEngine.PlaySound(SoundID.Item62, position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, position);
						}
						Color transparent7 = Color.Transparent;
						for (int num861 = 0; num861 < 30; num861++)
						{
							Dust dust59 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, transparent7, 1.5f);
							Dust dust = dust59;
							dust.velocity *= 1.4f;
						}
						for (int num862 = 0; num862 < 40; num862++)
						{
							Dust dust60 = Dust.NewDustDirect(position, width, height, 228, 0f, 0f, 100, transparent7, 3.5f);
							dust60.noGravity = true;
							Dust dust = dust60;
							dust.velocity *= 7f;
							dust60 = Dust.NewDustDirect(position, width, height, 228, 0f, 0f, 100, transparent7, 1.3f);
							dust = dust60;
							dust.velocity *= 4f;
							dust60.noGravity = true;
						}
						for (int num863 = 0; num863 < 8; num863++)
						{
							Dust dust61 = Dust.NewDustDirect(position, width, height, 226, 0f, 0f, 100, transparent7, 1.3f);
							Dust dust = dust61;
							dust.velocity *= 4f;
							dust61.noGravity = true;
						}
						for (int num864 = 2; num864 <= 2; num864++)
						{
							for (int num865 = -1; num865 <= 1; num865 += 2)
							{
								for (int num866 = -1; num866 <= 1; num866 += 2)
								{
									Gore gore12 = Gore.NewGoreDirect(position, Vector2.Zero, Main.rand.Next(61, 64));
									Gore gore = gore12;
									gore.velocity *= ((num864 == 1) ? 0.4f : 0.8f);
									gore = gore12;
									gore.velocity += new Vector2(num865, num866);
								}
							}
						}
						if (owner == Main.myPlayer)
						{
							int num867 = 779;
							if (type == 780 || type == 781 || type == 782)
							{
								num867 = 783;
							}
							if (type == 803)
							{
								num867 = 862;
							}
							if (type == 804)
							{
								num867 = 863;
							}
							float num868 = Main.rand.NextFloat() * ((float)Math.PI * 2f);
							for (float num869 = 0f; num869 < 1f; num869 += 355f / (678f * (float)Math.PI))
							{
								float f2 = num868 + num869 * ((float)Math.PI * 2f);
								Vector2 vector68 = f2.ToRotationVector2() * (4f + Main.rand.NextFloat() * 2f);
								vector68 += Vector2.UnitY * -1f;
								int num870 = NewProjectile(GetProjectileSource_FromThis(), base.Center, vector68, num867, damage / 3, 0f, owner);
								Projectile projectile = Main.projectile[num870];
								Projectile projectile2 = projectile;
								projectile2.timeLeft -= Main.rand.Next(30);
							}
						}
					}
					else if (type == 133 || type == 134 || type == 135 || type == 136 || type == 137 || type == 138 || type == 303 || type == 338 || type == 339 || type == 930)
					{
						if (type == 30 || type == 133 || type == 136)
						{
							SoundEngine.PlaySound(SoundID.Item62, position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, position);
						}
						position.X += width / 2;
						position.Y += height / 2;
						width = 22;
						height = 22;
						position.X -= width / 2;
						position.Y -= height / 2;
						for (int num871 = 0; num871 < 30; num871++)
						{
							int num872 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num872];
							dust.velocity *= 1.4f;
						}
						for (int num873 = 0; num873 < 20; num873++)
						{
							int num874 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 3.5f);
							Main.dust[num874].noGravity = true;
							Dust dust = Main.dust[num874];
							dust.velocity *= 7f;
							num874 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num874];
							dust.velocity *= 3f;
						}
						for (int num875 = 0; num875 < 2; num875++)
						{
							float num876 = 0.4f;
							if (num875 == 1)
							{
								num876 = 0.8f;
							}
							int num877 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
							Gore gore = Main.gore[num877];
							gore.velocity *= num876;
							Main.gore[num877].velocity.X += 1f;
							Main.gore[num877].velocity.Y += 1f;
							num877 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num877];
							gore.velocity *= num876;
							Main.gore[num877].velocity.X -= 1f;
							Main.gore[num877].velocity.Y += 1f;
							num877 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num877];
							gore.velocity *= num876;
							Main.gore[num877].velocity.X += 1f;
							Main.gore[num877].velocity.Y -= 1f;
							num877 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num877];
							gore.velocity *= num876;
							Main.gore[num877].velocity.X -= 1f;
							Main.gore[num877].velocity.Y -= 1f;
						}
					}
					else if (type == 139 || type == 140 || type == 141 || type == 142 || type == 143 || type == 144 || type == 340 || type == 341)
					{
						if (type == 139)
						{
							SoundEngine.PlaySound(SoundID.Item62, position);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, position);
						}
						position.X += width / 2;
						position.Y += height / 2;
						width = 80;
						height = 80;
						position.X -= width / 2;
						position.Y -= height / 2;
						for (int num878 = 0; num878 < 40; num878++)
						{
							int num879 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 2f);
							Dust dust = Main.dust[num879];
							dust.velocity *= 3f;
							if (Main.rand.Next(2) == 0)
							{
								Main.dust[num879].scale = 0.5f;
								Main.dust[num879].fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
							}
						}
						for (int num880 = 0; num880 < 70; num880++)
						{
							int num881 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 3f);
							Main.dust[num881].noGravity = true;
							Dust dust = Main.dust[num881];
							dust.velocity *= 5f;
							num881 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
							dust = Main.dust[num881];
							dust.velocity *= 2f;
						}
						for (int num882 = 0; num882 < 3; num882++)
						{
							float num883 = 0.33f;
							if (num882 == 1)
							{
								num883 = 0.66f;
							}
							if (num882 == 2)
							{
								num883 = 1f;
							}
							int num884 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							Gore gore = Main.gore[num884];
							gore.velocity *= num883;
							Main.gore[num884].velocity.X += 1f;
							Main.gore[num884].velocity.Y += 1f;
							num884 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num884];
							gore.velocity *= num883;
							Main.gore[num884].velocity.X -= 1f;
							Main.gore[num884].velocity.Y += 1f;
							num884 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num884];
							gore.velocity *= num883;
							Main.gore[num884].velocity.X += 1f;
							Main.gore[num884].velocity.Y -= 1f;
							num884 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							gore = Main.gore[num884];
							gore.velocity *= num883;
							Main.gore[num884].velocity.X -= 1f;
							Main.gore[num884].velocity.Y -= 1f;
						}
						position.X += width / 2;
						position.Y += height / 2;
						width = 10;
						height = 10;
						position.X -= width / 2;
						position.Y -= height / 2;
					}
					else if (type == 246)
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
						for (int num885 = 0; num885 < 10; num885++)
						{
							int num886 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num886];
							dust.velocity *= 0.9f;
						}
						for (int num887 = 0; num887 < 5; num887++)
						{
							int num888 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num888].noGravity = true;
							Dust dust = Main.dust[num888];
							dust.velocity *= 3f;
							num888 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num888];
							dust.velocity *= 2f;
						}
						int num889 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Gore gore = Main.gore[num889];
						gore.velocity *= 0.3f;
						Main.gore[num889].velocity.X += Main.rand.Next(-1, 2);
						Main.gore[num889].velocity.Y += Main.rand.Next(-1, 2);
						position.X += width / 2;
						position.Y += height / 2;
						width = 150;
						height = 150;
						position.X -= width / 2;
						position.Y -= height / 2;
						penetrate = -1;
						maxPenetrate = 0;
						Damage();
						if (owner == Main.myPlayer)
						{
							int num890 = Main.rand.Next(2, 6);
							for (int num891 = 0; num891 < num890; num891++)
							{
								float num892 = Main.rand.Next(-100, 101);
								num892 += 0.01f;
								float num893 = Main.rand.Next(-100, 101);
								num892 -= 0.01f;
								float num894 = (float)Math.Sqrt(num892 * num892 + num893 * num893);
								num894 = 8f / num894;
								num892 *= num894;
								num893 *= num894;
								int num895 = NewProjectile(GetProjectileSource_FromThis(), base.Center.X - oldVelocity.X, base.Center.Y - oldVelocity.Y, num892, num893, 249, damage, knockBack, owner);
								Main.projectile[num895].maxPenetrate = 0;
							}
						}
					}
					else if (type == 249)
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
						for (int num896 = 0; num896 < 7; num896++)
						{
							int num897 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num897];
							dust.velocity *= 0.8f;
						}
						for (int num898 = 0; num898 < 2; num898++)
						{
							int num899 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num899].noGravity = true;
							Dust dust = Main.dust[num899];
							dust.velocity *= 2.5f;
							num899 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num899];
							dust.velocity *= 1.5f;
						}
						int num900 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(61, 64));
						Gore gore = Main.gore[num900];
						gore.velocity *= 0.2f;
						Main.gore[num900].velocity.X += Main.rand.Next(-1, 2);
						Main.gore[num900].velocity.Y += Main.rand.Next(-1, 2);
						position.X += width / 2;
						position.Y += height / 2;
						width = 100;
						height = 100;
						position.X -= width / 2;
						position.Y -= height / 2;
						penetrate = -1;
						Damage();
					}
					else if (type == 588)
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
						position = base.Center;
						width = (height = 22);
						base.Center = position;
						for (int num901 = 0; num901 < 8; num901++)
						{
							int num902 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 219 + Main.rand.Next(5));
							Dust dust = Main.dust[num902];
							dust.velocity *= 1.4f;
							Main.dust[num902].fadeIn = 1f;
							Main.dust[num902].noGravity = true;
						}
						for (int num903 = 0; num903 < 15; num903++)
						{
							int num904 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 139 + Main.rand.Next(4), 0f, 0f, 0, default(Color), 1.6f);
							Main.dust[num904].noGravity = true;
							Dust dust = Main.dust[num904];
							dust.velocity *= 5f;
							num904 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 139 + Main.rand.Next(4), 0f, 0f, 0, default(Color), 1.9f);
							dust = Main.dust[num904];
							dust.velocity *= 3f;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num905 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(276, 283));
							Gore gore = Main.gore[num905];
							gore.velocity *= 0.4f;
							Main.gore[num905].velocity.X += 1f;
							Main.gore[num905].velocity.Y += 1f;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num905 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(276, 283));
							Gore gore = Main.gore[num905];
							gore.velocity *= 0.4f;
							Main.gore[num905].velocity.X -= 1f;
							Main.gore[num905].velocity.Y += 1f;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num905 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(276, 283));
							Gore gore = Main.gore[num905];
							gore.velocity *= 0.4f;
							Main.gore[num905].velocity.X += 1f;
							Main.gore[num905].velocity.Y -= 1f;
						}
						if (Main.rand.Next(2) == 0)
						{
							int num905 = Gore.NewGore(new Vector2(position.X, position.Y), default(Vector2), Main.rand.Next(276, 283));
							Gore gore = Main.gore[num905];
							gore.velocity *= 0.4f;
							Main.gore[num905].velocity.X -= 1f;
							Main.gore[num905].velocity.Y -= 1f;
						}
					}
					else if (type == 773)
					{
						Player player2 = Main.player[owner];
						Vector2 v = DirectionTo(player2.Center);
						float num906 = v.ToRotation() + (float)Math.PI / 2f;
						num906 += (float)Math.PI;
						Point scarabBombDigDirectionSnap = GetScarabBombDigDirectionSnap8();
						num906 = scarabBombDigDirectionSnap.ToVector2().ToRotation() + (float)Math.PI / 2f;
						if (type == 794 || type == 797)
						{
							SoundEngine.PlaySound(SoundID.Item62, base.Center);
						}
						else
						{
							SoundEngine.PlaySound(SoundID.Item14, base.Center);
						}
						Resize(80, 80);
						for (int num907 = 0; num907 < 60; num907++)
						{
							Dust dust62 = Dust.NewDustDirect(position, width, height, 31, 0f, 0f, 100, default(Color), 2f);
							dust62.velocity.Y -= 0.5f;
							Dust dust = dust62;
							dust.velocity *= 1.2f;
							dust62.color = Color.Black * 0.9f;
							if (Main.rand.Next(2) == 0)
							{
								dust62.scale = 0.5f;
								dust62.fadeIn = 1f + (float)Main.rand.Next(10) * 0.1f;
								dust62.color = Color.Black * 0.8f;
							}
						}
						for (int num908 = 0; num908 < 30; num908++)
						{
							Dust dust63 = Dust.NewDustDirect(position, width, height, 59, 0f, 0f, 100);
							dust63.noGravity = true;
							if (Math.Abs(velocity.X) > 0.25f)
							{
								velocity.X *= 0.25f / Math.Abs(velocity.X);
							}
							dust63.velocity.Y -= 0.5f;
							dust63.fadeIn = 1.2f;
							Dust dust = dust63;
							dust.velocity *= 8f;
							dust63.velocity = dust63.velocity.RotatedBy(num906);
							dust63 = Dust.NewDustDirect(position, width, height, 59, 0f, 0f, 100, default(Color), 1.5f);
							dust = dust63;
							dust.velocity *= 2f;
							dust63.velocity = dust63.velocity.RotatedBy(num906);
							dust63.velocity.Y -= 1.5f;
							dust63 = Dust.NewDustDirect(position, width, height, 59, 0f, 0f, 100, default(Color), 1.5f);
							dust63.noGravity = true;
							dust63.velocity.Y -= 1f;
							dust63.fadeIn = 2f;
							dust = dust63;
							dust.velocity *= 4f;
							dust63.velocity = dust63.velocity.RotatedBy(num906);
						}
						bool flag3 = Math.Abs(scarabBombDigDirectionSnap.X) + Math.Abs(scarabBombDigDirectionSnap.Y) == 1;
						for (int num909 = 1; num909 <= 3; num909++)
						{
							float num910 = (float)Math.PI * 2f * Main.rand.NextFloat();
							for (float num911 = 0f; num911 < 1f; num911 += 0.0833333358f)
							{
								float f3 = (float)Math.PI * 2f * num911 + num910;
								Vector2 value8 = f3.ToRotationVector2();
								value8 *= new Vector2(0.7f, 0.3f);
								Dust dust64 = Dust.NewDustPerfect(base.Center, 59, value8);
								dust64.fadeIn = 2f;
								dust64.noGravity = true;
								Dust dust = dust64;
								dust.velocity *= (float)num909 + Main.rand.NextFloat() * 0.6f;
								dust64.velocity.Y -= (float)num909 * 0.8f;
								dust64.velocity = dust64.velocity.RotatedBy(num906);
								if (flag3)
								{
									dust = dust64;
									dust.velocity += scarabBombDigDirectionSnap.ToVector2() * (Main.rand.NextFloat() * 11f + 6f);
								}
								else
								{
									dust = dust64;
									dust.velocity += scarabBombDigDirectionSnap.ToVector2() * (Main.rand.NextFloat() * 7f + 5f);
								}
							}
						}
						Vector2 vector69 = (num906 - (float)Math.PI / 2f).ToRotationVector2();
						for (int num912 = 1; num912 <= 1; num912++)
						{
							for (int num913 = -1; num913 <= 1; num913 += 2)
							{
								for (int num914 = -1; num914 <= 1; num914 += 2)
								{
									Gore gore13 = Gore.NewGoreDirect(base.Center - Vector2.One * 20f, Vector2.Zero, Main.rand.Next(61, 64));
									gore13.velocity = gore13.velocity * 0.5f + vector69 * 3f;
									Gore gore = gore13;
									gore.velocity += new Vector2(num913, num914) * 0.2f;
								}
							}
						}
						Resize(10, 10);
						if (owner == Main.myPlayer)
						{
							Point p = base.Center.ToTileCoordinates();
							Vector2 vector70 = p.ToWorldCoordinates();
							bool wallSplode = false;
							int num915 = 15;
							if (scarabBombDigDirectionSnap.X == 0 || scarabBombDigDirectionSnap.Y == 0)
							{
								num915 = (int)((double)num915 * Math.Sqrt(2.0));
							}
							for (int num916 = 0; num916 < num915; num916++)
							{
								Vector2 vec = vector70 + scarabBombDigDirectionSnap.ToVector2() * 16f * num916 * 1f;
								Point p2 = vec.ToTileCoordinates();
								if (ShouldWallExplode(p2.ToWorldCoordinates(), 9999, p2.X - 1, p2.X + 1, p2.Y - 1, p2.Y + 1))
								{
									wallSplode = true;
									break;
								}
							}
							for (int num917 = 0; num917 < num915; num917++)
							{
								Vector2 vec2 = vector70 + scarabBombDigDirectionSnap.ToVector2() * 16f * num917 * 1f;
								Point p3 = vec2.ToTileCoordinates();
								ExplodeTiles(p3.ToWorldCoordinates(), 9999, p3.X - 1, p3.X + 1, p3.Y - 1, p3.Y + 1, wallSplode);
							}
						}
					}
					else if (type == 28 || type == 30 || type == 37 || type == 75 || type == 102 || type == 164 || type == 397 || type == 517 || type == 516 || type == 519 || type == 773)
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
						position.X += width / 2;
						position.Y += height / 2;
						width = 22;
						height = 22;
						position.X -= width / 2;
						position.Y -= height / 2;
						int num918 = 6;
						if (type == 773)
						{
							num918 = 59;
						}
						for (int num919 = 0; num919 < 20; num919++)
						{
							int num920 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 1.5f);
							Dust dust = Main.dust[num920];
							dust.velocity *= 1.4f;
						}
						for (int num921 = 0; num921 < 10; num921++)
						{
							int num922 = Dust.NewDust(position, width, height, num918, 0f, 0f, 100, default(Color), 2.5f);
							Main.dust[num922].noGravity = true;
							Dust dust = Main.dust[num922];
							dust.velocity *= 5f;
							num922 = Dust.NewDust(position, width, height, num918, 0f, 0f, 100, default(Color), 1.5f);
							dust = Main.dust[num922];
							dust.velocity *= 3f;
						}
						int num923 = Gore.NewGore(position, default(Vector2), Main.rand.Next(61, 64));
						Gore gore = Main.gore[num923];
						gore.velocity *= 0.4f;
						Main.gore[num923].velocity.X += 1f;
						Main.gore[num923].velocity.Y += 1f;
						num923 = Gore.NewGore(position, default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num923];
						gore.velocity *= 0.4f;
						Main.gore[num923].velocity.X -= 1f;
						Main.gore[num923].velocity.Y += 1f;
						num923 = Gore.NewGore(position, default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num923];
						gore.velocity *= 0.4f;
						Main.gore[num923].velocity.X += 1f;
						Main.gore[num923].velocity.Y -= 1f;
						num923 = Gore.NewGore(position, default(Vector2), Main.rand.Next(61, 64));
						gore = Main.gore[num923];
						gore.velocity *= 0.4f;
						Main.gore[num923].velocity.X -= 1f;
						Main.gore[num923].velocity.Y -= 1f;
						if (type == 102)
						{
							Vector2 vector71 = position;
							position.X += width / 2;
							position.Y += height / 2;
							width = 128;
							height = 128;
							position.X -= width / 2;
							position.Y -= height / 2;
							damage = 40;
							Damage();
							position = vector71;
							width = 22;
							height = 22;
						}
						if (type == 75)
						{
							Resize(128, 128);
							damage = 80;
							knockBack = 8f;
							Damage();
							Resize(22, 22);
						}
					}
					else if (type == 29 || type == 108 || type == 470 || type == 637)
					{
						SoundEngine.PlaySound(SoundID.Item14, position);
						if (type == 29)
						{
							position.X += width / 2;
							position.Y += height / 2;
							width = 200;
							height = 200;
							position.X -= width / 2;
							position.Y -= height / 2;
						}
						for (int num924 = 0; num924 < 50; num924++)
						{
							int num925 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 31, 0f, 0f, 100, default(Color), 2f);
							Dust dust = Main.dust[num925];
							dust.velocity *= 1.4f;
						}
						for (int num926 = 0; num926 < 80; num926++)
						{
							int num927 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 3f);
							Main.dust[num927].noGravity = true;
							Dust dust = Main.dust[num927];
							dust.velocity *= 5f;
							num927 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 6, 0f, 0f, 100, default(Color), 2f);
							dust = Main.dust[num927];
							dust.velocity *= 3f;
						}
						for (int num928 = 0; num928 < 2; num928++)
						{
							int num929 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							Main.gore[num929].scale = 1.5f;
							Main.gore[num929].velocity.X += 1.5f;
							Main.gore[num929].velocity.Y += 1.5f;
							num929 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							Main.gore[num929].scale = 1.5f;
							Main.gore[num929].velocity.X -= 1.5f;
							Main.gore[num929].velocity.Y += 1.5f;
							num929 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							Main.gore[num929].scale = 1.5f;
							Main.gore[num929].velocity.X += 1.5f;
							Main.gore[num929].velocity.Y -= 1.5f;
							num929 = Gore.NewGore(new Vector2(position.X + (float)(width / 2) - 24f, position.Y + (float)(height / 2) - 24f), default(Vector2), Main.rand.Next(61, 64));
							Main.gore[num929].scale = 1.5f;
							Main.gore[num929].velocity.X -= 1.5f;
							Main.gore[num929].velocity.Y -= 1.5f;
						}
						position.X += width / 2;
						position.Y += height / 2;
						width = 10;
						height = 10;
						position.X -= width / 2;
						position.Y -= height / 2;
					}
					else if (type == 69)
					{
						SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
						for (int num930 = 0; num930 < 5; num930++)
						{
							Dust.NewDust(new Vector2(position.X, position.Y), width, height, 13);
						}
						for (int num931 = 0; num931 < 30; num931++)
						{
							int num932 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 33, 0f, -2f, 0, default(Color), 1.1f);
							Main.dust[num932].alpha = 100;
							Main.dust[num932].velocity.X *= 1.5f;
							Dust dust = Main.dust[num932];
							dust.velocity *= 3f;
						}
					}
					else if (type == 70)
					{
						SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
						for (int num933 = 0; num933 < 5; num933++)
						{
							Dust.NewDust(new Vector2(position.X, position.Y), width, height, 13);
						}
						for (int num934 = 0; num934 < 30; num934++)
						{
							int num935 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 52, 0f, -2f, 0, default(Color), 1.1f);
							Main.dust[num935].alpha = 100;
							Main.dust[num935].velocity.X *= 1.5f;
							Dust dust = Main.dust[num935];
							dust.velocity *= 3f;
						}
					}
					else if (type == 621)
					{
						SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
						for (int num936 = 0; num936 < 5; num936++)
						{
							Dust.NewDust(new Vector2(position.X, position.Y), width, height, 13);
						}
						for (int num937 = 0; num937 < 30; num937++)
						{
							int num938 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 266, 0f, -2f, 0, default(Color), 1.1f);
							Main.dust[num938].alpha = 100;
							Main.dust[num938].velocity.X *= 1.5f;
							Dust dust = Main.dust[num938];
							dust.velocity *= 3f;
						}
					}
					else if (type == 114 || type == 115)
					{
						SoundEngine.PlaySound(SoundID.Item10, position);
						for (int num939 = 4; num939 < 31; num939++)
						{
							float num940 = oldVelocity.X * (30f / (float)num939);
							float num941 = oldVelocity.Y * (30f / (float)num939);
							int num942 = Dust.NewDust(new Vector2(position.X - num940, position.Y - num941), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.4f);
							Main.dust[num942].noGravity = true;
							Dust dust = Main.dust[num942];
							dust.velocity *= 0.5f;
							num942 = Dust.NewDust(new Vector2(position.X - num940, position.Y - num941), 8, 8, 27, oldVelocity.X, oldVelocity.Y, 100, default(Color), 0.9f);
							dust = Main.dust[num942];
							dust.velocity *= 0.5f;
						}
					}
					else if (type == 116)
					{
						SoundEngine.PlaySound(SoundID.Item10, position);
						for (int num943 = 4; num943 < 31; num943++)
						{
							float num944 = oldVelocity.X * (30f / (float)num943);
							float num945 = oldVelocity.Y * (30f / (float)num943);
							int num946 = Dust.NewDust(new Vector2(position.X - num944, position.Y - num945), 8, 8, 64, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.8f);
							Main.dust[num946].noGravity = true;
							num946 = Dust.NewDust(new Vector2(position.X - num944, position.Y - num945), 8, 8, 64, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.4f);
							Main.dust[num946].noGravity = true;
						}
					}
					else if (type == 173)
					{
						SoundEngine.PlaySound(SoundID.Item10, position);
						for (int num947 = 4; num947 < 24; num947++)
						{
							float num948 = oldVelocity.X * (30f / (float)num947);
							float num949 = oldVelocity.Y * (30f / (float)num947);
							int num950;
							switch (Main.rand.Next(3))
							{
							case 0:
								num950 = 15;
								break;
							case 1:
								num950 = 57;
								break;
							default:
								num950 = 58;
								break;
							}
							int num951 = Dust.NewDust(new Vector2(position.X - num948, position.Y - num949), 8, 8, num950, oldVelocity.X * 0.2f, oldVelocity.Y * 0.2f, 100, default(Color), 1.8f);
							Dust dust = Main.dust[num951];
							dust.velocity *= 1.5f;
							Main.dust[num951].noGravity = true;
						}
					}
					else if (type == 132)
					{
						SoundEngine.PlaySound(SoundID.Item10, position);
						for (int num952 = 4; num952 < 31; num952++)
						{
							float num953 = oldVelocity.X * (30f / (float)num952);
							float num954 = oldVelocity.Y * (30f / (float)num952);
							int num955 = Dust.NewDust(new Vector2(oldPosition.X - num953, oldPosition.Y - num954), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.8f);
							Main.dust[num955].noGravity = true;
							Dust dust = Main.dust[num955];
							dust.velocity *= 0.5f;
							num955 = Dust.NewDust(new Vector2(oldPosition.X - num953, oldPosition.Y - num954), 8, 8, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.4f);
							dust = Main.dust[num955];
							dust.velocity *= 0.05f;
						}
					}
					else if (type == 156)
					{
						SoundEngine.PlaySound(SoundID.Item10, position);
						for (int num956 = 4; num956 < 31; num956++)
						{
							float num957 = oldVelocity.X * (30f / (float)num956);
							float num958 = oldVelocity.Y * (30f / (float)num956);
							int num959 = Dust.NewDust(new Vector2(oldPosition.X - num957, oldPosition.Y - num958), 8, 8, 73, oldVelocity.X, oldVelocity.Y, 255, default(Color), 1.8f);
							Main.dust[num959].noGravity = true;
							Dust dust = Main.dust[num959];
							dust.velocity *= 0.5f;
							num959 = Dust.NewDust(new Vector2(oldPosition.X - num957, oldPosition.Y - num958), 8, 8, 73, oldVelocity.X, oldVelocity.Y, 255, default(Color), 1.4f);
							dust = Main.dust[num959];
							dust.velocity *= 0.05f;
							Main.dust[num959].noGravity = true;
						}
					}
					else if (type == 157)
					{
						SoundEngine.PlaySound(SoundID.Item10, position);
						for (int num960 = 4; num960 < 31; num960++)
						{
							int num961 = Dust.NewDust(position, width, height, 107, oldVelocity.X, oldVelocity.Y, 100, default(Color), 1.8f);
							Main.dust[num961].noGravity = true;
							Dust dust = Main.dust[num961];
							dust.velocity *= 0.5f;
						}
					}
					else if (type == 370)
					{
						SoundEngine.PlaySound(SoundID.Item4, position);
						for (int num962 = 0; num962 < 5; num962++)
						{
							Dust.NewDust(new Vector2(position.X, position.Y), width, height, 13);
						}
						for (int num963 = 0; num963 < 30; num963++)
						{
							Vector2 vector72 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
							vector72.Normalize();
							int num964 = Gore.NewGore(base.Center + vector72 * 10f, vector72 * Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, 331, (float)Main.rand.Next(40, 141) * 0.01f);
							Main.gore[num964].sticky = false;
						}
					}
					else if (type == 371)
					{
						SoundEngine.PlaySound(13, (int)position.X, (int)position.Y);
						SoundEngine.PlaySound(SoundID.Item16, position);
						for (int num965 = 0; num965 < 5; num965++)
						{
							Dust.NewDust(new Vector2(position.X, position.Y), width, height, 13);
						}
						for (int num966 = 0; num966 < 30; num966++)
						{
							Vector2 vector73 = new Vector2(Main.rand.Next(-10, 11), Main.rand.Next(-10, 11));
							vector73.Normalize();
							vector73 *= 0.4f;
							int num967 = Gore.NewGore(base.Center + vector73 * 10f, vector73 * Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, Main.rand.Next(435, 438), (float)Main.rand.Next(20, 100) * 0.01f);
							Main.gore[num967].sticky = false;
						}
					}
					else if (type == 936)
					{
						SoundEngine.PlaySound(SoundID.Item21, position);
						for (int num968 = 0; num968 < 20; num968++)
						{
							Color newColor8 = Main.hslToRgb(0.7f + 0.2f * Main.rand.NextFloat(), 1f, 0.7f);
							newColor8.A /= 2;
							int num969 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 4, 0f, 0f, 150, newColor8);
							Dust dust = Main.dust[num969];
							dust.velocity *= 1.5f;
							newColor8 = Main.hslToRgb(0.7f + 0.2f * Main.rand.NextFloat(), 1f, 0.5f);
							newColor8.A /= 2;
							num969 = Dust.NewDust(new Vector2(position.X, position.Y), width, height, 4, 0f, 0f, 150, newColor8, 1.8f);
							dust = Main.dust[num969];
							dust.velocity *= 3f;
							Main.dust[num969].noGravity = true;
						}
					}
				}
			}
			if (owner == Main.myPlayer && (type == 370 || type == 371 || type == 936))
			{
				float num970 = 80f;
				int num971 = 119;
				if (type == 371)
				{
					num971 = 120;
				}
				if (type == 936)
				{
					num971 = 320;
				}
				for (int num972 = 0; num972 < 255; num972++)
				{
					Player player3 = Main.player[num972];
					if (player3.active && !player3.dead && Vector2.Distance(base.Center, player3.Center) < num970)
					{
						player3.AddBuff(num971, 1800, quiet: false);
					}
				}
				for (int num973 = 0; num973 < 200; num973++)
				{
					NPC nPC = Main.npc[num973];
					if (nPC.active && nPC.life > 0 && Vector2.Distance(base.Center, nPC.Center) < num970)
					{
						nPC.AddBuff(num971, 1800);
					}
				}
			}
			if (owner == Main.myPlayer)
			{
				if (type == 30 || type == 517 || type == 397 || type == 588)
				{
					int num974 = 4;
					Vector2 center = base.Center;
					int num975 = (int)(center.X / 16f - (float)num974);
					int num976 = (int)(center.X / 16f + (float)num974);
					int num977 = (int)(center.Y / 16f - (float)num974);
					int num978 = (int)(center.Y / 16f + (float)num974);
					if (num975 < 0)
					{
						num975 = 0;
					}
					if (num976 > Main.maxTilesX)
					{
						num976 = Main.maxTilesX;
					}
					if (num977 < 0)
					{
						num977 = 0;
					}
					if (num978 > Main.maxTilesY)
					{
						num978 = Main.maxTilesY;
					}
					ExplodeCrackedTiles(center, num974, num975, num976, num977, num978);
				}
				if (type == 28 || type == 29 || type == 37 || type == 108 || type == 136 || type == 137 || type == 138 || type == 142 || type == 143 || type == 144 || type == 339 || type == 341 || type == 470 || type == 516 || type == 519 || type == 637 || type == 716 || type == 718 || type == 780 || type == 781 || type == 782 || type == 804 || type == 783 || type == 863 || type == 796 || type == 797 || type == 798 || type == 809 || (type == 102 && Main.getGoodWorld))
				{
					int num979 = 3;
					if (type == 102)
					{
						num979 = 4;
					}
					if (type == 28 || type == 37 || type == 516 || type == 519)
					{
						num979 = 4;
					}
					if (type == 29 || type == 470 || type == 637 || type == 796 || type == 797 || type == 798 || type == 809)
					{
						num979 = 7;
					}
					if (type == 142 || type == 143 || type == 144 || type == 341)
					{
						num979 = 5;
					}
					if (type == 716 || type == 780 || type == 781 || type == 782 || type == 804 || type == 783 || type == 863)
					{
						num979 = 3;
					}
					if (type == 718)
					{
						num979 = 5;
					}
					if (type == 108)
					{
						num979 = 10;
					}
					Vector2 center2 = position;
					if (type == 716 || type == 718 || type == 773)
					{
						center2 = base.Center;
					}
					int num980 = num979;
					int num981 = num979;
					int num982 = (int)(center2.X / 16f - (float)num980);
					int num983 = (int)(center2.X / 16f + (float)num980);
					int num984 = (int)(center2.Y / 16f - (float)num981);
					int num985 = (int)(center2.Y / 16f + (float)num981);
					if (num982 < 0)
					{
						num982 = 0;
					}
					if (num983 > Main.maxTilesX)
					{
						num983 = Main.maxTilesX;
					}
					if (num984 < 0)
					{
						num984 = 0;
					}
					if (num985 > Main.maxTilesY)
					{
						num985 = Main.maxTilesY;
					}
					bool wallSplode2 = ShouldWallExplode(center2, num979, num982, num983, num984, num985);
					ExplodeTiles(center2, num979, num982, num983, num984, num985, wallSplode2);
				}
				if (Main.netMode != 0)
				{
					NetMessage.SendData(29, -1, -1, null, identity, owner);
				}
				if (!noDropItem)
				{
					int num986 = -1;
					if (type >= 736 && type <= 738)
					{
						SoundEngine.PlaySound(SoundID.Item127, position);
						for (int num987 = 0; num987 < 3; num987++)
						{
							Dust.NewDust(position, 16, 16, type - 736 + 275);
						}
						int num988 = (int)(base.Center.X / 16f);
						int num989 = (int)(base.Center.Y / 16f) + 1;
						if (Main.myPlayer == owner && Main.tile[num988, num989].active() && TileID.Sets.CrackedBricks[Main.tile[num988, num989].type] && Main.rand.Next(2) == 0)
						{
							WorldGen.KillTile(num988, num989);
							if (Main.netMode != 0)
							{
								NetMessage.SendData(17, -1, -1, null, 20, num988, num989);
							}
						}
					}
					else if (aiStyle == 10)
					{
						int num990 = (int)(position.X + (float)(width / 2)) / 16;
						int num991 = (int)(position.Y + (float)(width / 2)) / 16;
						int num992 = 0;
						int num993 = 2;
						if (type == 109)
						{
							num992 = 147;
							num993 = 0;
						}
						if (type == 31)
						{
							num992 = 53;
							num993 = 169;
							if (ai[0] == 2f)
							{
								num993 = 0;
							}
						}
						if (type == 42)
						{
							num992 = 53;
							num993 = 0;
						}
						if (type == 56)
						{
							num992 = 112;
							num993 = 370;
						}
						if (type == 65)
						{
							num992 = 112;
							num993 = 0;
						}
						if (type == 67)
						{
							num992 = 116;
							num993 = 408;
						}
						if (type == 68)
						{
							num992 = 116;
							num993 = 0;
						}
						if (type == 71)
						{
							num992 = 123;
							num993 = 424;
						}
						if (type == 39)
						{
							num992 = 59;
							num993 = 0;
						}
						if (type == 40)
						{
							num992 = 57;
							num993 = 0;
						}
						if (type == 179)
						{
							num992 = 224;
							num993 = 1103;
						}
						if (type == 241)
						{
							num992 = 234;
							num993 = 1246;
						}
						if (type == 354)
						{
							num992 = 234;
							num993 = 0;
						}
						if (type == 411)
						{
							num992 = 330;
							num993 = 71;
						}
						if (type == 412)
						{
							num992 = 331;
							num993 = 72;
						}
						if (type == 413)
						{
							num992 = 332;
							num993 = 73;
						}
						if (type == 414)
						{
							num992 = 333;
							num993 = 74;
						}
						if (type == 812)
						{
							num992 = 495;
							num993 = 4090;
						}
						if (type == 109)
						{
							int num994 = Player.FindClosest(position, width, height);
							if ((double)(base.Center - Main.player[num994].Center).Length() > (double)Main.LogicCheckScreenWidth * 0.75)
							{
								num992 = -1;
								num993 = 593;
							}
						}
						if (Main.tile[num990, num991].nactive() && Main.tile[num990, num991].halfBrick() && velocity.Y > 0f && Math.Abs(velocity.Y) > Math.Abs(velocity.X))
						{
							num991--;
						}
						if (!Main.tile[num990, num991].active() && num992 >= 0)
						{
							bool flag4 = false;
							bool flag5 = false;
							if (num991 < Main.maxTilesY - 2)
							{
								Tile tile2 = Main.tile[num990, num991 + 1];
								if (tile2 != null && tile2.active())
								{
									if (tile2.active() && tile2.type == 314)
									{
										flag5 = true;
									}
									if (tile2.active() && WorldGen.BlockBelowMakesSandFall(num990, num991))
									{
										flag5 = true;
									}
								}
							}
							if (!flag5)
							{
								flag4 = WorldGen.PlaceTile(num990, num991, num992, mute: false, forced: true);
							}
							if (!flag5 && Main.tile[num990, num991].active() && Main.tile[num990, num991].type == num992)
							{
								if (Main.tile[num990, num991 + 1].halfBrick() || Main.tile[num990, num991 + 1].slope() != 0)
								{
									WorldGen.SlopeTile(num990, num991 + 1);
									if (Main.netMode == 2)
									{
										NetMessage.SendData(17, -1, -1, null, 14, num990, num991 + 1);
									}
								}
								if (Main.netMode != 0)
								{
									NetMessage.SendData(17, -1, -1, null, 1, num990, num991, num992);
								}
							}
							else if (!flag4 && num993 > 0)
							{
								num986 = Item.NewItem((int)position.X, (int)position.Y, width, height, num993);
							}
						}
						else if (num993 > 0)
						{
							num986 = Item.NewItem((int)position.X, (int)position.Y, width, height, num993);
						}
					}
					if (type == 171)
					{
						if (ai[1] == 0f)
						{
							num986 = Item.NewItem((int)position.X, (int)position.Y, width, height, 985);
							Main.item[num986].noGrabDelay = 0;
						}
						else if (ai[1] < 10f)
						{
							num986 = Item.NewItem((int)position.X, (int)position.Y, width, height, 965, (int)(10f - ai[1]));
							Main.item[num986].noGrabDelay = 0;
						}
					}
					if (type == 475)
					{
						if (ai[1] == 0f)
						{
							num986 = Item.NewItem((int)position.X, (int)position.Y, width, height, 3005);
							Main.item[num986].noGrabDelay = 0;
						}
						else if (ai[1] < 10f)
						{
							num986 = Item.NewItem((int)position.X, (int)position.Y, width, height, 2996, (int)(10f - ai[1]));
							Main.item[num986].noGrabDelay = 0;
						}
					}
					if (type == 505)
					{
						if (ai[1] == 0f)
						{
							num986 = Item.NewItem((int)position.X, (int)position.Y, width, height, 3079);
							Main.item[num986].noGrabDelay = 0;
						}
						else if (ai[1] < 10f)
						{
							num986 = Item.NewItem((int)position.X, (int)position.Y, width, height, 3077, (int)(10f - ai[1]));
							Main.item[num986].noGrabDelay = 0;
						}
					}
					if (type == 506)
					{
						if (ai[1] == 0f)
						{
							num986 = Item.NewItem((int)position.X, (int)position.Y, width, height, 3080);
							Main.item[num986].noGrabDelay = 0;
						}
						else if (ai[1] < 10f)
						{
							num986 = Item.NewItem((int)position.X, (int)position.Y, width, height, 3078, (int)(10f - ai[1]));
							Main.item[num986].noGrabDelay = 0;
						}
					}
					if (type == 12 && damage > 500)
					{
						num986 = Item.NewItem((int)position.X, (int)position.Y, width, height, 75);
					}
					if (type == 155)
					{
						num986 = Item.NewItem((int)position.X, (int)position.Y, width, height, 859);
					}
					if (type == 861)
					{
						num986 = Item.NewItem((int)position.X, (int)position.Y, width, height, 4743);
					}
					if (Main.netMode == 1 && num986 >= 0)
					{
						NetMessage.SendData(21, -1, -1, null, num986, 1f);
					}
				}
				if (type == 69 || type == 70 || type == 621)
				{
					int i2 = (int)(position.X + (float)(width / 2)) / 16;
					int j2 = (int)(position.Y + (float)(height / 2)) / 16;
					if (type == 69)
					{
						WorldGen.Convert(i2, j2, 2);
					}
					if (type == 70)
					{
						WorldGen.Convert(i2, j2, 1);
					}
					if (type == 621)
					{
						WorldGen.Convert(i2, j2, 4);
					}
				}
				if (type == 378)
				{
					int num995 = Main.rand.Next(2, 4);
					if (Main.rand.Next(5) == 0)
					{
						num995++;
					}
					for (int num996 = 0; num996 < num995; num996++)
					{
						float x2 = velocity.X;
						float y8 = velocity.Y;
						x2 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						y8 *= 1f + (float)Main.rand.Next(-20, 21) * 0.01f;
						NewProjectile(GetProjectileSource_FromThis(), base.Center.X, base.Center.Y, x2, y8, 379, damage, knockBack, owner);
					}
				}
			}
			active = false;
		}

		private void DoRainbowCrystalStaffExplosion()
		{
			Vector2 spinningpoint = new Vector2(0f, -3f).RotatedByRandom(3.1415927410125732);
			float num = Main.rand.Next(7, 13);
			Vector2 vector = new Vector2(2.1f, 2f);
			Color newColor = Main.hslToRgb(ai[0], 1f, 0.5f);
			newColor.A = byte.MaxValue;
			for (float num2 = 0f; num2 < num; num2 += 1f)
			{
				int num3 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, newColor);
				Main.dust[num3].position = base.Center;
				Main.dust[num3].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num2 / num) * vector * (0.8f + Main.rand.NextFloat() * 0.4f);
				Main.dust[num3].noGravity = true;
				Main.dust[num3].scale = 2f;
				Main.dust[num3].fadeIn = Main.rand.NextFloat() * 2f;
				if (num3 != 6000)
				{
					Dust dust = Dust.CloneDust(num3);
					dust.scale /= 2f;
					dust.fadeIn /= 2f;
					dust.color = new Color(255, 255, 255, 255);
				}
			}
			for (float num4 = 0f; num4 < num; num4 += 1f)
			{
				int num5 = Dust.NewDust(base.Center, 0, 0, 267, 0f, 0f, 0, newColor);
				Main.dust[num5].position = base.Center;
				Main.dust[num5].velocity = spinningpoint.RotatedBy((float)Math.PI * 2f * num4 / num) * vector * (0.8f + Main.rand.NextFloat() * 0.4f);
				Main.dust[num5].velocity *= Main.rand.NextFloat() * 0.8f;
				Main.dust[num5].noGravity = true;
				Main.dust[num5].scale = Main.rand.NextFloat() * 1f;
				Main.dust[num5].fadeIn = Main.rand.NextFloat() * 2f;
				if (num5 != 6000)
				{
					Dust dust2 = Dust.CloneDust(num5);
					dust2.scale /= 2f;
					dust2.fadeIn /= 2f;
					dust2.color = new Color(255, 255, 255, 255);
				}
			}
		}

		public bool ShouldWallExplode(Vector2 compareSpot, int radius, int minI, int maxI, int minJ, int maxJ)
		{
			bool result = false;
			for (int i = minI; i <= maxI; i++)
			{
				for (int j = minJ; j <= maxJ; j++)
				{
					float num = Math.Abs((float)i - compareSpot.X / 16f);
					float num2 = Math.Abs((float)j - compareSpot.Y / 16f);
					if (Math.Sqrt(num * num + num2 * num2) < (double)radius && Main.tile[i, j] != null && Main.tile[i, j].wall == 0)
					{
						result = true;
						break;
					}
				}
			}
			return result;
		}

		public Color GetFloatingDaggerMinionGlowColor()
		{
			float num = (float)(whoAmI % 6) / 6f;
			return Main.hslToRgb(0.66f + 0.33f * num, 0.7f, 0.6f) * 0.7f;
		}

		public bool CanExplodeTile(int x, int y)
		{
			if (Main.tileDungeon[Main.tile[x, y].type] || TileID.Sets.BasicChest[Main.tile[x, y].type])
			{
				return false;
			}
			switch (Main.tile[x, y].type)
			{
			case 26:
			case 88:
			case 107:
			case 108:
			case 111:
			case 211:
			case 221:
			case 222:
			case 223:
			case 226:
			case 237:
			case 470:
			case 475:
				return false;
			case 37:
			case 58:
				if (!Main.hardMode)
				{
					return false;
				}
				break;
			case 77:
				if (!Main.hardMode && y >= Main.UnderworldLayer)
				{
					return false;
				}
				break;
			case 137:
				if (!NPC.downedGolemBoss)
				{
					int num = Main.tile[x, y].frameY / 18;
					if ((uint)(num - 1) <= 3u)
					{
						return false;
					}
				}
				break;
			}
			return true;
		}

		public void ExplodeTiles(Vector2 compareSpot, int radius, int minI, int maxI, int minJ, int maxJ, bool wallSplode)
		{
			AchievementsHelper.CurrentlyMining = true;
			for (int i = minI; i <= maxI; i++)
			{
				for (int j = minJ; j <= maxJ; j++)
				{
					float num = Math.Abs((float)i - compareSpot.X / 16f);
					float num2 = Math.Abs((float)j - compareSpot.Y / 16f);
					if (!(Math.Sqrt(num * num + num2 * num2) < (double)radius))
					{
						continue;
					}
					bool flag = true;
					if (Main.tile[i, j] != null && Main.tile[i, j].active())
					{
						flag = CanExplodeTile(i, j);
						if (flag)
						{
							WorldGen.KillTile(i, j);
							if (!Main.tile[i, j].active() && Main.netMode != 0)
							{
								NetMessage.SendData(17, -1, -1, null, 0, i, j);
							}
						}
					}
					if (!flag)
					{
						continue;
					}
					for (int k = i - 1; k <= i + 1; k++)
					{
						for (int l = j - 1; l <= j + 1; l++)
						{
							if (Main.tile[k, l] != null && Main.tile[k, l].wall > 0 && wallSplode)
							{
								WorldGen.KillWall(k, l);
								if (Main.tile[k, l].wall == 0 && Main.netMode != 0)
								{
									NetMessage.SendData(17, -1, -1, null, 2, k, l);
								}
							}
						}
					}
				}
			}
			AchievementsHelper.CurrentlyMining = false;
		}

		public void ExplodeCrackedTiles(Vector2 compareSpot, int radius, int minI, int maxI, int minJ, int maxJ)
		{
			AchievementsHelper.CurrentlyMining = true;
			for (int i = minI; i <= maxI; i++)
			{
				for (int j = minJ; j <= maxJ; j++)
				{
					float num = Math.Abs((float)i - compareSpot.X / 16f);
					float num2 = Math.Abs((float)j - compareSpot.Y / 16f);
					if (Math.Sqrt(num * num + num2 * num2) < (double)radius && Main.tile[i, j] != null && Main.tile[i, j].active() && TileID.Sets.CrackedBricks[Main.tile[i, j].type])
					{
						WorldGen.KillTile(i, j);
						if (!Main.tile[i, j].active() && Main.netMode != 0)
						{
							NetMessage.SendData(17, -1, -1, null, 20, i, j);
						}
					}
				}
			}
			AchievementsHelper.CurrentlyMining = false;
		}

		public bool TryGetContainerIndex(out int containerIndex)
		{
			containerIndex = -1;
			if (type == 525 || type == 960)
			{
				containerIndex = -2;
				return true;
			}
			if (type == 734)
			{
				containerIndex = -5;
				return true;
			}
			return false;
		}

		public bool IsInteractible()
		{
			int num = type;
			if (num == 525 || num == 734 || num == 960)
			{
				return true;
			}
			return false;
		}

		public Color GetAlpha(Color newColor)
		{
			if (type == 937)
			{
				newColor.A = (byte)((float)(int)newColor.A * 0.75f);
			}
			if (type == 880 || type == 929)
			{
				newColor.A /= 2;
			}
			if (type == 963)
			{
				float num = 0.85f;
				newColor *= num;
				newColor.A = (byte)((float)(int)newColor.A * num);
				if (ai[0] >= 2f)
				{
					newColor.G = (byte)((float)(int)newColor.G * 0.7f);
					newColor.B = (byte)((float)(int)newColor.B * 0.7f);
				}
			}
			int r;
			int g;
			int b;
			if (type == 969)
			{
				int num2 = 210;
				r = (g = (b = num2));
				if (newColor.R < num2)
				{
					r = newColor.R;
				}
				if (newColor.G < num2)
				{
					g = newColor.G;
				}
				if (newColor.B < num2)
				{
					b = newColor.B;
				}
				return new Color(r, g, b, 185) * Opacity;
			}
			if (type == 967)
			{
				return Color.White * Opacity;
			}
			if (type == 855)
			{
				newColor = Color.Lerp(newColor, new Color(255, 200, 60), 0.5f);
			}
			if (type == 933)
			{
				newColor = Color.White * Opacity;
			}
			if (type == 270)
			{
				return new Color(255, 255, 255, (int)Utils.WrappedLerp(0f, 255f, (float)(timeLeft % 40) / 40f));
			}
			if (type == 837)
			{
				if (alpha > 0)
				{
					return Color.Transparent;
				}
				return new Color(255, 255, 255, 200);
			}
			if (type == 180 || type == 345 || type == 586)
			{
				return Color.Lerp(newColor, Color.White, 0.75f);
			}
			if (type == 764 || type == 856 || type == 857 || type == 864)
			{
				return Color.White;
			}
			if (type == 873 || type == 872 || type == 931 || type == 913 || type == 34)
			{
				return Color.White * Opacity;
			}
			if (type == 756 || type == 961)
			{
				return Color.Lerp(newColor, Color.Black, 0.25f);
			}
			if (type == 895)
			{
				return Color.White * Opacity;
			}
			if (type == 893 || type == 907)
			{
				return new Color(255, 255, 255, 150);
			}
			if (type == 833 || type == 834 || type == 835 || type == 912)
			{
				return Color.Lerp(newColor, Color.White, 0.25f);
			}
			if (type == 351 || type == 350)
			{
				Point point = base.Center.ToTileCoordinates();
				if (WorldGen.InWorld(point.X, point.Y) && !WorldGen.SolidTile(point.X, point.Y))
				{
					return Color.Lerp(newColor, Color.White, 0.15f);
				}
				return Color.Lerp(newColor, Color.White, 0.05f);
			}
			if (type == 346 || type == 347 || type == 325 || type == 755)
			{
				return Color.Lerp(newColor, Color.White, 0.75f);
			}
			if (type == 650)
			{
				r = (int)((double)(int)newColor.R * 1.5);
				g = (int)((double)(int)newColor.G * 1.5);
				b = (int)((double)(int)newColor.B * 1.5);
				if (r > 255)
				{
					r = 255;
				}
				if (g > 255)
				{
					g = 255;
				}
				if (b > 255)
				{
					b = 255;
				}
			}
			else
			{
				if (type == 948)
				{
					return Color.White;
				}
				if (type == 604 || type == 631)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type == 636)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 64 - alpha / 4);
				}
				if (type == 673 || type == 706)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 180 - alpha / 2 - alpha / 4);
				}
				if (type == 603 || type == 633)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 623 || (type >= 625 && type <= 628) || type == 710)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 645 || type == 643)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 127 - alpha / 2);
				}
				if (type == 611)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 640 || type == 644 || type == 658)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type == 612 || type == 953)
				{
					return new Color(255, 255, 255, 127);
				}
				if (aiStyle == 105)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 554)
				{
					return new Color(200, 200, 200, 200);
				}
				if (type == 601)
				{
					return PortalHelper.GetPortalColor(owner, (int)ai[0]);
				}
				if (type == 602)
				{
					Color portalColor = PortalHelper.GetPortalColor(owner, (int)ai[1]);
					portalColor.A = 227;
					return portalColor;
				}
				if (type == 585)
				{
					byte a = newColor.A;
					newColor = Color.Lerp(newColor, Color.White, 0.5f);
					newColor.A = a;
					return newColor;
				}
				if (type == 714)
				{
					byte a2 = newColor.A;
					newColor = Color.Lerp(newColor, Color.White, 0.8f);
					newColor.A = a2;
					newColor *= (float)(int)a2 / 255f;
					return newColor;
				}
				if (type == 573 || type == 578 || type == 579 || type == 617 || type == 641 || type == 707 || type == 813)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 9 || type == 490)
				{
					return Color.White;
				}
				if (type == 575 || type == 596 || type == 659)
				{
					if (timeLeft < 30)
					{
						float num3 = (float)timeLeft / 30f;
						alpha = (int)(255f - 255f * num3);
					}
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 128 - alpha / 2);
				}
				if (type == 546)
				{
					return new Color(255, 200, 255, 200);
				}
				if (type == 553)
				{
					return new Color(255, 255, 200, 200);
				}
				if (type == 540)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
				}
				if (type == 498)
				{
					return new Color(255, 100, 20, 200);
				}
				if (type == 538)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 518)
				{
					float num4 = 1f - (float)alpha / 255f;
					return new Color((int)(200f * num4), (int)(200f * num4), (int)(200f * num4), (int)(100f * num4));
				}
				if (type == 518 || type == 595 || type == 735)
				{
					Color color = Color.Lerp(newColor, Color.White, 0.85f);
					color.A = 128;
					return color * (1f - (float)alpha / 255f);
				}
				if (type == 536 || type == 607)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 63 - alpha / 4);
				}
				if (type == 591)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 63 - alpha / 4);
				}
				if (type == 493 || type == 494)
				{
					return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
				}
				if (type == 492)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 491)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 485 || type == 502)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 488)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 477 || type == 478 || type == 479)
				{
					if (alpha == 0)
					{
						return new Color(255, 255, 255, 200);
					}
					return new Color(0, 0, 0, 0);
				}
				if (type == 473)
				{
					return new Color(255, 255, 255, 255);
				}
				if (type == 50 || type == 53 || type == 515 || type == 870)
				{
					return new Color(255, 255, 255, 0);
				}
				if (type == 723 || type == 724 || type == 725 || type == 726 || type == 728)
				{
					return new Color(255, 255, 255, 0) * Opacity;
				}
				if (type == 92)
				{
					return new Color(255, 255, 255, 0);
				}
				if (type == 91)
				{
					return new Color(200, 200, 200, 0);
				}
				if (type == 34 || type == 15 || type == 93 || type == 94 || type == 95 || type == 96 || type == 253 || type == 258 || (type == 102 && alpha < 255))
				{
					return new Color(200, 200, 200, 25);
				}
				if (type == 465)
				{
					return new Color(255, 255, 255, 0) * (1f - (float)alpha / 255f);
				}
				if (type == 503)
				{
					Color value = Color.Lerp(newColor, Color.White, 0.5f) * (1f - (float)alpha / 255f);
					Color value2 = Color.Lerp(Color.Purple, Color.White, 0.33f);
					float amount = 0.25f + (float)Math.Cos(localAI[0]) * 0.25f;
					return Color.Lerp(value, value2, amount);
				}
				if (type == 467)
				{
					return new Color(255, 255, 255, 255) * (1f - (float)alpha / 255f);
				}
				if (type == 694 || type == 695 || type == 696)
				{
					return new Color(255, 255, 255, 127) * (1f - (float)alpha / 255f);
				}
				if (type == 634 || type == 635)
				{
					return new Color(255, 255, 255, 127) * Opacity;
				}
				if (type == 671)
				{
					return new Color(255, 255, 255, 255) * Opacity;
				}
				if (type == 664 || type == 666 || type == 668)
				{
					newColor = Color.Lerp(newColor, Color.White, 0.5f);
					return new Color(newColor.R, newColor.G, newColor.B, 200) * Opacity;
				}
				if (type == 451)
				{
					return new Color(255, 255, 255, 200) * ((255f - (float)alpha) / 255f);
				}
				if (type == 684)
				{
					return new Color(255, 255, 255, 200) * ((255f - (float)alpha) / 255f);
				}
				if (type == 454 || type == 452)
				{
					return new Color(255, 255, 255, 255) * (1f - (float)alpha / 255f);
				}
				if (type == 464)
				{
					return new Color(255, 255, 255, 255) * ((255f - (float)alpha) / 255f);
				}
				if (type == 450)
				{
					return new Color(200, 200, 200, 255 - alpha);
				}
				if (type == 459 || type == 709)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 447)
				{
					return new Color(255, 255, 255, 200);
				}
				if (type == 446)
				{
					return Color.Lerp(newColor, Color.White, 0.8f) * (1f - (float)alpha / 255f);
				}
				if (type == 691 || type == 692 || type == 693)
				{
					return Color.Lerp(newColor, Color.White, 0.4f) * (1f - (float)alpha / 255f);
				}
				if (type >= 646 && type <= 649)
				{
					return Color.Lerp(newColor, Color.White, 0.8f) * (1f - (float)alpha / 255f);
				}
				if (type == 445)
				{
					return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
				}
				if (type == 440 || type == 449 || type == 606)
				{
					r = 255 - alpha;
					g = 255 - alpha;
					b = 255 - alpha;
				}
				else
				{
					if (type == 444)
					{
						return newColor * (1f - (float)alpha / 255f);
					}
					if (type == 443 || type == 675 || type == 686 || type == 711)
					{
						return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
					}
					if (type == 676)
					{
						return newColor * Opacity;
					}
					if (type == 438)
					{
						return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
					}
					if (type == 592)
					{
						return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
					}
					if (type == 437 || type == 700)
					{
						return new Color(255, 255, 255, 0) * (1f - (float)alpha / 255f);
					}
					if (type == 964 || type == 965)
					{
						return new Color(255, 255, 255, 255) * Opacity;
					}
					if (type == 462)
					{
						return new Color(255, 255, 255, 128) * (1f - (float)alpha / 255f);
					}
					if (type == 352)
					{
						Color color2 = Color.Lerp(newColor, Color.White, 0.5f);
						color2.A = (byte)((float)(int)color2.A * ((float)alpha / 255f));
						return new Color(color2.R, color2.G, color2.B, color2.A);
					}
					if (type == 435 || type == 732 || type == 731)
					{
						newColor = Color.Lerp(newColor, Color.White, 0.8f);
						return new Color(newColor.R, newColor.G, newColor.B, 25);
					}
					if (type == 682)
					{
						newColor = Color.Lerp(newColor, Color.White, 0.8f);
						return new Color(newColor.R, newColor.G, newColor.B, 127);
					}
					if (type == 436)
					{
						newColor = Color.Lerp(newColor, Color.White, 0.8f);
						return new Color(newColor.R, newColor.G, newColor.B, 25);
					}
					if (type == 409)
					{
						return new Color(250, 250, 250, 200);
					}
					if (type == 348 || type == 349)
					{
						return new Color(200, 200, 200, alpha);
					}
					if (type == 337)
					{
						return new Color(250, 250, 250, 150);
					}
					if (type >= 424 && type <= 426)
					{
						byte b2 = 150;
						if (newColor.R < b2)
						{
							newColor.R = b2;
						}
						if (newColor.G < b2)
						{
							newColor.G = b2;
						}
						if (newColor.B < b2)
						{
							newColor.B = b2;
						}
						return new Color(newColor.R, newColor.G, newColor.B, 255);
					}
					if (type == 431 || type == 432)
					{
						return new Color(250, 250, 250, 255 - alpha);
					}
					if (type == 343 || type == 344)
					{
						float num5 = 1f - (float)alpha / 255f;
						return new Color((int)(250f * num5), (int)(250f * num5), (int)(250f * num5), (int)(100f * num5));
					}
					if (type == 332)
					{
						return new Color(255, 255, 255, 255);
					}
					if (type == 329)
					{
						return new Color(200, 200, 200, 50);
					}
					if (type >= 326 && type <= 328)
					{
						return Color.Transparent;
					}
					if (type >= 400 && type <= 402)
					{
						return Color.Transparent;
					}
					if (type == 324 && frame >= 6 && frame <= 9)
					{
						return new Color(255, 255, 255, 255);
					}
					if (type == 16)
					{
						return new Color(255, 255, 255, 0);
					}
					if (type == 321)
					{
						return new Color(200, 200, 200, 0);
					}
					if (type == 76 || type == 77 || type == 78)
					{
						return new Color(255, 255, 255, 0);
					}
					if (type == 308)
					{
						return new Color(200, 200, 255, 125);
					}
					if (type == 263)
					{
						if (timeLeft < 255)
						{
							return new Color(255, 255, 255, (byte)timeLeft);
						}
						return new Color(255, 255, 255, 255);
					}
					if (type == 274)
					{
						if (timeLeft < 85)
						{
							byte b3 = (byte)(timeLeft * 3);
							byte a3 = (byte)(100f * ((float)(int)b3 / 255f));
							return new Color(b3, b3, b3, a3);
						}
						return new Color(255, 255, 255, 100);
					}
					if (type == 5)
					{
						return new Color(255, 255, 255, 0);
					}
					if (type == 300 || type == 301)
					{
						return new Color(250, 250, 250, 50);
					}
					if (type == 712)
					{
						return Color.Lerp(newColor, Color.White, 0.4f) * Opacity;
					}
					if (type == 304)
					{
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, (byte)((float)(255 - alpha) / 3f));
					}
					if (type == 116 || type == 132 || type == 156 || type == 157 || type == 157 || type == 173)
					{
						if (localAI[1] >= 15f)
						{
							return new Color(255, 255, 255, alpha);
						}
						if (localAI[1] < 5f)
						{
							return Color.Transparent;
						}
						int num6 = (int)((localAI[1] - 5f) / 10f * 255f);
						return new Color(num6, num6, num6, num6);
					}
					if (type == 254)
					{
						if (timeLeft < 30)
						{
							float num7 = (float)timeLeft / 30f;
							alpha = (int)(255f - 255f * num7);
						}
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
					}
					if (type == 265 || type == 355)
					{
						if (alpha > 0)
						{
							return Color.Transparent;
						}
						return new Color(255, 255, 255, 0);
					}
					if (type == 257)
					{
						if (alpha > 200)
						{
							return Color.Transparent;
						}
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
					}
					if (type == 259)
					{
						if (alpha > 200)
						{
							return Color.Transparent;
						}
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
					}
					if (type >= 150 && type <= 152)
					{
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, 255 - alpha);
					}
					if (type == 250)
					{
						return Color.Transparent;
					}
					if (type == 251)
					{
						r = 255 - alpha;
						g = 255 - alpha;
						b = 255 - alpha;
						return new Color(r, g, b, 0);
					}
					if (type == 131)
					{
						return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
					}
					if (type == 211)
					{
						return new Color(255, 255, 255, 0);
					}
					if (type == 229)
					{
						return new Color(255, 255, 255, 50);
					}
					if (type == 221 || type == 729)
					{
						return new Color(255, 255, 255, 200);
					}
					if (type == 20)
					{
						if (alpha <= 150)
						{
							return new Color(255, 255, 255, 0);
						}
						return new Color(0, 0, 0, 0);
					}
					if (type == 207)
					{
						r = 255 - alpha;
						g = 255 - alpha;
						b = 255 - alpha;
					}
					else
					{
						if (type == 242)
						{
							if (alpha < 140)
							{
								return new Color(255, 255, 255, 100);
							}
							return Color.Transparent;
						}
						if (type == 638)
						{
							return new Color(255, 255, 255, 100) * Opacity;
						}
						if (type == 660)
						{
							return new Color(150, 255, 255, 0) * Opacity;
						}
						if (type == 209)
						{
							r = newColor.R - alpha;
							g = newColor.G - alpha;
							b = newColor.B - alpha / 2;
						}
						else
						{
							if (type == 130)
							{
								return new Color(255, 255, 255, 175);
							}
							if (type == 182)
							{
								return new Color(255, 255, 255, 200);
							}
							if (type == 226)
							{
								r = 255;
								g = 255;
								b = 255;
								float num8 = (float)(int)Main.mouseTextColor / 200f - 0.3f;
								r = (int)((float)r * num8);
								g = (int)((float)g * num8);
								b = (int)((float)b * num8);
								r += 50;
								if (r > 255)
								{
									r = 255;
								}
								g += 50;
								if (g > 255)
								{
									g = 255;
								}
								b += 50;
								if (b > 255)
								{
									b = 255;
								}
								return new Color(r, g, b, 200);
							}
							if (type == 227)
							{
								r = (g = (b = 255));
								float num9 = (float)(int)Main.mouseTextColor / 100f - 1.6f;
								r = (int)((float)r * num9);
								g = (int)((float)g * num9);
								b = (int)((float)b * num9);
								int a4 = (int)(100f * num9);
								r += 50;
								if (r > 255)
								{
									r = 255;
								}
								g += 50;
								if (g > 255)
								{
									g = 255;
								}
								b += 50;
								if (b > 255)
								{
									b = 255;
								}
								return new Color(r, g, b, a4);
							}
							if (type == 114 || type == 115)
							{
								if (localAI[1] >= 15f)
								{
									return new Color(255, 255, 255, alpha);
								}
								if (localAI[1] < 5f)
								{
									return Color.Transparent;
								}
								int num10 = (int)((localAI[1] - 5f) / 10f * 255f);
								return new Color(num10, num10, num10, num10);
							}
							if (type == 83 || type == 88 || type == 89 || type == 90 || type == 100 || type == 104 || type == 279 || (type >= 283 && type <= 287) || type == 876)
							{
								if (alpha < 200)
								{
									return new Color(255 - alpha, 255 - alpha, 255 - alpha, 0);
								}
								return Color.Transparent;
							}
							if (type == 34 || type == 35 || type == 15 || type == 19 || type == 44 || type == 45)
							{
								return Color.White;
							}
							if (type == 79)
							{
								r = Main.DiscoR;
								g = Main.DiscoG;
								b = Main.DiscoB;
								return default(Color);
							}
							if (type == 9 || type == 15 || type == 34 || type == 50 || type == 53 || type == 76 || type == 77 || type == 78 || type == 92 || type == 91)
							{
								r = newColor.R - alpha / 3;
								g = newColor.G - alpha / 3;
								b = newColor.B - alpha / 3;
							}
							else
							{
								if (type == 18)
								{
									return new Color(255, 255, 255, 50);
								}
								if (type == 16 || type == 44 || type == 45)
								{
									r = newColor.R;
									g = newColor.G;
									b = newColor.B;
								}
								else if (type == 12 || type == 72 || type == 86 || type == 87 || type == 955)
								{
									return new Color(255, 255, 255, newColor.A - alpha);
								}
							}
						}
					}
				}
			}
			float num11 = (float)(255 - alpha) / 255f;
			r = (int)((float)(int)newColor.R * num11);
			g = (int)((float)(int)newColor.G * num11);
			b = (int)((float)(int)newColor.B * num11);
			int num12 = newColor.A - alpha;
			if (num12 < 0)
			{
				num12 = 0;
			}
			if (num12 > 255)
			{
				num12 = 255;
			}
			return new Color(r, g, b, num12);
		}

		public override string ToString()
		{
			return "type:" + type + ", name:" + Name + ", active:" + active + ", whoAmI:" + whoAmI + ", identity:" + identity + ", ai0:" + ai[0] + ", uuid:" + projUUID;
		}
	}
}
